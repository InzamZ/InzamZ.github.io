import{_ as c}from"./ValaxyMain.vue_vue_type_style_index_0_lang-ec0abe3b.js";import{_ as m,u as _,p as u,c as h,w as e,o as p,a as f,b as a,d as s,e as o,r as n,f as D}from"./app-4f30d306.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-03d5cb33.js";import"./YunCard.vue_vue_type_script_setup_true_lang-517fa1c3.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-0705b34e.js";import"./index-463abdac.js";const J=JSON.parse('{"title":"DB 设计简介","description":"","frontmatter":{"title":"DB 设计简介","date":"2023-07-09T22:47:51.000Z","tags":["leveldb","rocksdb"],"updated":"2023-07-09T23:57:01.000Z","categories":["数据库"],"end":false},"headers":[{"level":2,"title":"1. EC 与 RAID","slug":"_1-ec-与-raid","link":"#_1-ec-与-raid","children":[{"level":3,"title":"1.1 EC","slug":"_1-1-ec","link":"#_1-1-ec","children":[]},{"level":3,"title":"1.2 RAID","slug":"_1-2-raid","link":"#_1-2-raid","children":[]}]},{"level":2,"title":"2. LSM 树","slug":"_2-lsm-树","link":"#_2-lsm-树","children":[]}],"relativePath":"pages/posts/Database/Introduce.md","path":"/home/runner/work/inzamz.github.io/inzamz.github.io/pages/posts/Database/Introduce.md","lastUpdated":1700215512000}'),r=JSON.parse('{"title":"DB 设计简介","description":"","frontmatter":{"title":"DB 设计简介","date":"2023-07-09T22:47:51.000Z","tags":["leveldb","rocksdb"],"updated":"2023-07-09T23:57:01.000Z","categories":["数据库"],"end":false},"headers":[{"level":2,"title":"1. EC 与 RAID","slug":"_1-ec-与-raid","link":"#_1-ec-与-raid","children":[{"level":3,"title":"1.1 EC","slug":"_1-1-ec","link":"#_1-1-ec","children":[]},{"level":3,"title":"1.2 RAID","slug":"_1-2-raid","link":"#_1-2-raid","children":[]}]},{"level":2,"title":"2. LSM 树","slug":"_2-lsm-树","link":"#_2-lsm-树","children":[]}],"relativePath":"pages/posts/Database/Introduce.md","path":"/home/runner/work/inzamz.github.io/inzamz.github.io/pages/posts/Database/Introduce.md","lastUpdated":1700215512000}'),I={name:"pages/posts/Database/Introduce.md",data(){return{data:r,frontmatter:r.frontmatter,$frontmatter:r.frontmatter}},setup(){const t=_();t.meta.frontmatter=Object.assign(t.meta.frontmatter,r.frontmatter),u("pageData",r)}},g=a("p",null,"本文主要是总结最近学习数据库过程中的一些心得，以及一些数据库的设计思想。",-1),b=a("hr",null,null,-1),A={id:"_1-ec-与-raid",tabindex:"-1"},R={id:"_1-1-ec",tabindex:"-1"},k=a("p",null,"EC（Erasure Code）是一种数据冗余技术，通过对数据进行编码，使得数据可以在部分数据丢失的情况下进行恢复。EC 与 RAID 的区别在于，RAID 通常是在硬件层面进行的，而 EC 通常是在软件层面进行的。",-1),v=a("p",null,"纠删码是一种数据冗余技术，本质上利用了多余的校验信息使得部分数据出现错误的时候，利用冗余信息进行恢复。但是这里涉及一个问题，如何知道数据是否损坏，这个可以使用块内的校验码。如果某一块坏掉了，那么如何恢复呢。我们假设只要一个冗余块，那么很简单，利用异或和构建一个块就可以了。但是如果有多个冗余块，那么就需要利用矩阵运算来进行恢复。只要选取合适的矩阵就可以实现任意冗余块的恢复。",-1),$={id:"_1-2-raid",tabindex:"-1"},C=a("p",null,"RAID（Redundant Array of Independent Disks）是一种磁盘阵列技术，通过将多个磁盘组合起来，形成一个逻辑上的磁盘，从而提高磁盘的性能和可靠性。RAID 有多种实现方式，这里主要介绍 RAID 0、RAID 1、RAID 5、RAID 6。",-1),E=a("ul",null,[a("li",null,"RAID 0：将数据分成多个块，然后分别存储在不同的磁盘上，这样可以提高读写性能，但是可靠性很差，只要有一个磁盘损坏，那么整个数据就无法恢复。"),a("li",null,"RAID 1：将数据分成两份，然后分别存储在不同的磁盘上，这样可以提高读性能，但是写性能很差，而且成本也比较高。"),a("li",null,"RAID 5：将数据分成多个块，然后分别存储在不同的磁盘上，同时还有一个校验块，这样可以提高读写性能，而且成本也比较低，但是可靠性不高，只要有一个磁盘损坏，那么整个数据就无法恢复。"),a("li",null,"RAID 6：将数据分成多个块，然后分别存储在不同的磁盘上，同时还有两个校验块，这样可以提高读写性能，而且成本也比较低，但是可靠性比 RAID 5 高，只要有两个磁盘损坏，那么整个数据就无法恢复。")],-1),S={id:"_2-lsm-树",tabindex:"-1"},z=a("p",null,"LSM 树（Log-Structured Merge-Tree）是一种基于日志的数据结构，主要用于实现键值存储。LSM 树的主要思想是将数据分成多个层，每一层都是一个有序的日志，然后将数据写入到最顶层，当最顶层的日志满了之后，将数据写入到下一层，以此类推。当查询数据的时候，从最顶层开始查找，如果没有找到，那么就继续查找下一层，以此类推。当然，为了提高查询性能，可以在每一层都建立一个索引，这样就可以快速定位到数据所在的位置。",-1);function L(t,M,B,N,i,P){const l=D,d=c;return p(),h(d,{frontmatter:i.frontmatter,data:i.data},{"main-content-md":e(()=>[g,f(" more "),b,a("h2",A,[s("1. EC 与 RAID "),o(l,{class:"header-anchor",href:"#_1-ec-与-raid","aria-label":'Permalink to "1. EC 与 RAID"'},{default:e(()=>[s("​")]),_:1})]),a("h3",R,[s("1.1 EC "),o(l,{class:"header-anchor",href:"#_1-1-ec","aria-label":'Permalink to "1.1 EC"'},{default:e(()=>[s("​")]),_:1})]),k,v,a("h3",$,[s("1.2 RAID "),o(l,{class:"header-anchor",href:"#_1-2-raid","aria-label":'Permalink to "1.2 RAID"'},{default:e(()=>[s("​")]),_:1})]),C,E,a("h2",S,[s("2. LSM 树 "),o(l,{class:"header-anchor",href:"#_2-lsm-树","aria-label":'Permalink to "2. LSM 树"'},{default:e(()=>[s("​")]),_:1})]),z]),"main-header":e(()=>[n(t.$slots,"main-header")]),"main-header-after":e(()=>[n(t.$slots,"main-header-after")]),"main-nav":e(()=>[n(t.$slots,"main-nav")]),"main-content":e(()=>[n(t.$slots,"main-content")]),"main-content-after":e(()=>[n(t.$slots,"main-content-after")]),"main-nav-before":e(()=>[n(t.$slots,"main-nav-before")]),"main-nav-after":e(()=>[n(t.$slots,"main-nav-after")]),comment:e(()=>[n(t.$slots,"comment")]),footer:e(()=>[n(t.$slots,"footer")]),aside:e(()=>[n(t.$slots,"aside")]),"aside-custom":e(()=>[n(t.$slots,"aside-custom")]),default:e(()=>[n(t.$slots,"default")]),_:3},8,["frontmatter","data"])}const U=m(I,[["render",L]]);export{J as __pageData,U as default};
