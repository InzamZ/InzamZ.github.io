{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/yun/source/Yun.png","path":"Yun.png","modified":1,"renderable":1},{"_id":"themes/yun/source/yun.ico","path":"yun.ico","modified":1,"renderable":1},{"_id":"themes/yun/source/yun.svg","path":"yun.svg","modified":1,"renderable":1},{"_id":"themes/yun/source/css/README.md","path":"css/README.md","modified":1,"renderable":1},{"_id":"themes/yun/source/css/hexo-theme-yun.styl","path":"css/hexo-theme-yun.styl","modified":1,"renderable":1},{"_id":"themes/yun/source/js/gallery-decrypt.js","path":"js/gallery-decrypt.js","modified":1,"renderable":1},{"_id":"themes/yun/source/js/hexo-theme-yun.js","path":"js/hexo-theme-yun.js","modified":1,"renderable":1},{"_id":"themes/yun/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/yun/source/js/say.js","path":"js/say.js","modified":1,"renderable":1},{"_id":"themes/yun/source/js/sidebar.js","path":"js/sidebar.js","modified":1,"renderable":1},{"_id":"themes/yun/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/yun/source/js/analytics/leancloud-visitors.js","path":"js/analytics/leancloud-visitors.js","modified":1,"renderable":1},{"_id":"themes/yun/source/js/comments/disqus.js","path":"js/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/yun/source/js/search/algolia-search.js","path":"js/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/yun/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/yun/source/js/ui/banner.js","path":"js/ui/banner.js","modified":1,"renderable":1},{"_id":"themes/yun/source/js/ui/fireworks.js","path":"js/ui/fireworks.js","modified":1,"renderable":1},{"_id":"themes/yun/source/js/ui/mode.js","path":"js/ui/mode.js","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/liwei.jpg","path":"images/liwei.jpg","modified":1,"renderable":0},{"_id":"source/images/searchbg.png","path":"images/searchbg.png","modified":1,"renderable":0},{"_id":"source/images/searchbgdark.jpg","path":"images/searchbgdark.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_data/yun.yml","hash":"60a231b84df0e7f3aae3811f424df9fd997de821","modified":1634976849129},{"_id":"source/_posts/BaiduUrls.md","hash":"2fed8595d6858be223560a77fcc0db0a1934f586","modified":1624721858000},{"_id":"source/CNAME","hash":"5c1e0195048c4e29bb453254963fd7bdfa1de2f5","modified":1655092284000},{"_id":"source/_posts/Exmail.md","hash":"7d724a45f827965637959f8925cbe18fab8ee635","modified":1624721838000},{"_id":"source/404.md","hash":"e1549a23ff895d0c9bbe843db402909c76d76186","modified":1644734928000},{"_id":"source/_posts/Goodbye2020.md","hash":"313c559006492f8b31eb06f46981a7790f695844","modified":1624721918000},{"_id":"source/_posts/MovieHelloWorld.md","hash":"772b883c8b2670b9d67686b3d38f745f27281d76","modified":1624724546000},{"_id":"source/_posts/Introduction-to-Networks.md","hash":"17512b7881c00f31981674044df84951ffd42f10","modified":1625478328000},{"_id":"source/_posts/ShingekinoKyoji.md","hash":"80be00bff8e020dfa5e3acef7f9082b782cf1b88","modified":1625402740000},{"_id":"source/_posts/UESTCaboutexam.md","hash":"2f3bea9acfd01a4cc5bd80bc8c833a9ac622df42","modified":1624721902000},{"_id":"source/_posts/daily210105.md","hash":"23cae9c66eb8f93e8d328f6040bd1d0362464b6f","modified":1624722368000},{"_id":"source/about/site.md","hash":"2a39af9ccd2a955e977e2dc3cb1ca091b47e96ea","modified":1611412428000},{"_id":"source/about/README.md","hash":"37a2d827641e91b7b7cef65811ad139230f6290b","modified":1647362120000},{"_id":"source/about/index.md","hash":"66ceac3a34c6a009fdf38dddaac0c308535a766c","modified":1637095380000},{"_id":"source/girls/index.md","hash":"740ea486ea022edc3aa080a7bb5c1599ad8d75d4","modified":1631924168000},{"_id":"source/albums/2020autumn.md","hash":"3693ca98fbcf959109e5c20ce85245338977ce8a","modified":1642127352000},{"_id":"source/categories/index.md","hash":"c139448679afd75534a60462b608fc5e439a6a2f","modified":1677716130000},{"_id":"source/albums/index.md","hash":"f898d9b5c3f275d44e6e617b4eb7396e02fb2311","modified":1642130880000},{"_id":"source/links/index.md","hash":"42248ebb0219c99710f930efcf15bd2b0fc119b0","modified":1642108832000},{"_id":"source/tags/index.md","hash":"9156534e221a7f9245e82c01822a3cb79092d4c4","modified":1677716030000},{"_id":"source/_posts/XCPC/ABC182.md","hash":"ca192293d9ba0a060aa72ab3e28b4ca4a8573ebd","modified":1624721748000},{"_id":"source/_posts/XCPC/ABC188.md","hash":"2f5d51078e1eccd226769e3d7344e147d3d31c08","modified":1624721674000},{"_id":"source/_posts/XCPC/ARC106.md","hash":"11e4a145e8d37b0f87c3e3288a875ee052c9054b","modified":1624721740000},{"_id":"source/_posts/XCPC/ABC189.md","hash":"75dd0a415cc7518083b0bc1ef223ab0ba54e82da","modified":1624721682000},{"_id":"source/_posts/XCPC/ARC116.md","hash":"937091cb39c45e87e26e63ae0c22d76893c494bb","modified":1624721930000},{"_id":"source/_posts/XCPC/BinaryIndexedTree.md","hash":"c4c18dcb508aeae7826801b2297a7e48da7943d3","modified":1624722388000},{"_id":"source/_posts/XCPC/CF1440_R684.md","hash":"c14df6d729d7da02ec1fa0b06a8f5d9240b19d09","modified":1624721720000},{"_id":"source/_posts/XCPC/CF1452_EDU98.md","hash":"26bb5ee5cb7e720b14df414f7267e0106641fcc1","modified":1624721706000},{"_id":"source/_posts/XCPC/CF1459_R691.md","hash":"3d62fe77c9201a602718113bb151d30321aebc68","modified":1624722158000},{"_id":"source/_posts/XCPC/CF1462_R690.md","hash":"44351ad3cebdf70bff0fbf9e092edbe962eb0f36","modified":1624721772000},{"_id":"source/_posts/XCPC/CF1451_R685.md","hash":"efceecc882fd07f24143e11bd72a3e9c23da5d6e","modified":1624721714000},{"_id":"source/_posts/XCPC/DataStructure.md","hash":"4655b05bd67cdc7a5a87e95822ac01fe5b144100","modified":1624722406000},{"_id":"source/_posts/XCPC/CF1463_EDU100.md","hash":"00c00cc63a7244855123d08f800c8355699f4bc5","modified":1624721800000},{"_id":"source/_posts/XCPC/Gcd.md","hash":"ea4d80e1e7a719794112a2ede9244c23c645450f","modified":1624722356000},{"_id":"source/_posts/XCPC/EducationDPContest.md","hash":"adda3e3b311453e3d02e9eb28e46eb1585ddf8d4","modified":1624721974000},{"_id":"source/_posts/XCPC/Graphviz.md","hash":"e024516bf2803d569117fadd48028874dd66156e","modified":1624721826000},{"_id":"source/_posts/XCPC/DynamicProgramming.md","hash":"995e8e43e1da0d202295ee5b9854146755a65e40","modified":1624722416000},{"_id":"source/_posts/XCPC/InverseElement.md","hash":"959bb356db804b75d48574712ede7576b496f1bc","modified":1624722436000},{"_id":"source/_posts/XCPC/IntervalSchedulingProblem.md","hash":"262fc149ba81e60771206d5df598766f575502f6","modified":1624722430000},{"_id":"source/_posts/XCPC/Kmp.md","hash":"5d704487df7eb418b9b819d10febf57cbd74ed59","modified":1624722444000},{"_id":"source/_posts/XCPC/Quicksort.md","hash":"e194c93755a69bf0b79dd293fbbfdb1fdf0b3969","modified":1624722464000},{"_id":"source/_posts/XCPC/SparseTable.md","hash":"52f954fe126642e49a82d0e2f61ea2aad6e6b087","modified":1624722480000},{"_id":"source/_posts/XCPC/UEST-CPC.md","hash":"a0db39745329052aeb03317c7f34b7edaa383056","modified":1624721728000},{"_id":"source/_posts/XCPC/UPST2021DS.md","hash":"1a018454156e0a65d9b89f2e46b146f5b0e38206","modified":1624722502000},{"_id":"source/_posts/XCPC/chthollytree.md","hash":"ae4d5fe5a128f1216777caa971c93745a5862d16","modified":1624722398000},{"_id":"source/_posts/XCPC/keyence2021.md","hash":"52343e12a07a76623c732b7bdf888eb57beacca6","modified":1624721662000},{"_id":"source/_posts/XCPC/lackingnumber.md","hash":"c584f31ae6511b2e6e5757789b7c9f1641c23d8e","modified":1624722030000},{"_id":"source/_posts/XCPC/SortAlgorithm.md","hash":"b3c03904024518e5421479ace3d4da49bdae2bd0","modified":1624722474000},{"_id":"source/_posts/XCPC/SegmentTree.md","hash":"ae79ffb4b891c9874a5da13759b84656f63f2a23","modified":1624722470000},{"_id":"source/_posts/XCPC/STL.md","hash":"58a64c2f9a0f7e391d8698918ac348f97215dd52","modified":1624722486000},{"_id":"source/favicon.ico","hash":"6ccd6c36e6aa4dc584b2f46eac46e41cf7e6874b","modified":1688247136000},{"_id":"source/images/liwei.jpg","hash":"e2dcd40e55195f9474a4e64c64e022ace6ddb6b1","modified":1680391290000},{"_id":"source/images/searchbgdark.jpg","hash":"11667941695b07e70fb8101dc9433a23e94d9f9b","modified":1664941840000},{"_id":"themes/yun/.eslintrc.js","hash":"d56e53c7d41be4617612bbdb04fa588491a41a23","modified":1634908203141},{"_id":"themes/yun/LICENSE","hash":"a24ce67b002ff38718c549129d23d177bf951dbf","modified":1634908203141},{"_id":"themes/yun/.gitignore","hash":"6d84be36c703e1c665b90d531c49841d275dd41f","modified":1634908203141},{"_id":"themes/yun/README.md","hash":"2b619670d138fdc0e3c02ac46551a5c4094ec4cc","modified":1634908203141},{"_id":"themes/yun/_config.yml","hash":"05d3425ff8d78eda6758c7d22db6cd51eae4795b","modified":1634908203141},{"_id":"themes/yun/package.json","hash":"9cab094f78b4315ea7b3ade1998ecc2ff592e8cd","modified":1634908203205},{"_id":"themes/yun/_vendors.yml","hash":"3cdc0a44724f984940c59cfd748807ba7ec1ac32","modified":1634908203141},{"_id":"themes/yun/tsconfig.json","hash":"ee7dace6b065724b1940f9475e3b1fad52339517","modified":1634908203213},{"_id":"themes/yun/.github/FUNDING.yml","hash":"41b293d76a307f29e81d931edb1c6d05fed526fd","modified":1634908203141},{"_id":"themes/yun/.husky/pre-commit","hash":"23ff2dd1490b2e00756ccb747aad39a278a034c3","modified":1634908203141},{"_id":"themes/yun/docs/README.md","hash":"41c1466407fe76bd999ca6f0defef38833ad5427","modified":1634908203189},{"_id":"themes/yun/languages/default.yml","hash":"5d50a944a8b527fd857c81b17a60e5cc414c5729","modified":1634908203197},{"_id":"themes/yun/data/_comments.yml","hash":"6519847d020a3b4ffd7bb8aeb3fad5f209ec8e96","modified":1634908203141},{"_id":"themes/yun/languages/en.yml","hash":"11c482bee3bda200125392c607a0bddc0f74f552","modified":1634908203197},{"_id":"themes/yun/languages/ja.yml","hash":"18ab694a0c64f4c0e53b570495625901e883df24","modified":1634908203197},{"_id":"themes/yun/languages/zh-CN.yml","hash":"ef5675e4e6f4a42251ac1a08c4fd5f46d5e27a1f","modified":1634908203197},{"_id":"themes/yun/layout/404.pug","hash":"39719b1b4300ed7d12b062eec4186bda5dede7c2","modified":1634908203197},{"_id":"themes/yun/layout/category.pug","hash":"6d0a910ac2716c1acae5e7ab0c2a56e4d5438281","modified":1634908203201},{"_id":"themes/yun/layout/archive.pug","hash":"067ac814d892dc6c0efe9c03c45abd712648e37e","modified":1634908203201},{"_id":"themes/yun/layout/gallery.pug","hash":"3cb21b8a2c935df928f862db97f7908e94643e29","modified":1634908203201},{"_id":"themes/yun/layout/girls.pug","hash":"3429a9d6c8efceb563e1893e033d0709a2ac2d6c","modified":1634908203205},{"_id":"themes/yun/layout/index.pug","hash":"7322ea6d9cfb29b1bb13a31bb5f98abcf5d9f409","modified":1634908203205},{"_id":"themes/yun/layout/links.pug","hash":"d33c91cb82f47f51a5fadcbe14d247c99e081851","modified":1634908203205},{"_id":"themes/yun/layout/post.pug","hash":"b3bf75ba00d3e3f292eb1ffc247f95eb98d3b2ff","modified":1634908203205},{"_id":"themes/yun/layout/page.pug","hash":"aa858cb8b4c7bd80a1dfdc203de0eee566319f9e","modified":1634908203205},{"_id":"themes/yun/layout/slide.pug","hash":"da95a3290ef1e0d4e6194d3f07a6401bb3c4d6c3","modified":1634908203205},{"_id":"themes/yun/layout/tag.pug","hash":"6392c8ffd359008e32cc8ce63868a95727855527","modified":1634908203205},{"_id":"themes/yun/source/yun.ico","hash":"5d63418cd650d1881d4b6507f35b9f9df766020e","modified":1634908203213},{"_id":"themes/yun/source/Yun.png","hash":"b8ae426fa5dd7579d23d189c222641d812c51c0a","modified":1634908203205},{"_id":"themes/yun/source/yun.svg","hash":"aa027a0a9e7ba96c906b9fd2d9cd3f8018ff2e2d","modified":1634908203213},{"_id":"themes/yun/.github/ISSUE_TEMPLATE/bug_report.md","hash":"5cd9a8ca417d2c4550d895ebf1a732338eeb5cab","modified":1634908203141},{"_id":"themes/yun/.github/ISSUE_TEMPLATE/feature_request.md","hash":"fb1c93f9e264bc02c38955345666a18d91159e8e","modified":1634908203141},{"_id":"themes/yun/.github/ISSUE_TEMPLATE/usage_problem.md","hash":"6127e821a2f673c1b1604ccf1e8d9c062389eb0c","modified":1634908203141},{"_id":"themes/yun/.github/workflows/docs.yml","hash":"139126caaa7cd788b715c8d31673f5afc017b4aa","modified":1634908203141},{"_id":"themes/yun/.github/workflows/release.yml","hash":"4b4372e1c06dbb601f3ea5042aac063d70b8b46e","modified":1634908203141},{"_id":"themes/yun/docs/about/icon.md","hash":"e65f78160caf6542db9fdadd0734413b8ada7004","modified":1634908203189},{"_id":"themes/yun/docs/demo/README.md","hash":"7c4c388791b2622694869220e0314003e0863d72","modified":1634908203189},{"_id":"themes/yun/docs/.vuepress/config.ts","hash":"77b3b960f82e8fe813ecd3060cefd9051a6230a9","modified":1634908203185},{"_id":"themes/yun/docs/about/README.md","hash":"604e1752f9b250a1b9d41886c0f24aa5305a2548","modified":1634908203189},{"_id":"themes/yun/docs/en/README.md","hash":"4b7a325b5f0d97d6bc4af65cf86a576dedf45dde","modified":1634908203189},{"_id":"themes/yun/docs/guide/README.md","hash":"b6ee2d6a6b1ba839265f373e4f19867016be64c1","modified":1634908203193},{"_id":"themes/yun/docs/guide/additional-package-support.md","hash":"63fac8e8605c6493cea8722d8086e3aa6b0b61f5","modified":1634908203193},{"_id":"themes/yun/docs/guide/migrate.md","hash":"a865536d769d82500bfc58ab2ace3641880c5ba9","modified":1634908203197},{"_id":"themes/yun/docs/guide/faq.md","hash":"0e8434a5b98563c4435cfa907fc13a25ce50bf20","modified":1634908203197},{"_id":"themes/yun/docs/guide/page.md","hash":"1f803b202c63c08947f973041ba38333e9f0e610","modified":1634908203197},{"_id":"themes/yun/layout/_mixin/icon.pug","hash":"18ee2c33b4e6ef71c31d7955f9a20789fe6aa9e4","modified":1634908203197},{"_id":"themes/yun/docs/guide/third-party-support.md","hash":"aafaa9fdc2914081c74c6bebdc658b5a799e2072","modified":1634908203197},{"_id":"themes/yun/layout/_mixin/index.pug","hash":"3969072910506b21cb09ea2a69f718110c1bb23c","modified":1634908203197},{"_id":"themes/yun/layout/_mixin/page-header.pug","hash":"7ab9c1a6099eda3a64f355caa4d8fac5deff94c6","modified":1634908203197},{"_id":"themes/yun/docs/guide/config.md","hash":"c0fb38eb801b1cff7d59cba427df5f1e2a6c0b66","modified":1634908203193},{"_id":"themes/yun/layout/_mixin/post-categories.pug","hash":"d353f980d65918e8c04f892959b004e4904ce543","modified":1634908203197},{"_id":"themes/yun/layout/_mixin/post-collapse.pug","hash":"741195a5a29ecb5863b1fd0c3b203d960aae05c1","modified":1634908203197},{"_id":"themes/yun/layout/_partial/background.pug","hash":"53b9607f2c68d852d2c082a6588f66af0e681b68","modified":1634908203197},{"_id":"themes/yun/layout/_mixin/post-tags.pug","hash":"b36dc6e1be7eede047f1f355bd4d095078b342d2","modified":1634908203197},{"_id":"themes/yun/layout/_partial/banner.pug","hash":"71179faccb4098909679021585d39c1cd807c6ab","modified":1634908203197},{"_id":"themes/yun/layout/_partial/extended.pug","hash":"185c2238e8678ff9cb32a7b14c144a1f14dd5f92","modified":1634908203197},{"_id":"themes/yun/layout/_partial/layout.pug","hash":"c492ecd6d3de344f51021e0d4361d3fa85760d3f","modified":1634908203197},{"_id":"themes/yun/layout/_partial/footer.pug","hash":"d75a31959f81b3d4b80c85e946a8f3085cb7a3c8","modified":1634908203197},{"_id":"themes/yun/layout/_partial/pagination.pug","hash":"b55b6a99b105447b4a6c982fa258680a2a9a34a9","modified":1634908203197},{"_id":"themes/yun/layout/_partial/head.pug","hash":"ff6c41e56519c84d044a3339f2deb43dc26aa4e1","modified":1634908203197},{"_id":"themes/yun/layout/_partial/recent-posts.pug","hash":"dd336505cb58a8c7b2793182b36c30766a0f3eae","modified":1634908203197},{"_id":"themes/yun/layout/_third-party/aplayer.pug","hash":"642445a227e8b702be443958b49901d7c884555f","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/cdn.pug","hash":"a040ef142d15790ed8fb2e2dd31890f87b4dadde","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/google-tagmanager.pug","hash":"01724665b723aaa1b5fc3a63e3b538970efcd13c","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/index.pug","hash":"c7ca05ff19e71b141ecfbe031a63e225178c2eec","modified":1634908203201},{"_id":"themes/yun/layout/_partial/sidebar.pug","hash":"c4ef88a4bce0d7c2ac315c03eb5a64a70ebb644d","modified":1634908203197},{"_id":"themes/yun/layout/_third-party/lightgallery.pug","hash":"f47e020b9dd2e51c0b78f2718eece58c4448fd15","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/pjax.pug","hash":"b5c0c9cf26933621839ab90a4e754e6406341d09","modified":1634908203201},{"_id":"themes/yun/layout/_widget/back-to-top.pug","hash":"c8bffdede2cbe8dcb2e4b903d1a9f4a793aa9650","modified":1634908203201},{"_id":"themes/yun/layout/_widget/aplayer.pug","hash":"45675643a8d5e64117f94612e517ce4dff6ca053","modified":1634908203201},{"_id":"themes/yun/layout/_widget/cloud.pug","hash":"8903d1311bf5f68dcc23e520cb4f1e4385aff70d","modified":1634908203201},{"_id":"themes/yun/layout/_widget/index.pug","hash":"2888bcec128ce5b72236aa794103089b64240689","modified":1634908203201},{"_id":"themes/yun/layout/_widget/mourn.pug","hash":"3c7741cb35d253a73e2a9ad326ed9e638035102c","modified":1634908203201},{"_id":"themes/yun/layout/_widget/notice.pug","hash":"780a10dbf308022790c58a4d2117dc2f48581531","modified":1634908203201},{"_id":"themes/yun/layout/_widget/say.pug","hash":"fbb919ae36a9b0ce349ed4b305d19d89231c3dd9","modified":1634908203201},{"_id":"themes/yun/scripts/events/config.js","hash":"bfc0a6f1fca67397a847b63f6ab90a14091960f2","modified":1634908203205},{"_id":"themes/yun/scripts/events/data.js","hash":"23ce661be037fbfae5d190f7800a971b4e549ffa","modified":1634908203205},{"_id":"themes/yun/scripts/events/index.js","hash":"6eb536cd204f3a3ee2e15842cb90539daccd33d7","modified":1634908203205},{"_id":"themes/yun/scripts/events/utils.js","hash":"05f2d96bf5321cccadc3ab768a3827a337a86233","modified":1634908203205},{"_id":"themes/yun/scripts/filters/index.js","hash":"fcbfa46a8e6b3006a93966941b2bb446cb77a62d","modified":1634908203205},{"_id":"themes/yun/scripts/helpers/encrypt.js","hash":"efc3c8b54288e278e1f74fedab6526881d6ea30f","modified":1634908203205},{"_id":"themes/yun/scripts/helpers/engine.js","hash":"59a1ea9fd5b49398c97e844f04d00c0760b8f707","modified":1634908203205},{"_id":"themes/yun/scripts/helpers/index.js","hash":"c0d4c363423ef189d78efe158220fbccc759cd78","modified":1634908203205},{"_id":"themes/yun/scripts/tags/prompt.js","hash":"36f6916721c61b7b03f655088d931c5ea1658d32","modified":1634908203205},{"_id":"themes/yun/source/css/README.md","hash":"9f65c9d90a2764bd7b1a32cabc7013bfd3285594","modified":1634908203205},{"_id":"themes/yun/source/css/hexo-theme-yun.styl","hash":"52be359775b1a53cb7264d4e4554a3e2d1172de5","modified":1634908203209},{"_id":"themes/yun/source/js/hexo-theme-yun.js","hash":"ea104f1b49f4418c4168d29f8a12086bd91274df","modified":1634908203213},{"_id":"themes/yun/source/js/pjax.js","hash":"4fd54bd75d9eb751770543ad3dcf2ee03c8485c5","modified":1634908203213},{"_id":"themes/yun/scripts/helpers/yun-config.js","hash":"ad2058b4c070beaed44ab36d2461dd14f35c7b46","modified":1634908203205},{"_id":"themes/yun/source/js/gallery-decrypt.js","hash":"9fdbb18bc6f2df816497288d2d0d7d5171046ab1","modified":1634908203213},{"_id":"themes/yun/source/js/say.js","hash":"aac781102e8d03c7f07eb161d9d008822cda2bdd","modified":1634908203213},{"_id":"themes/yun/docs/.vuepress/assets/README.md","hash":"e59e803a95404654fe68308bc24bddc598e72205","modified":1634908203185},{"_id":"themes/yun/source/js/utils.js","hash":"a0befd581d3d533948ddc969d3772f91aecb8d00","modified":1634908203213},{"_id":"themes/yun/source/js/sidebar.js","hash":"0c97518a1d59422ef2af792ec8e550ba8c2d7233","modified":1634908203213},{"_id":"themes/yun/docs/.vuepress/assets/icons.json","hash":"8a37ebd5994f07809da9126def554e9e6aab8048","modified":1634908203185},{"_id":"themes/yun/docs/.vuepress/components/DemoSite.vue","hash":"f2f5acddccaa82d46f2813e9efe99ee9681cbc59","modified":1634908203185},{"_id":"themes/yun/docs/.vuepress/components/DemoSites.vue","hash":"c716a22d8cb0a586f740ff958c3feac40e4dd7cb","modified":1634908203185},{"_id":"themes/yun/docs/.vuepress/components/DisplayIcon.vue","hash":"2bc93866e74c458db4ee234ec1d70a9a6c78eade","modified":1634908203185},{"_id":"themes/yun/docs/.vuepress/public/CNAME","hash":"c7ffe7d5488a88dfa38ef3780292c22088d5e8ce","modified":1634908203185},{"_id":"themes/yun/docs/.vuepress/assets/sites.json","hash":"e3025d812393c7bc8e9325cd9a72072eea9cf569","modified":1634908203185},{"_id":"themes/yun/docs/.vuepress/public/manifest.json","hash":"471057e459e6aeb525e2dc09922e4182ab89683c","modified":1634908203189},{"_id":"themes/yun/docs/.vuepress/public/yun.svg","hash":"aa027a0a9e7ba96c906b9fd2d9cd3f8018ff2e2d","modified":1634908203189},{"_id":"themes/yun/docs/.vuepress/scripts/index.ts","hash":"25ce1faa45130bc26a24a26665822287148a5593","modified":1634908203189},{"_id":"themes/yun/docs/.vuepress/scripts/generate-demo.ts","hash":"3c78a350341d166cd6f53ce56eadbc717bbd5704","modified":1634908203189},{"_id":"themes/yun/docs/.vuepress/scripts/markdown.ts","hash":"6578b3e4c4ee6a6f50c7579a9129b0a1f6293df2","modified":1634908203189},{"_id":"themes/yun/docs/.vuepress/public/logo.gif","hash":"a2e7143f1f890f58a3c06b8c0acd7a7a3225022f","modified":1634908203189},{"_id":"themes/yun/docs/.vuepress/types/index.ts","hash":"e303419192367a1c44815e7e490d048972505750","modified":1634908203189},{"_id":"themes/yun/docs/.vuepress/styles/index.scss","hash":"f1a0b0d4356c55c8547aab2c846315f7a1e80ae0","modified":1634908203189},{"_id":"themes/yun/docs/en/about/icon.md","hash":"1a3adbfb9d50b4e1a605b8daa22a168144da6386","modified":1634908203189},{"_id":"themes/yun/docs/en/demo/README.md","hash":"113a62c59cf568e3770d281e7113024e38c713ec","modified":1634908203189},{"_id":"themes/yun/docs/en/guide/README.md","hash":"bad341a2ecc6c85822ac386d5349baa605e4b0a0","modified":1634908203189},{"_id":"themes/yun/docs/en/guide/additional-package-support.md","hash":"ec03453a8fb56ea2f2c9529392df3609effe810c","modified":1634908203193},{"_id":"themes/yun/docs/en/guide/config.md","hash":"7b27b7023cec3b2be1f6bb3fb4e6af362f6feff6","modified":1634908203193},{"_id":"themes/yun/docs/en/guide/faq.md","hash":"60e785699c299b26eef20ae1d3979e17702b9268","modified":1634908203193},{"_id":"themes/yun/docs/en/guide/page.md","hash":"0df01ad468aa5073ce25f5816132c563d7c8fa72","modified":1634908203193},{"_id":"themes/yun/docs/en/guide/third-party-support.md","hash":"d66fd081cbb944a572e9de8f15256f8f1192b2d7","modified":1634908203193},{"_id":"themes/yun/layout/_partial/post/post-copyright.pug","hash":"a2415fb36a0dffbe57bf32cd2cfeace11cbaed6b","modified":1634908203197},{"_id":"themes/yun/layout/_partial/post/post-edit.pug","hash":"09d21451a8464047777dcbda09c14b1140396dd8","modified":1634908203197},{"_id":"themes/yun/layout/_partial/post/post-meta.pug","hash":"9aebdcdea704842b010a0e34073c6bb864cf9515","modified":1634908203197},{"_id":"themes/yun/layout/_partial/post/post-nav.pug","hash":"a951544cfa6127f3284e221cdf6c3e2dcb9801c9","modified":1634908203197},{"_id":"themes/yun/layout/_partial/post/post-schema.pug","hash":"ec85079174da20c9f608b142e7fda2c28a9b1dac","modified":1634908203197},{"_id":"themes/yun/layout/_partial/post/reward.pug","hash":"f19b6562f1df71c23dafed15f2f3c9415414e281","modified":1634908203197},{"_id":"themes/yun/layout/_partial/sidebar/info.pug","hash":"a4db9946c319629ecc1983375afdcf243cfc7847","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/adsense/google-adsense.pug","hash":"ae63305d776ebec0d88f91197b5c78cdaa401585","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/analytics/busuanzi.pug","hash":"a2503ff7bbaf05e9205fd36177f803cf91021e05","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/analytics/google-analytics.pug","hash":"3cb12c4ec3f5dbaeccf1a63a6aaa9e31dcaf926e","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/analytics/leancloud-visitors.pug","hash":"181008f1a856253f54642e8a6129303716647a0c","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/comments/disqus.pug","hash":"b84ee3aa7334f38a5c96b45e41fe7dd4c4c8870f","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/comments/disqusjs.pug","hash":"e72cbb5ce02fb65e573964e1a2b0335789198b32","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/comments/giscus.pug","hash":"f4c1eeb652839300b7358a117cb89cee72fa257b","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/comments/github-discussions.pug","hash":"84ba9bc5f4c1daf9636648c181c9a781706fb18d","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/comments/github-issues.pug","hash":"a2209c9d873b88a830c518d80a754fe2068e0b55","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/comments/index.pug","hash":"ec6e1d4498cdec56b384216d3efccfdcc617e57b","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/comments/livere.pug","hash":"b81ed4fb8a0ca32ccfb8e22c37ac48e4be1f4152","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/comments/minivaline.pug","hash":"9df0dfb60176a2c53c2e76a94bfa107238853a3d","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/comments/twikoo.pug","hash":"aca9a0970a95290bb4e3e584253cd024517b50f5","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/comments/utterances.pug","hash":"712f893469f258e969806e1b55d0d2ac926761be","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/comments/valine.pug","hash":"b6803c17e37d5e6eeb8d5315e85a36a8bb4e7915","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/comments/waline.pug","hash":"83499a874c36269d35290c960402a11f424aa8f7","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/math/index.pug","hash":"9a61d4923fad7c778f0bf2ce8c81744b126e6a1f","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/math/katex.pug","hash":"f296f8be36bf95034c7a3536e9203874dfabfaed","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/mermaid/index.pug","hash":"52b8567a5527fe85b41ac2a0a6adb113ba6b7205","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/mermaid/mermaid.pug","hash":"d691390d91d298dc705a828897d2e4357d6794f5","modified":1634908203201},{"_id":"themes/yun/layout/_third-party/seo/baidu-push.pug","hash":"0669b8c7e54c0a80e1f36e720e299cf0cd1182fe","modified":1634908203201},{"_id":"themes/yun/layout/_widget/search/algolia-search.pug","hash":"09a15ab356ebde0f9998fe7e39b2f154dea0543a","modified":1634908203201},{"_id":"themes/yun/layout/_widget/search/index.pug","hash":"05271074172be21c014cd862a25f5112d0b3710c","modified":1634908203201},{"_id":"themes/yun/layout/_widget/search/local-search.pug","hash":"d2ba600623043b2410f379fd7ba3cc75329ff408","modified":1634908203201},{"_id":"themes/yun/source/css/_components/button.styl","hash":"3315fc12b1b7659a06120b042a1a2e87a839ebe1","modified":1634908203205},{"_id":"themes/yun/source/css/_components/card.styl","hash":"1e5f8da293d53c6f352aa17fc625f88bd0840fa6","modified":1634908203205},{"_id":"themes/yun/source/css/_components/scrollbar.styl","hash":"2d735d019b58a1e6fea297e0027c33a4a7bc1858","modified":1634908203205},{"_id":"themes/yun/source/css/_components/ui.styl","hash":"8ef28ee3363f3676c9327a6d163032a003520f40","modified":1634908203209},{"_id":"themes/yun/source/css/_extend/albums.styl","hash":"1e7c7730c89b6d81da37f6565239679b5075234b","modified":1634908203209},{"_id":"themes/yun/source/css/_extend/girls.styl","hash":"e83c8b1219d0117bc342c40030e106b21245dddf","modified":1634908203209},{"_id":"themes/yun/source/css/_global/dark.styl","hash":"ed5c16ac8fcaf838c7ffded69df5a9a29167196d","modified":1634908203209},{"_id":"themes/yun/source/css/_global/index.styl","hash":"abe26e970227b8fcdc62ca73b93923c77877671e","modified":1634908203209},{"_id":"themes/yun/source/css/_global/reset.styl","hash":"d1640eb4f76a3cf792c5149e93c42c85da5a29b2","modified":1634908203209},{"_id":"themes/yun/source/css/_helper/index.styl","hash":"85e6b2cc1acf989d68da4c6696b346c68b23835d","modified":1634908203209},{"_id":"themes/yun/source/css/_layout/banner.styl","hash":"15d649e4b7707dc5b802415b32c2c9ab6168ffbe","modified":1634908203209},{"_id":"themes/yun/source/css/_layout/grid.styl","hash":"743cef95e8fb940c0ae39657038ad32d76926587","modified":1634908203209},{"_id":"themes/yun/source/css/_layout/footer.styl","hash":"ed3afcddad7358ebd89f01846157e26a586e7adf","modified":1634908203209},{"_id":"themes/yun/source/css/_layout/links.styl","hash":"3174cf42a1f79f814ea0a14798f6c5fe28b5dda9","modified":1634908203209},{"_id":"themes/yun/source/css/_layout/main.styl","hash":"2c39ba5d789224bdece3f7c16bc7a82b3e899bf4","modified":1634908203209},{"_id":"themes/yun/source/css/_layout/page.styl","hash":"52ff29d8bdc61dedb0a6515dd84cf015db67a499","modified":1634908203209},{"_id":"themes/yun/source/css/_layout/pagination.styl","hash":"00f95595a8937c7ce4c6069c78e8574600b67d73","modified":1634908203209},{"_id":"themes/yun/source/css/_layout/post.styl","hash":"29e0fe7a0f7948d551d37d1054d88524052baa3d","modified":1634908203209},{"_id":"themes/yun/source/css/_mixins/base.styl","hash":"e47851047ff855495eea4254ef657f67b72fe22a","modified":1634908203209},{"_id":"themes/yun/source/css/_variables/_base.styl","hash":"0288e3196318b116f991b043486fbc0b4b0bc579","modified":1634908203209},{"_id":"themes/yun/source/css/_variables/_colors.styl","hash":"00b9be61937a10b64e6883659ea3afeddb32c22e","modified":1634908203209},{"_id":"themes/yun/source/css/_variables/var.styl","hash":"1fdbfa30adfa52c1afdbcd446f5b0d638401e09d","modified":1634908203209},{"_id":"themes/yun/source/css/_widget/back-to-top.styl","hash":"5898b0c6c36fd1d2ff5408ca098e345ebf04008c","modified":1634908203209},{"_id":"themes/yun/source/css/_widget/comment.styl","hash":"56de8591841c716fe70a788d828e63813a4d33b4","modified":1634908203209},{"_id":"themes/yun/source/css/_widget/index.styl","hash":"a740126826a0ae9a1a2860fbb9c8d805d006aad6","modified":1634908203209},{"_id":"themes/yun/source/css/_widget/notice.styl","hash":"1d68860529a4fd8d3f63d2f257ed32b4e0f1167f","modified":1634908203209},{"_id":"themes/yun/source/css/_widget/say.styl","hash":"c47dd38477c08d31e0813610263200322e8f5ebe","modified":1634908203209},{"_id":"themes/yun/source/js/analytics/leancloud-visitors.js","hash":"323b5ccfe3189c008ee27db4172f8606dae02c50","modified":1634908203213},{"_id":"themes/yun/source/js/comments/disqus.js","hash":"0fac74f042c0e8818a1d01580204d70d0ab13f52","modified":1634908203213},{"_id":"themes/yun/source/js/search/algolia-search.js","hash":"5133e150f4b0168bfe64ad5cbcb5625de08dd6b9","modified":1634908203213},{"_id":"themes/yun/source/js/search/local-search.js","hash":"7cfeb3474cb13664bdfc2c518371d409df406c6a","modified":1634908203213},{"_id":"themes/yun/source/js/ui/banner.js","hash":"09456f8f16e5f9300657bf23eba43e705561f76c","modified":1634908203213},{"_id":"themes/yun/source/js/ui/fireworks.js","hash":"012a0b7941d63d27b8bb0371555d1a61a246b74d","modified":1634908203213},{"_id":"themes/yun/source/js/ui/mode.js","hash":"42b868d77fcc5eac53f5520dd89db385595555d0","modified":1634908203213},{"_id":"themes/yun/docs/.vuepress/configs/navbar/en.ts","hash":"a18931aa190f969a3db6ed6c69d1fbc777e91bdd","modified":1634908203185},{"_id":"themes/yun/docs/.vuepress/configs/navbar/index.ts","hash":"d0c81b91c9965c33d93e73b8b94bea05abd5ba86","modified":1634908203185},{"_id":"themes/yun/docs/.vuepress/configs/sidebar/en.ts","hash":"d4165052889f5da2875133f26666b0670457cd34","modified":1634908203185},{"_id":"themes/yun/docs/.vuepress/configs/navbar/zh.ts","hash":"94b6e931839601a59d3167873527196ff2ceb9dc","modified":1634908203185},{"_id":"themes/yun/docs/.vuepress/configs/sidebar/index.ts","hash":"ed15c6a7dbdee8aa77e1173872c9ffb90de7da94","modified":1634908203185},{"_id":"themes/yun/docs/.vuepress/configs/sidebar/zh.ts","hash":"0fe3ddf9980749481ff1fb8ea67ea76bdaaa3093","modified":1634908203185},{"_id":"themes/yun/source/css/_components/post/post-codebloack.styl","hash":"c3cf80ace92d9ba5711cdf487f818cd31598866c","modified":1634908203205},{"_id":"themes/yun/docs/.vuepress/public/images/mickey-mouse.jpg","hash":"96a9449730d5149b8d114c2a7d8caaa364257dd0","modified":1634908203185},{"_id":"themes/yun/source/css/_components/post/post-card.styl","hash":"27374d94394f2a034436a7bd2a0806f020930dcc","modified":1634908203205},{"_id":"themes/yun/source/css/_components/post/post-header.styl","hash":"2e674b76b47b3e6226269fe357d8b937b7a007a8","modified":1634908203205},{"_id":"themes/yun/source/css/_components/post/post-collapse.styl","hash":"6741c225a37e7e121d4159f129b7024402a8eeec","modified":1634908203205},{"_id":"themes/yun/source/css/_components/post/post-markdown.styl","hash":"9a5ef65934fa415cbccbf71865304465c4f56a59","modified":1634908203205},{"_id":"themes/yun/source/css/_components/post/post-nav.styl","hash":"a9e5f18cee94944c43b0c09d6ec840b78c1f1aa0","modified":1634908203205},{"_id":"themes/yun/source/css/_components/post/post-reward.styl","hash":"454aa79758c9be46c8d8fa226b38e7ac1834ce3b","modified":1634908203205},{"_id":"themes/yun/source/css/_components/sidebar/sidebar-nav.styl","hash":"d8feec6f13ca9bd714e4fe7189abf1907848efef","modified":1634908203205},{"_id":"themes/yun/source/css/_components/sidebar/sidebar.styl","hash":"21b2532c943e06bae70ed2a6b341b4816ce55898","modified":1634908203209},{"_id":"themes/yun/source/css/_components/sidebar/sidebar-toc.styl","hash":"b4b42a6dc949b52b5a861239905d333e1db6c64f","modified":1634908203209},{"_id":"themes/yun/source/css/_components/sidebar/site-overview.styl","hash":"620772d3b2da06d94ef6fb25c6aee3c4eb48767b","modified":1634908203209},{"_id":"themes/yun/source/css/_extend/tags/prompt.styl","hash":"553d59840e1c9217b49b902cfe1ac520bbf71e5c","modified":1634908203209},{"_id":"themes/yun/source/css/_extend/tags/index.styl","hash":"1c4ae0e519bb8629425235f2efd80addfc2bee93","modified":1634908203209},{"_id":"themes/yun/source/css/_widget/search/algolia-search.styl","hash":"69916b23d54859160c4fda5ee809b8375fc56151","modified":1634908203209},{"_id":"themes/yun/source/css/_widget/search/index.styl","hash":"e3139db72a870c9791ee9cf206428e567e86f3f1","modified":1634908203209},{"_id":"themes/yun/source/css/_widget/search/local-search.styl","hash":"bcb8e5d593d49e370312e17eadf9f1e13aa22829","modified":1634908203209},{"_id":"themes/yun/source/css/_components/sidebar/hamburger.styl","hash":"0fa240e8a71fdad14d3fd6b3fd49cf697d4c8153","modified":1634908203205},{"_id":"themes/yun/docs/.vuepress/styles/palette.styl","hash":"25a57ac820b471bc91c151347a1c1d0cc62767d6","modified":1634908203189},{"_id":"themes/yun/docs/en/about/README.md","hash":"19f69d579ba7770c732306c6c66642f4d170220d","modified":1634908203189},{"_id":"themes/yun/docs/.vuepress/public/images/index-preview.jpg","hash":"31aaa79aff97bdb98945c541d6bc698d450e078e","modified":1634908203185},{"_id":"source/images/searchbg.png","hash":"74641908ae7e8c2cebdf848a0b3c518e28c592a1","modified":1664942048000},{"_id":"public/baidu_urls.txt","hash":"abeabe18b6d3b52a4fb65c909dd342004a0d6d8c","modified":1634977304517},{"_id":"public/baidusitemap.xml","hash":"4e72d1fb031187b90e9d681c90e81300eb32a11d","modified":1634977304517},{"_id":"public/atom.xml","hash":"92e0577f1b520520fe9ad8d6e5f4b15527a82e81","modified":1634977304517},{"_id":"public/sitemap.xml","hash":"37fa65b122f2e8185083f1d001f2f2188fff05ad","modified":1634977304517},{"_id":"public/404.html","hash":"a34cd44e3f0ea3f59eaa82754050c3a360f6b700","modified":1634977304517},{"_id":"public/about/README.html","hash":"5115d02866d5b2f057127981e7171d43992c1696","modified":1634977304517},{"_id":"public/about/index.html","hash":"edf8ee6af8bdc8632587013a586b572172b9176e","modified":1634977304517},{"_id":"public/about/site.html","hash":"64d6eaa794709ace61ef4d7af87e3af28e911633","modified":1634977304517},{"_id":"public/albums/2020autumn.html","hash":"4c332fbbe79cd487ed4ae97c0db8a3478a7206bc","modified":1634977304517},{"_id":"public/albums/index.html","hash":"7521766d78fc07325fefb2dd433303ab168094ea","modified":1634977304517},{"_id":"public/categories/index.html","hash":"32e12413e5f018a982af8d49cb9107fec0dc84a2","modified":1634977304517},{"_id":"public/girls/index.html","hash":"9f6bae1c60404a12c458f0f02015436ba3d2e73d","modified":1634977304517},{"_id":"public/links/index.html","hash":"667107e63fbfcf351154a6abff40f5fe30dc45b2","modified":1634977304517},{"_id":"public/tags/index.html","hash":"074e677d40f424be6ab0185c6b19a959dbfce1b4","modified":1634977304517},{"_id":"public/2021/Introduction-to-Networks/index.html","hash":"fe3b17fdf556eb8e6699cb307b463fb5fb834706","modified":1634977304517},{"_id":"public/2021/ShingekinoKyoji/index.html","hash":"cc2134d64115c12b6bcdecf79117532f2d5b5d58","modified":1634977304517},{"_id":"public/2021/MovieHelloWorld/index.html","hash":"27e320943a179c543da0160cdd834a746f83d975","modified":1634977304517},{"_id":"public/2021/XCPC/UPST2021DS/index.html","hash":"cf4a0a3bb4c52b0f2aed873d9e4d1a5f88fae66b","modified":1634977304517},{"_id":"public/2021/XCPC/ARC116/index.html","hash":"b249ac681eaaf39f5b10104907e909e9accc5b22","modified":1634977304517},{"_id":"public/2021/XCPC/EducationDPContest/index.html","hash":"9ce8e5ba92f7157794e70e3443fb4777058213d9","modified":1634977304517},{"_id":"public/2021/XCPC/DataStructure/index.html","hash":"c0d2f845d2df65b87c7e3c6af5c0f790abf96062","modified":1634977304517},{"_id":"public/2021/XCPC/DynamicProgramming/index.html","hash":"20603607247e9daa7505aa74fb124b99d6ab4d15","modified":1634977304517},{"_id":"public/2021/XCPC/keyence2021/index.html","hash":"6c15126251bcb616de0f2fb3720557a64095d4a7","modified":1634977304517},{"_id":"public/2021/XCPC/ABC188/index.html","hash":"d4c5121772242c8f7cb3b453dc0c87ad691c760b","modified":1634977304517},{"_id":"public/2021/UESTCaboutexam/index.html","hash":"2334f0b06b14d158cc8525ad14d544265e86aa70","modified":1634977304517},{"_id":"public/2021/XCPC/ABC189/index.html","hash":"4b56dc4e3d541803fe735d510bb331dc3dd64810","modified":1634977304517},{"_id":"public/2021/daily210105/index.html","hash":"2689088f0d679431ea552642734fcfc9fa7c05c1","modified":1634977304517},{"_id":"public/2021/Goodbye2020/index.html","hash":"8958b01d61b8c3733947bc6273d20a2d67e5ec59","modified":1634977304517},{"_id":"public/2020/BaiduUrls/index.html","hash":"e81061410367a9d409bbc737dcd31cd17baf8297","modified":1634977304517},{"_id":"public/2020/XCPC/lackingnumber/index.html","hash":"3179ba15b683a4bb079f2a4f7e89ba1a421d25b7","modified":1634977304517},{"_id":"public/2020/XCPC/STL/index.html","hash":"61067e92a9289059a3a173d6c09b0be19d877955","modified":1634977304517},{"_id":"public/2020/XCPC/InverseElement/index.html","hash":"dae878b9e4debf4e1a60909024417f0decd06be6","modified":1634977304517},{"_id":"public/2020/XCPC/CF1459_R691/index.html","hash":"655ef22d7fc5dc3c6b8421672064ed1a8599b0c0","modified":1634977304517},{"_id":"public/2020/XCPC/Gcd/index.html","hash":"23ae2dfceff634ea52e55e714ad745ce5f41fd70","modified":1634977304517},{"_id":"public/2020/XCPC/CF1462_R690/index.html","hash":"15d5d51f7a1624685a132444990bbdecb2042179","modified":1634977304517},{"_id":"public/2020/XCPC/CF1463_EDU100/index.html","hash":"dbcad081ca9d3398df235032c5c88c15e27ef726","modified":1634977304517},{"_id":"public/2020/XCPC/SegmentTree/index.html","hash":"c88b0fffc2fcc2c774d3d5192599261540105cb8","modified":1634977304517},{"_id":"public/2020/Exmail/index.html","hash":"c102c9fcf29cfd2a77e9a8ae195688f5d86aa444","modified":1634977304517},{"_id":"public/2020/XCPC/UEST-CPC/index.html","hash":"a33d019f5a27e70ca488a8001eddeba67bdc90bd","modified":1634977304517},{"_id":"public/2020/XCPC/BinaryIndexedTree/index.html","hash":"fa45f02b84f69b95853aee93cc613f81e973476f","modified":1634977304517},{"_id":"public/2020/XCPC/SparseTable/index.html","hash":"c9ce774f9d6e380882052fe4b79bc553af56d019","modified":1634977304517},{"_id":"public/2020/XCPC/Kmp/index.html","hash":"3094b95ef239f9aca7b26bd2062dda5134a8ac4b","modified":1634977304517},{"_id":"public/2020/XCPC/CF1451_R685/index.html","hash":"01903831ed678eeb46b5f8f19b15f406bc823bd6","modified":1634977304517},{"_id":"public/2020/XCPC/CF1452_EDU98/index.html","hash":"6fa4390d46f6ecbe3fc516606965ffc615c2d7a4","modified":1634977304517},{"_id":"public/2020/XCPC/CF1440_R684/index.html","hash":"ed869f69418b5550444b4ac23ae60c883e33c4d0","modified":1634977304517},{"_id":"public/2020/XCPC/chthollytree/index.html","hash":"bcf8b8c28dfde3a1178350f202e009553b482141","modified":1634977304517},{"_id":"public/2020/XCPC/ABC182/index.html","hash":"fa7e4d085930259403b6eeb2d9373973e9c3fcd8","modified":1634977304517},{"_id":"public/2020/XCPC/IntervalSchedulingProblem/index.html","hash":"232c57fb11e8ea3e742bd538a0f89192eb214308","modified":1634977304517},{"_id":"public/2020/XCPC/Graphviz/index.html","hash":"aee3eac5bb580afc65dad78757b5dee32ee826d5","modified":1634977304517},{"_id":"public/2020/XCPC/SortAlgorithm/index.html","hash":"70896d3b22b53d613ce73fe221f679aec4e38e26","modified":1634977304517},{"_id":"public/2020/XCPC/Quicksort/index.html","hash":"cbe5e64d1b38dfcba0979ef083f89c1f67a4beff","modified":1634977304517},{"_id":"public/2020/XCPC/ARC106/index.html","hash":"3d2546b83a20b129ac8bba7e38801726be8f505d","modified":1634977304517},{"_id":"public/archives/index.html","hash":"45cf7662fda5bcc13f8ba18efed91bbbf3a11103","modified":1634977304517},{"_id":"public/archives/page/2/index.html","hash":"f03d00d222ffbc0c7d61a376e44a41d6186902ef","modified":1634977304517},{"_id":"public/archives/page/3/index.html","hash":"30ee625115209fff547a40a4f736d78f645a7c40","modified":1634977304517},{"_id":"public/archives/page/4/index.html","hash":"c7518482bcfbf3ace19f987633bec9e6b9654671","modified":1634977304517},{"_id":"public/archives/2020/index.html","hash":"ee88f912884166a333e2258c8d84ad88ba5ce0c0","modified":1634977304517},{"_id":"public/archives/2020/page/2/index.html","hash":"78c5ac8f639a9490a1fe8f7446f34b11f9483d20","modified":1634977304517},{"_id":"public/archives/2020/page/3/index.html","hash":"802b835c2853f61d6aa1e53c3d76e949fced62d2","modified":1634977304517},{"_id":"public/archives/2020/10/index.html","hash":"7df6c3af5748a4238a1682e0d6d926ba4c7a4846","modified":1634977304517},{"_id":"public/archives/2020/11/index.html","hash":"4c7409d92f9207e00ace1d3afba9114297b4f898","modified":1634977304517},{"_id":"public/archives/2020/12/index.html","hash":"5729ca85a73bfebdd172ed0fa77c1aade567c8a8","modified":1634977304517},{"_id":"public/archives/2020/12/page/2/index.html","hash":"27cc407c113f65cc0a482b43c8d7b6a84bc273f9","modified":1634977304517},{"_id":"public/archives/2021/index.html","hash":"9bfadaf72b35c4eacf5b04dd5c8257972a1c9c79","modified":1634977304517},{"_id":"public/archives/2021/page/2/index.html","hash":"1ad5ac7301eb2a96263407c8847a9773bfe211b7","modified":1634977304517},{"_id":"public/archives/2021/01/index.html","hash":"cbc010a6d316b376cf09f098a6bc47d0565179b2","modified":1634977304517},{"_id":"public/archives/2021/03/index.html","hash":"3d4f3fe88918b0b5f6eb76acf1d05c40a5e7f5aa","modified":1634977304517},{"_id":"public/archives/2021/05/index.html","hash":"06175d28611f12545d00a36741bc2119e7a4f354","modified":1634977304517},{"_id":"public/archives/2021/06/index.html","hash":"dc10fa6bc3b4908b3b8a625d114084371e5a9396","modified":1634977304517},{"_id":"public/archives/2021/07/index.html","hash":"d74445d66dac8280242084e7e6eddd93b79b9e3c","modified":1634977304517},{"_id":"public/categories/博客相关/index.html","hash":"822237d06910b21c1369081b17e9ac36b8671bad","modified":1634977304517},{"_id":"public/categories/各种好用的工具/index.html","hash":"3242017944b8819770f6d49dd2a7dab8a930c574","modified":1634977304517},{"_id":"public/categories/关于我有个三次元分身这档事/index.html","hash":"93b85232274d502cbb5344325ab0ca159aec0c11","modified":1634977304517},{"_id":"public/categories/学习笔记/index.html","hash":"f6445e63550c6c4ea9c17dbfc4abd3d90a4250f8","modified":1634977304517},{"_id":"public/categories/无聊的小分享/index.html","hash":"22664ff77691d3619e883a126f4ef9c111bb5dc6","modified":1634977304517},{"_id":"public/categories/ICPC-Programming-Contest/index.html","hash":"df57f87436adc8e6ea8e529722874607d1d8df26","modified":1634977304517},{"_id":"public/categories/ICPC-Programming-Contest/page/2/index.html","hash":"15e83442e70b8a2744bf380f985f116a833d57be","modified":1634977304517},{"_id":"public/categories/ICPC-数据结构/index.html","hash":"1d2b55bdd6c4405d4a07e6f4bd653b7c84e0fed9","modified":1634977304517},{"_id":"public/categories/ICPC-动态规划/index.html","hash":"33d761d8d3ad67633feb630faaefed47b7fa1427","modified":1634977304517},{"_id":"public/categories/ICPC-数学与计算几何/index.html","hash":"363e913051a2aca198bff0d1f4598c0fce81f729","modified":1634977304517},{"_id":"public/categories/ICPC-字符串/index.html","hash":"37455187b25f61ae30e31e552e04abf4deff23b4","modified":1634977304517},{"_id":"public/categories/ICPC-算法基础/index.html","hash":"411d16508c445f4e50980cf428c7ff82e8c3ec9f","modified":1634977304517},{"_id":"public/index.html","hash":"0d19c43fa21b05aa35afbb6dc703f5365a6243c1","modified":1634977304517},{"_id":"public/page/2/index.html","hash":"b26989f4aca1b8158f31cc9d4b1b3e9e2a51e10e","modified":1634977304517},{"_id":"public/page/3/index.html","hash":"a39c0e3172c693288ece1b2e452815a52463839b","modified":1634977304517},{"_id":"public/page/4/index.html","hash":"0839bf6271a3a537a391c497068286fd3d692bdc","modified":1634977304517},{"_id":"public/tags/博客/index.html","hash":"5f4931897ec9291eb1d89ae7236502e98435b0e1","modified":1634977304517},{"_id":"public/tags/域名邮箱/index.html","hash":"74ff007c1d518de0d20c2caba53f3f2a59c09bb0","modified":1634977304517},{"_id":"public/tags/Github-Pages/index.html","hash":"a26c0f9b819d4d9cbbc5f5143827845d6a22ae5d","modified":1634977304517},{"_id":"public/tags/2020/index.html","hash":"963cde2bc736e02d71d83925a06838f80a77426f","modified":1634977304517},{"_id":"public/tags/网络/index.html","hash":"2ebd6d79131d77cc15ee36dcdd48390e61a2eeb2","modified":1634977304517},{"_id":"public/tags/影评/index.html","hash":"47c635783a2b14685eebfef0a71b528bc6e80052","modified":1634977304517},{"_id":"public/tags/漫评/index.html","hash":"2257f774202238d04db563432947cbdb9f9419c4","modified":1634977304517},{"_id":"public/tags/考试/index.html","hash":"e7cb3ab0f5abbfb97c327baab3d9dba7ff056ae9","modified":1634977304517},{"_id":"public/tags/个人经历/index.html","hash":"6852d633f64b5ddd7f71c651827b16dbc237304c","modified":1634977304517},{"_id":"public/tags/剪枝/index.html","hash":"3bfbcbf175e8bd308e6386a23cc802c829c186a4","modified":1634977304517},{"_id":"public/tags/暴搜/index.html","hash":"31014dc0ec84a640b79d6fe5b20526840ec8a014","modified":1634977304517},{"_id":"public/tags/dfs/index.html","hash":"6a38a0d0181022eeca4235da962d739751a90e33","modified":1634977304517},{"_id":"public/tags/队列/index.html","hash":"ce37ad30ab0a16fae961560fe025828837c93fdc","modified":1634977304517},{"_id":"public/tags/珂朵莉树/index.html","hash":"9b904d07418e1755d8e1b31b1003e9ef172eae4a","modified":1634977304517},{"_id":"public/tags/map/index.html","hash":"4ce04b18c8283f6a34e89bd0d652729ff876ef22","modified":1634977304517},{"_id":"public/tags/差分/index.html","hash":"d0dcf8cdc36418febef841eabbf3436938695cd9","modified":1634977304517},{"_id":"public/tags/BFS/index.html","hash":"4fc823b138ad11f26c0071d2ee8473fd11f8eff6","modified":1634977304517},{"_id":"public/tags/贪心/index.html","hash":"9aec4eb5145addf0a623e99e397e959cdb4406a1","modified":1634977304517},{"_id":"public/tags/ST表/index.html","hash":"82ce17428bedf5383919d316cbc7a86dccf5147c","modified":1634977304517},{"_id":"public/tags/动态规划DP/index.html","hash":"0e409022bf441789e8a45a073c4d184f2f8d94f6","modified":1634977304517},{"_id":"public/tags/矩阵/index.html","hash":"224f53f67ef9d9164f21b8734335e7114aeed847","modified":1634977304517},{"_id":"public/tags/最大区间调度/index.html","hash":"4f551d749daba9253b298571c77f9fd3dd58bb2d","modified":1634977304517},{"_id":"public/tags/数学/index.html","hash":"465fa4437f6fe9c3e252aa299f79547b8415990b","modified":1634977304517},{"_id":"public/tags/树状数组/index.html","hash":"6ef788a03731b071db0fe1e2913d4752d8f0d72d","modified":1634977304517},{"_id":"public/tags/暴力枚举/index.html","hash":"1140204eadab059b2b9d4ad4e9fbcdf9e9130440","modified":1634977304517},{"_id":"public/tags/字符串/index.html","hash":"70d62ad8e6c7a2e3ddfb0e79b8d73f3c738749c1","modified":1634977304517},{"_id":"public/tags/平面几何/index.html","hash":"1cfcefde467f390fc90bd16d88822253bd45b8bf","modified":1634977304517},{"_id":"public/tags/模拟/index.html","hash":"d59f05d8f31cb18d43e1996387b30259fdf7a0b6","modified":1634977304517},{"_id":"public/tags/数论/index.html","hash":"f1e32316eeeb03ec685c8b43eaeecf2dd8ad1ad8","modified":1634977304517},{"_id":"public/tags/二分查找/index.html","hash":"ff043cfbb7782f20a8a6e0b8db7201d93e22e856","modified":1634977304517},{"_id":"public/tags/数据结构/index.html","hash":"ed3fceb9ecfffff9c58476357da62d154d59010f","modified":1634977304517},{"_id":"public/tags/动态规划/index.html","hash":"fc44efd21ef961c647d3accff2aeb8ff1cbe65e5","modified":1634977304517},{"_id":"public/tags/GCD/index.html","hash":"a4c4341d304a66786d3ef0d30f1a0fa83857422d","modified":1634977304517},{"_id":"public/tags/绘图/index.html","hash":"9c2e1772d281bd10786e3b3bad07bbbf583ca9f0","modified":1634977304517},{"_id":"public/tags/区间调度/index.html","hash":"0487f14c45368e19b62bbdf48e247363d1eb7782","modified":1634977304517},{"_id":"public/tags/逆元/index.html","hash":"075e716e9e8c837527cfb02a56ee1d56e744d026","modified":1634977304517},{"_id":"public/tags/KMP/index.html","hash":"8442a20031d072d3343ab28b97ee516d813dedc5","modified":1634977304517},{"_id":"public/tags/BM/index.html","hash":"f0fd234ee66423d351889d96a26fbe7756707f0b","modified":1634977304517},{"_id":"public/tags/Sunday/index.html","hash":"9333fcb4c2e01b2a038e55fa3302d93150b0d946","modified":1634977304517},{"_id":"public/tags/分治/index.html","hash":"0bb8b32e7fa68b31a9d9f9ea4eee54aad2e90477","modified":1634977304517},{"_id":"public/tags/排序/index.html","hash":"d840fb1f3bf0263ba921e0ef415c271c12f3587a","modified":1634977304517},{"_id":"public/tags/STL/index.html","hash":"5bfed02080f111cf8fc692e79a861a56527561cf","modified":1634977304517},{"_id":"public/tags/线段树/index.html","hash":"841ed4e82c1d3a022dab76167ac78eb9c8bfdba8","modified":1634977304517},{"_id":"public/tags/BST/index.html","hash":"39842f6daa9f8752b359e3a4d75fbc552a349acc","modified":1634977304517},{"_id":"public/tags/string/index.html","hash":"e729dadccfbee10ec8319ebd29af1348ae4b5977","modified":1634977304517},{"_id":"public/tags/堆/index.html","hash":"c4eb2764e485fb6ed8130b30c55d892d53986519","modified":1634977304517},{"_id":"public/tags/主席树/index.html","hash":"fd1449d36a9f82a5c9fb434471270518b7adaa12","modified":1634977304517},{"_id":"public/tags/链表/index.html","hash":"5d89e388db7b41d5cac3aabd99e379d06c70bda8","modified":1634977304517},{"_id":"public/tags/单调栈-队列/index.html","hash":"3b856de21c548311d5d6c71a662fcefe8b938857","modified":1634977304517},{"_id":"public/tags/树链剖分/index.html","hash":"67b2edf762abc06957f9192b19ddedd93ce702b4","modified":1634977304517},{"_id":"public/tags/并查集/index.html","hash":"8f61faa837b4f8eec5806460012a6c9acdbc13f7","modified":1634977304517},{"_id":"public/tags/二叉平衡树/index.html","hash":"f845138144da4cfff1a0ceda02b9fd70e85a0dca","modified":1634977304517},{"_id":"public/tags/莫队算法/index.html","hash":"83a6ae534f2f584f424eb3c00ba9e25ec27e5f0b","modified":1634977304517},{"_id":"public/tags/二分答案/index.html","hash":"3f973b85d7996a31b49c5e8d218d9b16949b1273","modified":1634977304517},{"_id":"public/tags/K-D树/index.html","hash":"22efde2cd67a9d3e64ff9fbcdcca1ecafe89aae0","modified":1634977304517},{"_id":"public/tags/扫描线/index.html","hash":"68774840c0ec55fcab52745da3e866773e75047c","modified":1634977304517},{"_id":"public/tags/区间赋值/index.html","hash":"88251837919c3e8d4908b3eaa56850bdb8f6bace","modified":1634977304517},{"_id":"public/tags/暴力/index.html","hash":"c2ba778abea936502d2ca09ccfcb559a069ef396","modified":1634977304517},{"_id":"public/Yun.png","hash":"b8ae426fa5dd7579d23d189c222641d812c51c0a","modified":1634977304517},{"_id":"public/yun.ico","hash":"5d63418cd650d1881d4b6507f35b9f9df766020e","modified":1634977304517},{"_id":"public/yun.svg","hash":"aa027a0a9e7ba96c906b9fd2d9cd3f8018ff2e2d","modified":1634977304517},{"_id":"public/CNAME","hash":"5c1e0195048c4e29bb453254963fd7bdfa1de2f5","modified":1634977304517},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1634977304517},{"_id":"public/favicon.ico","hash":"6ccd6c36e6aa4dc584b2f46eac46e41cf7e6874b","modified":1634977304517},{"_id":"public/images/liwei.jpg","hash":"e2dcd40e55195f9474a4e64c64e022ace6ddb6b1","modified":1634977304517},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1634977304517},{"_id":"public/css/README.html","hash":"3c68b48595e975dd7614b64f71ffa1113d784228","modified":1634977304517},{"_id":"public/js/hexo-theme-yun.js","hash":"ea104f1b49f4418c4168d29f8a12086bd91274df","modified":1634977304517},{"_id":"public/js/gallery-decrypt.js","hash":"9fdbb18bc6f2df816497288d2d0d7d5171046ab1","modified":1634977304517},{"_id":"public/js/pjax.js","hash":"4fd54bd75d9eb751770543ad3dcf2ee03c8485c5","modified":1634977304517},{"_id":"public/js/say.js","hash":"aac781102e8d03c7f07eb161d9d008822cda2bdd","modified":1634977304517},{"_id":"public/js/sidebar.js","hash":"0c97518a1d59422ef2af792ec8e550ba8c2d7233","modified":1634977304517},{"_id":"public/js/analytics/leancloud-visitors.js","hash":"323b5ccfe3189c008ee27db4172f8606dae02c50","modified":1634977304517},{"_id":"public/js/utils.js","hash":"a0befd581d3d533948ddc969d3772f91aecb8d00","modified":1634977304517},{"_id":"public/js/comments/disqus.js","hash":"0fac74f042c0e8818a1d01580204d70d0ab13f52","modified":1634977304517},{"_id":"public/js/search/algolia-search.js","hash":"5133e150f4b0168bfe64ad5cbcb5625de08dd6b9","modified":1634977304517},{"_id":"public/js/search/local-search.js","hash":"7cfeb3474cb13664bdfc2c518371d409df406c6a","modified":1634977304517},{"_id":"public/js/ui/banner.js","hash":"09456f8f16e5f9300657bf23eba43e705561f76c","modified":1634977304517},{"_id":"public/js/ui/fireworks.js","hash":"25c2d6fe21a725708550a3fbdc852f1281d9b130","modified":1634977304517},{"_id":"public/js/ui/mode.js","hash":"42b868d77fcc5eac53f5520dd89db385595555d0","modified":1634977304517},{"_id":"public/css/hexo-theme-yun.css","hash":"085cc2f53cb5d3289c3a1d06a74dcd312e379bce","modified":1634977304517},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1634977304517},{"_id":"public/images/searchbgdark.jpg","hash":"11667941695b07e70fb8101dc9433a23e94d9f9b","modified":1634977304517},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1634977304517},{"_id":"public/images/searchbg.png","hash":"74641908ae7e8c2cebdf848a0b3c518e28c592a1","modified":1634977304517}],"Category":[{"name":"博客相关","_id":"ckv3j9uj3000463jn9wh66lmg"},{"name":"各种好用的工具","_id":"ckv3j9uj8000c63jnc2wd61pp"},{"name":"关于我有个三次元分身这档事","_id":"ckv3j9ujb000k63jn1d9uhpqx"},{"name":"学习笔记","_id":"ckv3j9ujd000r63jnbsu6el91"},{"name":"无聊的小分享","_id":"ckv3j9ujf000z63jnfs0tapwu"},{"name":"ICPC Programming Contest","_id":"ckv3j9ujo001i63jnbi0ke1lo"},{"name":"ICPC 数据结构","_id":"ckv3j9ujz002e63jne7b00s74"},{"name":"ICPC 动态规划","_id":"ckv3j9uk9003c63jn7401bhvw"},{"name":"ICPC 数学与计算几何","_id":"ckv3j9uk9003h63jn3lbmby3g"},{"name":"ICPC 字符串","_id":"ckv3j9ukc003w63jn4ik36ful"},{"name":"ICPC 算法基础","_id":"ckv3j9ukc004163jncptzbygo"}],"Data":[{"_id":"yun","data":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}],"Page":[{"layout":"404","title":"四大皆空","reward":false,"_content":"","source":"404.md","raw":"---\nlayout: 404\ntitle: 四大皆空\npermalink: /404.html\nreward: false\n---","date":"2021-10-22T13:25:05.340Z","updated":"2022-02-13T06:48:48.000Z","path":"/404.html","comments":1,"_id":"ckv3j9uiy000063jn9bvc4b9g","content":"","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":""},{"title":"Welcome Home! Chtholly!","date":"2020-10-08T04:00:00.000Z","_content":"\n关于我想瞎折腾然后花一堆时间搭建博客这档事。\n从小就有一个想法，搞一个自己的网站。然后就是在学 OI 时用的博客园，到了大学，我想自己搭一个了。所以，从今天起，在这里记录这个BLOG的点滴。~~到我还有钱续费~~。\n\n<p align=\"right\"> - 写于樱岛麻衣生日  20201202 </p>\n\n<!-- more -->\n\n<details open>\n    <summary>2020年12月</summary>\n\n## 2020-12-15\n\n- 配置了RSS ~~但是谁会订阅呢~~\n- 加了相册页面，可能会传点照片吧\n\n## 2020-12-13\n- 申请了企业微信和腾讯企业邮 , 开始使用 me@inzamz.top 作为邮箱地址\n- 使用A记录将inzamz.top重定向到 www.inzamz.top 解决了CNAME与MX冲突的问题\n\n## 2020-12-10\n- 配置了公式渲染插件 , 只要安装相关插件就行 , 然后在主题文件中把katex改为true即可\n- 在阿里云购买了个产品然后拿到了备案申请号 , 开始备案 .\n\n## 2020-12-05\n\n- 把 about 和 评论系统配置一下\n\n## 2020-12-04\n\n- 想把girls页面用cdn加载 , 然而不会转json , js-yaml不会用 , 🙈 , 然后我用 c 语言自己写了一个\n- 白嫖 cdn 的时光开始了\n\n## 2020-12-02\n\n- 更换了主题 [Yun](https://yun.yunyoujun.cn/) \n- Thanks\n    - 非常感谢[云游君](https://www.yunyoujun.cn/) , 详细的文档和在群里的指导 . 请他喝了冰阔落 .\n    - \n</details>\n\n<details>\n    <summary>2020年10月~2020年11月</summary>\n\n# 建站\n## 2020-11-30\n\n- 使用公式块的渲染插件 mathjax ~~(怕我忘了)~~\n\n    参考资料 : https://blog.csdn.net/u014630987/article/details/78670258 ( 因为更换主题,重新更换了公式渲染插件 , 这个用于还原之前的设置)\n\n## 2020-10-31 新域名\n- 购买了域名 inzamz.top , 首年9元.\n\n## 2020-10-08 建站和Diaspora\n\n- 这几天就开始折腾各种有趣的东西 ,感觉让生活充实一点. ~~(想摸鱼就直说)~~ 迫于学业压力，期中考迫近，摸鱼就要结束了。\n\n<img src=\"https://p.130014.xyz/2020/10/28/4BF41291-A22D-4F66-BB7C-88181293B74D.jpg\" div align=\"center\" alt=\"当代大学生现状\" style=\"zoom:25%;\"  />    \n\n- Thanks\n    -  在 [思否](segmentfault.com) 上的 [博文](https://segmentfault.com/a/1190000017986794) 给了我很多帮助，让我迅速搭建起了这个Blog。\n    -  感谢他让我的 Chtholly 找到家。  ~~没有他的看板娘，我估计不会折腾这东西。~~ （我永远喜欢珂朵莉）\n    - 还有 Blog 主题的作者 [@LoeiFy](https://github.com/LoeiFy) 以及移植到 [Hexo](https://hexo.io/) 上的 [@Fechin Li](https://github.com/Fechin)\n\n</details>","source":"about/README.md","raw":"---\ntitle: Welcome Home! Chtholly!\ndate: 2020-10-08 12:00:00\n---\n\n关于我想瞎折腾然后花一堆时间搭建博客这档事。\n从小就有一个想法，搞一个自己的网站。然后就是在学 OI 时用的博客园，到了大学，我想自己搭一个了。所以，从今天起，在这里记录这个BLOG的点滴。~~到我还有钱续费~~。\n\n<p align=\"right\"> - 写于樱岛麻衣生日  20201202 </p>\n\n<!-- more -->\n\n<details open>\n    <summary>2020年12月</summary>\n\n## 2020-12-15\n\n- 配置了RSS ~~但是谁会订阅呢~~\n- 加了相册页面，可能会传点照片吧\n\n## 2020-12-13\n- 申请了企业微信和腾讯企业邮 , 开始使用 me@inzamz.top 作为邮箱地址\n- 使用A记录将inzamz.top重定向到 www.inzamz.top 解决了CNAME与MX冲突的问题\n\n## 2020-12-10\n- 配置了公式渲染插件 , 只要安装相关插件就行 , 然后在主题文件中把katex改为true即可\n- 在阿里云购买了个产品然后拿到了备案申请号 , 开始备案 .\n\n## 2020-12-05\n\n- 把 about 和 评论系统配置一下\n\n## 2020-12-04\n\n- 想把girls页面用cdn加载 , 然而不会转json , js-yaml不会用 , 🙈 , 然后我用 c 语言自己写了一个\n- 白嫖 cdn 的时光开始了\n\n## 2020-12-02\n\n- 更换了主题 [Yun](https://yun.yunyoujun.cn/) \n- Thanks\n    - 非常感谢[云游君](https://www.yunyoujun.cn/) , 详细的文档和在群里的指导 . 请他喝了冰阔落 .\n    - \n</details>\n\n<details>\n    <summary>2020年10月~2020年11月</summary>\n\n# 建站\n## 2020-11-30\n\n- 使用公式块的渲染插件 mathjax ~~(怕我忘了)~~\n\n    参考资料 : https://blog.csdn.net/u014630987/article/details/78670258 ( 因为更换主题,重新更换了公式渲染插件 , 这个用于还原之前的设置)\n\n## 2020-10-31 新域名\n- 购买了域名 inzamz.top , 首年9元.\n\n## 2020-10-08 建站和Diaspora\n\n- 这几天就开始折腾各种有趣的东西 ,感觉让生活充实一点. ~~(想摸鱼就直说)~~ 迫于学业压力，期中考迫近，摸鱼就要结束了。\n\n<img src=\"https://p.130014.xyz/2020/10/28/4BF41291-A22D-4F66-BB7C-88181293B74D.jpg\" div align=\"center\" alt=\"当代大学生现状\" style=\"zoom:25%;\"  />    \n\n- Thanks\n    -  在 [思否](segmentfault.com) 上的 [博文](https://segmentfault.com/a/1190000017986794) 给了我很多帮助，让我迅速搭建起了这个Blog。\n    -  感谢他让我的 Chtholly 找到家。  ~~没有他的看板娘，我估计不会折腾这东西。~~ （我永远喜欢珂朵莉）\n    - 还有 Blog 主题的作者 [@LoeiFy](https://github.com/LoeiFy) 以及移植到 [Hexo](https://hexo.io/) 上的 [@Fechin Li](https://github.com/Fechin)\n\n</details>","updated":"2022-03-15T16:35:20.000Z","path":"about/README.html","comments":1,"layout":"page","_id":"ckv3j9uj2000263jn4dz3hx86","content":"<p>关于我想瞎折腾然后花一堆时间搭建博客这档事。<br>从小就有一个想法，搞一个自己的网站。然后就是在学 OI 时用的博客园，到了大学，我想自己搭一个了。所以，从今天起，在这里记录这个BLOG的点滴。<del>到我还有钱续费</del>。</p>\n<p align=\"right\"> - 写于樱岛麻衣生日  20201202 </p>\n\n<span id=\"more\"></span>\n\n<details open>\n    <summary>2020年12月</summary>\n\n<h2 id=\"2020-12-15\"><a href=\"#2020-12-15\" class=\"headerlink\" title=\"2020-12-15\"></a>2020-12-15</h2><ul>\n<li>配置了RSS <del>但是谁会订阅呢</del></li>\n<li>加了相册页面，可能会传点照片吧</li>\n</ul>\n<h2 id=\"2020-12-13\"><a href=\"#2020-12-13\" class=\"headerlink\" title=\"2020-12-13\"></a>2020-12-13</h2><ul>\n<li>申请了企业微信和腾讯企业邮 , 开始使用 <a href=\"mailto:&#109;&#101;&#64;&#x69;&#x6e;&#x7a;&#97;&#x6d;&#122;&#46;&#x74;&#111;&#112;\">&#109;&#101;&#64;&#x69;&#x6e;&#x7a;&#97;&#x6d;&#122;&#46;&#x74;&#111;&#112;</a> 作为邮箱地址</li>\n<li>使用A记录将inzamz.top重定向到 <a href=\"http://www.inzamz.top/\">www.inzamz.top</a> 解决了CNAME与MX冲突的问题</li>\n</ul>\n<h2 id=\"2020-12-10\"><a href=\"#2020-12-10\" class=\"headerlink\" title=\"2020-12-10\"></a>2020-12-10</h2><ul>\n<li>配置了公式渲染插件 , 只要安装相关插件就行 , 然后在主题文件中把katex改为true即可</li>\n<li>在阿里云购买了个产品然后拿到了备案申请号 , 开始备案 .</li>\n</ul>\n<h2 id=\"2020-12-05\"><a href=\"#2020-12-05\" class=\"headerlink\" title=\"2020-12-05\"></a>2020-12-05</h2><ul>\n<li>把 about 和 评论系统配置一下</li>\n</ul>\n<h2 id=\"2020-12-04\"><a href=\"#2020-12-04\" class=\"headerlink\" title=\"2020-12-04\"></a>2020-12-04</h2><ul>\n<li>想把girls页面用cdn加载 , 然而不会转json , js-yaml不会用 , 🙈 , 然后我用 c 语言自己写了一个</li>\n<li>白嫖 cdn 的时光开始了</li>\n</ul>\n<h2 id=\"2020-12-02\"><a href=\"#2020-12-02\" class=\"headerlink\" title=\"2020-12-02\"></a>2020-12-02</h2><ul>\n<li>更换了主题 <a href=\"https://yun.yunyoujun.cn/\">Yun</a> </li>\n<li>Thanks<ul>\n<li>非常感谢<a href=\"https://www.yunyoujun.cn/\">云游君</a> , 详细的文档和在群里的指导 . 请他喝了冰阔落 .</li>\n<li></details></li>\n</ul>\n</li>\n</ul>\n<details>\n    <summary>2020年10月~2020年11月</summary>\n\n<h1 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h1><h2 id=\"2020-11-30\"><a href=\"#2020-11-30\" class=\"headerlink\" title=\"2020-11-30\"></a>2020-11-30</h2><ul>\n<li><p>使用公式块的渲染插件 mathjax <del>(怕我忘了)</del></p>\n<p>  参考资料 : <a href=\"https://blog.csdn.net/u014630987/article/details/78670258\">https://blog.csdn.net/u014630987/article/details/78670258</a> ( 因为更换主题,重新更换了公式渲染插件 , 这个用于还原之前的设置)</p>\n</li>\n</ul>\n<h2 id=\"2020-10-31-新域名\"><a href=\"#2020-10-31-新域名\" class=\"headerlink\" title=\"2020-10-31 新域名\"></a>2020-10-31 新域名</h2><ul>\n<li>购买了域名 inzamz.top , 首年9元.</li>\n</ul>\n<h2 id=\"2020-10-08-建站和Diaspora\"><a href=\"#2020-10-08-建站和Diaspora\" class=\"headerlink\" title=\"2020-10-08 建站和Diaspora\"></a>2020-10-08 建站和Diaspora</h2><ul>\n<li>这几天就开始折腾各种有趣的东西 ,感觉让生活充实一点. <del>(想摸鱼就直说)</del> 迫于学业压力，期中考迫近，摸鱼就要结束了。</li>\n</ul>\n<img src=\"https://p.130014.xyz/2020/10/28/4BF41291-A22D-4F66-BB7C-88181293B74D.jpg\" div align=\"center\" alt=\"当代大学生现状\" style=\"zoom:25%;\"  / loading=\"lazy\">    \n\n<ul>\n<li>Thanks<ul>\n<li> 在 <a href=\"segmentfault.com\">思否</a> 上的 <a href=\"https://segmentfault.com/a/1190000017986794\">博文</a> 给了我很多帮助，让我迅速搭建起了这个Blog。</li>\n<li> 感谢他让我的 Chtholly 找到家。  <del>没有他的看板娘，我估计不会折腾这东西。</del> （我永远喜欢珂朵莉）</li>\n<li>还有 Blog 主题的作者 <a href=\"https://github.com/LoeiFy\">@LoeiFy</a> 以及移植到 <a href=\"https://hexo.io/\">Hexo</a> 上的 <a href=\"https://github.com/Fechin\">@Fechin Li</a></li>\n</ul>\n</li>\n</ul>\n</details>","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>关于我想瞎折腾然后花一堆时间搭建博客这档事。<br>从小就有一个想法，搞一个自己的网站。然后就是在学 OI 时用的博客园，到了大学，我想自己搭一个了。所以，从今天起，在这里记录这个BLOG的点滴。<del>到我还有钱续费</del>。</p>\n<p align=\"right\"> - 写于樱岛麻衣生日  20201202 </p>","more":"<details open>\n    <summary>2020年12月</summary>\n\n<h2 id=\"2020-12-15\"><a href=\"#2020-12-15\" class=\"headerlink\" title=\"2020-12-15\"></a>2020-12-15</h2><ul>\n<li>配置了RSS <del>但是谁会订阅呢</del></li>\n<li>加了相册页面，可能会传点照片吧</li>\n</ul>\n<h2 id=\"2020-12-13\"><a href=\"#2020-12-13\" class=\"headerlink\" title=\"2020-12-13\"></a>2020-12-13</h2><ul>\n<li>申请了企业微信和腾讯企业邮 , 开始使用 <a href=\"mailto:&#109;&#101;&#64;&#x69;&#x6e;&#x7a;&#97;&#x6d;&#122;&#46;&#x74;&#111;&#112;\">&#109;&#101;&#64;&#x69;&#x6e;&#x7a;&#97;&#x6d;&#122;&#46;&#x74;&#111;&#112;</a> 作为邮箱地址</li>\n<li>使用A记录将inzamz.top重定向到 <a href=\"http://www.inzamz.top/\">www.inzamz.top</a> 解决了CNAME与MX冲突的问题</li>\n</ul>\n<h2 id=\"2020-12-10\"><a href=\"#2020-12-10\" class=\"headerlink\" title=\"2020-12-10\"></a>2020-12-10</h2><ul>\n<li>配置了公式渲染插件 , 只要安装相关插件就行 , 然后在主题文件中把katex改为true即可</li>\n<li>在阿里云购买了个产品然后拿到了备案申请号 , 开始备案 .</li>\n</ul>\n<h2 id=\"2020-12-05\"><a href=\"#2020-12-05\" class=\"headerlink\" title=\"2020-12-05\"></a>2020-12-05</h2><ul>\n<li>把 about 和 评论系统配置一下</li>\n</ul>\n<h2 id=\"2020-12-04\"><a href=\"#2020-12-04\" class=\"headerlink\" title=\"2020-12-04\"></a>2020-12-04</h2><ul>\n<li>想把girls页面用cdn加载 , 然而不会转json , js-yaml不会用 , 🙈 , 然后我用 c 语言自己写了一个</li>\n<li>白嫖 cdn 的时光开始了</li>\n</ul>\n<h2 id=\"2020-12-02\"><a href=\"#2020-12-02\" class=\"headerlink\" title=\"2020-12-02\"></a>2020-12-02</h2><ul>\n<li>更换了主题 <a href=\"https://yun.yunyoujun.cn/\">Yun</a> </li>\n<li>Thanks<ul>\n<li>非常感谢<a href=\"https://www.yunyoujun.cn/\">云游君</a> , 详细的文档和在群里的指导 . 请他喝了冰阔落 .</li>\n<li></details></li>\n</ul>\n</li>\n</ul>\n<details>\n    <summary>2020年10月~2020年11月</summary>\n\n<h1 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h1><h2 id=\"2020-11-30\"><a href=\"#2020-11-30\" class=\"headerlink\" title=\"2020-11-30\"></a>2020-11-30</h2><ul>\n<li><p>使用公式块的渲染插件 mathjax <del>(怕我忘了)</del></p>\n<p>  参考资料 : <a href=\"https://blog.csdn.net/u014630987/article/details/78670258\">https://blog.csdn.net/u014630987/article/details/78670258</a> ( 因为更换主题,重新更换了公式渲染插件 , 这个用于还原之前的设置)</p>\n</li>\n</ul>\n<h2 id=\"2020-10-31-新域名\"><a href=\"#2020-10-31-新域名\" class=\"headerlink\" title=\"2020-10-31 新域名\"></a>2020-10-31 新域名</h2><ul>\n<li>购买了域名 inzamz.top , 首年9元.</li>\n</ul>\n<h2 id=\"2020-10-08-建站和Diaspora\"><a href=\"#2020-10-08-建站和Diaspora\" class=\"headerlink\" title=\"2020-10-08 建站和Diaspora\"></a>2020-10-08 建站和Diaspora</h2><ul>\n<li>这几天就开始折腾各种有趣的东西 ,感觉让生活充实一点. <del>(想摸鱼就直说)</del> 迫于学业压力，期中考迫近，摸鱼就要结束了。</li>\n</ul>\n<img src=\"https://p.130014.xyz/2020/10/28/4BF41291-A22D-4F66-BB7C-88181293B74D.jpg\" div align=\"center\" alt=\"当代大学生现状\" style=\"zoom:25%;\"  />    \n\n<ul>\n<li>Thanks<ul>\n<li> 在 <a href=\"segmentfault.com\">思否</a> 上的 <a href=\"https://segmentfault.com/a/1190000017986794\">博文</a> 给了我很多帮助，让我迅速搭建起了这个Blog。</li>\n<li> 感谢他让我的 Chtholly 找到家。  <del>没有他的看板娘，我估计不会折腾这东西。</del> （我永远喜欢珂朵莉）</li>\n<li>还有 Blog 主题的作者 <a href=\"https://github.com/LoeiFy\">@LoeiFy</a> 以及移植到 <a href=\"https://hexo.io/\">Hexo</a> 上的 <a href=\"https://github.com/Fechin\">@Fechin Li</a></li>\n</ul>\n</li>\n</ul>\n</details>"},{"title":"about","date":"2020-12-02T08:16:15.000Z","_content":"\n> 一位19岁刚踏入大学的软工大一生 , 喜欢折腾... 不断学习中\n>\n> 如果您是三次元的朋友 , 建议直接退出\n\n# About Me\n\n- 爱好 : ACG , 足球 , 电子竞技(专指LOL) , 写代码 .\n- 喜欢 : 跑步 , 看别人打游戏 ~~(因为自己菜)~~  , 可爱的女孩子 (包括桐子 彩加小天使 hanser双胞胎哥哥等~~伪女孩子~~) . \n- 职业倾向 : 算法工程师 , 数据分析师 \n- 梦想(乱想) : 作家 , 数学家 , 搞核物理 , 人民教师\n- 最近在玩 : [文明6](https://store.steampowered.com/app/289070/Sid_Meiers_Civilization_VI/) , [空洞骑士](https://store.steampowered.com/app/367520/Hollow_Knight/) \n- 最喜欢的队伍or队员 : \n    - 足球 : Neymar , Messi , FC Barcelona (排名分先后)\n    - LOL : The Shy , IG , Bin\n\n# How to find me ?\n\n大部分 ID 都会改成 InzamZ(有时没有后缀Z,只是姓而已) 的 , ID是我名字方言发音的谐音 , 总是希望能听到家乡话 . \n\n\n\n# 不管怎么努力都很菜的ACMer\n\n![MYCodeforces](https://img.shields.io/badge/Baekho_Railgun-Newbie%20%201144-D5CFCE.svg?longCache=true&style=for-the-badge&logo=Codeforces&link=https://codeforces.com/profile/Baekho_Railgun)\n\n![MyLuogu](https://luogu.vercel.app/practice?id=50097)","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-12-02 16:16:15\n---\n\n> 一位19岁刚踏入大学的软工大一生 , 喜欢折腾... 不断学习中\n>\n> 如果您是三次元的朋友 , 建议直接退出\n\n# About Me\n\n- 爱好 : ACG , 足球 , 电子竞技(专指LOL) , 写代码 .\n- 喜欢 : 跑步 , 看别人打游戏 ~~(因为自己菜)~~  , 可爱的女孩子 (包括桐子 彩加小天使 hanser双胞胎哥哥等~~伪女孩子~~) . \n- 职业倾向 : 算法工程师 , 数据分析师 \n- 梦想(乱想) : 作家 , 数学家 , 搞核物理 , 人民教师\n- 最近在玩 : [文明6](https://store.steampowered.com/app/289070/Sid_Meiers_Civilization_VI/) , [空洞骑士](https://store.steampowered.com/app/367520/Hollow_Knight/) \n- 最喜欢的队伍or队员 : \n    - 足球 : Neymar , Messi , FC Barcelona (排名分先后)\n    - LOL : The Shy , IG , Bin\n\n# How to find me ?\n\n大部分 ID 都会改成 InzamZ(有时没有后缀Z,只是姓而已) 的 , ID是我名字方言发音的谐音 , 总是希望能听到家乡话 . \n\n\n\n# 不管怎么努力都很菜的ACMer\n\n![MYCodeforces](https://img.shields.io/badge/Baekho_Railgun-Newbie%20%201144-D5CFCE.svg?longCache=true&style=for-the-badge&logo=Codeforces&link=https://codeforces.com/profile/Baekho_Railgun)\n\n![MyLuogu](https://luogu.vercel.app/practice?id=50097)","updated":"2021-11-16T20:43:00.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckv3j9uj5000663jnbwr283pr","content":"<blockquote>\n<p>一位19岁刚踏入大学的软工大一生 , 喜欢折腾… 不断学习中</p>\n<p>如果您是三次元的朋友 , 建议直接退出</p>\n</blockquote>\n<h1 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h1><ul>\n<li>爱好 : ACG , 足球 , 电子竞技(专指LOL) , 写代码 .</li>\n<li>喜欢 : 跑步 , 看别人打游戏 <del>(因为自己菜)</del>  , 可爱的女孩子 (包括桐子 彩加小天使 hanser双胞胎哥哥等<del>伪女孩子</del>) . </li>\n<li>职业倾向 : 算法工程师 , 数据分析师 </li>\n<li>梦想(乱想) : 作家 , 数学家 , 搞核物理 , 人民教师</li>\n<li>最近在玩 : <a href=\"https://store.steampowered.com/app/289070/Sid_Meiers_Civilization_VI/\">文明6</a> , <a href=\"https://store.steampowered.com/app/367520/Hollow_Knight/\">空洞骑士</a> </li>\n<li>最喜欢的队伍or队员 : <ul>\n<li>足球 : Neymar , Messi , FC Barcelona (排名分先后)</li>\n<li>LOL : The Shy , IG , Bin</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"How-to-find-me\"><a href=\"#How-to-find-me\" class=\"headerlink\" title=\"How to find me ?\"></a>How to find me ?</h1><p>大部分 ID 都会改成 InzamZ(有时没有后缀Z,只是姓而已) 的 , ID是我名字方言发音的谐音 , 总是希望能听到家乡话 . </p>\n<h1 id=\"不管怎么努力都很菜的ACMer\"><a href=\"#不管怎么努力都很菜的ACMer\" class=\"headerlink\" title=\"不管怎么努力都很菜的ACMer\"></a>不管怎么努力都很菜的ACMer</h1><p><img src=\"https://img.shields.io/badge/Baekho_Railgun-Newbie%20%201144-D5CFCE.svg?longCache=true&style=for-the-badge&logo=Codeforces&link=https://codeforces.com/profile/Baekho_Railgun\" alt=\"MYCodeforces\" loading=\"lazy\"></p>\n<p><img src=\"https://luogu.vercel.app/practice?id=50097\" alt=\"MyLuogu\" loading=\"lazy\"></p>\n","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":"<blockquote>\n<p>一位19岁刚踏入大学的软工大一生 , 喜欢折腾… 不断学习中</p>\n<p>如果您是三次元的朋友 , 建议直接退出</p>\n</blockquote>\n<h1 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h1><ul>\n<li>爱好 : ACG , 足球 , 电子竞技(专指LOL) , 写代码 .</li>\n<li>喜欢 : 跑步 , 看别人打游戏 <del>(因为自己菜)</del>  , 可爱的女孩子 (包括桐子 彩加小天使 hanser双胞胎哥哥等<del>伪女孩子</del>) . </li>\n<li>职业倾向 : 算法工程师 , 数据分析师 </li>\n<li>梦想(乱想) : 作家 , 数学家 , 搞核物理 , 人民教师</li>\n<li>最近在玩 : <a href=\"https://store.steampowered.com/app/289070/Sid_Meiers_Civilization_VI/\">文明6</a> , <a href=\"https://store.steampowered.com/app/367520/Hollow_Knight/\">空洞骑士</a> </li>\n<li>最喜欢的队伍or队员 : <ul>\n<li>足球 : Neymar , Messi , FC Barcelona (排名分先后)</li>\n<li>LOL : The Shy , IG , Bin</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"How-to-find-me\"><a href=\"#How-to-find-me\" class=\"headerlink\" title=\"How to find me ?\"></a>How to find me ?</h1><p>大部分 ID 都会改成 InzamZ(有时没有后缀Z,只是姓而已) 的 , ID是我名字方言发音的谐音 , 总是希望能听到家乡话 . </p>\n<h1 id=\"不管怎么努力都很菜的ACMer\"><a href=\"#不管怎么努力都很菜的ACMer\" class=\"headerlink\" title=\"不管怎么努力都很菜的ACMer\"></a>不管怎么努力都很菜的ACMer</h1><p><img src=\"https://img.shields.io/badge/Baekho_Railgun-Newbie%20%201144-D5CFCE.svg?longCache=true&style=for-the-badge&logo=Codeforces&link=https://codeforces.com/profile/Baekho_Railgun\" alt=\"MYCodeforces\"></p>\n<p><img src=\"https://luogu.vercel.app/practice?id=50097\" alt=\"MyLuogu\"></p>\n"},{"title":"Welcome Home! Chtholly!","date":"2020-10-08T04:00:00.000Z","updated":"2021-01-23T14:33:42.000Z","categories":["about"],"tags":null,"_content":"\n关于我想瞎折腾然后花一堆时间搭建博客这档事。\n从小就有一个想法，搞一个自己的网站。然后就是在学 OI 时用的博客园，到了大学，我想自己搭一个了。所以，从今天起，在这里记录这个BLOG的点滴。~~到我还有钱续费~~。\n\n<p align=\"right\"> - 写于樱岛麻衣生日  20201202 </p>\n\n<!-- more -->\n\n<details open>\n    <summary>2020年12月</summary>\n## 2020-12-18\n\n- 备案号下来了 ! !\n- 加入又拍云联盟 , 领取了代金券 . \n- 配置了cdn\n\n## 2020-12-15\n\n- 配置了RSS ~~但是谁会订阅呢~~\n- 加了相册页面，可能会传点照片吧\n\n## 2020-12-13\n\n- 申请了企业微信和腾讯企业邮 , 开始使用 me@inzamz.top 作为邮箱地址\n- 使用A记录将inzamz.top重定向到 www.inzamz.top 解决了CNAME与MX冲突的问题\n\n## 2020-12-10\n- 配置了公式渲染插件 , 只要安装相关插件就行 , 然后在主题文件中把katex改为true即可\n- 在阿里云购买了个产品然后拿到了备案申请号 , 开始备案 .\n\n## 2020-12-05\n\n- 把 about 和 评论系统配置一下\n\n## 2020-12-04\n\n- 想把girls页面用cdn加载 , 然而不会转json , js-yaml不会用 , 🙈 , 然后我用 c 语言自己写了一个\n- 白嫖 cdn 的时光开始了\n\n## 2020-12-02\n\n- 更换了主题 [Yun](https://yun.yunyoujun.cn/) \n- Thanks\n    - 非常感谢[云游君](https://www.yunyoujun.cn/) , 详细的文档和在群里的指导 . 请他喝了冰阔落 .\n\n</details>\n\n<details>\n    <summary>2020年10月~2020年11月</summary>\n## 2020-11-30\n\n- 使用公式块的渲染插件 mathjax ~~(怕我忘了)~~\n\n    参考资料 : https://blog.csdn.net/u014630987/article/details/78670258 ( 因为更换主题,重新更换了公式渲染插件 , 这个用于还原之前的设置)\n\n## 2020-10-31 新域名\n\n- 购买了域名 inzamz.top , 首年9元.\n\n## 2020-10-08 建站和Diaspora\n\n- 这几天就开始折腾各种有趣的东西 ,感觉让生活充实一点. ~~(想摸鱼就直说)~~ 迫于学业压力，期中考迫近，摸鱼就要结束了。\n\n<img src=\"https://p.130014.xyz/2020/10/28/4BF41291-A22D-4F66-BB7C-88181293B74D.jpg\" div align=\"center\" alt=\"当代大学生现状\" style=\"zoom:25%;\"  />    \n\n- Thanks\n    -  感谢 [鱼先生](https://segmentfault.com/u/yuxiansheng) 在 [思否](segmentfault.com) 上的 [博文](https://segmentfault.com/a/1190000017986794) 给了我很多帮助，让我迅速搭建起了这个Blog。\n    -  感谢他让我的 Chtholly 找到家。  ~~没有他的看板娘，我估计不会折腾这东西。~~ （我永远喜欢珂朵莉）\n    - 还有 Blog 主题的作者 [@LoeiFy](https://github.com/LoeiFy) 以及移植到 [Hexo](https://hexo.io/) 上的 [@Fechin Li](https://github.com/Fechin)\n\n</details>","source":"about/site.md","raw":"---\ntitle: Welcome Home! Chtholly!\ndate: 2020-10-08 12:00:00\nupdated: 2021-01-23 22:33:42\ncategories: \n\t- about\ntags: \n---\n\n关于我想瞎折腾然后花一堆时间搭建博客这档事。\n从小就有一个想法，搞一个自己的网站。然后就是在学 OI 时用的博客园，到了大学，我想自己搭一个了。所以，从今天起，在这里记录这个BLOG的点滴。~~到我还有钱续费~~。\n\n<p align=\"right\"> - 写于樱岛麻衣生日  20201202 </p>\n\n<!-- more -->\n\n<details open>\n    <summary>2020年12月</summary>\n## 2020-12-18\n\n- 备案号下来了 ! !\n- 加入又拍云联盟 , 领取了代金券 . \n- 配置了cdn\n\n## 2020-12-15\n\n- 配置了RSS ~~但是谁会订阅呢~~\n- 加了相册页面，可能会传点照片吧\n\n## 2020-12-13\n\n- 申请了企业微信和腾讯企业邮 , 开始使用 me@inzamz.top 作为邮箱地址\n- 使用A记录将inzamz.top重定向到 www.inzamz.top 解决了CNAME与MX冲突的问题\n\n## 2020-12-10\n- 配置了公式渲染插件 , 只要安装相关插件就行 , 然后在主题文件中把katex改为true即可\n- 在阿里云购买了个产品然后拿到了备案申请号 , 开始备案 .\n\n## 2020-12-05\n\n- 把 about 和 评论系统配置一下\n\n## 2020-12-04\n\n- 想把girls页面用cdn加载 , 然而不会转json , js-yaml不会用 , 🙈 , 然后我用 c 语言自己写了一个\n- 白嫖 cdn 的时光开始了\n\n## 2020-12-02\n\n- 更换了主题 [Yun](https://yun.yunyoujun.cn/) \n- Thanks\n    - 非常感谢[云游君](https://www.yunyoujun.cn/) , 详细的文档和在群里的指导 . 请他喝了冰阔落 .\n\n</details>\n\n<details>\n    <summary>2020年10月~2020年11月</summary>\n## 2020-11-30\n\n- 使用公式块的渲染插件 mathjax ~~(怕我忘了)~~\n\n    参考资料 : https://blog.csdn.net/u014630987/article/details/78670258 ( 因为更换主题,重新更换了公式渲染插件 , 这个用于还原之前的设置)\n\n## 2020-10-31 新域名\n\n- 购买了域名 inzamz.top , 首年9元.\n\n## 2020-10-08 建站和Diaspora\n\n- 这几天就开始折腾各种有趣的东西 ,感觉让生活充实一点. ~~(想摸鱼就直说)~~ 迫于学业压力，期中考迫近，摸鱼就要结束了。\n\n<img src=\"https://p.130014.xyz/2020/10/28/4BF41291-A22D-4F66-BB7C-88181293B74D.jpg\" div align=\"center\" alt=\"当代大学生现状\" style=\"zoom:25%;\"  />    \n\n- Thanks\n    -  感谢 [鱼先生](https://segmentfault.com/u/yuxiansheng) 在 [思否](segmentfault.com) 上的 [博文](https://segmentfault.com/a/1190000017986794) 给了我很多帮助，让我迅速搭建起了这个Blog。\n    -  感谢他让我的 Chtholly 找到家。  ~~没有他的看板娘，我估计不会折腾这东西。~~ （我永远喜欢珂朵莉）\n    - 还有 Blog 主题的作者 [@LoeiFy](https://github.com/LoeiFy) 以及移植到 [Hexo](https://hexo.io/) 上的 [@Fechin Li](https://github.com/Fechin)\n\n</details>","path":"about/site.html","comments":1,"layout":"page","_id":"ckv3j9uj6000863jnc2d91q6u","content":"<p>关于我想瞎折腾然后花一堆时间搭建博客这档事。<br>从小就有一个想法，搞一个自己的网站。然后就是在学 OI 时用的博客园，到了大学，我想自己搭一个了。所以，从今天起，在这里记录这个BLOG的点滴。<del>到我还有钱续费</del>。</p>\n<p align=\"right\"> - 写于樱岛麻衣生日  20201202 </p>\n\n<span id=\"more\"></span>\n\n<details open>\n    <summary>2020年12月</summary>\n## 2020-12-18\n\n<ul>\n<li>备案号下来了 ! !</li>\n<li>加入又拍云联盟 , 领取了代金券 . </li>\n<li>配置了cdn</li>\n</ul>\n<h2 id=\"2020-12-15\"><a href=\"#2020-12-15\" class=\"headerlink\" title=\"2020-12-15\"></a>2020-12-15</h2><ul>\n<li>配置了RSS <del>但是谁会订阅呢</del></li>\n<li>加了相册页面，可能会传点照片吧</li>\n</ul>\n<h2 id=\"2020-12-13\"><a href=\"#2020-12-13\" class=\"headerlink\" title=\"2020-12-13\"></a>2020-12-13</h2><ul>\n<li>申请了企业微信和腾讯企业邮 , 开始使用 <a href=\"mailto:&#x6d;&#101;&#x40;&#105;&#x6e;&#x7a;&#x61;&#x6d;&#x7a;&#46;&#x74;&#x6f;&#x70;\">&#x6d;&#101;&#x40;&#105;&#x6e;&#x7a;&#x61;&#x6d;&#x7a;&#46;&#x74;&#x6f;&#x70;</a> 作为邮箱地址</li>\n<li>使用A记录将inzamz.top重定向到 <a href=\"http://www.inzamz.top/\">www.inzamz.top</a> 解决了CNAME与MX冲突的问题</li>\n</ul>\n<h2 id=\"2020-12-10\"><a href=\"#2020-12-10\" class=\"headerlink\" title=\"2020-12-10\"></a>2020-12-10</h2><ul>\n<li>配置了公式渲染插件 , 只要安装相关插件就行 , 然后在主题文件中把katex改为true即可</li>\n<li>在阿里云购买了个产品然后拿到了备案申请号 , 开始备案 .</li>\n</ul>\n<h2 id=\"2020-12-05\"><a href=\"#2020-12-05\" class=\"headerlink\" title=\"2020-12-05\"></a>2020-12-05</h2><ul>\n<li>把 about 和 评论系统配置一下</li>\n</ul>\n<h2 id=\"2020-12-04\"><a href=\"#2020-12-04\" class=\"headerlink\" title=\"2020-12-04\"></a>2020-12-04</h2><ul>\n<li>想把girls页面用cdn加载 , 然而不会转json , js-yaml不会用 , 🙈 , 然后我用 c 语言自己写了一个</li>\n<li>白嫖 cdn 的时光开始了</li>\n</ul>\n<h2 id=\"2020-12-02\"><a href=\"#2020-12-02\" class=\"headerlink\" title=\"2020-12-02\"></a>2020-12-02</h2><ul>\n<li>更换了主题 <a href=\"https://yun.yunyoujun.cn/\">Yun</a> </li>\n<li>Thanks<ul>\n<li>非常感谢<a href=\"https://www.yunyoujun.cn/\">云游君</a> , 详细的文档和在群里的指导 . 请他喝了冰阔落 .</li>\n</ul>\n</li>\n</ul>\n</details>\n\n<details>\n    <summary>2020年10月~2020年11月</summary>\n## 2020-11-30\n\n<ul>\n<li><p>使用公式块的渲染插件 mathjax <del>(怕我忘了)</del></p>\n<p>  参考资料 : <a href=\"https://blog.csdn.net/u014630987/article/details/78670258\">https://blog.csdn.net/u014630987/article/details/78670258</a> ( 因为更换主题,重新更换了公式渲染插件 , 这个用于还原之前的设置)</p>\n</li>\n</ul>\n<h2 id=\"2020-10-31-新域名\"><a href=\"#2020-10-31-新域名\" class=\"headerlink\" title=\"2020-10-31 新域名\"></a>2020-10-31 新域名</h2><ul>\n<li>购买了域名 inzamz.top , 首年9元.</li>\n</ul>\n<h2 id=\"2020-10-08-建站和Diaspora\"><a href=\"#2020-10-08-建站和Diaspora\" class=\"headerlink\" title=\"2020-10-08 建站和Diaspora\"></a>2020-10-08 建站和Diaspora</h2><ul>\n<li>这几天就开始折腾各种有趣的东西 ,感觉让生活充实一点. <del>(想摸鱼就直说)</del> 迫于学业压力，期中考迫近，摸鱼就要结束了。</li>\n</ul>\n<img src=\"https://p.130014.xyz/2020/10/28/4BF41291-A22D-4F66-BB7C-88181293B74D.jpg\" div align=\"center\" alt=\"当代大学生现状\" style=\"zoom:25%;\"  / loading=\"lazy\">    \n\n<ul>\n<li>Thanks<ul>\n<li> 感谢 <a href=\"https://segmentfault.com/u/yuxiansheng\">鱼先生</a> 在 <a href=\"segmentfault.com\">思否</a> 上的 <a href=\"https://segmentfault.com/a/1190000017986794\">博文</a> 给了我很多帮助，让我迅速搭建起了这个Blog。</li>\n<li> 感谢他让我的 Chtholly 找到家。  <del>没有他的看板娘，我估计不会折腾这东西。</del> （我永远喜欢珂朵莉）</li>\n<li>还有 Blog 主题的作者 <a href=\"https://github.com/LoeiFy\">@LoeiFy</a> 以及移植到 <a href=\"https://hexo.io/\">Hexo</a> 上的 <a href=\"https://github.com/Fechin\">@Fechin Li</a></li>\n</ul>\n</li>\n</ul>\n</details>","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>关于我想瞎折腾然后花一堆时间搭建博客这档事。<br>从小就有一个想法，搞一个自己的网站。然后就是在学 OI 时用的博客园，到了大学，我想自己搭一个了。所以，从今天起，在这里记录这个BLOG的点滴。<del>到我还有钱续费</del>。</p>\n<p align=\"right\"> - 写于樱岛麻衣生日  20201202 </p>","more":"<details open>\n    <summary>2020年12月</summary>\n## 2020-12-18\n\n<ul>\n<li>备案号下来了 ! !</li>\n<li>加入又拍云联盟 , 领取了代金券 . </li>\n<li>配置了cdn</li>\n</ul>\n<h2 id=\"2020-12-15\"><a href=\"#2020-12-15\" class=\"headerlink\" title=\"2020-12-15\"></a>2020-12-15</h2><ul>\n<li>配置了RSS <del>但是谁会订阅呢</del></li>\n<li>加了相册页面，可能会传点照片吧</li>\n</ul>\n<h2 id=\"2020-12-13\"><a href=\"#2020-12-13\" class=\"headerlink\" title=\"2020-12-13\"></a>2020-12-13</h2><ul>\n<li>申请了企业微信和腾讯企业邮 , 开始使用 <a href=\"mailto:&#x6d;&#101;&#x40;&#105;&#x6e;&#x7a;&#x61;&#x6d;&#x7a;&#46;&#x74;&#x6f;&#x70;\">&#x6d;&#101;&#x40;&#105;&#x6e;&#x7a;&#x61;&#x6d;&#x7a;&#46;&#x74;&#x6f;&#x70;</a> 作为邮箱地址</li>\n<li>使用A记录将inzamz.top重定向到 <a href=\"http://www.inzamz.top/\">www.inzamz.top</a> 解决了CNAME与MX冲突的问题</li>\n</ul>\n<h2 id=\"2020-12-10\"><a href=\"#2020-12-10\" class=\"headerlink\" title=\"2020-12-10\"></a>2020-12-10</h2><ul>\n<li>配置了公式渲染插件 , 只要安装相关插件就行 , 然后在主题文件中把katex改为true即可</li>\n<li>在阿里云购买了个产品然后拿到了备案申请号 , 开始备案 .</li>\n</ul>\n<h2 id=\"2020-12-05\"><a href=\"#2020-12-05\" class=\"headerlink\" title=\"2020-12-05\"></a>2020-12-05</h2><ul>\n<li>把 about 和 评论系统配置一下</li>\n</ul>\n<h2 id=\"2020-12-04\"><a href=\"#2020-12-04\" class=\"headerlink\" title=\"2020-12-04\"></a>2020-12-04</h2><ul>\n<li>想把girls页面用cdn加载 , 然而不会转json , js-yaml不会用 , 🙈 , 然后我用 c 语言自己写了一个</li>\n<li>白嫖 cdn 的时光开始了</li>\n</ul>\n<h2 id=\"2020-12-02\"><a href=\"#2020-12-02\" class=\"headerlink\" title=\"2020-12-02\"></a>2020-12-02</h2><ul>\n<li>更换了主题 <a href=\"https://yun.yunyoujun.cn/\">Yun</a> </li>\n<li>Thanks<ul>\n<li>非常感谢<a href=\"https://www.yunyoujun.cn/\">云游君</a> , 详细的文档和在群里的指导 . 请他喝了冰阔落 .</li>\n</ul>\n</li>\n</ul>\n</details>\n\n<details>\n    <summary>2020年10月~2020年11月</summary>\n## 2020-11-30\n\n<ul>\n<li><p>使用公式块的渲染插件 mathjax <del>(怕我忘了)</del></p>\n<p>  参考资料 : <a href=\"https://blog.csdn.net/u014630987/article/details/78670258\">https://blog.csdn.net/u014630987/article/details/78670258</a> ( 因为更换主题,重新更换了公式渲染插件 , 这个用于还原之前的设置)</p>\n</li>\n</ul>\n<h2 id=\"2020-10-31-新域名\"><a href=\"#2020-10-31-新域名\" class=\"headerlink\" title=\"2020-10-31 新域名\"></a>2020-10-31 新域名</h2><ul>\n<li>购买了域名 inzamz.top , 首年9元.</li>\n</ul>\n<h2 id=\"2020-10-08-建站和Diaspora\"><a href=\"#2020-10-08-建站和Diaspora\" class=\"headerlink\" title=\"2020-10-08 建站和Diaspora\"></a>2020-10-08 建站和Diaspora</h2><ul>\n<li>这几天就开始折腾各种有趣的东西 ,感觉让生活充实一点. <del>(想摸鱼就直说)</del> 迫于学业压力，期中考迫近，摸鱼就要结束了。</li>\n</ul>\n<img src=\"https://p.130014.xyz/2020/10/28/4BF41291-A22D-4F66-BB7C-88181293B74D.jpg\" div align=\"center\" alt=\"当代大学生现状\" style=\"zoom:25%;\"  />    \n\n<ul>\n<li>Thanks<ul>\n<li> 感谢 <a href=\"https://segmentfault.com/u/yuxiansheng\">鱼先生</a> 在 <a href=\"segmentfault.com\">思否</a> 上的 <a href=\"https://segmentfault.com/a/1190000017986794\">博文</a> 给了我很多帮助，让我迅速搭建起了这个Blog。</li>\n<li> 感谢他让我的 Chtholly 找到家。  <del>没有他的看板娘，我估计不会折腾这东西。</del> （我永远喜欢珂朵莉）</li>\n<li>还有 Blog 主题的作者 <a href=\"https://github.com/LoeiFy\">@LoeiFy</a> 以及移植到 <a href=\"https://hexo.io/\">Hexo</a> 上的 <a href=\"https://github.com/Fechin\">@Fechin Li</a></li>\n</ul>\n</li>\n</ul>\n</details>"},{"title":"UESTC","date":"2020-12-14T08:27:24.000Z","layout":"gallery","password":"test","photos":[{"caption":"早八","src":"https://cdn.jsdelivr.net/gh/InzamZ/albums@main/UESTC/2020121401.jpg","desc":"秋的银杏,早八的我"}],"_content":"","source":"albums/2020autumn.md","raw":"---\ntitle: UESTC\ndate: 2020-12-14 16:27:24\nlayout: gallery\npassword: test\nphotos:\n  - caption: 早八\n    src: https://cdn.jsdelivr.net/gh/InzamZ/albums@main/UESTC/2020121401.jpg\n    desc: 秋的银杏,早八的我\n---","updated":"2022-01-14T02:29:12.000Z","path":"albums/2020autumn.html","comments":1,"_id":"ckv3j9uj7000a63jn314o1bmr","content":"","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":""},{"type":"albums","albums":[{"caption":"UESTC","url":"/albums/2020autumn.html","cover":"https://cdn.jsdelivr.net/gh/InzamZ/albums@main/UESTC/cover.jpg","desc":"关于我在泥点逐渐秃头这档事"}],"_content":"","source":"albums/index.md","raw":"---\ntype: albums\nalbums:\n  - caption: UESTC\n    url: /albums/2020autumn.html\n    cover: https://cdn.jsdelivr.net/gh/InzamZ/albums@main/UESTC/cover.jpg\n    desc: 关于我在泥点逐渐秃头这档事\n---\n","date":"2021-10-22T13:25:05.344Z","updated":"2022-01-14T03:28:00.000Z","path":"albums/index.html","title":"","comments":1,"layout":"page","_id":"ckv3j9uj9000f63jn0ucx9ugj","content":"","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":""},{"date":"2020-12-02T08:14:57.000Z","comments":0,"type":"categories","_content":"","source":"categories/index.md","raw":"---\ndate: 2020-12-02 16:14:57\ncomments: false\ntype: categories\n---\n","updated":"2023-03-02T00:15:30.000Z","path":"categories/index.html","title":"","layout":"page","_id":"ckv3j9uja000h63jn92rtecmf","content":"","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":""},{"layout":"girls","title":"可爱的女孩子","banner":"<span title=\"大家都是我的天使！\">小孩做选择 , 大人全都要 , 老人知道对身体不好 </span>","girls":"https://img.inzamz.top/girls/wives/wives.json","random":true,"_content":"","source":"girls/index.md","raw":"---\nlayout: girls\ntitle: 可爱的女孩子\nbanner: <span title=\"大家都是我的天使！\">小孩做选择 , 大人全都要 , 老人知道对身体不好 </span>\ngirls: https://img.inzamz.top/girls/wives/wives.json\nrandom: true\n---","date":"2021-10-22T13:25:05.344Z","updated":"2021-09-18T00:16:08.000Z","path":"girls/index.html","comments":1,"_id":"ckv3j9ujc000m63jn0lya1ioy","content":"","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":""},{"layout":"links","title":"我的小伙伴们","date":"2020-12-13T03:57:32.000Z","keywords":"链接","description":"云游的小伙伴们","comments":1,"links":[{"url":"https://yunyoujun.cn","avatar":"https://cdn.jsdelivr.net/gh/YunYouJun/yunyoujun.github.io/images/avatar.jpg","name":"云游君","blog":"云游君的小站","desc":"All at sea.","color":"#0078e7","email":null},{"url":"https://www.ziyaodan.top","avatar":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/links/ziyaodan.jpg","name":"Yaodan Zi","blog":"扶摇的闲话小站","color":"#FF88FF","email":"hurricane.zyd.0723@gmail.com"}],"placeholder":"还没想好说些什么","tip":"友链加载中～如失败请刷新重试～","_content":"","source":"links/index.md","raw":"---\nlayout: links\ntitle: 我的小伙伴们\ndate: 2020-12-13 11:57:32\nkeywords: 链接\ndescription: 云游的小伙伴们\ncomments: true\nlinks:\n  - url: https://yunyoujun.cn\n    avatar: https://cdn.jsdelivr.net/gh/YunYouJun/yunyoujun.github.io/images/avatar.jpg\n    name: 云游君\n    blog: 云游君的小站\n    desc: All at sea.\n    color: \"#0078e7\" # 代表色\n    email: # 非必须\n  - url: https://www.ziyaodan.top\n    avatar: https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/links/ziyaodan.jpg\n    name: Yaodan Zi\n    blog: 扶摇的闲话小站\n    # desc: All at sea.\n    color: \"#FF88FF\" # 代表色\n    email: hurricane.zyd.0723@gmail.com\nplaceholder: 还没想好说些什么 # 默认对友链的描述\ntip: 友链加载中～如失败请刷新重试～\n---\n","updated":"2022-01-13T21:20:32.000Z","path":"links/index.html","_id":"ckv3j9ujc000o63jnf827fug5","content":"","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":""},{"date":"2020-12-02T08:12:41.000Z","comments":0,"type":"tags","_content":"","source":"tags/index.md","raw":"---\ndate: 2020-12-02 16:12:41\ncomments: false\ntype: tags \n---\n","updated":"2023-03-02T00:13:50.000Z","path":"tags/index.html","title":"","layout":"page","_id":"ckv3j9uje000t63jn2xyj52wg","content":"","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":""}],"Post":[{"title":"BaiduUrls","date":"2020-12-23T15:07:51.000Z","_content":"\n基于 hexo 的博客比较麻烦 , 百度无法自动收录 , 所以需要自己操作 . 记录一下到时方便查阅 , 参考自博文 https://blog.csdn.net/weixin_43662543/article/details/104647173\n\n<!-- more -->\n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/BaiduUrls.md","raw":"---\ntitle: BaiduUrls\ndate: 2020-12-23 23:07:51\ntags:\n\t- 博客\ncategories:\n\t- 博客相关\n---\n\n基于 hexo 的博客比较麻烦 , 百度无法自动收录 , 所以需要自己操作 . 记录一下到时方便查阅 , 参考自博文 https://blog.csdn.net/weixin_43662543/article/details/104647173\n\n<!-- more -->\n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"BaiduUrls","published":1,"updated":"2021-06-26T15:37:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uiz000163jn5q5977ur","content":"<p>基于 hexo 的博客比较麻烦 , 百度无法自动收录 , 所以需要自己操作 . 记录一下到时方便查阅 , 参考自博文 <a href=\"https://blog.csdn.net/weixin_43662543/article/details/104647173\">https://blog.csdn.net/weixin_43662543/article/details/104647173</a></p>\n<span id=\"more\"></span>\n\n<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>基于 hexo 的博客比较麻烦 , 百度无法自动收录 , 所以需要自己操作 . 记录一下到时方便查阅 , 参考自博文 <a href=\"https://blog.csdn.net/weixin_43662543/article/details/104647173\">https://blog.csdn.net/weixin_43662543/article/details/104647173</a></p>","more":"<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"自定义域名邮箱","date":"2020-12-13T13:01:21.000Z","updated":"2020-12-13T13:01:21.000Z","_content":"以前用的最多的就是qq邮箱了 , 但是毕竟不是很正式 ~~没有逼格~~ , 正好因为搭建博客购买了一个域名 , 就干脆申请一个 . 就写一点自己遇到的问题吧.\n<!-- more -->\n\n## 注册域名\n我是在万网注册的 , cn , xyz 或者top域名都挺便宜的 .因为我使用的是top域名 , 以下均以domain.top为例 , 自己修改成对应域名就好了 .\n\n## CNAME记录与MX记录冲突\n因为我是把Apex域 (就是domain.top这种裸域名) 作为博客域名 , 所以会发生冲突 .如果你只有把 www.domain.top 作为博客域名(在你购买域名的网站 , 点击控制台 , 检查是否有主机名称为@的CNAME记录 , 有就是有把Apex域作为博客域名) , 直接跳到[注册部分](https://www.inzamz.top/2020/12/13/exmail/#%E6%B3%A8%E5%86%8C%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1).\n我参考了云游君的做法 [使用 CDN 加速你的 GitHub Pages 网站](https://www.yunyoujun.cn/note/use-cdn-speed-up-site/#CNAME-%E4%B8%8E-MX-%E8%AE%B0%E5%BD%95%E5%86%B2%E7%AA%81%E5%AF%BC%E8%87%B4%E9%82%AE%E4%BB%B6%E4%B8%A2%E5%A4%B1) ,把 domain.top 重定向到 www.domain.top .\n\n进入设置https://github.com/user/user.github.io/settingsGitHub 在GitHub Pages中将Custom domain设置为 www.domain.top 或者 blog.domain.top .打开域名控制台(在你购买域名的网站) , 删除主机名称 @ 的CNAME记录 , 添加与前面对应的主机记录. \n\n还要记得将本地source文件夹的CNAME文件更改为对应域名 , 部署 .\n\n我们还想访问 domain.top 时自动跳转到 www.domain.top 因此需要设置 A 记录 , [官方教程](https://docs.github.com/cn/free-pro-team@latest/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site) .\n\n打开域名控制台 , 加入四条A记录 , 主机记录 @ , 记录值填写下面四项 .\n\n```\n185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153\n```\n\n## 注册域名邮箱\n\n我使用的是腾讯企业邮 , 直接登陆 [官网](https://exmail.qq.com/) 右上角开通基础版 , 一路按流程注册就好 . 结束后是腾讯提供的试用域名 , 我是在网页上方有提示更改域名 , 你也可以点击我的企业 -> 域名管理 中添加域名. 需要在域名控制台中添加两条MX记录 , 按照教程操作就好了 . \n\n## 结尾\n\n个人域名就是可以给人印象深刻,记起来简单 , 主要是逼格高 . \n\n---\n\n\n\n<!-- Q.E.D. -->","source":"_posts/Exmail.md","raw":"---\ntitle: 自定义域名邮箱\ndate: 2020-12-13 21:01:21\nupdated: 2020-12-13 21:01:21\ntags:\n\t- 域名邮箱\n\t- Github Pages\ncategories:\n\t- 各种好用的工具\n---\n以前用的最多的就是qq邮箱了 , 但是毕竟不是很正式 ~~没有逼格~~ , 正好因为搭建博客购买了一个域名 , 就干脆申请一个 . 就写一点自己遇到的问题吧.\n<!-- more -->\n\n## 注册域名\n我是在万网注册的 , cn , xyz 或者top域名都挺便宜的 .因为我使用的是top域名 , 以下均以domain.top为例 , 自己修改成对应域名就好了 .\n\n## CNAME记录与MX记录冲突\n因为我是把Apex域 (就是domain.top这种裸域名) 作为博客域名 , 所以会发生冲突 .如果你只有把 www.domain.top 作为博客域名(在你购买域名的网站 , 点击控制台 , 检查是否有主机名称为@的CNAME记录 , 有就是有把Apex域作为博客域名) , 直接跳到[注册部分](https://www.inzamz.top/2020/12/13/exmail/#%E6%B3%A8%E5%86%8C%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1).\n我参考了云游君的做法 [使用 CDN 加速你的 GitHub Pages 网站](https://www.yunyoujun.cn/note/use-cdn-speed-up-site/#CNAME-%E4%B8%8E-MX-%E8%AE%B0%E5%BD%95%E5%86%B2%E7%AA%81%E5%AF%BC%E8%87%B4%E9%82%AE%E4%BB%B6%E4%B8%A2%E5%A4%B1) ,把 domain.top 重定向到 www.domain.top .\n\n进入设置https://github.com/user/user.github.io/settingsGitHub 在GitHub Pages中将Custom domain设置为 www.domain.top 或者 blog.domain.top .打开域名控制台(在你购买域名的网站) , 删除主机名称 @ 的CNAME记录 , 添加与前面对应的主机记录. \n\n还要记得将本地source文件夹的CNAME文件更改为对应域名 , 部署 .\n\n我们还想访问 domain.top 时自动跳转到 www.domain.top 因此需要设置 A 记录 , [官方教程](https://docs.github.com/cn/free-pro-team@latest/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site) .\n\n打开域名控制台 , 加入四条A记录 , 主机记录 @ , 记录值填写下面四项 .\n\n```\n185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153\n```\n\n## 注册域名邮箱\n\n我使用的是腾讯企业邮 , 直接登陆 [官网](https://exmail.qq.com/) 右上角开通基础版 , 一路按流程注册就好 . 结束后是腾讯提供的试用域名 , 我是在网页上方有提示更改域名 , 你也可以点击我的企业 -> 域名管理 中添加域名. 需要在域名控制台中添加两条MX记录 , 按照教程操作就好了 . \n\n## 结尾\n\n个人域名就是可以给人印象深刻,记起来简单 , 主要是逼格高 . \n\n---\n\n\n\n<!-- Q.E.D. -->","slug":"Exmail","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uj2000363jn1q953tvu","content":"<p>以前用的最多的就是qq邮箱了 , 但是毕竟不是很正式 <del>没有逼格</del> , 正好因为搭建博客购买了一个域名 , 就干脆申请一个 . 就写一点自己遇到的问题吧.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"注册域名\"><a href=\"#注册域名\" class=\"headerlink\" title=\"注册域名\"></a>注册域名</h2><p>我是在万网注册的 , cn , xyz 或者top域名都挺便宜的 .因为我使用的是top域名 , 以下均以domain.top为例 , 自己修改成对应域名就好了 .</p>\n<h2 id=\"CNAME记录与MX记录冲突\"><a href=\"#CNAME记录与MX记录冲突\" class=\"headerlink\" title=\"CNAME记录与MX记录冲突\"></a>CNAME记录与MX记录冲突</h2><p>因为我是把Apex域 (就是domain.top这种裸域名) 作为博客域名 , 所以会发生冲突 .如果你只有把 <a href=\"http://www.domain.top/\">www.domain.top</a> 作为博客域名(在你购买域名的网站 , 点击控制台 , 检查是否有主机名称为@的CNAME记录 , 有就是有把Apex域作为博客域名) , 直接跳到<a href=\"https://www.inzamz.top/2020/12/13/exmail/#%E6%B3%A8%E5%86%8C%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1\">注册部分</a>.<br>我参考了云游君的做法 <a href=\"https://www.yunyoujun.cn/note/use-cdn-speed-up-site/#CNAME-%E4%B8%8E-MX-%E8%AE%B0%E5%BD%95%E5%86%B2%E7%AA%81%E5%AF%BC%E8%87%B4%E9%82%AE%E4%BB%B6%E4%B8%A2%E5%A4%B1\">使用 CDN 加速你的 GitHub Pages 网站</a> ,把 domain.top 重定向到 <a href=\"http://www.domain.top/\">www.domain.top</a> .</p>\n<p>进入设置<a href=\"https://github.com/user/user.github.io/settingsGitHub\">https://github.com/user/user.github.io/settingsGitHub</a> 在GitHub Pages中将Custom domain设置为 <a href=\"http://www.domain.top/\">www.domain.top</a> 或者 blog.domain.top .打开域名控制台(在你购买域名的网站) , 删除主机名称 @ 的CNAME记录 , 添加与前面对应的主机记录. </p>\n<p>还要记得将本地source文件夹的CNAME文件更改为对应域名 , 部署 .</p>\n<p>我们还想访问 domain.top 时自动跳转到 <a href=\"http://www.domain.top/\">www.domain.top</a> 因此需要设置 A 记录 , <a href=\"https://docs.github.com/cn/free-pro-team@latest/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site\">官方教程</a> .</p>\n<p>打开域名控制台 , 加入四条A记录 , 主机记录 @ , 记录值填写下面四项 .</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"注册域名邮箱\"><a href=\"#注册域名邮箱\" class=\"headerlink\" title=\"注册域名邮箱\"></a>注册域名邮箱</h2><p>我使用的是腾讯企业邮 , 直接登陆 <a href=\"https://exmail.qq.com/\">官网</a> 右上角开通基础版 , 一路按流程注册就好 . 结束后是腾讯提供的试用域名 , 我是在网页上方有提示更改域名 , 你也可以点击我的企业 -&gt; 域名管理 中添加域名. 需要在域名控制台中添加两条MX记录 , 按照教程操作就好了 . </p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>个人域名就是可以给人印象深刻,记起来简单 , 主要是逼格高 . </p>\n<hr>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>以前用的最多的就是qq邮箱了 , 但是毕竟不是很正式 <del>没有逼格</del> , 正好因为搭建博客购买了一个域名 , 就干脆申请一个 . 就写一点自己遇到的问题吧.</p>","more":"<h2 id=\"注册域名\"><a href=\"#注册域名\" class=\"headerlink\" title=\"注册域名\"></a>注册域名</h2><p>我是在万网注册的 , cn , xyz 或者top域名都挺便宜的 .因为我使用的是top域名 , 以下均以domain.top为例 , 自己修改成对应域名就好了 .</p>\n<h2 id=\"CNAME记录与MX记录冲突\"><a href=\"#CNAME记录与MX记录冲突\" class=\"headerlink\" title=\"CNAME记录与MX记录冲突\"></a>CNAME记录与MX记录冲突</h2><p>因为我是把Apex域 (就是domain.top这种裸域名) 作为博客域名 , 所以会发生冲突 .如果你只有把 <a href=\"http://www.domain.top/\">www.domain.top</a> 作为博客域名(在你购买域名的网站 , 点击控制台 , 检查是否有主机名称为@的CNAME记录 , 有就是有把Apex域作为博客域名) , 直接跳到<a href=\"https://www.inzamz.top/2020/12/13/exmail/#%E6%B3%A8%E5%86%8C%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1\">注册部分</a>.<br>我参考了云游君的做法 <a href=\"https://www.yunyoujun.cn/note/use-cdn-speed-up-site/#CNAME-%E4%B8%8E-MX-%E8%AE%B0%E5%BD%95%E5%86%B2%E7%AA%81%E5%AF%BC%E8%87%B4%E9%82%AE%E4%BB%B6%E4%B8%A2%E5%A4%B1\">使用 CDN 加速你的 GitHub Pages 网站</a> ,把 domain.top 重定向到 <a href=\"http://www.domain.top/\">www.domain.top</a> .</p>\n<p>进入设置<a href=\"https://github.com/user/user.github.io/settingsGitHub\">https://github.com/user/user.github.io/settingsGitHub</a> 在GitHub Pages中将Custom domain设置为 <a href=\"http://www.domain.top/\">www.domain.top</a> 或者 blog.domain.top .打开域名控制台(在你购买域名的网站) , 删除主机名称 @ 的CNAME记录 , 添加与前面对应的主机记录. </p>\n<p>还要记得将本地source文件夹的CNAME文件更改为对应域名 , 部署 .</p>\n<p>我们还想访问 domain.top 时自动跳转到 <a href=\"http://www.domain.top/\">www.domain.top</a> 因此需要设置 A 记录 , <a href=\"https://docs.github.com/cn/free-pro-team@latest/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site\">官方教程</a> .</p>\n<p>打开域名控制台 , 加入四条A记录 , 主机记录 @ , 记录值填写下面四项 .</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"注册域名邮箱\"><a href=\"#注册域名邮箱\" class=\"headerlink\" title=\"注册域名邮箱\"></a>注册域名邮箱</h2><p>我使用的是腾讯企业邮 , 直接登陆 <a href=\"https://exmail.qq.com/\">官网</a> 右上角开通基础版 , 一路按流程注册就好 . 结束后是腾讯提供的试用域名 , 我是在网页上方有提示更改域名 , 你也可以点击我的企业 -&gt; 域名管理 中添加域名. 需要在域名控制台中添加两条MX记录 , 按照教程操作就好了 . </p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>个人域名就是可以给人印象深刻,记起来简单 , 主要是逼格高 . </p>\n<hr>\n<!-- Q.E.D. -->"},{"title":"Goodbye2020","date":"2020-12-31T17:12:57.000Z","_content":"\n> 至于真相，一定更在意料之外——自古皆然。  阿瑟·克拉克 《太空漫游：2001》\n\n这一年确实经历了很多，感慨万千。就像上面这句话，然后先挖个坑，会填的。\n\n毕竟作为中国人，真正的过年就是除夕夜嘛。所以总结放在除夕夜了。而且我有一个大胆的想法，今年试试守岁？~~感觉可以。~~ 因为不可抗力的因素，我怕守个岁这个年估计就要躺在床上了。\n\n![stop-abusing](https://img.inzamz.top/expression/stop-abusing.jpg)\n\n<!-- more -->\n\n其实总的来说大致就是两个阶段吧，就是高考这个分水岭。毕竟这也可能是人生的分水岭呢，大概。\n\n## Part 1：疫情下的宅男养成办法\n疫情期间给了充足时间补番，也算是入宅了。有计划学习但是终究看不到别人，自己没啥动力。但是就像以前手骨折休了一个月一样，我一直对自己说，*塞翁失马焉知非福*\n\n### 仰卧起坐式学习\n\n这种居家学习真的很考验自制力，自认为自制力很差，所以整个寒假的学习很让我满意的。我写完了10套数学卷，认真写完寒假作业。当时还有着考上浙大的美好梦想，心中坚信自己是黑马。\n\n但是长时间下来，我就坚持不住了。而且没有学校的紧张氛围，总是会心不在焉；加之几次考试没有给人满足感，反而考出了历史新低，而且一次比一次低。（毕竟线上考试，懂得都懂。）学习状态就像仰卧起坐，一下高一下低，这样折腾了好久。盼望着，盼望着，最后这样开学了。\n## Part 2：高考前的奋斗\n开学就是\n\n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/Goodbye2020.md","raw":"---\ntitle: Goodbye2020\ndate: 2021-01-01 01:12:57\ntags:\n\t- 2020\ncategories:\n\t- 关于我有个三次元分身这档事\n---\n\n> 至于真相，一定更在意料之外——自古皆然。  阿瑟·克拉克 《太空漫游：2001》\n\n这一年确实经历了很多，感慨万千。就像上面这句话，然后先挖个坑，会填的。\n\n毕竟作为中国人，真正的过年就是除夕夜嘛。所以总结放在除夕夜了。而且我有一个大胆的想法，今年试试守岁？~~感觉可以。~~ 因为不可抗力的因素，我怕守个岁这个年估计就要躺在床上了。\n\n![stop-abusing](https://img.inzamz.top/expression/stop-abusing.jpg)\n\n<!-- more -->\n\n其实总的来说大致就是两个阶段吧，就是高考这个分水岭。毕竟这也可能是人生的分水岭呢，大概。\n\n## Part 1：疫情下的宅男养成办法\n疫情期间给了充足时间补番，也算是入宅了。有计划学习但是终究看不到别人，自己没啥动力。但是就像以前手骨折休了一个月一样，我一直对自己说，*塞翁失马焉知非福*\n\n### 仰卧起坐式学习\n\n这种居家学习真的很考验自制力，自认为自制力很差，所以整个寒假的学习很让我满意的。我写完了10套数学卷，认真写完寒假作业。当时还有着考上浙大的美好梦想，心中坚信自己是黑马。\n\n但是长时间下来，我就坚持不住了。而且没有学校的紧张氛围，总是会心不在焉；加之几次考试没有给人满足感，反而考出了历史新低，而且一次比一次低。（毕竟线上考试，懂得都懂。）学习状态就像仰卧起坐，一下高一下低，这样折腾了好久。盼望着，盼望着，最后这样开学了。\n## Part 2：高考前的奋斗\n开学就是\n\n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"Goodbye2020","published":1,"updated":"2021-06-26T15:38:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uj5000763jnffbu98q6","content":"<blockquote>\n<p>至于真相，一定更在意料之外——自古皆然。  阿瑟·克拉克 《太空漫游：2001》</p>\n</blockquote>\n<p>这一年确实经历了很多，感慨万千。就像上面这句话，然后先挖个坑，会填的。</p>\n<p>毕竟作为中国人，真正的过年就是除夕夜嘛。所以总结放在除夕夜了。而且我有一个大胆的想法，今年试试守岁？<del>感觉可以。</del> 因为不可抗力的因素，我怕守个岁这个年估计就要躺在床上了。</p>\n<p><img src=\"https://img.inzamz.top/expression/stop-abusing.jpg\" alt=\"stop-abusing\" loading=\"lazy\"></p>\n<span id=\"more\"></span>\n\n<p>其实总的来说大致就是两个阶段吧，就是高考这个分水岭。毕竟这也可能是人生的分水岭呢，大概。</p>\n<h2 id=\"Part-1：疫情下的宅男养成办法\"><a href=\"#Part-1：疫情下的宅男养成办法\" class=\"headerlink\" title=\"Part 1：疫情下的宅男养成办法\"></a>Part 1：疫情下的宅男养成办法</h2><p>疫情期间给了充足时间补番，也算是入宅了。有计划学习但是终究看不到别人，自己没啥动力。但是就像以前手骨折休了一个月一样，我一直对自己说，<em>塞翁失马焉知非福</em></p>\n<h3 id=\"仰卧起坐式学习\"><a href=\"#仰卧起坐式学习\" class=\"headerlink\" title=\"仰卧起坐式学习\"></a>仰卧起坐式学习</h3><p>这种居家学习真的很考验自制力，自认为自制力很差，所以整个寒假的学习很让我满意的。我写完了10套数学卷，认真写完寒假作业。当时还有着考上浙大的美好梦想，心中坚信自己是黑马。</p>\n<p>但是长时间下来，我就坚持不住了。而且没有学校的紧张氛围，总是会心不在焉；加之几次考试没有给人满足感，反而考出了历史新低，而且一次比一次低。（毕竟线上考试，懂得都懂。）学习状态就像仰卧起坐，一下高一下低，这样折腾了好久。盼望着，盼望着，最后这样开学了。</p>\n<h2 id=\"Part-2：高考前的奋斗\"><a href=\"#Part-2：高考前的奋斗\" class=\"headerlink\" title=\"Part 2：高考前的奋斗\"></a>Part 2：高考前的奋斗</h2><p>开学就是</p>\n<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<blockquote>\n<p>至于真相，一定更在意料之外——自古皆然。  阿瑟·克拉克 《太空漫游：2001》</p>\n</blockquote>\n<p>这一年确实经历了很多，感慨万千。就像上面这句话，然后先挖个坑，会填的。</p>\n<p>毕竟作为中国人，真正的过年就是除夕夜嘛。所以总结放在除夕夜了。而且我有一个大胆的想法，今年试试守岁？<del>感觉可以。</del> 因为不可抗力的因素，我怕守个岁这个年估计就要躺在床上了。</p>\n<p><img src=\"https://img.inzamz.top/expression/stop-abusing.jpg\" alt=\"stop-abusing\"></p>","more":"<p>其实总的来说大致就是两个阶段吧，就是高考这个分水岭。毕竟这也可能是人生的分水岭呢，大概。</p>\n<h2 id=\"Part-1：疫情下的宅男养成办法\"><a href=\"#Part-1：疫情下的宅男养成办法\" class=\"headerlink\" title=\"Part 1：疫情下的宅男养成办法\"></a>Part 1：疫情下的宅男养成办法</h2><p>疫情期间给了充足时间补番，也算是入宅了。有计划学习但是终究看不到别人，自己没啥动力。但是就像以前手骨折休了一个月一样，我一直对自己说，<em>塞翁失马焉知非福</em></p>\n<h3 id=\"仰卧起坐式学习\"><a href=\"#仰卧起坐式学习\" class=\"headerlink\" title=\"仰卧起坐式学习\"></a>仰卧起坐式学习</h3><p>这种居家学习真的很考验自制力，自认为自制力很差，所以整个寒假的学习很让我满意的。我写完了10套数学卷，认真写完寒假作业。当时还有着考上浙大的美好梦想，心中坚信自己是黑马。</p>\n<p>但是长时间下来，我就坚持不住了。而且没有学校的紧张氛围，总是会心不在焉；加之几次考试没有给人满足感，反而考出了历史新低，而且一次比一次低。（毕竟线上考试，懂得都懂。）学习状态就像仰卧起坐，一下高一下低，这样折腾了好久。盼望着，盼望着，最后这样开学了。</p>\n<h2 id=\"Part-2：高考前的奋斗\"><a href=\"#Part-2：高考前的奋斗\" class=\"headerlink\" title=\"Part 2：高考前的奋斗\"></a>Part 2：高考前的奋斗</h2><p>开学就是</p>\n<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"网络课程简介(笔记)","toc":{"list_number":false},"date":"2021-07-04T12:48:58.000Z","updated":"2021-07-05T10:48:13.000Z","_content":"\n> 系统地学习一下思科网课中的网络课程 , 笔记记录一下 . \n\n<!-- more -->\n\n---\n\n## 网络组件\n\n### 主机角色\n\n- `主机`：连接到网络并直接参与网络通信的所有计算机都属于主机。术语主机特指网络上为通信目的而分配了一个数字的设备。这个数字用来标识特定网络中的主机。这个数字称为互联网协议 (IP) 地址。IP 地址标识主机和主机所连接的网络。一般分为服务器和客户端。\n  - `服务器`：服务器是装有特殊软件，可以为网络上其他终端设备提供信息（例如电子邮件或网页）的计算机。每项服务都需要单独的服务器软件例如 : 邮件，文件，Web。\n  - `客户端`：客户端软件用于请求和显示从服务器获取的信息。一台计算机可以运行多种类型的客户端软件。\n  - ![Server](https://img.inzamz.top/article/ITNNote/Server.png)\n\n### 点对点\n\n`对等网络`：在小企业和家庭中，许多计算机在网络中既是服务器又是客户端。这种网络称为对等网络。\n\n- `优点`：易安装、复杂性低、成本低（不需要其他服务器和设备）、可完成简单任务。\n- `缺点`：无集中管理、不可拓展、安全性低、无法完成复杂任务\n\n### 终端设备\n\n`终端设备`：终端设备是指通过网络传输的消息的来源或目的地。当一台终端设备发起通信时，会使用目的终端设备的地址来指定应该将消息发送到哪里。\n\n### 中间设备\n\n`中间设备`：中间设备提供连接并确保数据在网络中传输。\n\n![Intermediate-equipment](https://img.inzamz.top/article/ITNNote/Intermediate-equipment.png)\n\n中间网络设备执行以下部分或全部功能：\n\n- 重新生成并重新传输通信信号。\n- 维护有关网络和互联网络中存在哪些路径的信息。\n- 将错误和通信故障通知其它设备\n- 发生链路故障时按照备用路径转发数据\n- 根据优先级别分类和转发消息\n- 根据安全设置允许或拒绝数据的通行\n\n**注意:** 未显示的是传统以太网集线器。以太网集线器也称为多端口中继器。重新生成并重新传输通信信号。所有中间设备都具有中继器的功能。\n\n### 网络介质\n\n`介质`：介质为消息从源设备传送到目的设备提供了通道。\n\n- **`金属线电缆`**：数据被编码为电脉冲\n\n- **`玻璃或塑料光纤（光缆）`**：数据被编码为光脉冲\n\n- **`无线传输`**：数据是通过调制特定频率的电磁波进行编码的。\n\n  不同类型的网络介质有不同的特性和优点。并不是所有网络介质都具有相同的特点，它们也不具有相同的用途。一般要考虑传输距离、介质所处环境、数据量和传输速率需求、安装成本等。\n\n### 习题\n\n\n> 下列哪个是所有直接参与网络通信的连接到网络的计算机的名称?\n\n\n<div class=\"success\">\n\n> - [ ] 服务器\n> - [ ] 中间设备\n> - [x] 主机\n> - [ ] 介质\n\n</div>\n\n\n> 当数据被编码为光脉冲时，哪个介质被用来传输数据?\t\n\n<div class=\"success\">\n\n> - [ ] 无线\n> - [x] 光缆\n> - [ ] 铜缆\n\n</div>\n\n\n> 哪种设备是中间设备？（选择两项）\t\n\n<div class=\"success\">\n\n> - [ ] 主机\n> - [x] 路由器\n> - [ ] 服务器\n> - [x] 交换机\n\n</div>\n\n## 网络表示方式和网络拓扑\n\n### 网络表示方式\n\n网络图通常使用图标来表示构成网络的不同设备和连接。这种网络“图”被称为“拓扑图”。\n\n除了这些表示之外，还使用专门的术语来描述这些设备和介质是如何相互连接的:\n\n- **`网络接口卡 (NIC)`**：将设备物理连接到网络。\n- **`物理端口`**：网络设备上的接口或插口，介质通过它连接到终端设备或其他网络设备。\n- **`接口`**：网络设备上连接到独立网络的专用端口。由于路由器连接了不同的网络，路由器上的端口称为网络接口。\n\n<div class=danger>\n\n> **注意**：“端口”和“接口”这两个词往往可以互换使用。\n\n</div>\n\n### 拓扑图\n\n可以提供直观的网络连接图。有物理图和逻辑图。\n\n- `物理拓扑图`：说明了中间设备和电缆安装的物理位置\n- `逻辑拓扑图`：说明了设备、端口和网络的编址方案，可以查看哪些终端设备连接到哪些中间设备以及正在使用哪些介质。\n\n### 习题\n\n> 哪个连接将终端设备物理连接到网络?\n\n<div class=danger>\n\n> - [x] 端口\n> - [ ] 网卡\n> - [ ] 接口\n\n</div>\n\n<div class=success>\n\n> - [ ] 端口\n> - [x] 网卡\n> - [ ] 接口\n\n</div>\n\n> 哪些连接是连接到独立网络的网络设备上的专用端口?\n\n<div class=danger>\n\n> - [ ] 端口\n> - [x] 网卡\n> - [ ] 接口\n\n</div>\n\n<div class=success>\n\n> - [ ] 端口\n> - [ ] 网卡\n> - [x] 接口\n\n</div>\n\n> 哪种类型的网络拓扑可以让您查看哪些终端设备连接到哪些中间设备以及正在使用哪些介质？\n\n<div class=success>\n\n> - [ ] 物理拓扑\n> - [x] 逻辑拓扑\n\n</div>\n\n> 哪种网络拓扑结构可以让您看到中间设备和电缆安装的实际位置?\n\n<div class=success>\n\n> - [x] 物理拓扑\n> - [ ] 逻辑拓扑\n\n</div>\n\n## 常见网络类型\n\n### 多种规模的网络\n\n- **`小型家庭网络`**：小型家庭网络将少量的几台计算机互联并将它们连接到互联网。\n- **`小型办公室和家庭办公室网络`**：小型办公室/家庭办公室 (SOHO) 网络可让一个家庭办公室或远程办公室内的计算机连接到企业网络或访问集中的共享资源。\n- **`大中型网络`**：中大型网络（例如大型企业和学校使用的网络）可能有许多站点，包含成百上千台相互连接的主机。\n- **`全球网络`**：互联网是由网络组成的网络，连接全球亿万台计算机。\n\n### LAN 和 WAN\n\n网络基础设施在以下方面存在巨大差异：\n\n- 覆盖的区域大小\n- 连接的用户数量\n- 可用的服务数量和类型\n- 职责范围\n\n`局域网(LAN)`：较小地理区域内提供访问的网络基础设施，通常用于企业、家庭或小型企业网络中的部门。\n\n- LAN 在有限区域（如家庭、学校、办公大楼或园区）内互连终端设备。\n- LAN 通常由一个组织或个人管理。实行网络级管控、安全控制并制定访问控制策略。\n- LAN 为内部终端设备和中间设备提供高速带宽，如图所示。\n\n`广域网 (WAN)` ：针对广泛地理区域内的其他网络提供访问的网络基础设施，通常由服务提供商 (SP) 或互联网服务提供商 (ISP) 管理。\n\n- WAN 互连广泛地理区域（例如各大城市、州、省、国家/地区或大陆之间）内的 LAN。\n- WAN 通常由多个服务提供商管理。\n- WAN 通常提供 LAN 之间的较慢链路。\n\n### 互联网\n\n互联网不属于任何个人或团体。要确保通过这种多元化基础设施有效通信，需要采用统一的公认技术和标准，也需要众多网络管理机构相互协作。为了维护互联网协议和进程的结构和标准化，人们建立了许多组织。这些组织包括**互联网工程任务组 (IETF)**、**互联网名称与数字地址分配机构 (ICANN)** 和**互联网架构委员会 (IAB)**，以及许多其他组织。\n\n### 内部网和外联网\n\n与术语“互联网”类似的另外两个术语是内部网和外联网。\n\n- `内联网`:内部网这个术语用于表示一个组织的私有局域网和广域网连接。内部网的设计旨在仅允许该组织的成员、员工或其他获得授权的人员进行访问。\n\n- `外联网`:组织可以使用外联网为在其他组织工作，但需要本组织数据的人提供安全访问。\n\n- ![Internat](https://img.inzamz.top/article/ITNNote/Internet.png)\n\n### 习题\n\n> 哪个网络基础设施提供对较小地理区域(通常是企业、家庭或小型企业部门中的网络)内的用户和终端设备的访问？\n\n<div class=success>\n\n> - [ ] 外联网\n> - [ ] 内部网\n> - [x] LAN\n> - [ ] WAN\n\n</div>\n\n> 组织可以使用哪个网络基础设施为在不同组织工作、但需要访问本组织数据的个人提供安全访问？\n\n\n<div class=success>\n\n> - [x] 外联网\n> - [ ] 内部网\n> - [ ] LAN\n> - [ ] WAN\n\n</div>\n\n> 哪个网络基础设施提供了对广泛地理区域内的其他网络的访问，且通常由电信服务提供商拥有和管理？\n\n<div class=success>\n\n> - [ ] 外联网\n> - [ ] 内部网\n> - [ ] LAN\n> - [x] WAN\n\n</div>\n\n## Internet 连接\n\n### Internet 访问技术\n\n不同 ISP 和地理位置的连接选项各不相同。但是，常见的选择包括宽带电缆、宽带数字用户线路 (DSL)、无线 WAN 和移动服务。\n\n组织通常需要访问其他企业站点和互联网，支持 IP 电话、视频会议和数据中心存储等企业服务需要的快速连接。SP 提供企业级互连。最常见的企业级服务包括业务 DSL、租用线路和城域以太网。\n\n### 家庭和小型办公室 Internet 连接\n\n![Internet-connection](https://img.inzamz.top/article/ITNNote/Internet-connection.png)\n\n- **`有线电视`**:互联网数据信号在输送有线电视信号的同一电缆上进行传输。它提供了高带宽、高可用性和始终在线的互联网连接。\n- **`DSL(Digital subscriber line)`**:数字用户线也可提供高带宽、高可用性和始终在线的互联网连接。DSL 通过电话线路运行。通常小型办公室和家庭办公室用户会选择使用非对称 DSL (ADSL)，这种方式的特点是下载速度高于上传速度。\n- **`蜂窝网`**:蜂窝网互联网接入使用手机网络进行连接。只要您能收到蜂窝网信号，就能获得蜂窝网互联网接入。性能会受手机功能和手机基站的限制。\n- **`卫星`**:对于根本没有互联网连接的地方来说，获得卫星互联网访问非常有用。卫星天线要求**有到卫星的清晰视线**。\n- **`拨号电话`**:使用电话线和调制解调器，费用相对较低。拨号调制解调器连接提供的低带宽不足以用于大型数据传输，但对旅行过程中的**移动访问非常有用**。\n\n### 企业 Internet 连接\n\n企业可能需要更高带宽、专用带宽和托管服务。\n\n![Internet-connection](https://img.inzamz.top/article/ITNNote/Internet-connection-2.png)\n\n- **`专用租用线路`**:租用线路是服务提供商网络内连接地理位置分散的办公室的保留电路，提供个人语音和/或数据网络。电路按月或按年租用。\n- **`城域以太网`**:有时被称为以太网 WAN. 在本模块中，我们把它称为城域以太网。城域以太网将 LAN 访问技术扩展到 WAN 中。以太网是一种 LAN 技术。\n- **`DSL`**:企业 DSL 提供各种格式。一种常见的选择是对称数字用户线路 (SDSL)，它类似于 DSL 的普通用户版本，但是**提供相同的上传和下载速度**。\n- **`卫星`**:当有线解决方案不可用时，卫星服务可以提供连接。\n\n### 融合网络\n\n传统的独立网络使用不同的技术传送通信信号 , 每个网络都有自己的一套规则和标准来确保成功通信。今天，独立的数据、电话和视频网络融合在了一起。此网络基础设施采用一组相同的规则、协议和实施标准。融合数据网络在一个网络中传送多种服务。\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/Introduction-to-Networks.md","raw":"---\ntitle: 网络课程简介(笔记)\ntoc:\n  list_number: false\ncategories:\n  - 学习笔记\ntags:\n  - 网络\ndate: 2021-07-04 20:48:58\nupdated: 2021-07-05 18:48:13\n---\n\n> 系统地学习一下思科网课中的网络课程 , 笔记记录一下 . \n\n<!-- more -->\n\n---\n\n## 网络组件\n\n### 主机角色\n\n- `主机`：连接到网络并直接参与网络通信的所有计算机都属于主机。术语主机特指网络上为通信目的而分配了一个数字的设备。这个数字用来标识特定网络中的主机。这个数字称为互联网协议 (IP) 地址。IP 地址标识主机和主机所连接的网络。一般分为服务器和客户端。\n  - `服务器`：服务器是装有特殊软件，可以为网络上其他终端设备提供信息（例如电子邮件或网页）的计算机。每项服务都需要单独的服务器软件例如 : 邮件，文件，Web。\n  - `客户端`：客户端软件用于请求和显示从服务器获取的信息。一台计算机可以运行多种类型的客户端软件。\n  - ![Server](https://img.inzamz.top/article/ITNNote/Server.png)\n\n### 点对点\n\n`对等网络`：在小企业和家庭中，许多计算机在网络中既是服务器又是客户端。这种网络称为对等网络。\n\n- `优点`：易安装、复杂性低、成本低（不需要其他服务器和设备）、可完成简单任务。\n- `缺点`：无集中管理、不可拓展、安全性低、无法完成复杂任务\n\n### 终端设备\n\n`终端设备`：终端设备是指通过网络传输的消息的来源或目的地。当一台终端设备发起通信时，会使用目的终端设备的地址来指定应该将消息发送到哪里。\n\n### 中间设备\n\n`中间设备`：中间设备提供连接并确保数据在网络中传输。\n\n![Intermediate-equipment](https://img.inzamz.top/article/ITNNote/Intermediate-equipment.png)\n\n中间网络设备执行以下部分或全部功能：\n\n- 重新生成并重新传输通信信号。\n- 维护有关网络和互联网络中存在哪些路径的信息。\n- 将错误和通信故障通知其它设备\n- 发生链路故障时按照备用路径转发数据\n- 根据优先级别分类和转发消息\n- 根据安全设置允许或拒绝数据的通行\n\n**注意:** 未显示的是传统以太网集线器。以太网集线器也称为多端口中继器。重新生成并重新传输通信信号。所有中间设备都具有中继器的功能。\n\n### 网络介质\n\n`介质`：介质为消息从源设备传送到目的设备提供了通道。\n\n- **`金属线电缆`**：数据被编码为电脉冲\n\n- **`玻璃或塑料光纤（光缆）`**：数据被编码为光脉冲\n\n- **`无线传输`**：数据是通过调制特定频率的电磁波进行编码的。\n\n  不同类型的网络介质有不同的特性和优点。并不是所有网络介质都具有相同的特点，它们也不具有相同的用途。一般要考虑传输距离、介质所处环境、数据量和传输速率需求、安装成本等。\n\n### 习题\n\n\n> 下列哪个是所有直接参与网络通信的连接到网络的计算机的名称?\n\n\n<div class=\"success\">\n\n> - [ ] 服务器\n> - [ ] 中间设备\n> - [x] 主机\n> - [ ] 介质\n\n</div>\n\n\n> 当数据被编码为光脉冲时，哪个介质被用来传输数据?\t\n\n<div class=\"success\">\n\n> - [ ] 无线\n> - [x] 光缆\n> - [ ] 铜缆\n\n</div>\n\n\n> 哪种设备是中间设备？（选择两项）\t\n\n<div class=\"success\">\n\n> - [ ] 主机\n> - [x] 路由器\n> - [ ] 服务器\n> - [x] 交换机\n\n</div>\n\n## 网络表示方式和网络拓扑\n\n### 网络表示方式\n\n网络图通常使用图标来表示构成网络的不同设备和连接。这种网络“图”被称为“拓扑图”。\n\n除了这些表示之外，还使用专门的术语来描述这些设备和介质是如何相互连接的:\n\n- **`网络接口卡 (NIC)`**：将设备物理连接到网络。\n- **`物理端口`**：网络设备上的接口或插口，介质通过它连接到终端设备或其他网络设备。\n- **`接口`**：网络设备上连接到独立网络的专用端口。由于路由器连接了不同的网络，路由器上的端口称为网络接口。\n\n<div class=danger>\n\n> **注意**：“端口”和“接口”这两个词往往可以互换使用。\n\n</div>\n\n### 拓扑图\n\n可以提供直观的网络连接图。有物理图和逻辑图。\n\n- `物理拓扑图`：说明了中间设备和电缆安装的物理位置\n- `逻辑拓扑图`：说明了设备、端口和网络的编址方案，可以查看哪些终端设备连接到哪些中间设备以及正在使用哪些介质。\n\n### 习题\n\n> 哪个连接将终端设备物理连接到网络?\n\n<div class=danger>\n\n> - [x] 端口\n> - [ ] 网卡\n> - [ ] 接口\n\n</div>\n\n<div class=success>\n\n> - [ ] 端口\n> - [x] 网卡\n> - [ ] 接口\n\n</div>\n\n> 哪些连接是连接到独立网络的网络设备上的专用端口?\n\n<div class=danger>\n\n> - [ ] 端口\n> - [x] 网卡\n> - [ ] 接口\n\n</div>\n\n<div class=success>\n\n> - [ ] 端口\n> - [ ] 网卡\n> - [x] 接口\n\n</div>\n\n> 哪种类型的网络拓扑可以让您查看哪些终端设备连接到哪些中间设备以及正在使用哪些介质？\n\n<div class=success>\n\n> - [ ] 物理拓扑\n> - [x] 逻辑拓扑\n\n</div>\n\n> 哪种网络拓扑结构可以让您看到中间设备和电缆安装的实际位置?\n\n<div class=success>\n\n> - [x] 物理拓扑\n> - [ ] 逻辑拓扑\n\n</div>\n\n## 常见网络类型\n\n### 多种规模的网络\n\n- **`小型家庭网络`**：小型家庭网络将少量的几台计算机互联并将它们连接到互联网。\n- **`小型办公室和家庭办公室网络`**：小型办公室/家庭办公室 (SOHO) 网络可让一个家庭办公室或远程办公室内的计算机连接到企业网络或访问集中的共享资源。\n- **`大中型网络`**：中大型网络（例如大型企业和学校使用的网络）可能有许多站点，包含成百上千台相互连接的主机。\n- **`全球网络`**：互联网是由网络组成的网络，连接全球亿万台计算机。\n\n### LAN 和 WAN\n\n网络基础设施在以下方面存在巨大差异：\n\n- 覆盖的区域大小\n- 连接的用户数量\n- 可用的服务数量和类型\n- 职责范围\n\n`局域网(LAN)`：较小地理区域内提供访问的网络基础设施，通常用于企业、家庭或小型企业网络中的部门。\n\n- LAN 在有限区域（如家庭、学校、办公大楼或园区）内互连终端设备。\n- LAN 通常由一个组织或个人管理。实行网络级管控、安全控制并制定访问控制策略。\n- LAN 为内部终端设备和中间设备提供高速带宽，如图所示。\n\n`广域网 (WAN)` ：针对广泛地理区域内的其他网络提供访问的网络基础设施，通常由服务提供商 (SP) 或互联网服务提供商 (ISP) 管理。\n\n- WAN 互连广泛地理区域（例如各大城市、州、省、国家/地区或大陆之间）内的 LAN。\n- WAN 通常由多个服务提供商管理。\n- WAN 通常提供 LAN 之间的较慢链路。\n\n### 互联网\n\n互联网不属于任何个人或团体。要确保通过这种多元化基础设施有效通信，需要采用统一的公认技术和标准，也需要众多网络管理机构相互协作。为了维护互联网协议和进程的结构和标准化，人们建立了许多组织。这些组织包括**互联网工程任务组 (IETF)**、**互联网名称与数字地址分配机构 (ICANN)** 和**互联网架构委员会 (IAB)**，以及许多其他组织。\n\n### 内部网和外联网\n\n与术语“互联网”类似的另外两个术语是内部网和外联网。\n\n- `内联网`:内部网这个术语用于表示一个组织的私有局域网和广域网连接。内部网的设计旨在仅允许该组织的成员、员工或其他获得授权的人员进行访问。\n\n- `外联网`:组织可以使用外联网为在其他组织工作，但需要本组织数据的人提供安全访问。\n\n- ![Internat](https://img.inzamz.top/article/ITNNote/Internet.png)\n\n### 习题\n\n> 哪个网络基础设施提供对较小地理区域(通常是企业、家庭或小型企业部门中的网络)内的用户和终端设备的访问？\n\n<div class=success>\n\n> - [ ] 外联网\n> - [ ] 内部网\n> - [x] LAN\n> - [ ] WAN\n\n</div>\n\n> 组织可以使用哪个网络基础设施为在不同组织工作、但需要访问本组织数据的个人提供安全访问？\n\n\n<div class=success>\n\n> - [x] 外联网\n> - [ ] 内部网\n> - [ ] LAN\n> - [ ] WAN\n\n</div>\n\n> 哪个网络基础设施提供了对广泛地理区域内的其他网络的访问，且通常由电信服务提供商拥有和管理？\n\n<div class=success>\n\n> - [ ] 外联网\n> - [ ] 内部网\n> - [ ] LAN\n> - [x] WAN\n\n</div>\n\n## Internet 连接\n\n### Internet 访问技术\n\n不同 ISP 和地理位置的连接选项各不相同。但是，常见的选择包括宽带电缆、宽带数字用户线路 (DSL)、无线 WAN 和移动服务。\n\n组织通常需要访问其他企业站点和互联网，支持 IP 电话、视频会议和数据中心存储等企业服务需要的快速连接。SP 提供企业级互连。最常见的企业级服务包括业务 DSL、租用线路和城域以太网。\n\n### 家庭和小型办公室 Internet 连接\n\n![Internet-connection](https://img.inzamz.top/article/ITNNote/Internet-connection.png)\n\n- **`有线电视`**:互联网数据信号在输送有线电视信号的同一电缆上进行传输。它提供了高带宽、高可用性和始终在线的互联网连接。\n- **`DSL(Digital subscriber line)`**:数字用户线也可提供高带宽、高可用性和始终在线的互联网连接。DSL 通过电话线路运行。通常小型办公室和家庭办公室用户会选择使用非对称 DSL (ADSL)，这种方式的特点是下载速度高于上传速度。\n- **`蜂窝网`**:蜂窝网互联网接入使用手机网络进行连接。只要您能收到蜂窝网信号，就能获得蜂窝网互联网接入。性能会受手机功能和手机基站的限制。\n- **`卫星`**:对于根本没有互联网连接的地方来说，获得卫星互联网访问非常有用。卫星天线要求**有到卫星的清晰视线**。\n- **`拨号电话`**:使用电话线和调制解调器，费用相对较低。拨号调制解调器连接提供的低带宽不足以用于大型数据传输，但对旅行过程中的**移动访问非常有用**。\n\n### 企业 Internet 连接\n\n企业可能需要更高带宽、专用带宽和托管服务。\n\n![Internet-connection](https://img.inzamz.top/article/ITNNote/Internet-connection-2.png)\n\n- **`专用租用线路`**:租用线路是服务提供商网络内连接地理位置分散的办公室的保留电路，提供个人语音和/或数据网络。电路按月或按年租用。\n- **`城域以太网`**:有时被称为以太网 WAN. 在本模块中，我们把它称为城域以太网。城域以太网将 LAN 访问技术扩展到 WAN 中。以太网是一种 LAN 技术。\n- **`DSL`**:企业 DSL 提供各种格式。一种常见的选择是对称数字用户线路 (SDSL)，它类似于 DSL 的普通用户版本，但是**提供相同的上传和下载速度**。\n- **`卫星`**:当有线解决方案不可用时，卫星服务可以提供连接。\n\n### 融合网络\n\n传统的独立网络使用不同的技术传送通信信号 , 每个网络都有自己的一套规则和标准来确保成功通信。今天，独立的数据、电话和视频网络融合在了一起。此网络基础设施采用一组相同的规则、协议和实施标准。融合数据网络在一个网络中传送多种服务。\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"Introduction-to-Networks","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uj7000963jnejw92u37","content":"<blockquote>\n<p>系统地学习一下思科网课中的网络课程 , 笔记记录一下 . </p>\n</blockquote>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"网络组件\"><a href=\"#网络组件\" class=\"headerlink\" title=\"网络组件\"></a>网络组件</h2><h3 id=\"主机角色\"><a href=\"#主机角色\" class=\"headerlink\" title=\"主机角色\"></a>主机角色</h3><ul>\n<li><code>主机</code>：连接到网络并直接参与网络通信的所有计算机都属于主机。术语主机特指网络上为通信目的而分配了一个数字的设备。这个数字用来标识特定网络中的主机。这个数字称为互联网协议 (IP) 地址。IP 地址标识主机和主机所连接的网络。一般分为服务器和客户端。<ul>\n<li><code>服务器</code>：服务器是装有特殊软件，可以为网络上其他终端设备提供信息（例如电子邮件或网页）的计算机。每项服务都需要单独的服务器软件例如 : 邮件，文件，Web。</li>\n<li><code>客户端</code>：客户端软件用于请求和显示从服务器获取的信息。一台计算机可以运行多种类型的客户端软件。</li>\n<li><img src=\"https://img.inzamz.top/article/ITNNote/Server.png\" alt=\"Server\" loading=\"lazy\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"点对点\"><a href=\"#点对点\" class=\"headerlink\" title=\"点对点\"></a>点对点</h3><p><code>对等网络</code>：在小企业和家庭中，许多计算机在网络中既是服务器又是客户端。这种网络称为对等网络。</p>\n<ul>\n<li><code>优点</code>：易安装、复杂性低、成本低（不需要其他服务器和设备）、可完成简单任务。</li>\n<li><code>缺点</code>：无集中管理、不可拓展、安全性低、无法完成复杂任务</li>\n</ul>\n<h3 id=\"终端设备\"><a href=\"#终端设备\" class=\"headerlink\" title=\"终端设备\"></a>终端设备</h3><p><code>终端设备</code>：终端设备是指通过网络传输的消息的来源或目的地。当一台终端设备发起通信时，会使用目的终端设备的地址来指定应该将消息发送到哪里。</p>\n<h3 id=\"中间设备\"><a href=\"#中间设备\" class=\"headerlink\" title=\"中间设备\"></a>中间设备</h3><p><code>中间设备</code>：中间设备提供连接并确保数据在网络中传输。</p>\n<p><img src=\"https://img.inzamz.top/article/ITNNote/Intermediate-equipment.png\" alt=\"Intermediate-equipment\" loading=\"lazy\"></p>\n<p>中间网络设备执行以下部分或全部功能：</p>\n<ul>\n<li>重新生成并重新传输通信信号。</li>\n<li>维护有关网络和互联网络中存在哪些路径的信息。</li>\n<li>将错误和通信故障通知其它设备</li>\n<li>发生链路故障时按照备用路径转发数据</li>\n<li>根据优先级别分类和转发消息</li>\n<li>根据安全设置允许或拒绝数据的通行</li>\n</ul>\n<p><strong>注意:</strong> 未显示的是传统以太网集线器。以太网集线器也称为多端口中继器。重新生成并重新传输通信信号。所有中间设备都具有中继器的功能。</p>\n<h3 id=\"网络介质\"><a href=\"#网络介质\" class=\"headerlink\" title=\"网络介质\"></a>网络介质</h3><p><code>介质</code>：介质为消息从源设备传送到目的设备提供了通道。</p>\n<ul>\n<li><p>**<code>金属线电缆</code>**：数据被编码为电脉冲</p>\n</li>\n<li><p>**<code>玻璃或塑料光纤（光缆）</code>**：数据被编码为光脉冲</p>\n</li>\n<li><p>**<code>无线传输</code>**：数据是通过调制特定频率的电磁波进行编码的。</p>\n<p>不同类型的网络介质有不同的特性和优点。并不是所有网络介质都具有相同的特点，它们也不具有相同的用途。一般要考虑传输距离、介质所处环境、数据量和传输速率需求、安装成本等。</p>\n</li>\n</ul>\n<h3 id=\"习题\"><a href=\"#习题\" class=\"headerlink\" title=\"习题\"></a>习题</h3><blockquote>\n<p>下列哪个是所有直接参与网络通信的连接到网络的计算机的名称?</p>\n</blockquote>\n<div class=\"success\">\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 服务器</li>\n<li><input disabled=\"\" type=\"checkbox\"> 中间设备</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 主机</li>\n<li><input disabled=\"\" type=\"checkbox\"> 介质</li>\n</ul>\n</blockquote>\n</div>\n\n\n<blockquote>\n<p>当数据被编码为光脉冲时，哪个介质被用来传输数据?    </p>\n</blockquote>\n<div class=\"success\">\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 无线</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 光缆</li>\n<li><input disabled=\"\" type=\"checkbox\"> 铜缆</li>\n</ul>\n</blockquote>\n</div>\n\n\n<blockquote>\n<p>哪种设备是中间设备？（选择两项）    </p>\n</blockquote>\n<div class=\"success\">\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 主机</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 路由器</li>\n<li><input disabled=\"\" type=\"checkbox\"> 服务器</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 交换机</li>\n</ul>\n</blockquote>\n</div>\n\n<h2 id=\"网络表示方式和网络拓扑\"><a href=\"#网络表示方式和网络拓扑\" class=\"headerlink\" title=\"网络表示方式和网络拓扑\"></a>网络表示方式和网络拓扑</h2><h3 id=\"网络表示方式\"><a href=\"#网络表示方式\" class=\"headerlink\" title=\"网络表示方式\"></a>网络表示方式</h3><p>网络图通常使用图标来表示构成网络的不同设备和连接。这种网络“图”被称为“拓扑图”。</p>\n<p>除了这些表示之外，还使用专门的术语来描述这些设备和介质是如何相互连接的:</p>\n<ul>\n<li>**<code>网络接口卡 (NIC)</code>**：将设备物理连接到网络。</li>\n<li>**<code>物理端口</code>**：网络设备上的接口或插口，介质通过它连接到终端设备或其他网络设备。</li>\n<li>**<code>接口</code>**：网络设备上连接到独立网络的专用端口。由于路由器连接了不同的网络，路由器上的端口称为网络接口。</li>\n</ul>\n<div class=danger>\n\n<blockquote>\n<p><strong>注意</strong>：“端口”和“接口”这两个词往往可以互换使用。</p>\n</blockquote>\n</div>\n\n<h3 id=\"拓扑图\"><a href=\"#拓扑图\" class=\"headerlink\" title=\"拓扑图\"></a>拓扑图</h3><p>可以提供直观的网络连接图。有物理图和逻辑图。</p>\n<ul>\n<li><code>物理拓扑图</code>：说明了中间设备和电缆安装的物理位置</li>\n<li><code>逻辑拓扑图</code>：说明了设备、端口和网络的编址方案，可以查看哪些终端设备连接到哪些中间设备以及正在使用哪些介质。</li>\n</ul>\n<h3 id=\"习题-1\"><a href=\"#习题-1\" class=\"headerlink\" title=\"习题\"></a>习题</h3><blockquote>\n<p>哪个连接将终端设备物理连接到网络?</p>\n</blockquote>\n<div class=danger>\n\n<blockquote>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 端口</li>\n<li><input disabled=\"\" type=\"checkbox\"> 网卡</li>\n<li><input disabled=\"\" type=\"checkbox\"> 接口</li>\n</ul>\n</blockquote>\n</div>\n\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 端口</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 网卡</li>\n<li><input disabled=\"\" type=\"checkbox\"> 接口</li>\n</ul>\n</blockquote>\n</div>\n\n<blockquote>\n<p>哪些连接是连接到独立网络的网络设备上的专用端口?</p>\n</blockquote>\n<div class=danger>\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 端口</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 网卡</li>\n<li><input disabled=\"\" type=\"checkbox\"> 接口</li>\n</ul>\n</blockquote>\n</div>\n\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 端口</li>\n<li><input disabled=\"\" type=\"checkbox\"> 网卡</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 接口</li>\n</ul>\n</blockquote>\n</div>\n\n<blockquote>\n<p>哪种类型的网络拓扑可以让您查看哪些终端设备连接到哪些中间设备以及正在使用哪些介质？</p>\n</blockquote>\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 物理拓扑</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 逻辑拓扑</li>\n</ul>\n</blockquote>\n</div>\n\n<blockquote>\n<p>哪种网络拓扑结构可以让您看到中间设备和电缆安装的实际位置?</p>\n</blockquote>\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 物理拓扑</li>\n<li><input disabled=\"\" type=\"checkbox\"> 逻辑拓扑</li>\n</ul>\n</blockquote>\n</div>\n\n<h2 id=\"常见网络类型\"><a href=\"#常见网络类型\" class=\"headerlink\" title=\"常见网络类型\"></a>常见网络类型</h2><h3 id=\"多种规模的网络\"><a href=\"#多种规模的网络\" class=\"headerlink\" title=\"多种规模的网络\"></a>多种规模的网络</h3><ul>\n<li>**<code>小型家庭网络</code>**：小型家庭网络将少量的几台计算机互联并将它们连接到互联网。</li>\n<li>**<code>小型办公室和家庭办公室网络</code>**：小型办公室/家庭办公室 (SOHO) 网络可让一个家庭办公室或远程办公室内的计算机连接到企业网络或访问集中的共享资源。</li>\n<li>**<code>大中型网络</code>**：中大型网络（例如大型企业和学校使用的网络）可能有许多站点，包含成百上千台相互连接的主机。</li>\n<li>**<code>全球网络</code>**：互联网是由网络组成的网络，连接全球亿万台计算机。</li>\n</ul>\n<h3 id=\"LAN-和-WAN\"><a href=\"#LAN-和-WAN\" class=\"headerlink\" title=\"LAN 和 WAN\"></a>LAN 和 WAN</h3><p>网络基础设施在以下方面存在巨大差异：</p>\n<ul>\n<li>覆盖的区域大小</li>\n<li>连接的用户数量</li>\n<li>可用的服务数量和类型</li>\n<li>职责范围</li>\n</ul>\n<p><code>局域网(LAN)</code>：较小地理区域内提供访问的网络基础设施，通常用于企业、家庭或小型企业网络中的部门。</p>\n<ul>\n<li>LAN 在有限区域（如家庭、学校、办公大楼或园区）内互连终端设备。</li>\n<li>LAN 通常由一个组织或个人管理。实行网络级管控、安全控制并制定访问控制策略。</li>\n<li>LAN 为内部终端设备和中间设备提供高速带宽，如图所示。</li>\n</ul>\n<p><code>广域网 (WAN)</code> ：针对广泛地理区域内的其他网络提供访问的网络基础设施，通常由服务提供商 (SP) 或互联网服务提供商 (ISP) 管理。</p>\n<ul>\n<li>WAN 互连广泛地理区域（例如各大城市、州、省、国家/地区或大陆之间）内的 LAN。</li>\n<li>WAN 通常由多个服务提供商管理。</li>\n<li>WAN 通常提供 LAN 之间的较慢链路。</li>\n</ul>\n<h3 id=\"互联网\"><a href=\"#互联网\" class=\"headerlink\" title=\"互联网\"></a>互联网</h3><p>互联网不属于任何个人或团体。要确保通过这种多元化基础设施有效通信，需要采用统一的公认技术和标准，也需要众多网络管理机构相互协作。为了维护互联网协议和进程的结构和标准化，人们建立了许多组织。这些组织包括<strong>互联网工程任务组 (IETF)<strong>、</strong>互联网名称与数字地址分配机构 (ICANN)</strong> 和**互联网架构委员会 (IAB)**，以及许多其他组织。</p>\n<h3 id=\"内部网和外联网\"><a href=\"#内部网和外联网\" class=\"headerlink\" title=\"内部网和外联网\"></a>内部网和外联网</h3><p>与术语“互联网”类似的另外两个术语是内部网和外联网。</p>\n<ul>\n<li><p><code>内联网</code>:内部网这个术语用于表示一个组织的私有局域网和广域网连接。内部网的设计旨在仅允许该组织的成员、员工或其他获得授权的人员进行访问。</p>\n</li>\n<li><p><code>外联网</code>:组织可以使用外联网为在其他组织工作，但需要本组织数据的人提供安全访问。</p>\n</li>\n<li><p><img src=\"https://img.inzamz.top/article/ITNNote/Internet.png\" alt=\"Internat\" loading=\"lazy\"></p>\n</li>\n</ul>\n<h3 id=\"习题-2\"><a href=\"#习题-2\" class=\"headerlink\" title=\"习题\"></a>习题</h3><blockquote>\n<p>哪个网络基础设施提供对较小地理区域(通常是企业、家庭或小型企业部门中的网络)内的用户和终端设备的访问？</p>\n</blockquote>\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 外联网</li>\n<li><input disabled=\"\" type=\"checkbox\"> 内部网</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> LAN</li>\n<li><input disabled=\"\" type=\"checkbox\"> WAN</li>\n</ul>\n</blockquote>\n</div>\n\n<blockquote>\n<p>组织可以使用哪个网络基础设施为在不同组织工作、但需要访问本组织数据的个人提供安全访问？</p>\n</blockquote>\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 外联网</li>\n<li><input disabled=\"\" type=\"checkbox\"> 内部网</li>\n<li><input disabled=\"\" type=\"checkbox\"> LAN</li>\n<li><input disabled=\"\" type=\"checkbox\"> WAN</li>\n</ul>\n</blockquote>\n</div>\n\n<blockquote>\n<p>哪个网络基础设施提供了对广泛地理区域内的其他网络的访问，且通常由电信服务提供商拥有和管理？</p>\n</blockquote>\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 外联网</li>\n<li><input disabled=\"\" type=\"checkbox\"> 内部网</li>\n<li><input disabled=\"\" type=\"checkbox\"> LAN</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> WAN</li>\n</ul>\n</blockquote>\n</div>\n\n<h2 id=\"Internet-连接\"><a href=\"#Internet-连接\" class=\"headerlink\" title=\"Internet 连接\"></a>Internet 连接</h2><h3 id=\"Internet-访问技术\"><a href=\"#Internet-访问技术\" class=\"headerlink\" title=\"Internet 访问技术\"></a>Internet 访问技术</h3><p>不同 ISP 和地理位置的连接选项各不相同。但是，常见的选择包括宽带电缆、宽带数字用户线路 (DSL)、无线 WAN 和移动服务。</p>\n<p>组织通常需要访问其他企业站点和互联网，支持 IP 电话、视频会议和数据中心存储等企业服务需要的快速连接。SP 提供企业级互连。最常见的企业级服务包括业务 DSL、租用线路和城域以太网。</p>\n<h3 id=\"家庭和小型办公室-Internet-连接\"><a href=\"#家庭和小型办公室-Internet-连接\" class=\"headerlink\" title=\"家庭和小型办公室 Internet 连接\"></a>家庭和小型办公室 Internet 连接</h3><p><img src=\"https://img.inzamz.top/article/ITNNote/Internet-connection.png\" alt=\"Internet-connection\" loading=\"lazy\"></p>\n<ul>\n<li><strong><code>有线电视</code></strong>:互联网数据信号在输送有线电视信号的同一电缆上进行传输。它提供了高带宽、高可用性和始终在线的互联网连接。</li>\n<li><strong><code>DSL(Digital subscriber line)</code></strong>:数字用户线也可提供高带宽、高可用性和始终在线的互联网连接。DSL 通过电话线路运行。通常小型办公室和家庭办公室用户会选择使用非对称 DSL (ADSL)，这种方式的特点是下载速度高于上传速度。</li>\n<li><strong><code>蜂窝网</code></strong>:蜂窝网互联网接入使用手机网络进行连接。只要您能收到蜂窝网信号，就能获得蜂窝网互联网接入。性能会受手机功能和手机基站的限制。</li>\n<li><strong><code>卫星</code></strong>:对于根本没有互联网连接的地方来说，获得卫星互联网访问非常有用。卫星天线要求<strong>有到卫星的清晰视线</strong>。</li>\n<li><strong><code>拨号电话</code></strong>:使用电话线和调制解调器，费用相对较低。拨号调制解调器连接提供的低带宽不足以用于大型数据传输，但对旅行过程中的<strong>移动访问非常有用</strong>。</li>\n</ul>\n<h3 id=\"企业-Internet-连接\"><a href=\"#企业-Internet-连接\" class=\"headerlink\" title=\"企业 Internet 连接\"></a>企业 Internet 连接</h3><p>企业可能需要更高带宽、专用带宽和托管服务。</p>\n<p><img src=\"https://img.inzamz.top/article/ITNNote/Internet-connection-2.png\" alt=\"Internet-connection\" loading=\"lazy\"></p>\n<ul>\n<li><strong><code>专用租用线路</code></strong>:租用线路是服务提供商网络内连接地理位置分散的办公室的保留电路，提供个人语音和/或数据网络。电路按月或按年租用。</li>\n<li><strong><code>城域以太网</code></strong>:有时被称为以太网 WAN. 在本模块中，我们把它称为城域以太网。城域以太网将 LAN 访问技术扩展到 WAN 中。以太网是一种 LAN 技术。</li>\n<li><strong><code>DSL</code></strong>:企业 DSL 提供各种格式。一种常见的选择是对称数字用户线路 (SDSL)，它类似于 DSL 的普通用户版本，但是<strong>提供相同的上传和下载速度</strong>。</li>\n<li><strong><code>卫星</code></strong>:当有线解决方案不可用时，卫星服务可以提供连接。</li>\n</ul>\n<h3 id=\"融合网络\"><a href=\"#融合网络\" class=\"headerlink\" title=\"融合网络\"></a>融合网络</h3><p>传统的独立网络使用不同的技术传送通信信号 , 每个网络都有自己的一套规则和标准来确保成功通信。今天，独立的数据、电话和视频网络融合在了一起。此网络基础设施采用一组相同的规则、协议和实施标准。融合数据网络在一个网络中传送多种服务。</p>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<blockquote>\n<p>系统地学习一下思科网课中的网络课程 , 笔记记录一下 . </p>\n</blockquote>","more":"<hr>\n<h2 id=\"网络组件\"><a href=\"#网络组件\" class=\"headerlink\" title=\"网络组件\"></a>网络组件</h2><h3 id=\"主机角色\"><a href=\"#主机角色\" class=\"headerlink\" title=\"主机角色\"></a>主机角色</h3><ul>\n<li><code>主机</code>：连接到网络并直接参与网络通信的所有计算机都属于主机。术语主机特指网络上为通信目的而分配了一个数字的设备。这个数字用来标识特定网络中的主机。这个数字称为互联网协议 (IP) 地址。IP 地址标识主机和主机所连接的网络。一般分为服务器和客户端。<ul>\n<li><code>服务器</code>：服务器是装有特殊软件，可以为网络上其他终端设备提供信息（例如电子邮件或网页）的计算机。每项服务都需要单独的服务器软件例如 : 邮件，文件，Web。</li>\n<li><code>客户端</code>：客户端软件用于请求和显示从服务器获取的信息。一台计算机可以运行多种类型的客户端软件。</li>\n<li><img src=\"https://img.inzamz.top/article/ITNNote/Server.png\" alt=\"Server\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"点对点\"><a href=\"#点对点\" class=\"headerlink\" title=\"点对点\"></a>点对点</h3><p><code>对等网络</code>：在小企业和家庭中，许多计算机在网络中既是服务器又是客户端。这种网络称为对等网络。</p>\n<ul>\n<li><code>优点</code>：易安装、复杂性低、成本低（不需要其他服务器和设备）、可完成简单任务。</li>\n<li><code>缺点</code>：无集中管理、不可拓展、安全性低、无法完成复杂任务</li>\n</ul>\n<h3 id=\"终端设备\"><a href=\"#终端设备\" class=\"headerlink\" title=\"终端设备\"></a>终端设备</h3><p><code>终端设备</code>：终端设备是指通过网络传输的消息的来源或目的地。当一台终端设备发起通信时，会使用目的终端设备的地址来指定应该将消息发送到哪里。</p>\n<h3 id=\"中间设备\"><a href=\"#中间设备\" class=\"headerlink\" title=\"中间设备\"></a>中间设备</h3><p><code>中间设备</code>：中间设备提供连接并确保数据在网络中传输。</p>\n<p><img src=\"https://img.inzamz.top/article/ITNNote/Intermediate-equipment.png\" alt=\"Intermediate-equipment\"></p>\n<p>中间网络设备执行以下部分或全部功能：</p>\n<ul>\n<li>重新生成并重新传输通信信号。</li>\n<li>维护有关网络和互联网络中存在哪些路径的信息。</li>\n<li>将错误和通信故障通知其它设备</li>\n<li>发生链路故障时按照备用路径转发数据</li>\n<li>根据优先级别分类和转发消息</li>\n<li>根据安全设置允许或拒绝数据的通行</li>\n</ul>\n<p><strong>注意:</strong> 未显示的是传统以太网集线器。以太网集线器也称为多端口中继器。重新生成并重新传输通信信号。所有中间设备都具有中继器的功能。</p>\n<h3 id=\"网络介质\"><a href=\"#网络介质\" class=\"headerlink\" title=\"网络介质\"></a>网络介质</h3><p><code>介质</code>：介质为消息从源设备传送到目的设备提供了通道。</p>\n<ul>\n<li><p>**<code>金属线电缆</code>**：数据被编码为电脉冲</p>\n</li>\n<li><p>**<code>玻璃或塑料光纤（光缆）</code>**：数据被编码为光脉冲</p>\n</li>\n<li><p>**<code>无线传输</code>**：数据是通过调制特定频率的电磁波进行编码的。</p>\n<p>不同类型的网络介质有不同的特性和优点。并不是所有网络介质都具有相同的特点，它们也不具有相同的用途。一般要考虑传输距离、介质所处环境、数据量和传输速率需求、安装成本等。</p>\n</li>\n</ul>\n<h3 id=\"习题\"><a href=\"#习题\" class=\"headerlink\" title=\"习题\"></a>习题</h3><blockquote>\n<p>下列哪个是所有直接参与网络通信的连接到网络的计算机的名称?</p>\n</blockquote>\n<div class=\"success\">\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 服务器</li>\n<li><input disabled=\"\" type=\"checkbox\"> 中间设备</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 主机</li>\n<li><input disabled=\"\" type=\"checkbox\"> 介质</li>\n</ul>\n</blockquote>\n</div>\n\n\n<blockquote>\n<p>当数据被编码为光脉冲时，哪个介质被用来传输数据?    </p>\n</blockquote>\n<div class=\"success\">\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 无线</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 光缆</li>\n<li><input disabled=\"\" type=\"checkbox\"> 铜缆</li>\n</ul>\n</blockquote>\n</div>\n\n\n<blockquote>\n<p>哪种设备是中间设备？（选择两项）    </p>\n</blockquote>\n<div class=\"success\">\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 主机</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 路由器</li>\n<li><input disabled=\"\" type=\"checkbox\"> 服务器</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 交换机</li>\n</ul>\n</blockquote>\n</div>\n\n<h2 id=\"网络表示方式和网络拓扑\"><a href=\"#网络表示方式和网络拓扑\" class=\"headerlink\" title=\"网络表示方式和网络拓扑\"></a>网络表示方式和网络拓扑</h2><h3 id=\"网络表示方式\"><a href=\"#网络表示方式\" class=\"headerlink\" title=\"网络表示方式\"></a>网络表示方式</h3><p>网络图通常使用图标来表示构成网络的不同设备和连接。这种网络“图”被称为“拓扑图”。</p>\n<p>除了这些表示之外，还使用专门的术语来描述这些设备和介质是如何相互连接的:</p>\n<ul>\n<li>**<code>网络接口卡 (NIC)</code>**：将设备物理连接到网络。</li>\n<li>**<code>物理端口</code>**：网络设备上的接口或插口，介质通过它连接到终端设备或其他网络设备。</li>\n<li>**<code>接口</code>**：网络设备上连接到独立网络的专用端口。由于路由器连接了不同的网络，路由器上的端口称为网络接口。</li>\n</ul>\n<div class=danger>\n\n<blockquote>\n<p><strong>注意</strong>：“端口”和“接口”这两个词往往可以互换使用。</p>\n</blockquote>\n</div>\n\n<h3 id=\"拓扑图\"><a href=\"#拓扑图\" class=\"headerlink\" title=\"拓扑图\"></a>拓扑图</h3><p>可以提供直观的网络连接图。有物理图和逻辑图。</p>\n<ul>\n<li><code>物理拓扑图</code>：说明了中间设备和电缆安装的物理位置</li>\n<li><code>逻辑拓扑图</code>：说明了设备、端口和网络的编址方案，可以查看哪些终端设备连接到哪些中间设备以及正在使用哪些介质。</li>\n</ul>\n<h3 id=\"习题-1\"><a href=\"#习题-1\" class=\"headerlink\" title=\"习题\"></a>习题</h3><blockquote>\n<p>哪个连接将终端设备物理连接到网络?</p>\n</blockquote>\n<div class=danger>\n\n<blockquote>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 端口</li>\n<li><input disabled=\"\" type=\"checkbox\"> 网卡</li>\n<li><input disabled=\"\" type=\"checkbox\"> 接口</li>\n</ul>\n</blockquote>\n</div>\n\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 端口</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 网卡</li>\n<li><input disabled=\"\" type=\"checkbox\"> 接口</li>\n</ul>\n</blockquote>\n</div>\n\n<blockquote>\n<p>哪些连接是连接到独立网络的网络设备上的专用端口?</p>\n</blockquote>\n<div class=danger>\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 端口</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 网卡</li>\n<li><input disabled=\"\" type=\"checkbox\"> 接口</li>\n</ul>\n</blockquote>\n</div>\n\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 端口</li>\n<li><input disabled=\"\" type=\"checkbox\"> 网卡</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 接口</li>\n</ul>\n</blockquote>\n</div>\n\n<blockquote>\n<p>哪种类型的网络拓扑可以让您查看哪些终端设备连接到哪些中间设备以及正在使用哪些介质？</p>\n</blockquote>\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 物理拓扑</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 逻辑拓扑</li>\n</ul>\n</blockquote>\n</div>\n\n<blockquote>\n<p>哪种网络拓扑结构可以让您看到中间设备和电缆安装的实际位置?</p>\n</blockquote>\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 物理拓扑</li>\n<li><input disabled=\"\" type=\"checkbox\"> 逻辑拓扑</li>\n</ul>\n</blockquote>\n</div>\n\n<h2 id=\"常见网络类型\"><a href=\"#常见网络类型\" class=\"headerlink\" title=\"常见网络类型\"></a>常见网络类型</h2><h3 id=\"多种规模的网络\"><a href=\"#多种规模的网络\" class=\"headerlink\" title=\"多种规模的网络\"></a>多种规模的网络</h3><ul>\n<li>**<code>小型家庭网络</code>**：小型家庭网络将少量的几台计算机互联并将它们连接到互联网。</li>\n<li>**<code>小型办公室和家庭办公室网络</code>**：小型办公室/家庭办公室 (SOHO) 网络可让一个家庭办公室或远程办公室内的计算机连接到企业网络或访问集中的共享资源。</li>\n<li>**<code>大中型网络</code>**：中大型网络（例如大型企业和学校使用的网络）可能有许多站点，包含成百上千台相互连接的主机。</li>\n<li>**<code>全球网络</code>**：互联网是由网络组成的网络，连接全球亿万台计算机。</li>\n</ul>\n<h3 id=\"LAN-和-WAN\"><a href=\"#LAN-和-WAN\" class=\"headerlink\" title=\"LAN 和 WAN\"></a>LAN 和 WAN</h3><p>网络基础设施在以下方面存在巨大差异：</p>\n<ul>\n<li>覆盖的区域大小</li>\n<li>连接的用户数量</li>\n<li>可用的服务数量和类型</li>\n<li>职责范围</li>\n</ul>\n<p><code>局域网(LAN)</code>：较小地理区域内提供访问的网络基础设施，通常用于企业、家庭或小型企业网络中的部门。</p>\n<ul>\n<li>LAN 在有限区域（如家庭、学校、办公大楼或园区）内互连终端设备。</li>\n<li>LAN 通常由一个组织或个人管理。实行网络级管控、安全控制并制定访问控制策略。</li>\n<li>LAN 为内部终端设备和中间设备提供高速带宽，如图所示。</li>\n</ul>\n<p><code>广域网 (WAN)</code> ：针对广泛地理区域内的其他网络提供访问的网络基础设施，通常由服务提供商 (SP) 或互联网服务提供商 (ISP) 管理。</p>\n<ul>\n<li>WAN 互连广泛地理区域（例如各大城市、州、省、国家/地区或大陆之间）内的 LAN。</li>\n<li>WAN 通常由多个服务提供商管理。</li>\n<li>WAN 通常提供 LAN 之间的较慢链路。</li>\n</ul>\n<h3 id=\"互联网\"><a href=\"#互联网\" class=\"headerlink\" title=\"互联网\"></a>互联网</h3><p>互联网不属于任何个人或团体。要确保通过这种多元化基础设施有效通信，需要采用统一的公认技术和标准，也需要众多网络管理机构相互协作。为了维护互联网协议和进程的结构和标准化，人们建立了许多组织。这些组织包括<strong>互联网工程任务组 (IETF)<strong>、</strong>互联网名称与数字地址分配机构 (ICANN)</strong> 和**互联网架构委员会 (IAB)**，以及许多其他组织。</p>\n<h3 id=\"内部网和外联网\"><a href=\"#内部网和外联网\" class=\"headerlink\" title=\"内部网和外联网\"></a>内部网和外联网</h3><p>与术语“互联网”类似的另外两个术语是内部网和外联网。</p>\n<ul>\n<li><p><code>内联网</code>:内部网这个术语用于表示一个组织的私有局域网和广域网连接。内部网的设计旨在仅允许该组织的成员、员工或其他获得授权的人员进行访问。</p>\n</li>\n<li><p><code>外联网</code>:组织可以使用外联网为在其他组织工作，但需要本组织数据的人提供安全访问。</p>\n</li>\n<li><p><img src=\"https://img.inzamz.top/article/ITNNote/Internet.png\" alt=\"Internat\"></p>\n</li>\n</ul>\n<h3 id=\"习题-2\"><a href=\"#习题-2\" class=\"headerlink\" title=\"习题\"></a>习题</h3><blockquote>\n<p>哪个网络基础设施提供对较小地理区域(通常是企业、家庭或小型企业部门中的网络)内的用户和终端设备的访问？</p>\n</blockquote>\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 外联网</li>\n<li><input disabled=\"\" type=\"checkbox\"> 内部网</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> LAN</li>\n<li><input disabled=\"\" type=\"checkbox\"> WAN</li>\n</ul>\n</blockquote>\n</div>\n\n<blockquote>\n<p>组织可以使用哪个网络基础设施为在不同组织工作、但需要访问本组织数据的个人提供安全访问？</p>\n</blockquote>\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 外联网</li>\n<li><input disabled=\"\" type=\"checkbox\"> 内部网</li>\n<li><input disabled=\"\" type=\"checkbox\"> LAN</li>\n<li><input disabled=\"\" type=\"checkbox\"> WAN</li>\n</ul>\n</blockquote>\n</div>\n\n<blockquote>\n<p>哪个网络基础设施提供了对广泛地理区域内的其他网络的访问，且通常由电信服务提供商拥有和管理？</p>\n</blockquote>\n<div class=success>\n\n<blockquote>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 外联网</li>\n<li><input disabled=\"\" type=\"checkbox\"> 内部网</li>\n<li><input disabled=\"\" type=\"checkbox\"> LAN</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> WAN</li>\n</ul>\n</blockquote>\n</div>\n\n<h2 id=\"Internet-连接\"><a href=\"#Internet-连接\" class=\"headerlink\" title=\"Internet 连接\"></a>Internet 连接</h2><h3 id=\"Internet-访问技术\"><a href=\"#Internet-访问技术\" class=\"headerlink\" title=\"Internet 访问技术\"></a>Internet 访问技术</h3><p>不同 ISP 和地理位置的连接选项各不相同。但是，常见的选择包括宽带电缆、宽带数字用户线路 (DSL)、无线 WAN 和移动服务。</p>\n<p>组织通常需要访问其他企业站点和互联网，支持 IP 电话、视频会议和数据中心存储等企业服务需要的快速连接。SP 提供企业级互连。最常见的企业级服务包括业务 DSL、租用线路和城域以太网。</p>\n<h3 id=\"家庭和小型办公室-Internet-连接\"><a href=\"#家庭和小型办公室-Internet-连接\" class=\"headerlink\" title=\"家庭和小型办公室 Internet 连接\"></a>家庭和小型办公室 Internet 连接</h3><p><img src=\"https://img.inzamz.top/article/ITNNote/Internet-connection.png\" alt=\"Internet-connection\"></p>\n<ul>\n<li><strong><code>有线电视</code></strong>:互联网数据信号在输送有线电视信号的同一电缆上进行传输。它提供了高带宽、高可用性和始终在线的互联网连接。</li>\n<li><strong><code>DSL(Digital subscriber line)</code></strong>:数字用户线也可提供高带宽、高可用性和始终在线的互联网连接。DSL 通过电话线路运行。通常小型办公室和家庭办公室用户会选择使用非对称 DSL (ADSL)，这种方式的特点是下载速度高于上传速度。</li>\n<li><strong><code>蜂窝网</code></strong>:蜂窝网互联网接入使用手机网络进行连接。只要您能收到蜂窝网信号，就能获得蜂窝网互联网接入。性能会受手机功能和手机基站的限制。</li>\n<li><strong><code>卫星</code></strong>:对于根本没有互联网连接的地方来说，获得卫星互联网访问非常有用。卫星天线要求<strong>有到卫星的清晰视线</strong>。</li>\n<li><strong><code>拨号电话</code></strong>:使用电话线和调制解调器，费用相对较低。拨号调制解调器连接提供的低带宽不足以用于大型数据传输，但对旅行过程中的<strong>移动访问非常有用</strong>。</li>\n</ul>\n<h3 id=\"企业-Internet-连接\"><a href=\"#企业-Internet-连接\" class=\"headerlink\" title=\"企业 Internet 连接\"></a>企业 Internet 连接</h3><p>企业可能需要更高带宽、专用带宽和托管服务。</p>\n<p><img src=\"https://img.inzamz.top/article/ITNNote/Internet-connection-2.png\" alt=\"Internet-connection\"></p>\n<ul>\n<li><strong><code>专用租用线路</code></strong>:租用线路是服务提供商网络内连接地理位置分散的办公室的保留电路，提供个人语音和/或数据网络。电路按月或按年租用。</li>\n<li><strong><code>城域以太网</code></strong>:有时被称为以太网 WAN. 在本模块中，我们把它称为城域以太网。城域以太网将 LAN 访问技术扩展到 WAN 中。以太网是一种 LAN 技术。</li>\n<li><strong><code>DSL</code></strong>:企业 DSL 提供各种格式。一种常见的选择是对称数字用户线路 (SDSL)，它类似于 DSL 的普通用户版本，但是<strong>提供相同的上传和下载速度</strong>。</li>\n<li><strong><code>卫星</code></strong>:当有线解决方案不可用时，卫星服务可以提供连接。</li>\n</ul>\n<h3 id=\"融合网络\"><a href=\"#融合网络\" class=\"headerlink\" title=\"融合网络\"></a>融合网络</h3><p>传统的独立网络使用不同的技术传送通信信号 , 每个网络都有自己的一套规则和标准来确保成功通信。今天，独立的数据、电话和视频网络融合在了一起。此网络基础设施采用一组相同的规则、协议和实施标准。融合数据网络在一个网络中传送多种服务。</p>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"你好，世界","icon":"icon-play","date":"2021-06-26T15:51:53.000Z","updated":"2021-06-27T15:51:53.000Z","_content":"\n男女主的感情表达得很好 , 世界观一般 , 剧情很可以 . 总体来说还是很可以的 . 按照我毒瘤的评分标准 , 7.5 分吧 . 和室友包场了 , 可悲的是 , 其他两对都是情侣 . \n\n<!-- more -->\n\n---\n\n看了一下云游君的推特，发现他要约喜欢的人去看这部电影，看了一下预告片，很喜欢，就约了室友去看。什么时候有女孩子可以约啊 :joy: .\n\n之后发现原来是19年的电影，现在才过审，顿时对鬼灭上映失去信心。\n\n首先影片是3D渲2D，所以人物的动作啥的看起来都有点奇怪，不过习惯了就能接受。剧情方面，中间有一个地方，我说如果是这样的结局那很一般，然后反转了。最后还有个反转，我觉得整体剧情就很好了。\n以下涉及剧情。\n\n故事是说男主有一天遇到了从十年后穿越回来的自己，被告知自己所在的世界是一个模拟程序，记录了十年内所有信息的世界。女主在和男主恋爱后不久就因为意外死亡，于是十年后的男主声称为了让女主能在另一个世界幸福，要帮助男主拯救女主。\n\n涉及到穿越总会经不起推敲，毕竟这种总容易出现外祖母悖论之类的。但是这电影还好，因为未来的人的介入，导致时间线变动，这也是女主意识到情况的不对。\n\n当然无论哪一个男主最后给我的印象都是好的，未来的男主出于自私，想要夺取的心理是可以理解的。我们都会下意识地以自我为中心，认为自己的世界是所谓的真实。最后未来的男主也是释然了，为了自己的错误献身。\n而整部电影的世界观也是我比较喜欢的一种，这种世界的出现只有一个或者无数个，所以博士最后关闭那个开关的时候，我的想法竟然和他出奇的一致，就像宇宙大爆炸的那一瞬。有个不恰当的类比，相当于切断了程序中的递归层中的一个通道，形成了两个平行宇宙。\n\n最后一幕是未来的男主死后，在另一个世界醒来，也就是说外面还有一层，那一层的女主是实验室的工作人员。这一幕跟刀剑神域爱丽丝篇有异曲同工之妙，就是爱丽丝反问人类，你们怎么知道自己的世界不是别人的程序呢。这个世界观挺有意思的。\n\n当然要吐槽的还是要吐槽，最后男主醒来一幕是2D的，但是前面还有几秒男女主kiss的片段就不能一起画了吗，满足一下观众嘛。其他都很好的，男女主间的感情也不做作，很自然，特效还行，总之比较推荐的！\n\n<!-- Q.E.D. -->","source":"_posts/MovieHelloWorld.md","raw":"---\ntitle: 你好，世界\nicon: icon-play\ncategories:\n  - 无聊的小分享\ntags:\n  - 影评\ndate: 2021-06-26 23:51:53\nupdated: 2021-06-27 23:51:53\n---\n\n男女主的感情表达得很好 , 世界观一般 , 剧情很可以 . 总体来说还是很可以的 . 按照我毒瘤的评分标准 , 7.5 分吧 . 和室友包场了 , 可悲的是 , 其他两对都是情侣 . \n\n<!-- more -->\n\n---\n\n看了一下云游君的推特，发现他要约喜欢的人去看这部电影，看了一下预告片，很喜欢，就约了室友去看。什么时候有女孩子可以约啊 :joy: .\n\n之后发现原来是19年的电影，现在才过审，顿时对鬼灭上映失去信心。\n\n首先影片是3D渲2D，所以人物的动作啥的看起来都有点奇怪，不过习惯了就能接受。剧情方面，中间有一个地方，我说如果是这样的结局那很一般，然后反转了。最后还有个反转，我觉得整体剧情就很好了。\n以下涉及剧情。\n\n故事是说男主有一天遇到了从十年后穿越回来的自己，被告知自己所在的世界是一个模拟程序，记录了十年内所有信息的世界。女主在和男主恋爱后不久就因为意外死亡，于是十年后的男主声称为了让女主能在另一个世界幸福，要帮助男主拯救女主。\n\n涉及到穿越总会经不起推敲，毕竟这种总容易出现外祖母悖论之类的。但是这电影还好，因为未来的人的介入，导致时间线变动，这也是女主意识到情况的不对。\n\n当然无论哪一个男主最后给我的印象都是好的，未来的男主出于自私，想要夺取的心理是可以理解的。我们都会下意识地以自我为中心，认为自己的世界是所谓的真实。最后未来的男主也是释然了，为了自己的错误献身。\n而整部电影的世界观也是我比较喜欢的一种，这种世界的出现只有一个或者无数个，所以博士最后关闭那个开关的时候，我的想法竟然和他出奇的一致，就像宇宙大爆炸的那一瞬。有个不恰当的类比，相当于切断了程序中的递归层中的一个通道，形成了两个平行宇宙。\n\n最后一幕是未来的男主死后，在另一个世界醒来，也就是说外面还有一层，那一层的女主是实验室的工作人员。这一幕跟刀剑神域爱丽丝篇有异曲同工之妙，就是爱丽丝反问人类，你们怎么知道自己的世界不是别人的程序呢。这个世界观挺有意思的。\n\n当然要吐槽的还是要吐槽，最后男主醒来一幕是2D的，但是前面还有几秒男女主kiss的片段就不能一起画了吗，满足一下观众嘛。其他都很好的，男女主间的感情也不做作，很自然，特效还行，总之比较推荐的！\n\n<!-- Q.E.D. -->","slug":"MovieHelloWorld","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uj7000b63jn7xap2f1q","content":"<p>男女主的感情表达得很好 , 世界观一般 , 剧情很可以 . 总体来说还是很可以的 . 按照我毒瘤的评分标准 , 7.5 分吧 . 和室友包场了 , 可悲的是 , 其他两对都是情侣 . </p>\n<span id=\"more\"></span>\n\n<hr>\n<p>看了一下云游君的推特，发现他要约喜欢的人去看这部电影，看了一下预告片，很喜欢，就约了室友去看。什么时候有女孩子可以约啊 :joy: .</p>\n<p>之后发现原来是19年的电影，现在才过审，顿时对鬼灭上映失去信心。</p>\n<p>首先影片是3D渲2D，所以人物的动作啥的看起来都有点奇怪，不过习惯了就能接受。剧情方面，中间有一个地方，我说如果是这样的结局那很一般，然后反转了。最后还有个反转，我觉得整体剧情就很好了。<br>以下涉及剧情。</p>\n<p>故事是说男主有一天遇到了从十年后穿越回来的自己，被告知自己所在的世界是一个模拟程序，记录了十年内所有信息的世界。女主在和男主恋爱后不久就因为意外死亡，于是十年后的男主声称为了让女主能在另一个世界幸福，要帮助男主拯救女主。</p>\n<p>涉及到穿越总会经不起推敲，毕竟这种总容易出现外祖母悖论之类的。但是这电影还好，因为未来的人的介入，导致时间线变动，这也是女主意识到情况的不对。</p>\n<p>当然无论哪一个男主最后给我的印象都是好的，未来的男主出于自私，想要夺取的心理是可以理解的。我们都会下意识地以自我为中心，认为自己的世界是所谓的真实。最后未来的男主也是释然了，为了自己的错误献身。<br>而整部电影的世界观也是我比较喜欢的一种，这种世界的出现只有一个或者无数个，所以博士最后关闭那个开关的时候，我的想法竟然和他出奇的一致，就像宇宙大爆炸的那一瞬。有个不恰当的类比，相当于切断了程序中的递归层中的一个通道，形成了两个平行宇宙。</p>\n<p>最后一幕是未来的男主死后，在另一个世界醒来，也就是说外面还有一层，那一层的女主是实验室的工作人员。这一幕跟刀剑神域爱丽丝篇有异曲同工之妙，就是爱丽丝反问人类，你们怎么知道自己的世界不是别人的程序呢。这个世界观挺有意思的。</p>\n<p>当然要吐槽的还是要吐槽，最后男主醒来一幕是2D的，但是前面还有几秒男女主kiss的片段就不能一起画了吗，满足一下观众嘛。其他都很好的，男女主间的感情也不做作，很自然，特效还行，总之比较推荐的！</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>男女主的感情表达得很好 , 世界观一般 , 剧情很可以 . 总体来说还是很可以的 . 按照我毒瘤的评分标准 , 7.5 分吧 . 和室友包场了 , 可悲的是 , 其他两对都是情侣 . </p>","more":"<hr>\n<p>看了一下云游君的推特，发现他要约喜欢的人去看这部电影，看了一下预告片，很喜欢，就约了室友去看。什么时候有女孩子可以约啊 :joy: .</p>\n<p>之后发现原来是19年的电影，现在才过审，顿时对鬼灭上映失去信心。</p>\n<p>首先影片是3D渲2D，所以人物的动作啥的看起来都有点奇怪，不过习惯了就能接受。剧情方面，中间有一个地方，我说如果是这样的结局那很一般，然后反转了。最后还有个反转，我觉得整体剧情就很好了。<br>以下涉及剧情。</p>\n<p>故事是说男主有一天遇到了从十年后穿越回来的自己，被告知自己所在的世界是一个模拟程序，记录了十年内所有信息的世界。女主在和男主恋爱后不久就因为意外死亡，于是十年后的男主声称为了让女主能在另一个世界幸福，要帮助男主拯救女主。</p>\n<p>涉及到穿越总会经不起推敲，毕竟这种总容易出现外祖母悖论之类的。但是这电影还好，因为未来的人的介入，导致时间线变动，这也是女主意识到情况的不对。</p>\n<p>当然无论哪一个男主最后给我的印象都是好的，未来的男主出于自私，想要夺取的心理是可以理解的。我们都会下意识地以自我为中心，认为自己的世界是所谓的真实。最后未来的男主也是释然了，为了自己的错误献身。<br>而整部电影的世界观也是我比较喜欢的一种，这种世界的出现只有一个或者无数个，所以博士最后关闭那个开关的时候，我的想法竟然和他出奇的一致，就像宇宙大爆炸的那一瞬。有个不恰当的类比，相当于切断了程序中的递归层中的一个通道，形成了两个平行宇宙。</p>\n<p>最后一幕是未来的男主死后，在另一个世界醒来，也就是说外面还有一层，那一层的女主是实验室的工作人员。这一幕跟刀剑神域爱丽丝篇有异曲同工之妙，就是爱丽丝反问人类，你们怎么知道自己的世界不是别人的程序呢。这个世界观挺有意思的。</p>\n<p>当然要吐槽的还是要吐槽，最后男主醒来一幕是2D的，但是前面还有几秒男女主kiss的片段就不能一起画了吗，满足一下观众嘛。其他都很好的，男女主间的感情也不做作，很自然，特效还行，总之比较推荐的！</p>\n<!-- Q.E.D. -->"},{"title":"进击的巨人","date":"2021-07-04T07:55:47.000Z","updated":"2021-07-04T12:43:47.000Z","_content":"\n> 这一篇不可能缺席的 . 巨人是多少人的青春 , 对于他的结局 , 总的来说是烂的 , 但至少是圆满的 . 对于我 , 很晚入宅 , 但是不可否定的是我也为了他疯过 . 我看了很多结局的解读 , 找了自己能接受的 , 但当作者需要其他人解读时 , 作品已经算失败了......\n>\n> 在最后 , 我还是抱着一丝丝希望 , MAPPA能最后把结局改了 , 还给我们一个完美的青春 . \n\n<!-- more -->\n\n---\n\n要说我的入宅作，那必然是末日时在干什么？有没有空？可不可以拯救？但是，就我的评分标准这部番剧只能在T2级别。真正让我震撼的是进击的巨人，我曾经一度把它当作十分佳作，最后在一片骂声中完结，确实让人失望。但无法否认这部作品给我带来的震撼。\n\n这里提一下我个人的一个打分标准吧，五分制中，T1是4～5，这部分作品是想主题深刻的，并且制作等各方面都可以的佳作神作。这类作品很少很少，毕竟动漫的创作者和面向的群体决定了这部分作品必然不多，所以很少出现4的作品，这也是我评分偏低的原因吧。\n\n当年看这部作品，我看到第六集并不是特别兴趣，当然只是跟之后做对比。直到剧情走向火热之后，停不下来。一天基本一季，高二暑假前几天就刷完了。之后我反复刷这部作品，差不多56次以上了，第三季Part2更多次。整个故事讲述了在巨人的威胁下，艾伦和他的朋友们为了自由 , 与巨人展开的斗争的故事 . 而巨人真相的背后竟是种族之间的争斗 . \n\n## 人物心理\n\n![Afraid](https://img.inzamz.top/article/ShingekinoKyojin/Afraid.gif)\n\n首先 , 第一集就让我震撼了好久 , 巨人对每个人的描写 , 对心理的表现真实又逼真 . Hannes报恩的心情 , 到真正面对可怕的巨人 , 恐惧战胜了他 . 以及Eren妈妈的心理 , 一个普通的母亲 , 在死亡前想让孩子活下去 ; 当真正孤独等待死亡时 , 内心对生的渴望和恐惧 . 还有士兵在死亡和痛苦前 , 不停地喊着妈妈 , 对着听不懂话的巨人说下次不敢了 . 都是一个个真实的人 , 在恐惧面前的失态 . 这是让我感触很深的一个点 . (所以这跟烂尾有没有什么联系 ? 后面再说 .)\n\n![Afraid](https://img.inzamz.top/article/ShingekinoKyojin/Afraid2.gif)\n\n## 主题上升?\n\n你可以看到 , 我加了问号 . 首先就是这个名场面 , 就是莱纳因为精神分裂 , 自曝身份的场面 . 首先当时我是很惊讶的 , 我没有去思考那个问题 (如果艾伦能变成巨人 , 那超大型巨人不也可以是其他人变的吗?)可能就是把主角光环考虑其中后 , 我没有去思考 . 但是巨人使人变的 , 到后面艾尔迪亚人被其他种族歧视 , 我感觉它的主题已经可以上升了 , 如果最后谏山创给出一个好的解决方案 . 但是并没有 .\n\n![](https://img.inzamz.top/article/ShingekinoKyojin/Rebellion.gif)\n\n## 人物刻画\n\n每个人都是活生生的 , 就算是配角 , 动漫中都是会把他的感情塑造出来 . 就像上图的Mikasa完全可以砍要害防止变身 , 但是没下手 , 毕竟是这么多年的朋友 . 包括Bertholdt的破防 , 他们每个人都是被迫弄脏了双手 . \n\n![NobodyWanttoBeKiller](https://img.inzamz.top/article/ShingekinoKyojin/NobodyWanttoBeKiller.gif)\n\n### Levi\n\n兵长是我最喜欢的角色 , 没有之一 . 首先 , Levi的战斗力 , 毋庸置疑 . 但是兵长这个人让他更加无敌的是 , 遵守作为士兵最基本的要求 : 服从命令 . 我崇拜的是他无论能力多高 , 对上级命令绝不抵抗 , 永远脚踏实地 . \n\n兵长这一生 , 小时候过着艰苦生活 , Kenny在其母死后教会他如何在黑暗的地下街生存后 , 他不是成为大恶人 , 而是劫富济贫 , 寻找着到地上的出路 . 到加入调查兵团后 , 在Erwen的队伍里发挥出色 . 兵长的外传标题叫做无悔的抉择 , 应该指他决定跟随Erwen的决定 . 兵长一直在做选择 , 就像他说的 , 相信同伴还是自己 , 我也不知道答案 . 而我跟他的想法相同 , 反正要做决定 , 不要犹豫 , 选一个不后悔的 . \n\n![Levi](https://img.inzamz.top/article/ShingekinoKyojin/Levi1.gif)\n\n![NoRegrets](https://img.inzamz.top/article/ShingekinoKyojin/NotRegrets.gif)\n\n当然 , 这个人讲冷笑话的功底也是牛的 , 确实笑过几次 . 而且明明在很脏的地下街生活 , 但是洁癖很严重 . \n\n### Erwen\n\n团长是我最敬佩的人之一 . \n\n> 能够带领我们打败恶魔的 , 一定是恶魔 .\n\n​\t<img src=\"https://img.inzamz.top/article/ShingekinoKyojin/Erwin1.gif\" alt=\"Erwen\"  /> \n\n要知道这种在疼痛和恐惧面前镇定的人 , 是多么坚毅 . 我内心由衷地佩服他们 , 这就是现实中那些伟大的革命家们的写照 . 正像Armin所说 , 团长在最后连生命和人性都丢了 , 为了人类的未来 . \n\n![Armin](https://img.inzamz.top/article/ShingekinoKyojin/NoAbnegateNoGain.gif)\n\n这部作品可圈可点的地方太多了 , 我也没时间慢慢找出来了 , 至少动漫的前三季都是一部十分好的佳作 , 在我心中也是值9.5以上的 .\n\n## 关于结局\n\n加页出来之前 , 所谓的Armin幻想说 , 让人有着无限的遐想 . 但是我感觉还是不满意 , 这样将种族问题极端化了 , 这是不好的 , 我接受的是一个小Up主的看法 . 首先哈 , 不是在洗 , 我只是希望能够找到一个安慰自己的结局 . \n\n大家对于结局的不满就是集中在若干个点 , 艾伦弑母 , 巨人之力 , 艾伦破防 . \n\n### 艾伦弑母\n\n这里原话有一句没有办法 , 我个人感觉应该是谏山创没有足够空间来画 , 应该给出几种没有吃掉妈妈的情况 , 这样会引导读者想如何解困 , 也许会好一点吧 . 如果吃掉小贝 , 但是变回人形也是有一段昏迷的 , 你说这不会被吃回去吗 ? 而且被压住的妈妈是没办法走开的 , 是不是一定会死呢 ?\n\n### 巨人之力\n\n巨人之力的去向也是最不好的一点 , 毕竟怪诞虫的去向也是不明不白 , 最后小男孩看树洞 , 感觉是没有消失 . 但给我的感觉是他要开续作 , 所以 ? 反正我不抱太大希望他能写好 .\n\n### 艾伦破防\n\n这就是争议最大的点了 , 想让三笠守寡十年这种话我是真想不到 . 但是我们回想一下为什么大家会感觉不适 , 就是因为整个第四季 , 就是马莱篇开始艾伦给人的感觉就是高高在上 , 不食人间烟火的感觉 . 仔细一想 , 这和那个Jean口中的送死鬼一样吗 ? 他看到了记忆 , 他只会按照剧本走 , 他没有任何感情波动 . 甚至Sasha死的时候还在笑 , 因为自己的无能 , 其实在第二次见到\"吃妈巨\"时 , 破防也是有笑声的 , 那种破防后又哭又笑 .\n\n![YouStillCan'tDoAnything](https://img.inzamz.top/article/ShingekinoKyojin/YouStillCan'tDoAnything.jpg)\n\n那么回到最初 , 我最震撼的是谏山创给我的真实感 , 那艾伦在我这就没什么问题了 , 这个人就是一个冲动的小男孩 , 还正好撞上了中二期 ,  对吧 . 我室友还对Reiner特别反感 , 但是Reiner也是被各种事情压抑着 , 而从巨人之力中解脱后 , 他不是正回到训练兵时期的形象了吗 , 还怂恿Eren去找Annie打架 . 最后一话就是大家已经放下所有 , 然后没有敌意后的快乐生活 . \n\n当然 , 说到底 , 这群人就是一群杀人犯 . 我们只是跟着主角的视角去听这个故事 , 但是你要细细反思 , 每一个正常人所渴望的生活并不是什么拯救世界 , 而是像Eren妈妈所想的 , 孩子快乐的成长 ; 像Hannes说的士兵没事干的日子 , 这才是大多数普通老百姓所要的生活 . 然而这种普通人的视角就是体现在萨沙一家子身上 . 所有百姓跟萨沙一家一样 , 平静的生活被打破 , 不幸丧生 , 或者在无尽的斗争中苟活 , 祈祷灾难不降临在自己头上 . 而主角团如何对待这群人的 ? Eren踩死了多少无辜的人 , Armin炸死了军港多少人 ? 什么 , 你说军港都是士兵 , 那飞天而下的石头把一个杂货店老板砸死了怎么说 ? 动漫刻意给了特写 , 这个老板在前面给孩子们发了面包 . 至于马莱这边就更不用说了 , 第一集就已经够多了 . \n\n这个世界不是非黑即白的 , 没有绝对的善恶 . 可以看到马莱人在岛上以及艾尔迪亚人在马莱的待遇是一样的 , 所以种族歧视就是人心的恶的一个表现罢了 . 作者并不是想要让我们去向主角团学习 , 而是在故事中去反思 , 从中获取启示 . \n\n## 尾声\n\n即使是烂尾了 , 巨人终究是给我留下了不可磨灭的印记 . 今年还带着调查兵团的斗篷去了漫展 , 弥补一下中学的中二病 . 舞台上那一段巨人的表演让我心血沸腾 , 甚至我喊出了那些台词 , 献出了自己的心脏 . 我的微信头像也一直没换 , 就是兵长的头像 . 我慢慢地接受这个结局 , 然后慢慢地结束自己的青春......\n\nTo be continued...(后续可能会补充一些印象深刻的人物)\n\n<!-- Q.E.D. -->","source":"_posts/ShingekinoKyoji.md","raw":"---\ntitle: 进击的巨人\ncategories:\n  - 无聊的小分享\ntags:\n  - 漫评\ndate: 2021-07-04 15:55:47\nupdated: 2021-07-04 20:43:47\n---\n\n> 这一篇不可能缺席的 . 巨人是多少人的青春 , 对于他的结局 , 总的来说是烂的 , 但至少是圆满的 . 对于我 , 很晚入宅 , 但是不可否定的是我也为了他疯过 . 我看了很多结局的解读 , 找了自己能接受的 , 但当作者需要其他人解读时 , 作品已经算失败了......\n>\n> 在最后 , 我还是抱着一丝丝希望 , MAPPA能最后把结局改了 , 还给我们一个完美的青春 . \n\n<!-- more -->\n\n---\n\n要说我的入宅作，那必然是末日时在干什么？有没有空？可不可以拯救？但是，就我的评分标准这部番剧只能在T2级别。真正让我震撼的是进击的巨人，我曾经一度把它当作十分佳作，最后在一片骂声中完结，确实让人失望。但无法否认这部作品给我带来的震撼。\n\n这里提一下我个人的一个打分标准吧，五分制中，T1是4～5，这部分作品是想主题深刻的，并且制作等各方面都可以的佳作神作。这类作品很少很少，毕竟动漫的创作者和面向的群体决定了这部分作品必然不多，所以很少出现4的作品，这也是我评分偏低的原因吧。\n\n当年看这部作品，我看到第六集并不是特别兴趣，当然只是跟之后做对比。直到剧情走向火热之后，停不下来。一天基本一季，高二暑假前几天就刷完了。之后我反复刷这部作品，差不多56次以上了，第三季Part2更多次。整个故事讲述了在巨人的威胁下，艾伦和他的朋友们为了自由 , 与巨人展开的斗争的故事 . 而巨人真相的背后竟是种族之间的争斗 . \n\n## 人物心理\n\n![Afraid](https://img.inzamz.top/article/ShingekinoKyojin/Afraid.gif)\n\n首先 , 第一集就让我震撼了好久 , 巨人对每个人的描写 , 对心理的表现真实又逼真 . Hannes报恩的心情 , 到真正面对可怕的巨人 , 恐惧战胜了他 . 以及Eren妈妈的心理 , 一个普通的母亲 , 在死亡前想让孩子活下去 ; 当真正孤独等待死亡时 , 内心对生的渴望和恐惧 . 还有士兵在死亡和痛苦前 , 不停地喊着妈妈 , 对着听不懂话的巨人说下次不敢了 . 都是一个个真实的人 , 在恐惧面前的失态 . 这是让我感触很深的一个点 . (所以这跟烂尾有没有什么联系 ? 后面再说 .)\n\n![Afraid](https://img.inzamz.top/article/ShingekinoKyojin/Afraid2.gif)\n\n## 主题上升?\n\n你可以看到 , 我加了问号 . 首先就是这个名场面 , 就是莱纳因为精神分裂 , 自曝身份的场面 . 首先当时我是很惊讶的 , 我没有去思考那个问题 (如果艾伦能变成巨人 , 那超大型巨人不也可以是其他人变的吗?)可能就是把主角光环考虑其中后 , 我没有去思考 . 但是巨人使人变的 , 到后面艾尔迪亚人被其他种族歧视 , 我感觉它的主题已经可以上升了 , 如果最后谏山创给出一个好的解决方案 . 但是并没有 .\n\n![](https://img.inzamz.top/article/ShingekinoKyojin/Rebellion.gif)\n\n## 人物刻画\n\n每个人都是活生生的 , 就算是配角 , 动漫中都是会把他的感情塑造出来 . 就像上图的Mikasa完全可以砍要害防止变身 , 但是没下手 , 毕竟是这么多年的朋友 . 包括Bertholdt的破防 , 他们每个人都是被迫弄脏了双手 . \n\n![NobodyWanttoBeKiller](https://img.inzamz.top/article/ShingekinoKyojin/NobodyWanttoBeKiller.gif)\n\n### Levi\n\n兵长是我最喜欢的角色 , 没有之一 . 首先 , Levi的战斗力 , 毋庸置疑 . 但是兵长这个人让他更加无敌的是 , 遵守作为士兵最基本的要求 : 服从命令 . 我崇拜的是他无论能力多高 , 对上级命令绝不抵抗 , 永远脚踏实地 . \n\n兵长这一生 , 小时候过着艰苦生活 , Kenny在其母死后教会他如何在黑暗的地下街生存后 , 他不是成为大恶人 , 而是劫富济贫 , 寻找着到地上的出路 . 到加入调查兵团后 , 在Erwen的队伍里发挥出色 . 兵长的外传标题叫做无悔的抉择 , 应该指他决定跟随Erwen的决定 . 兵长一直在做选择 , 就像他说的 , 相信同伴还是自己 , 我也不知道答案 . 而我跟他的想法相同 , 反正要做决定 , 不要犹豫 , 选一个不后悔的 . \n\n![Levi](https://img.inzamz.top/article/ShingekinoKyojin/Levi1.gif)\n\n![NoRegrets](https://img.inzamz.top/article/ShingekinoKyojin/NotRegrets.gif)\n\n当然 , 这个人讲冷笑话的功底也是牛的 , 确实笑过几次 . 而且明明在很脏的地下街生活 , 但是洁癖很严重 . \n\n### Erwen\n\n团长是我最敬佩的人之一 . \n\n> 能够带领我们打败恶魔的 , 一定是恶魔 .\n\n​\t<img src=\"https://img.inzamz.top/article/ShingekinoKyojin/Erwin1.gif\" alt=\"Erwen\"  /> \n\n要知道这种在疼痛和恐惧面前镇定的人 , 是多么坚毅 . 我内心由衷地佩服他们 , 这就是现实中那些伟大的革命家们的写照 . 正像Armin所说 , 团长在最后连生命和人性都丢了 , 为了人类的未来 . \n\n![Armin](https://img.inzamz.top/article/ShingekinoKyojin/NoAbnegateNoGain.gif)\n\n这部作品可圈可点的地方太多了 , 我也没时间慢慢找出来了 , 至少动漫的前三季都是一部十分好的佳作 , 在我心中也是值9.5以上的 .\n\n## 关于结局\n\n加页出来之前 , 所谓的Armin幻想说 , 让人有着无限的遐想 . 但是我感觉还是不满意 , 这样将种族问题极端化了 , 这是不好的 , 我接受的是一个小Up主的看法 . 首先哈 , 不是在洗 , 我只是希望能够找到一个安慰自己的结局 . \n\n大家对于结局的不满就是集中在若干个点 , 艾伦弑母 , 巨人之力 , 艾伦破防 . \n\n### 艾伦弑母\n\n这里原话有一句没有办法 , 我个人感觉应该是谏山创没有足够空间来画 , 应该给出几种没有吃掉妈妈的情况 , 这样会引导读者想如何解困 , 也许会好一点吧 . 如果吃掉小贝 , 但是变回人形也是有一段昏迷的 , 你说这不会被吃回去吗 ? 而且被压住的妈妈是没办法走开的 , 是不是一定会死呢 ?\n\n### 巨人之力\n\n巨人之力的去向也是最不好的一点 , 毕竟怪诞虫的去向也是不明不白 , 最后小男孩看树洞 , 感觉是没有消失 . 但给我的感觉是他要开续作 , 所以 ? 反正我不抱太大希望他能写好 .\n\n### 艾伦破防\n\n这就是争议最大的点了 , 想让三笠守寡十年这种话我是真想不到 . 但是我们回想一下为什么大家会感觉不适 , 就是因为整个第四季 , 就是马莱篇开始艾伦给人的感觉就是高高在上 , 不食人间烟火的感觉 . 仔细一想 , 这和那个Jean口中的送死鬼一样吗 ? 他看到了记忆 , 他只会按照剧本走 , 他没有任何感情波动 . 甚至Sasha死的时候还在笑 , 因为自己的无能 , 其实在第二次见到\"吃妈巨\"时 , 破防也是有笑声的 , 那种破防后又哭又笑 .\n\n![YouStillCan'tDoAnything](https://img.inzamz.top/article/ShingekinoKyojin/YouStillCan'tDoAnything.jpg)\n\n那么回到最初 , 我最震撼的是谏山创给我的真实感 , 那艾伦在我这就没什么问题了 , 这个人就是一个冲动的小男孩 , 还正好撞上了中二期 ,  对吧 . 我室友还对Reiner特别反感 , 但是Reiner也是被各种事情压抑着 , 而从巨人之力中解脱后 , 他不是正回到训练兵时期的形象了吗 , 还怂恿Eren去找Annie打架 . 最后一话就是大家已经放下所有 , 然后没有敌意后的快乐生活 . \n\n当然 , 说到底 , 这群人就是一群杀人犯 . 我们只是跟着主角的视角去听这个故事 , 但是你要细细反思 , 每一个正常人所渴望的生活并不是什么拯救世界 , 而是像Eren妈妈所想的 , 孩子快乐的成长 ; 像Hannes说的士兵没事干的日子 , 这才是大多数普通老百姓所要的生活 . 然而这种普通人的视角就是体现在萨沙一家子身上 . 所有百姓跟萨沙一家一样 , 平静的生活被打破 , 不幸丧生 , 或者在无尽的斗争中苟活 , 祈祷灾难不降临在自己头上 . 而主角团如何对待这群人的 ? Eren踩死了多少无辜的人 , Armin炸死了军港多少人 ? 什么 , 你说军港都是士兵 , 那飞天而下的石头把一个杂货店老板砸死了怎么说 ? 动漫刻意给了特写 , 这个老板在前面给孩子们发了面包 . 至于马莱这边就更不用说了 , 第一集就已经够多了 . \n\n这个世界不是非黑即白的 , 没有绝对的善恶 . 可以看到马莱人在岛上以及艾尔迪亚人在马莱的待遇是一样的 , 所以种族歧视就是人心的恶的一个表现罢了 . 作者并不是想要让我们去向主角团学习 , 而是在故事中去反思 , 从中获取启示 . \n\n## 尾声\n\n即使是烂尾了 , 巨人终究是给我留下了不可磨灭的印记 . 今年还带着调查兵团的斗篷去了漫展 , 弥补一下中学的中二病 . 舞台上那一段巨人的表演让我心血沸腾 , 甚至我喊出了那些台词 , 献出了自己的心脏 . 我的微信头像也一直没换 , 就是兵长的头像 . 我慢慢地接受这个结局 , 然后慢慢地结束自己的青春......\n\nTo be continued...(后续可能会补充一些印象深刻的人物)\n\n<!-- Q.E.D. -->","slug":"ShingekinoKyoji","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uj9000g63jn3ukj9omm","content":"<blockquote>\n<p>这一篇不可能缺席的 . 巨人是多少人的青春 , 对于他的结局 , 总的来说是烂的 , 但至少是圆满的 . 对于我 , 很晚入宅 , 但是不可否定的是我也为了他疯过 . 我看了很多结局的解读 , 找了自己能接受的 , 但当作者需要其他人解读时 , 作品已经算失败了……</p>\n<p>在最后 , 我还是抱着一丝丝希望 , MAPPA能最后把结局改了 , 还给我们一个完美的青春 . </p>\n</blockquote>\n<span id=\"more\"></span>\n\n<hr>\n<p>要说我的入宅作，那必然是末日时在干什么？有没有空？可不可以拯救？但是，就我的评分标准这部番剧只能在T2级别。真正让我震撼的是进击的巨人，我曾经一度把它当作十分佳作，最后在一片骂声中完结，确实让人失望。但无法否认这部作品给我带来的震撼。</p>\n<p>这里提一下我个人的一个打分标准吧，五分制中，T1是4～5，这部分作品是想主题深刻的，并且制作等各方面都可以的佳作神作。这类作品很少很少，毕竟动漫的创作者和面向的群体决定了这部分作品必然不多，所以很少出现4的作品，这也是我评分偏低的原因吧。</p>\n<p>当年看这部作品，我看到第六集并不是特别兴趣，当然只是跟之后做对比。直到剧情走向火热之后，停不下来。一天基本一季，高二暑假前几天就刷完了。之后我反复刷这部作品，差不多56次以上了，第三季Part2更多次。整个故事讲述了在巨人的威胁下，艾伦和他的朋友们为了自由 , 与巨人展开的斗争的故事 . 而巨人真相的背后竟是种族之间的争斗 . </p>\n<h2 id=\"人物心理\"><a href=\"#人物心理\" class=\"headerlink\" title=\"人物心理\"></a>人物心理</h2><p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/Afraid.gif\" alt=\"Afraid\" loading=\"lazy\"></p>\n<p>首先 , 第一集就让我震撼了好久 , 巨人对每个人的描写 , 对心理的表现真实又逼真 . Hannes报恩的心情 , 到真正面对可怕的巨人 , 恐惧战胜了他 . 以及Eren妈妈的心理 , 一个普通的母亲 , 在死亡前想让孩子活下去 ; 当真正孤独等待死亡时 , 内心对生的渴望和恐惧 . 还有士兵在死亡和痛苦前 , 不停地喊着妈妈 , 对着听不懂话的巨人说下次不敢了 . 都是一个个真实的人 , 在恐惧面前的失态 . 这是让我感触很深的一个点 . (所以这跟烂尾有没有什么联系 ? 后面再说 .)</p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/Afraid2.gif\" alt=\"Afraid\" loading=\"lazy\"></p>\n<h2 id=\"主题上升\"><a href=\"#主题上升\" class=\"headerlink\" title=\"主题上升?\"></a>主题上升?</h2><p>你可以看到 , 我加了问号 . 首先就是这个名场面 , 就是莱纳因为精神分裂 , 自曝身份的场面 . 首先当时我是很惊讶的 , 我没有去思考那个问题 (如果艾伦能变成巨人 , 那超大型巨人不也可以是其他人变的吗?)可能就是把主角光环考虑其中后 , 我没有去思考 . 但是巨人使人变的 , 到后面艾尔迪亚人被其他种族歧视 , 我感觉它的主题已经可以上升了 , 如果最后谏山创给出一个好的解决方案 . 但是并没有 .</p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/Rebellion.gif\" loading=\"lazy\"></p>\n<h2 id=\"人物刻画\"><a href=\"#人物刻画\" class=\"headerlink\" title=\"人物刻画\"></a>人物刻画</h2><p>每个人都是活生生的 , 就算是配角 , 动漫中都是会把他的感情塑造出来 . 就像上图的Mikasa完全可以砍要害防止变身 , 但是没下手 , 毕竟是这么多年的朋友 . 包括Bertholdt的破防 , 他们每个人都是被迫弄脏了双手 . </p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/NobodyWanttoBeKiller.gif\" alt=\"NobodyWanttoBeKiller\" loading=\"lazy\"></p>\n<h3 id=\"Levi\"><a href=\"#Levi\" class=\"headerlink\" title=\"Levi\"></a>Levi</h3><p>兵长是我最喜欢的角色 , 没有之一 . 首先 , Levi的战斗力 , 毋庸置疑 . 但是兵长这个人让他更加无敌的是 , 遵守作为士兵最基本的要求 : 服从命令 . 我崇拜的是他无论能力多高 , 对上级命令绝不抵抗 , 永远脚踏实地 . </p>\n<p>兵长这一生 , 小时候过着艰苦生活 , Kenny在其母死后教会他如何在黑暗的地下街生存后 , 他不是成为大恶人 , 而是劫富济贫 , 寻找着到地上的出路 . 到加入调查兵团后 , 在Erwen的队伍里发挥出色 . 兵长的外传标题叫做无悔的抉择 , 应该指他决定跟随Erwen的决定 . 兵长一直在做选择 , 就像他说的 , 相信同伴还是自己 , 我也不知道答案 . 而我跟他的想法相同 , 反正要做决定 , 不要犹豫 , 选一个不后悔的 . </p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/Levi1.gif\" alt=\"Levi\" loading=\"lazy\"></p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/NotRegrets.gif\" alt=\"NoRegrets\" loading=\"lazy\"></p>\n<p>当然 , 这个人讲冷笑话的功底也是牛的 , 确实笑过几次 . 而且明明在很脏的地下街生活 , 但是洁癖很严重 . </p>\n<h3 id=\"Erwen\"><a href=\"#Erwen\" class=\"headerlink\" title=\"Erwen\"></a>Erwen</h3><p>团长是我最敬佩的人之一 . </p>\n<blockquote>\n<p>能够带领我们打败恶魔的 , 一定是恶魔 .</p>\n</blockquote>\n<p>​    <img src=\"https://img.inzamz.top/article/ShingekinoKyojin/Erwin1.gif\" alt=\"Erwen\"  / loading=\"lazy\"> </p>\n<p>要知道这种在疼痛和恐惧面前镇定的人 , 是多么坚毅 . 我内心由衷地佩服他们 , 这就是现实中那些伟大的革命家们的写照 . 正像Armin所说 , 团长在最后连生命和人性都丢了 , 为了人类的未来 . </p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/NoAbnegateNoGain.gif\" alt=\"Armin\" loading=\"lazy\"></p>\n<p>这部作品可圈可点的地方太多了 , 我也没时间慢慢找出来了 , 至少动漫的前三季都是一部十分好的佳作 , 在我心中也是值9.5以上的 .</p>\n<h2 id=\"关于结局\"><a href=\"#关于结局\" class=\"headerlink\" title=\"关于结局\"></a>关于结局</h2><p>加页出来之前 , 所谓的Armin幻想说 , 让人有着无限的遐想 . 但是我感觉还是不满意 , 这样将种族问题极端化了 , 这是不好的 , 我接受的是一个小Up主的看法 . 首先哈 , 不是在洗 , 我只是希望能够找到一个安慰自己的结局 . </p>\n<p>大家对于结局的不满就是集中在若干个点 , 艾伦弑母 , 巨人之力 , 艾伦破防 . </p>\n<h3 id=\"艾伦弑母\"><a href=\"#艾伦弑母\" class=\"headerlink\" title=\"艾伦弑母\"></a>艾伦弑母</h3><p>这里原话有一句没有办法 , 我个人感觉应该是谏山创没有足够空间来画 , 应该给出几种没有吃掉妈妈的情况 , 这样会引导读者想如何解困 , 也许会好一点吧 . 如果吃掉小贝 , 但是变回人形也是有一段昏迷的 , 你说这不会被吃回去吗 ? 而且被压住的妈妈是没办法走开的 , 是不是一定会死呢 ?</p>\n<h3 id=\"巨人之力\"><a href=\"#巨人之力\" class=\"headerlink\" title=\"巨人之力\"></a>巨人之力</h3><p>巨人之力的去向也是最不好的一点 , 毕竟怪诞虫的去向也是不明不白 , 最后小男孩看树洞 , 感觉是没有消失 . 但给我的感觉是他要开续作 , 所以 ? 反正我不抱太大希望他能写好 .</p>\n<h3 id=\"艾伦破防\"><a href=\"#艾伦破防\" class=\"headerlink\" title=\"艾伦破防\"></a>艾伦破防</h3><p>这就是争议最大的点了 , 想让三笠守寡十年这种话我是真想不到 . 但是我们回想一下为什么大家会感觉不适 , 就是因为整个第四季 , 就是马莱篇开始艾伦给人的感觉就是高高在上 , 不食人间烟火的感觉 . 仔细一想 , 这和那个Jean口中的送死鬼一样吗 ? 他看到了记忆 , 他只会按照剧本走 , 他没有任何感情波动 . 甚至Sasha死的时候还在笑 , 因为自己的无能 , 其实在第二次见到”吃妈巨”时 , 破防也是有笑声的 , 那种破防后又哭又笑 .</p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/YouStillCan'tDoAnything.jpg\" alt=\"YouStillCan&#39;tDoAnything\" loading=\"lazy\"></p>\n<p>那么回到最初 , 我最震撼的是谏山创给我的真实感 , 那艾伦在我这就没什么问题了 , 这个人就是一个冲动的小男孩 , 还正好撞上了中二期 ,  对吧 . 我室友还对Reiner特别反感 , 但是Reiner也是被各种事情压抑着 , 而从巨人之力中解脱后 , 他不是正回到训练兵时期的形象了吗 , 还怂恿Eren去找Annie打架 . 最后一话就是大家已经放下所有 , 然后没有敌意后的快乐生活 . </p>\n<p>当然 , 说到底 , 这群人就是一群杀人犯 . 我们只是跟着主角的视角去听这个故事 , 但是你要细细反思 , 每一个正常人所渴望的生活并不是什么拯救世界 , 而是像Eren妈妈所想的 , 孩子快乐的成长 ; 像Hannes说的士兵没事干的日子 , 这才是大多数普通老百姓所要的生活 . 然而这种普通人的视角就是体现在萨沙一家子身上 . 所有百姓跟萨沙一家一样 , 平静的生活被打破 , 不幸丧生 , 或者在无尽的斗争中苟活 , 祈祷灾难不降临在自己头上 . 而主角团如何对待这群人的 ? Eren踩死了多少无辜的人 , Armin炸死了军港多少人 ? 什么 , 你说军港都是士兵 , 那飞天而下的石头把一个杂货店老板砸死了怎么说 ? 动漫刻意给了特写 , 这个老板在前面给孩子们发了面包 . 至于马莱这边就更不用说了 , 第一集就已经够多了 . </p>\n<p>这个世界不是非黑即白的 , 没有绝对的善恶 . 可以看到马莱人在岛上以及艾尔迪亚人在马莱的待遇是一样的 , 所以种族歧视就是人心的恶的一个表现罢了 . 作者并不是想要让我们去向主角团学习 , 而是在故事中去反思 , 从中获取启示 . </p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>即使是烂尾了 , 巨人终究是给我留下了不可磨灭的印记 . 今年还带着调查兵团的斗篷去了漫展 , 弥补一下中学的中二病 . 舞台上那一段巨人的表演让我心血沸腾 , 甚至我喊出了那些台词 , 献出了自己的心脏 . 我的微信头像也一直没换 , 就是兵长的头像 . 我慢慢地接受这个结局 , 然后慢慢地结束自己的青春……</p>\n<p>To be continued…(后续可能会补充一些印象深刻的人物)</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<blockquote>\n<p>这一篇不可能缺席的 . 巨人是多少人的青春 , 对于他的结局 , 总的来说是烂的 , 但至少是圆满的 . 对于我 , 很晚入宅 , 但是不可否定的是我也为了他疯过 . 我看了很多结局的解读 , 找了自己能接受的 , 但当作者需要其他人解读时 , 作品已经算失败了……</p>\n<p>在最后 , 我还是抱着一丝丝希望 , MAPPA能最后把结局改了 , 还给我们一个完美的青春 . </p>\n</blockquote>","more":"<hr>\n<p>要说我的入宅作，那必然是末日时在干什么？有没有空？可不可以拯救？但是，就我的评分标准这部番剧只能在T2级别。真正让我震撼的是进击的巨人，我曾经一度把它当作十分佳作，最后在一片骂声中完结，确实让人失望。但无法否认这部作品给我带来的震撼。</p>\n<p>这里提一下我个人的一个打分标准吧，五分制中，T1是4～5，这部分作品是想主题深刻的，并且制作等各方面都可以的佳作神作。这类作品很少很少，毕竟动漫的创作者和面向的群体决定了这部分作品必然不多，所以很少出现4的作品，这也是我评分偏低的原因吧。</p>\n<p>当年看这部作品，我看到第六集并不是特别兴趣，当然只是跟之后做对比。直到剧情走向火热之后，停不下来。一天基本一季，高二暑假前几天就刷完了。之后我反复刷这部作品，差不多56次以上了，第三季Part2更多次。整个故事讲述了在巨人的威胁下，艾伦和他的朋友们为了自由 , 与巨人展开的斗争的故事 . 而巨人真相的背后竟是种族之间的争斗 . </p>\n<h2 id=\"人物心理\"><a href=\"#人物心理\" class=\"headerlink\" title=\"人物心理\"></a>人物心理</h2><p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/Afraid.gif\" alt=\"Afraid\"></p>\n<p>首先 , 第一集就让我震撼了好久 , 巨人对每个人的描写 , 对心理的表现真实又逼真 . Hannes报恩的心情 , 到真正面对可怕的巨人 , 恐惧战胜了他 . 以及Eren妈妈的心理 , 一个普通的母亲 , 在死亡前想让孩子活下去 ; 当真正孤独等待死亡时 , 内心对生的渴望和恐惧 . 还有士兵在死亡和痛苦前 , 不停地喊着妈妈 , 对着听不懂话的巨人说下次不敢了 . 都是一个个真实的人 , 在恐惧面前的失态 . 这是让我感触很深的一个点 . (所以这跟烂尾有没有什么联系 ? 后面再说 .)</p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/Afraid2.gif\" alt=\"Afraid\"></p>\n<h2 id=\"主题上升\"><a href=\"#主题上升\" class=\"headerlink\" title=\"主题上升?\"></a>主题上升?</h2><p>你可以看到 , 我加了问号 . 首先就是这个名场面 , 就是莱纳因为精神分裂 , 自曝身份的场面 . 首先当时我是很惊讶的 , 我没有去思考那个问题 (如果艾伦能变成巨人 , 那超大型巨人不也可以是其他人变的吗?)可能就是把主角光环考虑其中后 , 我没有去思考 . 但是巨人使人变的 , 到后面艾尔迪亚人被其他种族歧视 , 我感觉它的主题已经可以上升了 , 如果最后谏山创给出一个好的解决方案 . 但是并没有 .</p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/Rebellion.gif\"></p>\n<h2 id=\"人物刻画\"><a href=\"#人物刻画\" class=\"headerlink\" title=\"人物刻画\"></a>人物刻画</h2><p>每个人都是活生生的 , 就算是配角 , 动漫中都是会把他的感情塑造出来 . 就像上图的Mikasa完全可以砍要害防止变身 , 但是没下手 , 毕竟是这么多年的朋友 . 包括Bertholdt的破防 , 他们每个人都是被迫弄脏了双手 . </p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/NobodyWanttoBeKiller.gif\" alt=\"NobodyWanttoBeKiller\"></p>\n<h3 id=\"Levi\"><a href=\"#Levi\" class=\"headerlink\" title=\"Levi\"></a>Levi</h3><p>兵长是我最喜欢的角色 , 没有之一 . 首先 , Levi的战斗力 , 毋庸置疑 . 但是兵长这个人让他更加无敌的是 , 遵守作为士兵最基本的要求 : 服从命令 . 我崇拜的是他无论能力多高 , 对上级命令绝不抵抗 , 永远脚踏实地 . </p>\n<p>兵长这一生 , 小时候过着艰苦生活 , Kenny在其母死后教会他如何在黑暗的地下街生存后 , 他不是成为大恶人 , 而是劫富济贫 , 寻找着到地上的出路 . 到加入调查兵团后 , 在Erwen的队伍里发挥出色 . 兵长的外传标题叫做无悔的抉择 , 应该指他决定跟随Erwen的决定 . 兵长一直在做选择 , 就像他说的 , 相信同伴还是自己 , 我也不知道答案 . 而我跟他的想法相同 , 反正要做决定 , 不要犹豫 , 选一个不后悔的 . </p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/Levi1.gif\" alt=\"Levi\"></p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/NotRegrets.gif\" alt=\"NoRegrets\"></p>\n<p>当然 , 这个人讲冷笑话的功底也是牛的 , 确实笑过几次 . 而且明明在很脏的地下街生活 , 但是洁癖很严重 . </p>\n<h3 id=\"Erwen\"><a href=\"#Erwen\" class=\"headerlink\" title=\"Erwen\"></a>Erwen</h3><p>团长是我最敬佩的人之一 . </p>\n<blockquote>\n<p>能够带领我们打败恶魔的 , 一定是恶魔 .</p>\n</blockquote>\n<p>​    <img src=\"https://img.inzamz.top/article/ShingekinoKyojin/Erwin1.gif\" alt=\"Erwen\"  /> </p>\n<p>要知道这种在疼痛和恐惧面前镇定的人 , 是多么坚毅 . 我内心由衷地佩服他们 , 这就是现实中那些伟大的革命家们的写照 . 正像Armin所说 , 团长在最后连生命和人性都丢了 , 为了人类的未来 . </p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/NoAbnegateNoGain.gif\" alt=\"Armin\"></p>\n<p>这部作品可圈可点的地方太多了 , 我也没时间慢慢找出来了 , 至少动漫的前三季都是一部十分好的佳作 , 在我心中也是值9.5以上的 .</p>\n<h2 id=\"关于结局\"><a href=\"#关于结局\" class=\"headerlink\" title=\"关于结局\"></a>关于结局</h2><p>加页出来之前 , 所谓的Armin幻想说 , 让人有着无限的遐想 . 但是我感觉还是不满意 , 这样将种族问题极端化了 , 这是不好的 , 我接受的是一个小Up主的看法 . 首先哈 , 不是在洗 , 我只是希望能够找到一个安慰自己的结局 . </p>\n<p>大家对于结局的不满就是集中在若干个点 , 艾伦弑母 , 巨人之力 , 艾伦破防 . </p>\n<h3 id=\"艾伦弑母\"><a href=\"#艾伦弑母\" class=\"headerlink\" title=\"艾伦弑母\"></a>艾伦弑母</h3><p>这里原话有一句没有办法 , 我个人感觉应该是谏山创没有足够空间来画 , 应该给出几种没有吃掉妈妈的情况 , 这样会引导读者想如何解困 , 也许会好一点吧 . 如果吃掉小贝 , 但是变回人形也是有一段昏迷的 , 你说这不会被吃回去吗 ? 而且被压住的妈妈是没办法走开的 , 是不是一定会死呢 ?</p>\n<h3 id=\"巨人之力\"><a href=\"#巨人之力\" class=\"headerlink\" title=\"巨人之力\"></a>巨人之力</h3><p>巨人之力的去向也是最不好的一点 , 毕竟怪诞虫的去向也是不明不白 , 最后小男孩看树洞 , 感觉是没有消失 . 但给我的感觉是他要开续作 , 所以 ? 反正我不抱太大希望他能写好 .</p>\n<h3 id=\"艾伦破防\"><a href=\"#艾伦破防\" class=\"headerlink\" title=\"艾伦破防\"></a>艾伦破防</h3><p>这就是争议最大的点了 , 想让三笠守寡十年这种话我是真想不到 . 但是我们回想一下为什么大家会感觉不适 , 就是因为整个第四季 , 就是马莱篇开始艾伦给人的感觉就是高高在上 , 不食人间烟火的感觉 . 仔细一想 , 这和那个Jean口中的送死鬼一样吗 ? 他看到了记忆 , 他只会按照剧本走 , 他没有任何感情波动 . 甚至Sasha死的时候还在笑 , 因为自己的无能 , 其实在第二次见到”吃妈巨”时 , 破防也是有笑声的 , 那种破防后又哭又笑 .</p>\n<p><img src=\"https://img.inzamz.top/article/ShingekinoKyojin/YouStillCan'tDoAnything.jpg\" alt=\"YouStillCan&#39;tDoAnything\"></p>\n<p>那么回到最初 , 我最震撼的是谏山创给我的真实感 , 那艾伦在我这就没什么问题了 , 这个人就是一个冲动的小男孩 , 还正好撞上了中二期 ,  对吧 . 我室友还对Reiner特别反感 , 但是Reiner也是被各种事情压抑着 , 而从巨人之力中解脱后 , 他不是正回到训练兵时期的形象了吗 , 还怂恿Eren去找Annie打架 . 最后一话就是大家已经放下所有 , 然后没有敌意后的快乐生活 . </p>\n<p>当然 , 说到底 , 这群人就是一群杀人犯 . 我们只是跟着主角的视角去听这个故事 , 但是你要细细反思 , 每一个正常人所渴望的生活并不是什么拯救世界 , 而是像Eren妈妈所想的 , 孩子快乐的成长 ; 像Hannes说的士兵没事干的日子 , 这才是大多数普通老百姓所要的生活 . 然而这种普通人的视角就是体现在萨沙一家子身上 . 所有百姓跟萨沙一家一样 , 平静的生活被打破 , 不幸丧生 , 或者在无尽的斗争中苟活 , 祈祷灾难不降临在自己头上 . 而主角团如何对待这群人的 ? Eren踩死了多少无辜的人 , Armin炸死了军港多少人 ? 什么 , 你说军港都是士兵 , 那飞天而下的石头把一个杂货店老板砸死了怎么说 ? 动漫刻意给了特写 , 这个老板在前面给孩子们发了面包 . 至于马莱这边就更不用说了 , 第一集就已经够多了 . </p>\n<p>这个世界不是非黑即白的 , 没有绝对的善恶 . 可以看到马莱人在岛上以及艾尔迪亚人在马莱的待遇是一样的 , 所以种族歧视就是人心的恶的一个表现罢了 . 作者并不是想要让我们去向主角团学习 , 而是在故事中去反思 , 从中获取启示 . </p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>即使是烂尾了 , 巨人终究是给我留下了不可磨灭的印记 . 今年还带着调查兵团的斗篷去了漫展 , 弥补一下中学的中二病 . 舞台上那一段巨人的表演让我心血沸腾 , 甚至我喊出了那些台词 , 献出了自己的心脏 . 我的微信头像也一直没换 , 就是兵长的头像 . 我慢慢地接受这个结局 , 然后慢慢地结束自己的青春……</p>\n<p>To be continued…(后续可能会补充一些印象深刻的人物)</p>\n<!-- Q.E.D. -->"},{"title":"关于UESTC的各种考试的备考建议","date":"2021-01-24T08:39:25.000Z","updated":"2021-01-24T09:08:32.000Z","_content":"因为自己一直苦于水课以及其他的正课的复习，师兄的建议也只是停留在印象（毕竟时间太久都忘了），于是我打算考完后把感想写下来，造福后代？\n<!-- more -->\n\n## 写在前面\n\n不要对答案！！！然后我的建议就是明确目标，有失必有得，你想卷就卷到底，不想卷就适当学，玩的时候尽情玩。这样你才不会后悔，不然最后玩的不开心卷的没结果，很难受。\n\n其次不要在意别人，不要因为别人学得好就贬低自己，每个人都有长处，而且有的人就是天分好点。\n\n## 军事理论\n\n> 按照辅导员给的资料背诵！不要使用其他资料！资料是按照考试题目给的！\n\n军理是真的有手就行，相当于半开卷了。记住辅导员给的材料里面涵盖了 95% 的题目，保守一点，因为还是有些不在里面的，但是很少，而且这部分用常识可以解决。划线的就是到时挖的空，所以好好背，也不多，三页而已。\n\n然后考试不要拖拉，把会的先写上，不要到时忘了。一般半小时后教室就没几个人了，再过几分钟你连老师都找不到了。\n\n## 近现代史纲要\n\n> 建议花多点时间，老师画了重点就背吧。有的老师好像会放word文档在云班课上，最好跟自己老师的节奏，因为最后是自己老师改的卷。\n\n近代史就是我翻车最严重的了，所以最好平时好好表现，课堂测验用一切手段提高点吧，平时分高了就不会担心了。想我，平时分79，现在慌得一批。而且内容不少，建议多花点时间。\n\n## 程序设计与算法基础\n\n> 这部分是软院和计算机才有的好像，有读程序写结果，补全程序和手写程序。\n\n难度不好说，如果有基础的话，学起来不难。如果你没把握，平时分就好好刷！开小号作两次或者直接百度。icoding好好钻研，不要偷懒。\n\n## 微积分&线性代数\n\n其实好好学，满绩不难的。首先平时分想要高，让老师记住你。上课积极点，可以多参加老师组织的讨论课，会有点麻烦，但平时分加分也是很香的。想我期末考砸了78分，期中86分，然后总评下来是86，满绩。靠的就是平时分，因为我是课代表加上参加了讨论课，两次加分，平时分拉到了99。\n\n线代和微积分，考前可以做真题，但是跟你说真题重复出概率不高。真的刷题最好就是学习指导，很多考试题就是在这里面出的，或者模仿。其实套路就那么几个，平时每天写几道，其实也差不多了。就像我们今年的线代题目，一堆人喊难，其实我感觉还行，挺多在学习指导里的。\n\n---\n\n还有再补充吧。\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/UESTCaboutexam.md","raw":"---\ntitle: 关于UESTC的各种考试的备考建议\ndate: 2021-01-24 16:39:25\nupdated: 2021-01-24 17:08:32\ntags:\n\t- 考试\ncategories:\n\t- 关于我有个三次元分身这档事\n---\n因为自己一直苦于水课以及其他的正课的复习，师兄的建议也只是停留在印象（毕竟时间太久都忘了），于是我打算考完后把感想写下来，造福后代？\n<!-- more -->\n\n## 写在前面\n\n不要对答案！！！然后我的建议就是明确目标，有失必有得，你想卷就卷到底，不想卷就适当学，玩的时候尽情玩。这样你才不会后悔，不然最后玩的不开心卷的没结果，很难受。\n\n其次不要在意别人，不要因为别人学得好就贬低自己，每个人都有长处，而且有的人就是天分好点。\n\n## 军事理论\n\n> 按照辅导员给的资料背诵！不要使用其他资料！资料是按照考试题目给的！\n\n军理是真的有手就行，相当于半开卷了。记住辅导员给的材料里面涵盖了 95% 的题目，保守一点，因为还是有些不在里面的，但是很少，而且这部分用常识可以解决。划线的就是到时挖的空，所以好好背，也不多，三页而已。\n\n然后考试不要拖拉，把会的先写上，不要到时忘了。一般半小时后教室就没几个人了，再过几分钟你连老师都找不到了。\n\n## 近现代史纲要\n\n> 建议花多点时间，老师画了重点就背吧。有的老师好像会放word文档在云班课上，最好跟自己老师的节奏，因为最后是自己老师改的卷。\n\n近代史就是我翻车最严重的了，所以最好平时好好表现，课堂测验用一切手段提高点吧，平时分高了就不会担心了。想我，平时分79，现在慌得一批。而且内容不少，建议多花点时间。\n\n## 程序设计与算法基础\n\n> 这部分是软院和计算机才有的好像，有读程序写结果，补全程序和手写程序。\n\n难度不好说，如果有基础的话，学起来不难。如果你没把握，平时分就好好刷！开小号作两次或者直接百度。icoding好好钻研，不要偷懒。\n\n## 微积分&线性代数\n\n其实好好学，满绩不难的。首先平时分想要高，让老师记住你。上课积极点，可以多参加老师组织的讨论课，会有点麻烦，但平时分加分也是很香的。想我期末考砸了78分，期中86分，然后总评下来是86，满绩。靠的就是平时分，因为我是课代表加上参加了讨论课，两次加分，平时分拉到了99。\n\n线代和微积分，考前可以做真题，但是跟你说真题重复出概率不高。真的刷题最好就是学习指导，很多考试题就是在这里面出的，或者模仿。其实套路就那么几个，平时每天写几道，其实也差不多了。就像我们今年的线代题目，一堆人喊难，其实我感觉还行，挺多在学习指导里的。\n\n---\n\n还有再补充吧。\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"UESTCaboutexam","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujb000i63jn73gg4zbz","content":"<p>因为自己一直苦于水课以及其他的正课的复习，师兄的建议也只是停留在印象（毕竟时间太久都忘了），于是我打算考完后把感想写下来，造福后代？</p>\n<span id=\"more\"></span>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>不要对答案！！！然后我的建议就是明确目标，有失必有得，你想卷就卷到底，不想卷就适当学，玩的时候尽情玩。这样你才不会后悔，不然最后玩的不开心卷的没结果，很难受。</p>\n<p>其次不要在意别人，不要因为别人学得好就贬低自己，每个人都有长处，而且有的人就是天分好点。</p>\n<h2 id=\"军事理论\"><a href=\"#军事理论\" class=\"headerlink\" title=\"军事理论\"></a>军事理论</h2><blockquote>\n<p>按照辅导员给的资料背诵！不要使用其他资料！资料是按照考试题目给的！</p>\n</blockquote>\n<p>军理是真的有手就行，相当于半开卷了。记住辅导员给的材料里面涵盖了 95% 的题目，保守一点，因为还是有些不在里面的，但是很少，而且这部分用常识可以解决。划线的就是到时挖的空，所以好好背，也不多，三页而已。</p>\n<p>然后考试不要拖拉，把会的先写上，不要到时忘了。一般半小时后教室就没几个人了，再过几分钟你连老师都找不到了。</p>\n<h2 id=\"近现代史纲要\"><a href=\"#近现代史纲要\" class=\"headerlink\" title=\"近现代史纲要\"></a>近现代史纲要</h2><blockquote>\n<p>建议花多点时间，老师画了重点就背吧。有的老师好像会放word文档在云班课上，最好跟自己老师的节奏，因为最后是自己老师改的卷。</p>\n</blockquote>\n<p>近代史就是我翻车最严重的了，所以最好平时好好表现，课堂测验用一切手段提高点吧，平时分高了就不会担心了。想我，平时分79，现在慌得一批。而且内容不少，建议多花点时间。</p>\n<h2 id=\"程序设计与算法基础\"><a href=\"#程序设计与算法基础\" class=\"headerlink\" title=\"程序设计与算法基础\"></a>程序设计与算法基础</h2><blockquote>\n<p>这部分是软院和计算机才有的好像，有读程序写结果，补全程序和手写程序。</p>\n</blockquote>\n<p>难度不好说，如果有基础的话，学起来不难。如果你没把握，平时分就好好刷！开小号作两次或者直接百度。icoding好好钻研，不要偷懒。</p>\n<h2 id=\"微积分-amp-线性代数\"><a href=\"#微积分-amp-线性代数\" class=\"headerlink\" title=\"微积分&amp;线性代数\"></a>微积分&amp;线性代数</h2><p>其实好好学，满绩不难的。首先平时分想要高，让老师记住你。上课积极点，可以多参加老师组织的讨论课，会有点麻烦，但平时分加分也是很香的。想我期末考砸了78分，期中86分，然后总评下来是86，满绩。靠的就是平时分，因为我是课代表加上参加了讨论课，两次加分，平时分拉到了99。</p>\n<p>线代和微积分，考前可以做真题，但是跟你说真题重复出概率不高。真的刷题最好就是学习指导，很多考试题就是在这里面出的，或者模仿。其实套路就那么几个，平时每天写几道，其实也差不多了。就像我们今年的线代题目，一堆人喊难，其实我感觉还行，挺多在学习指导里的。</p>\n<hr>\n<p>还有再补充吧。</p>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>因为自己一直苦于水课以及其他的正课的复习，师兄的建议也只是停留在印象（毕竟时间太久都忘了），于是我打算考完后把感想写下来，造福后代？</p>","more":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>不要对答案！！！然后我的建议就是明确目标，有失必有得，你想卷就卷到底，不想卷就适当学，玩的时候尽情玩。这样你才不会后悔，不然最后玩的不开心卷的没结果，很难受。</p>\n<p>其次不要在意别人，不要因为别人学得好就贬低自己，每个人都有长处，而且有的人就是天分好点。</p>\n<h2 id=\"军事理论\"><a href=\"#军事理论\" class=\"headerlink\" title=\"军事理论\"></a>军事理论</h2><blockquote>\n<p>按照辅导员给的资料背诵！不要使用其他资料！资料是按照考试题目给的！</p>\n</blockquote>\n<p>军理是真的有手就行，相当于半开卷了。记住辅导员给的材料里面涵盖了 95% 的题目，保守一点，因为还是有些不在里面的，但是很少，而且这部分用常识可以解决。划线的就是到时挖的空，所以好好背，也不多，三页而已。</p>\n<p>然后考试不要拖拉，把会的先写上，不要到时忘了。一般半小时后教室就没几个人了，再过几分钟你连老师都找不到了。</p>\n<h2 id=\"近现代史纲要\"><a href=\"#近现代史纲要\" class=\"headerlink\" title=\"近现代史纲要\"></a>近现代史纲要</h2><blockquote>\n<p>建议花多点时间，老师画了重点就背吧。有的老师好像会放word文档在云班课上，最好跟自己老师的节奏，因为最后是自己老师改的卷。</p>\n</blockquote>\n<p>近代史就是我翻车最严重的了，所以最好平时好好表现，课堂测验用一切手段提高点吧，平时分高了就不会担心了。想我，平时分79，现在慌得一批。而且内容不少，建议多花点时间。</p>\n<h2 id=\"程序设计与算法基础\"><a href=\"#程序设计与算法基础\" class=\"headerlink\" title=\"程序设计与算法基础\"></a>程序设计与算法基础</h2><blockquote>\n<p>这部分是软院和计算机才有的好像，有读程序写结果，补全程序和手写程序。</p>\n</blockquote>\n<p>难度不好说，如果有基础的话，学起来不难。如果你没把握，平时分就好好刷！开小号作两次或者直接百度。icoding好好钻研，不要偷懒。</p>\n<h2 id=\"微积分-amp-线性代数\"><a href=\"#微积分-amp-线性代数\" class=\"headerlink\" title=\"微积分&amp;线性代数\"></a>微积分&amp;线性代数</h2><p>其实好好学，满绩不难的。首先平时分想要高，让老师记住你。上课积极点，可以多参加老师组织的讨论课，会有点麻烦，但平时分加分也是很香的。想我期末考砸了78分，期中86分，然后总评下来是86，满绩。靠的就是平时分，因为我是课代表加上参加了讨论课，两次加分，平时分拉到了99。</p>\n<p>线代和微积分，考前可以做真题，但是跟你说真题重复出概率不高。真的刷题最好就是学习指导，很多考试题就是在这里面出的，或者模仿。其实套路就那么几个，平时每天写几道，其实也差不多了。就像我们今年的线代题目，一堆人喊难，其实我感觉还行，挺多在学习指导里的。</p>\n<hr>\n<p>还有再补充吧。</p>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"关于我去看病的感想以及想吐槽校医院的这档事","date":"2021-01-05T09:27:05.000Z","updated":"2021-01-21T01:41:43.000Z","_content":"\n个人觉得我有社交恐惧症，在陌生环境下更是如此。\n\n我从小就不怎么去医院，我们那这种小地方的医院，emm。而且地方小，小时候生病都直接找到医生家里的。高中的一次大伤也是直接老师家长包办了，毕竟我照顾自己都来不及……\n\n所以分别先去了校医院和成都市二医院。\n\n这个也是暂时挖坑，没办法，期末到了我才开始预习。\n\n考试结束了，我来填坑了。\n\n<!-- more -->\n\n## 在下手贱 有何贵干\n\n​\t一切起源于（大概）我手贱，之前做过手术，留下了一个伤口，一个月前伤口有点痒，然后我去抓，洗澡用毛巾擦，好像破皮了。当然伤口本来也不是大问题，感染用碘伏擦一下，过几天就好了。但好像以此为契机，身体积攒的毛病就爆发出来了。\n\n​\t首先当然是联系主刀医生了，医生说伤口只是轻微感染，平时消毒就好了。但是他觉得我的伤口旁边有点过敏，必要时去看皮肤科。于是对于伤口比较在意，还是抽了时间去看医生了。没错是周六（12/26），还碰上成都疫情反扑，进出校园管的还是有点严的。去了以后只有一个值班的医生，她也开了点药。伤口是好了点，但过敏症状好像越来越严重了。\n\n​\t事情临近期末，很多事情要忙。所以皮肤科也是一直拖着，爸妈一催再催，最后决定再跑一趟校医院，就是星期四（12/31）。因为要放元旦假了，所以我特地选了元旦前一天去，然后那边说医生今天中午值班，所以回去了。所以只能自己忍忍，然后挺过了元旦。全身痒到不行。\n\n## 某大学的超校医院\n\n​\t于是放假完，周二下午没课，我就去了校医院。然而令我震惊，居然没有皮肤科，这个校区比较老，医院规模也小，所以挂了外科。然而这个医生，态度不仅不好，我甚至怀疑起他的水平。我的伤口感染流水，结果他说正常，手术两三年内都会，挺正常？我服了，然后因为没有皮肤科，让我去另一个校区的校医院看。\n\n​\t我约了那边的一个同学，因为我很少去那边，不熟。加上上次比赛的奖状是他代领的，顺便拿一下。\n\n> 有趣的是，我到现在一个月了还没完成交接。1/18 我去那个校区玩，还去了他宿舍，结果忘了。1/19我们一起坐飞机，高铁，顾着赶路，全部忘记。\n\n​\t同学的回复让我反思，他说你看过知乎上的帖子了吗。我个人是不太喜欢看知乎的，但是也是可以参考一下的。于是乎我就看了一下。评价里面吐槽的是挂号费以及医生治病水平，有的人最后病都没治好。最后我想，大老远跑到另一个校区，去一个口碑不好的医院，还不如就近找个好一点的医院呢。于是打算周三去成都市第二人民医院。\n\n​\t因为也是校医院那个男医生给我留下了不好的印象，态度很差，所以也不太想再去校医院了。\n\n## 在市二医院看病是否搞错了什么\n\n​\t严格意义上是第一次自己去医院，我的记忆还停留在人工挂号阶段。因为担心有什么变故，没有网上挂号。而到现场，就会出现社交恐惧症……特别是成都人有时会操着一口浓浓的四川话，听不懂的话，我烦他也烦。但是我却发现居然有个自助挂号机，只需要身份证就可以完成挂号。\n\n​\t于是一波操作后，成功挂到了号。真的对比起人工挂号，这种方式真是效率高。而且后续缴费全部都可以在微信上完成，很舒服。\n\n> 关于病情，在我去完医院后病情并没有好转。但是一周后我已经进入期末备考紧张期了，也没法腾出时间去看病了。只可能忍着，吃点抗组胺药。至今也未找到过敏原，但是湿疹的治疗是要从生活习惯抓起的。但是考试周复习压力大，生活节奏怎么可能慢下来，还有学校食堂的东西，高油盐，还有四川地区独特的辣，很不适合养病。每天吃的少，晚上睡觉不安稳，半夜有时会太痒而醒过来，最终人就瘦了。瘦了10斤。\n\n## 尾声\n\n​\t现在的医疗如果都能这么方便，那确实是很大的进步。落实好就是一项利民惠民的政策了。相比校医院，正规医院的服务和态度真的好很多。\n\n​\t回家养病了，现在是1/21日，改签的机票回来的。在家里饮食很清淡，而且看了医生，喝了中药，搞了药草洗身子。今天起来病情好转了不少，以后要好好调养了，回成都就调整作息和多点外卖吃点清淡的吧。还有功课放平时做足一点，不然期末会出大问题的。\n\n---\n\n\n\n<!-- Q.E.D. -->","source":"_posts/daily210105.md","raw":"---\ntitle: 关于我去看病的感想以及想吐槽校医院的这档事\ndate: 2021-01-05 17:27:05\nupdated: 2021-01-21 9:41:43\ntags:\n\t- 个人经历\ncategories:\n\t- 关于我有个三次元分身这档事\n---\n\n个人觉得我有社交恐惧症，在陌生环境下更是如此。\n\n我从小就不怎么去医院，我们那这种小地方的医院，emm。而且地方小，小时候生病都直接找到医生家里的。高中的一次大伤也是直接老师家长包办了，毕竟我照顾自己都来不及……\n\n所以分别先去了校医院和成都市二医院。\n\n这个也是暂时挖坑，没办法，期末到了我才开始预习。\n\n考试结束了，我来填坑了。\n\n<!-- more -->\n\n## 在下手贱 有何贵干\n\n​\t一切起源于（大概）我手贱，之前做过手术，留下了一个伤口，一个月前伤口有点痒，然后我去抓，洗澡用毛巾擦，好像破皮了。当然伤口本来也不是大问题，感染用碘伏擦一下，过几天就好了。但好像以此为契机，身体积攒的毛病就爆发出来了。\n\n​\t首先当然是联系主刀医生了，医生说伤口只是轻微感染，平时消毒就好了。但是他觉得我的伤口旁边有点过敏，必要时去看皮肤科。于是对于伤口比较在意，还是抽了时间去看医生了。没错是周六（12/26），还碰上成都疫情反扑，进出校园管的还是有点严的。去了以后只有一个值班的医生，她也开了点药。伤口是好了点，但过敏症状好像越来越严重了。\n\n​\t事情临近期末，很多事情要忙。所以皮肤科也是一直拖着，爸妈一催再催，最后决定再跑一趟校医院，就是星期四（12/31）。因为要放元旦假了，所以我特地选了元旦前一天去，然后那边说医生今天中午值班，所以回去了。所以只能自己忍忍，然后挺过了元旦。全身痒到不行。\n\n## 某大学的超校医院\n\n​\t于是放假完，周二下午没课，我就去了校医院。然而令我震惊，居然没有皮肤科，这个校区比较老，医院规模也小，所以挂了外科。然而这个医生，态度不仅不好，我甚至怀疑起他的水平。我的伤口感染流水，结果他说正常，手术两三年内都会，挺正常？我服了，然后因为没有皮肤科，让我去另一个校区的校医院看。\n\n​\t我约了那边的一个同学，因为我很少去那边，不熟。加上上次比赛的奖状是他代领的，顺便拿一下。\n\n> 有趣的是，我到现在一个月了还没完成交接。1/18 我去那个校区玩，还去了他宿舍，结果忘了。1/19我们一起坐飞机，高铁，顾着赶路，全部忘记。\n\n​\t同学的回复让我反思，他说你看过知乎上的帖子了吗。我个人是不太喜欢看知乎的，但是也是可以参考一下的。于是乎我就看了一下。评价里面吐槽的是挂号费以及医生治病水平，有的人最后病都没治好。最后我想，大老远跑到另一个校区，去一个口碑不好的医院，还不如就近找个好一点的医院呢。于是打算周三去成都市第二人民医院。\n\n​\t因为也是校医院那个男医生给我留下了不好的印象，态度很差，所以也不太想再去校医院了。\n\n## 在市二医院看病是否搞错了什么\n\n​\t严格意义上是第一次自己去医院，我的记忆还停留在人工挂号阶段。因为担心有什么变故，没有网上挂号。而到现场，就会出现社交恐惧症……特别是成都人有时会操着一口浓浓的四川话，听不懂的话，我烦他也烦。但是我却发现居然有个自助挂号机，只需要身份证就可以完成挂号。\n\n​\t于是一波操作后，成功挂到了号。真的对比起人工挂号，这种方式真是效率高。而且后续缴费全部都可以在微信上完成，很舒服。\n\n> 关于病情，在我去完医院后病情并没有好转。但是一周后我已经进入期末备考紧张期了，也没法腾出时间去看病了。只可能忍着，吃点抗组胺药。至今也未找到过敏原，但是湿疹的治疗是要从生活习惯抓起的。但是考试周复习压力大，生活节奏怎么可能慢下来，还有学校食堂的东西，高油盐，还有四川地区独特的辣，很不适合养病。每天吃的少，晚上睡觉不安稳，半夜有时会太痒而醒过来，最终人就瘦了。瘦了10斤。\n\n## 尾声\n\n​\t现在的医疗如果都能这么方便，那确实是很大的进步。落实好就是一项利民惠民的政策了。相比校医院，正规医院的服务和态度真的好很多。\n\n​\t回家养病了，现在是1/21日，改签的机票回来的。在家里饮食很清淡，而且看了医生，喝了中药，搞了药草洗身子。今天起来病情好转了不少，以后要好好调养了，回成都就调整作息和多点外卖吃点清淡的吧。还有功课放平时做足一点，不然期末会出大问题的。\n\n---\n\n\n\n<!-- Q.E.D. -->","slug":"daily210105","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujc000n63jn2nzj9k4c","content":"<p>个人觉得我有社交恐惧症，在陌生环境下更是如此。</p>\n<p>我从小就不怎么去医院，我们那这种小地方的医院，emm。而且地方小，小时候生病都直接找到医生家里的。高中的一次大伤也是直接老师家长包办了，毕竟我照顾自己都来不及……</p>\n<p>所以分别先去了校医院和成都市二医院。</p>\n<p>这个也是暂时挖坑，没办法，期末到了我才开始预习。</p>\n<p>考试结束了，我来填坑了。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"在下手贱-有何贵干\"><a href=\"#在下手贱-有何贵干\" class=\"headerlink\" title=\"在下手贱 有何贵干\"></a>在下手贱 有何贵干</h2><p>​    一切起源于（大概）我手贱，之前做过手术，留下了一个伤口，一个月前伤口有点痒，然后我去抓，洗澡用毛巾擦，好像破皮了。当然伤口本来也不是大问题，感染用碘伏擦一下，过几天就好了。但好像以此为契机，身体积攒的毛病就爆发出来了。</p>\n<p>​    首先当然是联系主刀医生了，医生说伤口只是轻微感染，平时消毒就好了。但是他觉得我的伤口旁边有点过敏，必要时去看皮肤科。于是对于伤口比较在意，还是抽了时间去看医生了。没错是周六（12/26），还碰上成都疫情反扑，进出校园管的还是有点严的。去了以后只有一个值班的医生，她也开了点药。伤口是好了点，但过敏症状好像越来越严重了。</p>\n<p>​    事情临近期末，很多事情要忙。所以皮肤科也是一直拖着，爸妈一催再催，最后决定再跑一趟校医院，就是星期四（12/31）。因为要放元旦假了，所以我特地选了元旦前一天去，然后那边说医生今天中午值班，所以回去了。所以只能自己忍忍，然后挺过了元旦。全身痒到不行。</p>\n<h2 id=\"某大学的超校医院\"><a href=\"#某大学的超校医院\" class=\"headerlink\" title=\"某大学的超校医院\"></a>某大学的超校医院</h2><p>​    于是放假完，周二下午没课，我就去了校医院。然而令我震惊，居然没有皮肤科，这个校区比较老，医院规模也小，所以挂了外科。然而这个医生，态度不仅不好，我甚至怀疑起他的水平。我的伤口感染流水，结果他说正常，手术两三年内都会，挺正常？我服了，然后因为没有皮肤科，让我去另一个校区的校医院看。</p>\n<p>​    我约了那边的一个同学，因为我很少去那边，不熟。加上上次比赛的奖状是他代领的，顺便拿一下。</p>\n<blockquote>\n<p>有趣的是，我到现在一个月了还没完成交接。1/18 我去那个校区玩，还去了他宿舍，结果忘了。1/19我们一起坐飞机，高铁，顾着赶路，全部忘记。</p>\n</blockquote>\n<p>​    同学的回复让我反思，他说你看过知乎上的帖子了吗。我个人是不太喜欢看知乎的，但是也是可以参考一下的。于是乎我就看了一下。评价里面吐槽的是挂号费以及医生治病水平，有的人最后病都没治好。最后我想，大老远跑到另一个校区，去一个口碑不好的医院，还不如就近找个好一点的医院呢。于是打算周三去成都市第二人民医院。</p>\n<p>​    因为也是校医院那个男医生给我留下了不好的印象，态度很差，所以也不太想再去校医院了。</p>\n<h2 id=\"在市二医院看病是否搞错了什么\"><a href=\"#在市二医院看病是否搞错了什么\" class=\"headerlink\" title=\"在市二医院看病是否搞错了什么\"></a>在市二医院看病是否搞错了什么</h2><p>​    严格意义上是第一次自己去医院，我的记忆还停留在人工挂号阶段。因为担心有什么变故，没有网上挂号。而到现场，就会出现社交恐惧症……特别是成都人有时会操着一口浓浓的四川话，听不懂的话，我烦他也烦。但是我却发现居然有个自助挂号机，只需要身份证就可以完成挂号。</p>\n<p>​    于是一波操作后，成功挂到了号。真的对比起人工挂号，这种方式真是效率高。而且后续缴费全部都可以在微信上完成，很舒服。</p>\n<blockquote>\n<p>关于病情，在我去完医院后病情并没有好转。但是一周后我已经进入期末备考紧张期了，也没法腾出时间去看病了。只可能忍着，吃点抗组胺药。至今也未找到过敏原，但是湿疹的治疗是要从生活习惯抓起的。但是考试周复习压力大，生活节奏怎么可能慢下来，还有学校食堂的东西，高油盐，还有四川地区独特的辣，很不适合养病。每天吃的少，晚上睡觉不安稳，半夜有时会太痒而醒过来，最终人就瘦了。瘦了10斤。</p>\n</blockquote>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>​    现在的医疗如果都能这么方便，那确实是很大的进步。落实好就是一项利民惠民的政策了。相比校医院，正规医院的服务和态度真的好很多。</p>\n<p>​    回家养病了，现在是1/21日，改签的机票回来的。在家里饮食很清淡，而且看了医生，喝了中药，搞了药草洗身子。今天起来病情好转了不少，以后要好好调养了，回成都就调整作息和多点外卖吃点清淡的吧。还有功课放平时做足一点，不然期末会出大问题的。</p>\n<hr>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>个人觉得我有社交恐惧症，在陌生环境下更是如此。</p>\n<p>我从小就不怎么去医院，我们那这种小地方的医院，emm。而且地方小，小时候生病都直接找到医生家里的。高中的一次大伤也是直接老师家长包办了，毕竟我照顾自己都来不及……</p>\n<p>所以分别先去了校医院和成都市二医院。</p>\n<p>这个也是暂时挖坑，没办法，期末到了我才开始预习。</p>\n<p>考试结束了，我来填坑了。</p>","more":"<h2 id=\"在下手贱-有何贵干\"><a href=\"#在下手贱-有何贵干\" class=\"headerlink\" title=\"在下手贱 有何贵干\"></a>在下手贱 有何贵干</h2><p>​    一切起源于（大概）我手贱，之前做过手术，留下了一个伤口，一个月前伤口有点痒，然后我去抓，洗澡用毛巾擦，好像破皮了。当然伤口本来也不是大问题，感染用碘伏擦一下，过几天就好了。但好像以此为契机，身体积攒的毛病就爆发出来了。</p>\n<p>​    首先当然是联系主刀医生了，医生说伤口只是轻微感染，平时消毒就好了。但是他觉得我的伤口旁边有点过敏，必要时去看皮肤科。于是对于伤口比较在意，还是抽了时间去看医生了。没错是周六（12/26），还碰上成都疫情反扑，进出校园管的还是有点严的。去了以后只有一个值班的医生，她也开了点药。伤口是好了点，但过敏症状好像越来越严重了。</p>\n<p>​    事情临近期末，很多事情要忙。所以皮肤科也是一直拖着，爸妈一催再催，最后决定再跑一趟校医院，就是星期四（12/31）。因为要放元旦假了，所以我特地选了元旦前一天去，然后那边说医生今天中午值班，所以回去了。所以只能自己忍忍，然后挺过了元旦。全身痒到不行。</p>\n<h2 id=\"某大学的超校医院\"><a href=\"#某大学的超校医院\" class=\"headerlink\" title=\"某大学的超校医院\"></a>某大学的超校医院</h2><p>​    于是放假完，周二下午没课，我就去了校医院。然而令我震惊，居然没有皮肤科，这个校区比较老，医院规模也小，所以挂了外科。然而这个医生，态度不仅不好，我甚至怀疑起他的水平。我的伤口感染流水，结果他说正常，手术两三年内都会，挺正常？我服了，然后因为没有皮肤科，让我去另一个校区的校医院看。</p>\n<p>​    我约了那边的一个同学，因为我很少去那边，不熟。加上上次比赛的奖状是他代领的，顺便拿一下。</p>\n<blockquote>\n<p>有趣的是，我到现在一个月了还没完成交接。1/18 我去那个校区玩，还去了他宿舍，结果忘了。1/19我们一起坐飞机，高铁，顾着赶路，全部忘记。</p>\n</blockquote>\n<p>​    同学的回复让我反思，他说你看过知乎上的帖子了吗。我个人是不太喜欢看知乎的，但是也是可以参考一下的。于是乎我就看了一下。评价里面吐槽的是挂号费以及医生治病水平，有的人最后病都没治好。最后我想，大老远跑到另一个校区，去一个口碑不好的医院，还不如就近找个好一点的医院呢。于是打算周三去成都市第二人民医院。</p>\n<p>​    因为也是校医院那个男医生给我留下了不好的印象，态度很差，所以也不太想再去校医院了。</p>\n<h2 id=\"在市二医院看病是否搞错了什么\"><a href=\"#在市二医院看病是否搞错了什么\" class=\"headerlink\" title=\"在市二医院看病是否搞错了什么\"></a>在市二医院看病是否搞错了什么</h2><p>​    严格意义上是第一次自己去医院，我的记忆还停留在人工挂号阶段。因为担心有什么变故，没有网上挂号。而到现场，就会出现社交恐惧症……特别是成都人有时会操着一口浓浓的四川话，听不懂的话，我烦他也烦。但是我却发现居然有个自助挂号机，只需要身份证就可以完成挂号。</p>\n<p>​    于是一波操作后，成功挂到了号。真的对比起人工挂号，这种方式真是效率高。而且后续缴费全部都可以在微信上完成，很舒服。</p>\n<blockquote>\n<p>关于病情，在我去完医院后病情并没有好转。但是一周后我已经进入期末备考紧张期了，也没法腾出时间去看病了。只可能忍着，吃点抗组胺药。至今也未找到过敏原，但是湿疹的治疗是要从生活习惯抓起的。但是考试周复习压力大，生活节奏怎么可能慢下来，还有学校食堂的东西，高油盐，还有四川地区独特的辣，很不适合养病。每天吃的少，晚上睡觉不安稳，半夜有时会太痒而醒过来，最终人就瘦了。瘦了10斤。</p>\n</blockquote>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>​    现在的医疗如果都能这么方便，那确实是很大的进步。落实好就是一项利民惠民的政策了。相比校医院，正规医院的服务和态度真的好很多。</p>\n<p>​    回家养病了，现在是1/21日，改签的机票回来的。在家里饮食很清淡，而且看了医生，喝了中药，搞了药草洗身子。今天起来病情好转了不少，以后要好好调养了，回成都就调整作息和多点外卖吃点清淡的吧。还有功课放平时做足一点，不然期末会出大问题的。</p>\n<hr>\n<!-- Q.E.D. -->"},{"title":"Atcoder Beginner Contect 182","date":"2020-11-10T15:59:59.000Z","_content":"\n\n## Problem B - Almost GCD\n### 题目大意\n给你一堆数，问选哪个数 n(n≥2) ,使数组中能被 n 整除的数最多？\n### Solution\n枚举n，然后跑一遍数组看那个数最多，当然这种只是过样例的啦。\n所以我们想办法减少枚举的数，于是我们可以枚举到数组中的最大的数，这样可以减少一点，但没有什么卵用。\n其实不用枚举所有数，只需要枚举质数就够了。因为能被合数整除，一定也能被它的质因子整除。这样就算你枚举到10000以内的质数也是不会 TLE 的。提前线性筛素数就好了。<div class=\"heimu\" > 其实就是自己懒得改</div>\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint A[110];\nbool t[10010];\n\nint main()\n{\n        int N,count=0,mx=0,mn=0;\n        for (int i=2;i<=10000;i++){\n                if (t[i]) continue;\n                for (int j=i*2;j<=10000;j+=i) t[j]=1;\n        }\n        scanf (\"%d\",&N);\n        for (int i=0;i<N;i++){\n                scanf (\"%d\", &A[i]);\n        }\n        for (int i=2;i<=10000;i++){\n                if (t[i]) continue;\n                count=0;\n                for(int j=0;j<N;j++){\n                        if (A[j]%i==0) count++;\n                }\n                if (count>mx) mx=count,mn=i;\n        }\n        printf(\"%d\\n\",mn);\n        return 0;\n}\n```\n## Problem C-To 3\n### 题目大意\n给一个十八位以内的数字，判断最少去掉多少位数可以使剩余数字组成的数会被3整除？若无论去掉多少位都不能被3整除，那么输出-1.\n### Solution\n枚举子集，然后求剩下位数的和，看能不能被3整除（由小学知识得）。暴搜求解。枚举子集可以使用二进制法，也可以直接用递归。还有，这是组合，不是排列，所以每一层递归里的for从上一层选的元素开始。（我是选择哪个选，而不是选择哪个不选）。上代码。\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nchar N[20],ans[20];\nbool t[20];\nint cnt=0,len;\n\nvoid dfs(int n,int top,int beg)\n{\n        if (top==n)\n        {\n                if (cnt%3==0) {\n                        printf(\"%d\\n\",len-n);\n                        exit(0);\n                }\n                else return ;\n        }\n        for (int i=beg;i<len;i++)\n        {\n                if (t[i]==false) \n                {\n                        ans[top]=N[i];\n                        t[i]=true;\n                        cnt+=(N[i]-'0');\n                        dfs(n,top+1,i+1);\n                        t[i]=false;\n                        cnt-=(N[i]-'0');\n                }\n        }\n}\n\nint main()\n{       \n        scanf (\"%s\",N);\n        len=strlen(N);\n        for (int i=len;i>=1;i--){\n                dfs(i,0,0);\n        }\n        printf(\"%d\\n\",-1);\n        return 0;\n}\n```\n## Problem D - Wandering\n### 题目大意\n一只机器人，初始在数轴的原点。他会移动 N 轮，第 N 轮移动 N 次，第 i 次移动的距离为 A[i].问所在处坐标最大是多少。\n### Solution\n就是一个模拟过程，但单纯模拟一定会 TLE，那么我们要减少无意义的模拟。\n* 第N轮结束，位置变化量是固定的，你只要加上就可以知道下一轮开始时的位置。而且在输入时就可以预处理了。\n* 我们要的最大值，与第 N 轮期间的坐标最大值有关，答案就是每一轮过程中的最大值。也是预处理变化量的最大值即可。\n接下来就比较一下第 N 轮的过程最大值，更新答案，计算出下一轮的位置就好了。时间复杂度是 O(N)。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nlong long A[200010],s[200010];\nint main()\n{       \n        long long N,ans=0,cnt=0;\n        scanf (\"%lld\",&N);\n        for (int i=1;i<=N;i++){\n                scanf (\"%lld\",&A[i]);\n                A[i]+=A[i-1];\n                s[i]=max(s[i-1],A[i]);\n        }\n        for (int i=1;i<=N;i++){\n                ans=max(ans,cnt+s[i]);\n                cnt+=A[i];\n        }\n        printf(\"%lld\\n\",ans);\n        return 0;\n}\n```","source":"_posts/XCPC/ABC182.md","raw":"---\ntitle: Atcoder Beginner Contect 182\ndate: 2020-11-10 23:59:59\ncategories:\n\t- ICPC Programming Contest\ntags:\n\t- 剪枝\n\t- 暴搜\n\t- dfs\n---\n\n\n## Problem B - Almost GCD\n### 题目大意\n给你一堆数，问选哪个数 n(n≥2) ,使数组中能被 n 整除的数最多？\n### Solution\n枚举n，然后跑一遍数组看那个数最多，当然这种只是过样例的啦。\n所以我们想办法减少枚举的数，于是我们可以枚举到数组中的最大的数，这样可以减少一点，但没有什么卵用。\n其实不用枚举所有数，只需要枚举质数就够了。因为能被合数整除，一定也能被它的质因子整除。这样就算你枚举到10000以内的质数也是不会 TLE 的。提前线性筛素数就好了。<div class=\"heimu\" > 其实就是自己懒得改</div>\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint A[110];\nbool t[10010];\n\nint main()\n{\n        int N,count=0,mx=0,mn=0;\n        for (int i=2;i<=10000;i++){\n                if (t[i]) continue;\n                for (int j=i*2;j<=10000;j+=i) t[j]=1;\n        }\n        scanf (\"%d\",&N);\n        for (int i=0;i<N;i++){\n                scanf (\"%d\", &A[i]);\n        }\n        for (int i=2;i<=10000;i++){\n                if (t[i]) continue;\n                count=0;\n                for(int j=0;j<N;j++){\n                        if (A[j]%i==0) count++;\n                }\n                if (count>mx) mx=count,mn=i;\n        }\n        printf(\"%d\\n\",mn);\n        return 0;\n}\n```\n## Problem C-To 3\n### 题目大意\n给一个十八位以内的数字，判断最少去掉多少位数可以使剩余数字组成的数会被3整除？若无论去掉多少位都不能被3整除，那么输出-1.\n### Solution\n枚举子集，然后求剩下位数的和，看能不能被3整除（由小学知识得）。暴搜求解。枚举子集可以使用二进制法，也可以直接用递归。还有，这是组合，不是排列，所以每一层递归里的for从上一层选的元素开始。（我是选择哪个选，而不是选择哪个不选）。上代码。\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nchar N[20],ans[20];\nbool t[20];\nint cnt=0,len;\n\nvoid dfs(int n,int top,int beg)\n{\n        if (top==n)\n        {\n                if (cnt%3==0) {\n                        printf(\"%d\\n\",len-n);\n                        exit(0);\n                }\n                else return ;\n        }\n        for (int i=beg;i<len;i++)\n        {\n                if (t[i]==false) \n                {\n                        ans[top]=N[i];\n                        t[i]=true;\n                        cnt+=(N[i]-'0');\n                        dfs(n,top+1,i+1);\n                        t[i]=false;\n                        cnt-=(N[i]-'0');\n                }\n        }\n}\n\nint main()\n{       \n        scanf (\"%s\",N);\n        len=strlen(N);\n        for (int i=len;i>=1;i--){\n                dfs(i,0,0);\n        }\n        printf(\"%d\\n\",-1);\n        return 0;\n}\n```\n## Problem D - Wandering\n### 题目大意\n一只机器人，初始在数轴的原点。他会移动 N 轮，第 N 轮移动 N 次，第 i 次移动的距离为 A[i].问所在处坐标最大是多少。\n### Solution\n就是一个模拟过程，但单纯模拟一定会 TLE，那么我们要减少无意义的模拟。\n* 第N轮结束，位置变化量是固定的，你只要加上就可以知道下一轮开始时的位置。而且在输入时就可以预处理了。\n* 我们要的最大值，与第 N 轮期间的坐标最大值有关，答案就是每一轮过程中的最大值。也是预处理变化量的最大值即可。\n接下来就比较一下第 N 轮的过程最大值，更新答案，计算出下一轮的位置就好了。时间复杂度是 O(N)。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nlong long A[200010],s[200010];\nint main()\n{       \n        long long N,ans=0,cnt=0;\n        scanf (\"%lld\",&N);\n        for (int i=1;i<=N;i++){\n                scanf (\"%lld\",&A[i]);\n                A[i]+=A[i-1];\n                s[i]=max(s[i-1],A[i]);\n        }\n        for (int i=1;i<=N;i++){\n                ans=max(ans,cnt+s[i]);\n                cnt+=A[i];\n        }\n        printf(\"%lld\\n\",ans);\n        return 0;\n}\n```","slug":"XCPC/ABC182","published":1,"updated":"2021-06-26T15:35:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujd000p63jn0btm35p3","content":"<h2 id=\"Problem-B-Almost-GCD\"><a href=\"#Problem-B-Almost-GCD\" class=\"headerlink\" title=\"Problem B - Almost GCD\"></a>Problem B - Almost GCD</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给你一堆数，问选哪个数 n(n≥2) ,使数组中能被 n 整除的数最多？</p>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>枚举n，然后跑一遍数组看那个数最多，当然这种只是过样例的啦。<br>所以我们想办法减少枚举的数，于是我们可以枚举到数组中的最大的数，这样可以减少一点，但没有什么卵用。<br>其实不用枚举所有数，只需要枚举质数就够了。因为能被合数整除，一定也能被它的质因子整除。这样就算你枚举到10000以内的质数也是不会 TLE 的。提前线性筛素数就好了。<div class=\"heimu\" > 其实就是自己懒得改</div></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">10010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>mx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>mn<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">)</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token operator\">></span>mx<span class=\"token punctuation\">)</span> mx<span class=\"token operator\">=</span>count<span class=\"token punctuation\">,</span>mn<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>mn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Problem-C-To-3\"><a href=\"#Problem-C-To-3\" class=\"headerlink\" title=\"Problem C-To 3\"></a>Problem C-To 3</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给一个十八位以内的数字，判断最少去掉多少位数可以使剩余数字组成的数会被3整除？若无论去掉多少位都不能被3整除，那么输出-1.</p>\n<h3 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>枚举子集，然后求剩下位数的和，看能不能被3整除（由小学知识得）。暴搜求解。枚举子集可以使用二进制法，也可以直接用递归。还有，这是组合，不是排列，所以每一层递归里的for从上一层选的元素开始。（我是选择哪个选，而不是选择哪个不选）。上代码。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span> N<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> top<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> beg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top<span class=\"token operator\">==</span>n<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>len<span class=\"token operator\">-</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>beg<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> \n                <span class=\"token punctuation\">&#123;</span>\n                        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        cnt<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>top<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                        cnt<span class=\"token operator\">-=</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>       \n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        len<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Problem-D-Wandering\"><a href=\"#Problem-D-Wandering\" class=\"headerlink\" title=\"Problem D - Wandering\"></a>Problem D - Wandering</h2><h3 id=\"题目大意-2\"><a href=\"#题目大意-2\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>一只机器人，初始在数轴的原点。他会移动 N 轮，第 N 轮移动 N 次，第 i 次移动的距离为 A[i].问所在处坐标最大是多少。</p>\n<h3 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>就是一个模拟过程，但单纯模拟一定会 TLE，那么我们要减少无意义的模拟。</p>\n<ul>\n<li>第N轮结束，位置变化量是固定的，你只要加上就可以知道下一轮开始时的位置。而且在输入时就可以预处理了。</li>\n<li>我们要的最大值，与第 N 轮期间的坐标最大值有关，答案就是每一轮过程中的最大值。也是预处理变化量的最大值即可。<br>接下来就比较一下第 N 轮的过程最大值，更新答案，计算出下一轮的位置就好了。时间复杂度是 O(N)。</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">200010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">200010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>       \n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> N<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>A<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                ans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>cnt<span class=\"token operator\">+</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cnt<span class=\"token operator\">+=</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":"<h2 id=\"Problem-B-Almost-GCD\"><a href=\"#Problem-B-Almost-GCD\" class=\"headerlink\" title=\"Problem B - Almost GCD\"></a>Problem B - Almost GCD</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给你一堆数，问选哪个数 n(n≥2) ,使数组中能被 n 整除的数最多？</p>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>枚举n，然后跑一遍数组看那个数最多，当然这种只是过样例的啦。<br>所以我们想办法减少枚举的数，于是我们可以枚举到数组中的最大的数，这样可以减少一点，但没有什么卵用。<br>其实不用枚举所有数，只需要枚举质数就够了。因为能被合数整除，一定也能被它的质因子整除。这样就算你枚举到10000以内的质数也是不会 TLE 的。提前线性筛素数就好了。<div class=\"heimu\" > 其实就是自己懒得改</div></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">10010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>mx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>mn<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">)</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token operator\">></span>mx<span class=\"token punctuation\">)</span> mx<span class=\"token operator\">=</span>count<span class=\"token punctuation\">,</span>mn<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>mn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Problem-C-To-3\"><a href=\"#Problem-C-To-3\" class=\"headerlink\" title=\"Problem C-To 3\"></a>Problem C-To 3</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给一个十八位以内的数字，判断最少去掉多少位数可以使剩余数字组成的数会被3整除？若无论去掉多少位都不能被3整除，那么输出-1.</p>\n<h3 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>枚举子集，然后求剩下位数的和，看能不能被3整除（由小学知识得）。暴搜求解。枚举子集可以使用二进制法，也可以直接用递归。还有，这是组合，不是排列，所以每一层递归里的for从上一层选的元素开始。（我是选择哪个选，而不是选择哪个不选）。上代码。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span> N<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> top<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> beg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top<span class=\"token operator\">==</span>n<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>len<span class=\"token operator\">-</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>beg<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> \n                <span class=\"token punctuation\">&#123;</span>\n                        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        cnt<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>top<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                        cnt<span class=\"token operator\">-=</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>       \n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        len<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Problem-D-Wandering\"><a href=\"#Problem-D-Wandering\" class=\"headerlink\" title=\"Problem D - Wandering\"></a>Problem D - Wandering</h2><h3 id=\"题目大意-2\"><a href=\"#题目大意-2\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>一只机器人，初始在数轴的原点。他会移动 N 轮，第 N 轮移动 N 次，第 i 次移动的距离为 A[i].问所在处坐标最大是多少。</p>\n<h3 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>就是一个模拟过程，但单纯模拟一定会 TLE，那么我们要减少无意义的模拟。</p>\n<ul>\n<li>第N轮结束，位置变化量是固定的，你只要加上就可以知道下一轮开始时的位置。而且在输入时就可以预处理了。</li>\n<li>我们要的最大值，与第 N 轮期间的坐标最大值有关，答案就是每一轮过程中的最大值。也是预处理变化量的最大值即可。<br>接下来就比较一下第 N 轮的过程最大值，更新答案，计算出下一轮的位置就好了。时间复杂度是 O(N)。</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">200010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">200010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>       \n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> N<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>A<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                ans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>cnt<span class=\"token operator\">+</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cnt<span class=\"token operator\">+=</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"AtCoder Beginner Contest 188","date":"2021-01-25T07:36:30.000Z","updated":"2021-01-27T14:30:26.000Z","_content":"> ABC题都是很直接的题目，直接读题翻译暴力解决。\n>\n> D题开始有点难度，但是思路清晰，抓住分割成若干不重叠的线段，就可以很快求解，运差查分。\n>\n> E题就是一道简单的 DP 题目。\n>\n> F题我是用 BFS 求解，但是剪枝没想到，最后看了大佬的剪枝才改好的。\n\n<!-- more -->\n\n## A - Three-Point Shot\n\n简单的比较大小，对应输出。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n\tint x,y;\n\tcin>>x>>y;\n\tif (x>y) swap(x,y);\n\tprintf(\"%s\\n\",(x+3>y)?\"Yes\":\"No\");\n\treturn 0;\n}\n```\n\n## B - Orthogonality\n\n简单的内积计算。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int maxn=1e5+10;\nll a[maxn];\nint main()\n{\n\tint N;ll sum=0,b;\n\tcin>>N;\n\tfor (int i=0;i<N;i++) scanf(\"%lld\",&a[i]);\n\tfor (int i=0;i<N;i++) \n\t{\n\t\tscanf(\"%lld\",&b);\n\t\tsum+=b*a[i];\n\t}\n\tprintf(\"%s\\n\",(sum==0)?\"Yes\":\"No\");\n\treturn 0;\n}\n```\n\n## C - ABC Tournament\n\n简单的比较题，数据小，直接比较。我是用结构体加队列。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct num\n{\n\tint v,n;\n};\nint main()\n{\n\tint N;\n\tqueue<num>q;\n\tnum x,y;\n\tcin>>N;\n\tfor (int i=1;i<=(1<<N);i++) \n\t{\n\t\tscanf(\"%d\",&x.v);\n\t\tx.n=i;\n\t\tq.push(x);\n\t}\n\twhile (q.size()>2)\n\t{\n\t\tx=q.front();q.pop();\n\t\ty=q.front();q.pop();\n\t\tif (x.v>y.v) q.push(x);\n\t\telse q.push(y);\n\t}\n\tx=q.front();q.pop();\n\ty=q.front();q.pop();\n\tif (x.v>y.v) printf(\"%d\\n\",y.n);\n\telse printf(\"%d\\n\",x.n);\n\treturn 0;\n}\n```\n\n## D - Snuke Prime\n\n### 珂朵莉树\n\n珂朵莉树，利用珂朵莉树每个节点都是一段值相等的线段，和题目要求很符合。一开始我直接套了模版上去，没有改，结果 TLE 了。原因是珂朵莉树是用于区间求和的，我们需要修改一下，使用差分思想，节点值定义为进入该区间价格的改变值。这样的好处是原本珂朵莉树会将某个区间内所有节点值都加上改变值（最坏情况下时间是 O(n) ），而改良后是 O(1) 。进入区间和离开区间改变而已。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nstruct Node\n{\n  int l,r;\n  mutable ll value;//\n  Node(int a,int b,long long c):l(a),r(b),value(c){}\n  Node(int a):l(a),r(0),value(0){}\n  bool operator < (const Node& o) const{\n    return l<o.l;\n  }\n};\n\nset<Node>s;\nset<Node>::iterator split(int pos)\n{\n\tset<Node>::iterator it=s.lower_bound(Node(pos));\n\tif (it->l==pos && it!=s.end()) return it;// \n\t--it;\n\tif (pos > it->r) return s.end();//\n\tint L=it->l,R=it->r;\n\tll V=it->value;\n\ts.erase(it);\n\ts.insert(Node(L,pos-1,V));\n\treturn s.insert(Node(pos,R,0)).first;\n}\nvoid add(int l,int r,ll v)\n{\n\tsplit(l);\n\tauto R=split(r+1),L=split(l);\n\tL->value+=v;\n\tR->value-=v;\n}\n\nint main() {\n\tint n,a,b;\n\tll C,c,ans=0,val=0;\n\tscanf (\"%d %lld\",&n,&C);\n\ts.insert(Node(1,1e9,0));\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>a>>b>>c;\n\t\tadd(a,b,c);\n\t}\n\tfor (set<Node>::iterator it=s.begin();it!=s.end();it++){\n\t\tval+= it->value;\n\t\tans+=((it->r)-(it->l)+1)*min(val,C);\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n\n### map解法\n\n思路跟珂朵莉树差不多，最终必定分为连续的若干个区间。区间之间会改变花费值，这些区间短点要么是 a<sub>i</sub> ，要么是 b<sub>i</sub>+1 。于是我们用把变化值映射到区间端点上，遍历时取当前花费与 C 的较小值即可。珂朵莉树也是基于此思路，莫非常数太大。我找个时间优化一下（没错，5分钟后我就优化了）。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n\tint n,a,b;\n\tll C,c,ans=0;\n\tmap<int,ll>changes;\n\tset<int>s;\n\tscanf (\"%d %lld\",&n,&C);\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>a>>b>>c;\n\t\ts.insert(a);s.insert(b+1);\n\t\tchanges[a]+=c;\n\t\tchanges[b+1]-=c;\n\t}\n\tll val=0;\n\tset<int>::iterator L=s.begin();\n\tfor (set<int>::iterator R=s.begin();R!=s.end();R++){\n\t\tif (L==R)\n\t\t{\n\t\t\tval+=changes[*L];\n\t\t\tcontinue;\n\t\t}\n\t\tans+=(*R-*L)*min(val,C);\n\t\tL++;\n\t\tval+=changes[*L];\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n\n## E - Peddler\n\n简单的 dp 题目，dp[i] 表示到 i 城市时，最少能以多少单价买到黄金。遍历以 i 城市为终点的路线，更新最小黄金价格，然后计算在该城市卖掉黄金的利润，即该城市售价减去最小黄金单价。然后更新该城市最小黄金单价。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 200010\n#define INF 1e9+2333\ntypedef long long ll;\nvector<int>v[maxn];\nint a[maxn],dp[maxn];\n\nint main() {\n\tint n,m,x,y,ans=-(INF);\n\tscanf (\"%d %d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&a[i]);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tv[y].push_back(x);\n\t}\n\tfor (int i=1;i<=n;i++){\n\t\tif (v[i].empty()) \tdp[i]=a[i];\n\t\telse {\n\t\t\tdp[i]=INF;\n\t\t\tfor (vector<int>::iterator j=v[i].begin();j!=v[i].end();j++){\n\t\t\t\tdp[i]=min(dp[*j],dp[i]);\n\t\t\t}\n\t\t\tans=max(ans,a[i]-dp[i]);\n\t\t\tdp[i]=min(dp[i],a[i]);\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n\n## F - +1-1x2\n\n如果 x >= y ，答案是 x - y 。\n\n如果 x < y ，采用 BFS ，但是需要剪枝操作。我们从 y 开始 BFS 。我们每一次尝试用 当前次数 + |当前值 - x| 更新答案最小值。于是当前值为偶数时，我们不必对偶数尝试 +1 或者 -1 。当前值是奇数，我们尝试 +1 -1 放入队列。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 200010\n#define INF 1e9+2333\ntypedef long long ll;\n\nstruct node\n{\n\tll v,s;\n\tnode(ll a,ll b):v(a),s(b){}\n\tbool operator < (const node& a)\n\t{\n\t\treturn v<a.v;\n\t}\n};\n\nint main() {\n\tll x,y,ans;\n\tscanf (\"%lld %lld\",&x,&y);\n\tif (x>=y) \n\t{\n\t\tprintf(\"%lld\\n\",x-y);\n\t\treturn 0;\n\t}\n\tqueue<node>q;\n\tset<ll>vis;\n\tq.push(node(y,0));\n\tvis.insert(y);\n\tans=y-x;\n\twhile (!q.empty())\n\t{\n\t\tnode n=q.front();q.pop();\n\t\tif (n.v==x) {\n\t\t\tans=n.s;\n\t\t\tbreak;\n\t\t}\n\t\tans=min(ans,n.s+abs(n.v-x));\n\t\tif (n.s>=ans) break;\n\t\tif (n.v%2==0 ) {\n\t\t\tif (vis.find(n.v/2)==vis.end()) {\n\t\t\t\tq.push(node(n.v/2,n.s+1));\n\t\t\t\tvis.insert(n.v/2);\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (vis.find(n.v+1)==vis.end() ) {\n\t\t\t\tq.push(node(n.v+1,n.s+1));\n\t\t\t\tvis.insert(n.v+1);\n\t\t\t}\n\t\t\tif (vis.find(n.v-1)==vis.end() ){\n\t\t\t\tq.push(node(n.v-1,n.s+1));\n\t\t\t\tvis.insert(n.v-1);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n\n---\n\n\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/ABC188.md","raw":"---\ntitle: AtCoder Beginner Contest 188\ndate: 2021-01-25 15:36:30\nupdated: 2021-01-27 22:30:26\ntags:\n\t- 队列\n\t- 珂朵莉树\n\t- map\n\t- 差分\n\t- BFS\ncategories:\n\t- ICPC Programming Contest\n---\n> ABC题都是很直接的题目，直接读题翻译暴力解决。\n>\n> D题开始有点难度，但是思路清晰，抓住分割成若干不重叠的线段，就可以很快求解，运差查分。\n>\n> E题就是一道简单的 DP 题目。\n>\n> F题我是用 BFS 求解，但是剪枝没想到，最后看了大佬的剪枝才改好的。\n\n<!-- more -->\n\n## A - Three-Point Shot\n\n简单的比较大小，对应输出。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n\tint x,y;\n\tcin>>x>>y;\n\tif (x>y) swap(x,y);\n\tprintf(\"%s\\n\",(x+3>y)?\"Yes\":\"No\");\n\treturn 0;\n}\n```\n\n## B - Orthogonality\n\n简单的内积计算。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int maxn=1e5+10;\nll a[maxn];\nint main()\n{\n\tint N;ll sum=0,b;\n\tcin>>N;\n\tfor (int i=0;i<N;i++) scanf(\"%lld\",&a[i]);\n\tfor (int i=0;i<N;i++) \n\t{\n\t\tscanf(\"%lld\",&b);\n\t\tsum+=b*a[i];\n\t}\n\tprintf(\"%s\\n\",(sum==0)?\"Yes\":\"No\");\n\treturn 0;\n}\n```\n\n## C - ABC Tournament\n\n简单的比较题，数据小，直接比较。我是用结构体加队列。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct num\n{\n\tint v,n;\n};\nint main()\n{\n\tint N;\n\tqueue<num>q;\n\tnum x,y;\n\tcin>>N;\n\tfor (int i=1;i<=(1<<N);i++) \n\t{\n\t\tscanf(\"%d\",&x.v);\n\t\tx.n=i;\n\t\tq.push(x);\n\t}\n\twhile (q.size()>2)\n\t{\n\t\tx=q.front();q.pop();\n\t\ty=q.front();q.pop();\n\t\tif (x.v>y.v) q.push(x);\n\t\telse q.push(y);\n\t}\n\tx=q.front();q.pop();\n\ty=q.front();q.pop();\n\tif (x.v>y.v) printf(\"%d\\n\",y.n);\n\telse printf(\"%d\\n\",x.n);\n\treturn 0;\n}\n```\n\n## D - Snuke Prime\n\n### 珂朵莉树\n\n珂朵莉树，利用珂朵莉树每个节点都是一段值相等的线段，和题目要求很符合。一开始我直接套了模版上去，没有改，结果 TLE 了。原因是珂朵莉树是用于区间求和的，我们需要修改一下，使用差分思想，节点值定义为进入该区间价格的改变值。这样的好处是原本珂朵莉树会将某个区间内所有节点值都加上改变值（最坏情况下时间是 O(n) ），而改良后是 O(1) 。进入区间和离开区间改变而已。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nstruct Node\n{\n  int l,r;\n  mutable ll value;//\n  Node(int a,int b,long long c):l(a),r(b),value(c){}\n  Node(int a):l(a),r(0),value(0){}\n  bool operator < (const Node& o) const{\n    return l<o.l;\n  }\n};\n\nset<Node>s;\nset<Node>::iterator split(int pos)\n{\n\tset<Node>::iterator it=s.lower_bound(Node(pos));\n\tif (it->l==pos && it!=s.end()) return it;// \n\t--it;\n\tif (pos > it->r) return s.end();//\n\tint L=it->l,R=it->r;\n\tll V=it->value;\n\ts.erase(it);\n\ts.insert(Node(L,pos-1,V));\n\treturn s.insert(Node(pos,R,0)).first;\n}\nvoid add(int l,int r,ll v)\n{\n\tsplit(l);\n\tauto R=split(r+1),L=split(l);\n\tL->value+=v;\n\tR->value-=v;\n}\n\nint main() {\n\tint n,a,b;\n\tll C,c,ans=0,val=0;\n\tscanf (\"%d %lld\",&n,&C);\n\ts.insert(Node(1,1e9,0));\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>a>>b>>c;\n\t\tadd(a,b,c);\n\t}\n\tfor (set<Node>::iterator it=s.begin();it!=s.end();it++){\n\t\tval+= it->value;\n\t\tans+=((it->r)-(it->l)+1)*min(val,C);\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n\n### map解法\n\n思路跟珂朵莉树差不多，最终必定分为连续的若干个区间。区间之间会改变花费值，这些区间短点要么是 a<sub>i</sub> ，要么是 b<sub>i</sub>+1 。于是我们用把变化值映射到区间端点上，遍历时取当前花费与 C 的较小值即可。珂朵莉树也是基于此思路，莫非常数太大。我找个时间优化一下（没错，5分钟后我就优化了）。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n\tint n,a,b;\n\tll C,c,ans=0;\n\tmap<int,ll>changes;\n\tset<int>s;\n\tscanf (\"%d %lld\",&n,&C);\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>a>>b>>c;\n\t\ts.insert(a);s.insert(b+1);\n\t\tchanges[a]+=c;\n\t\tchanges[b+1]-=c;\n\t}\n\tll val=0;\n\tset<int>::iterator L=s.begin();\n\tfor (set<int>::iterator R=s.begin();R!=s.end();R++){\n\t\tif (L==R)\n\t\t{\n\t\t\tval+=changes[*L];\n\t\t\tcontinue;\n\t\t}\n\t\tans+=(*R-*L)*min(val,C);\n\t\tL++;\n\t\tval+=changes[*L];\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n\n## E - Peddler\n\n简单的 dp 题目，dp[i] 表示到 i 城市时，最少能以多少单价买到黄金。遍历以 i 城市为终点的路线，更新最小黄金价格，然后计算在该城市卖掉黄金的利润，即该城市售价减去最小黄金单价。然后更新该城市最小黄金单价。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 200010\n#define INF 1e9+2333\ntypedef long long ll;\nvector<int>v[maxn];\nint a[maxn],dp[maxn];\n\nint main() {\n\tint n,m,x,y,ans=-(INF);\n\tscanf (\"%d %d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&a[i]);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tv[y].push_back(x);\n\t}\n\tfor (int i=1;i<=n;i++){\n\t\tif (v[i].empty()) \tdp[i]=a[i];\n\t\telse {\n\t\t\tdp[i]=INF;\n\t\t\tfor (vector<int>::iterator j=v[i].begin();j!=v[i].end();j++){\n\t\t\t\tdp[i]=min(dp[*j],dp[i]);\n\t\t\t}\n\t\t\tans=max(ans,a[i]-dp[i]);\n\t\t\tdp[i]=min(dp[i],a[i]);\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n\n## F - +1-1x2\n\n如果 x >= y ，答案是 x - y 。\n\n如果 x < y ，采用 BFS ，但是需要剪枝操作。我们从 y 开始 BFS 。我们每一次尝试用 当前次数 + |当前值 - x| 更新答案最小值。于是当前值为偶数时，我们不必对偶数尝试 +1 或者 -1 。当前值是奇数，我们尝试 +1 -1 放入队列。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 200010\n#define INF 1e9+2333\ntypedef long long ll;\n\nstruct node\n{\n\tll v,s;\n\tnode(ll a,ll b):v(a),s(b){}\n\tbool operator < (const node& a)\n\t{\n\t\treturn v<a.v;\n\t}\n};\n\nint main() {\n\tll x,y,ans;\n\tscanf (\"%lld %lld\",&x,&y);\n\tif (x>=y) \n\t{\n\t\tprintf(\"%lld\\n\",x-y);\n\t\treturn 0;\n\t}\n\tqueue<node>q;\n\tset<ll>vis;\n\tq.push(node(y,0));\n\tvis.insert(y);\n\tans=y-x;\n\twhile (!q.empty())\n\t{\n\t\tnode n=q.front();q.pop();\n\t\tif (n.v==x) {\n\t\t\tans=n.s;\n\t\t\tbreak;\n\t\t}\n\t\tans=min(ans,n.s+abs(n.v-x));\n\t\tif (n.s>=ans) break;\n\t\tif (n.v%2==0 ) {\n\t\t\tif (vis.find(n.v/2)==vis.end()) {\n\t\t\t\tq.push(node(n.v/2,n.s+1));\n\t\t\t\tvis.insert(n.v/2);\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (vis.find(n.v+1)==vis.end() ) {\n\t\t\t\tq.push(node(n.v+1,n.s+1));\n\t\t\t\tvis.insert(n.v+1);\n\t\t\t}\n\t\t\tif (vis.find(n.v-1)==vis.end() ){\n\t\t\t\tq.push(node(n.v-1,n.s+1));\n\t\t\t\tvis.insert(n.v-1);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n\n---\n\n\n\n<!-- Q.E.D. -->","slug":"XCPC/ABC188","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uje000u63jncjf9hf5t","content":"<blockquote>\n<p>ABC题都是很直接的题目，直接读题翻译暴力解决。</p>\n<p>D题开始有点难度，但是思路清晰，抓住分割成若干不重叠的线段，就可以很快求解，运差查分。</p>\n<p>E题就是一道简单的 DP 题目。</p>\n<p>F题我是用 BFS 求解，但是剪枝没想到，最后看了大佬的剪枝才改好的。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"A-Three-Point-Shot\"><a href=\"#A-Three-Point-Shot\" class=\"headerlink\" title=\"A - Three-Point Shot\"></a>A - Three-Point Shot</h2><p>简单的比较大小，对应输出。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span>y<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token operator\">></span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token string\">\"Yes\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"No\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Orthogonality\"><a href=\"#B-Orthogonality\" class=\"headerlink\" title=\"B - Orthogonality\"></a>B - Orthogonality</h2><p>简单的内积计算。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nll a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">;</span>ll sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>N<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsum<span class=\"token operator\">+=</span>b<span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token string\">\"Yes\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"No\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-ABC-Tournament\"><a href=\"#C-ABC-Tournament\" class=\"headerlink\" title=\"C - ABC Tournament\"></a>C - ABC Tournament</h2><p>简单的比较题，数据小，直接比较。我是用结构体加队列。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">num</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> v<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">;</span>\n\tqueue<span class=\"token operator\">&lt;</span>num<span class=\"token operator\">></span>q<span class=\"token punctuation\">;</span>\n\tnum x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>N<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tx<span class=\"token punctuation\">.</span>n<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ty<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>v<span class=\"token operator\">></span>y<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tx<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ty<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>v<span class=\"token operator\">></span>y<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-Snuke-Prime\"><a href=\"#D-Snuke-Prime\" class=\"headerlink\" title=\"D - Snuke Prime\"></a>D - Snuke Prime</h2><h3 id=\"珂朵莉树\"><a href=\"#珂朵莉树\" class=\"headerlink\" title=\"珂朵莉树\"></a>珂朵莉树</h3><p>珂朵莉树，利用珂朵莉树每个节点都是一段值相等的线段，和题目要求很符合。一开始我直接套了模版上去，没有改，结果 TLE 了。原因是珂朵莉树是用于区间求和的，我们需要修改一下，使用差分思想，节点值定义为进入该区间价格的改变值。这样的好处是原本珂朵莉树会将某个区间内所有节点值都加上改变值（最坏情况下时间是 O(n) ），而改良后是 O(1) 。进入区间和离开区间改变而已。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">mutable</span> ll value<span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n  <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> c<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Node<span class=\"token operator\">&amp;</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> l<span class=\"token operator\">&lt;</span>o<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nset<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span>s<span class=\"token punctuation\">;</span>\nset<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tset<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span>l<span class=\"token operator\">==</span>pos <span class=\"token operator\">&amp;&amp;</span> it<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> it<span class=\"token punctuation\">;</span><span class=\"token comment\">// </span>\n\t<span class=\"token operator\">--</span>it<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">></span> it<span class=\"token operator\">-></span>r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n\t<span class=\"token keyword\">int</span> L<span class=\"token operator\">=</span>it<span class=\"token operator\">-></span>l<span class=\"token punctuation\">,</span>R<span class=\"token operator\">=</span>it<span class=\"token operator\">-></span>r<span class=\"token punctuation\">;</span>\n\tll V<span class=\"token operator\">=</span>it<span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>pos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span>ll v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> R<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>L<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token operator\">-></span>value<span class=\"token operator\">+=</span>v<span class=\"token punctuation\">;</span>\n\tR<span class=\"token operator\">-></span>value<span class=\"token operator\">-=</span>v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n\tll C<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1e9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tcin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tval<span class=\"token operator\">+=</span> it<span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span>\n\t\tans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"map解法\"><a href=\"#map解法\" class=\"headerlink\" title=\"map解法\"></a>map解法</h3><p>思路跟珂朵莉树差不多，最终必定分为连续的若干个区间。区间之间会改变花费值，这些区间短点要么是 a<sub>i</sub> ，要么是 b<sub>i</sub>+1 。于是我们用把变化值映射到区间端点上，遍历时取当前花费与 C 的较小值即可。珂朵莉树也是基于此思路，莫非常数太大。我找个时间优化一下（没错，5分钟后我就优化了）。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n\tll C<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>ll<span class=\"token operator\">></span>changes<span class=\"token punctuation\">;</span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tcin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tchanges<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>c<span class=\"token punctuation\">;</span>\n\t\tchanges<span class=\"token punctuation\">[</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-=</span>c<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tll val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator L<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator R<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>R<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>R<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">==</span>R<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tval<span class=\"token operator\">+=</span>changes<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>R<span class=\"token operator\">-</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tL<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tval<span class=\"token operator\">+=</span>changes<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"E-Peddler\"><a href=\"#E-Peddler\" class=\"headerlink\" title=\"E - Peddler\"></a>E - Peddler</h2><p>简单的 dp 题目，dp[i] 表示到 i 城市时，最少能以多少单价买到黄金。遍历以 i 城市为终点的路线，更新最小黄金价格，然后计算在该城市卖掉黄金的利润，即该城市售价减去最小黄金单价。然后更新该城市最小黄金单价。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">200010</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">2333</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>v<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>INF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tv<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>INF<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator j<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">!=</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"F-1-1x2\"><a href=\"#F-1-1x2\" class=\"headerlink\" title=\"F - +1-1x2\"></a>F - +1-1x2</h2><p>如果 x &gt;= y ，答案是 x - y 。</p>\n<p>如果 x &lt; y ，采用 BFS ，但是需要剪枝操作。我们从 y 开始 BFS 。我们每一次尝试用 当前次数 + |当前值 - x| 更新答案最小值。于是当前值为偶数时，我们不必对偶数尝试 +1 或者 -1 。当前值是奇数，我们尝试 +1 -1 放入队列。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">200010</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">2333</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll v<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">node</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span>ll b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> v<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tll x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">>=</span>y<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">-</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tqueue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span>q<span class=\"token punctuation\">;</span>\n\tset<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span>vis<span class=\"token punctuation\">;</span>\n\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvis<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tans<span class=\"token operator\">=</span>y<span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tnode n<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">==</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tans<span class=\"token operator\">=</span>n<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tans<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>s<span class=\"token operator\">>=</span>ans<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tvis<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tvis<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tvis<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<blockquote>\n<p>ABC题都是很直接的题目，直接读题翻译暴力解决。</p>\n<p>D题开始有点难度，但是思路清晰，抓住分割成若干不重叠的线段，就可以很快求解，运差查分。</p>\n<p>E题就是一道简单的 DP 题目。</p>\n<p>F题我是用 BFS 求解，但是剪枝没想到，最后看了大佬的剪枝才改好的。</p>\n</blockquote>","more":"<h2 id=\"A-Three-Point-Shot\"><a href=\"#A-Three-Point-Shot\" class=\"headerlink\" title=\"A - Three-Point Shot\"></a>A - Three-Point Shot</h2><p>简单的比较大小，对应输出。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span>y<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token operator\">></span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token string\">\"Yes\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"No\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Orthogonality\"><a href=\"#B-Orthogonality\" class=\"headerlink\" title=\"B - Orthogonality\"></a>B - Orthogonality</h2><p>简单的内积计算。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nll a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">;</span>ll sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>N<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsum<span class=\"token operator\">+=</span>b<span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token string\">\"Yes\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"No\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-ABC-Tournament\"><a href=\"#C-ABC-Tournament\" class=\"headerlink\" title=\"C - ABC Tournament\"></a>C - ABC Tournament</h2><p>简单的比较题，数据小，直接比较。我是用结构体加队列。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">num</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> v<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">;</span>\n\tqueue<span class=\"token operator\">&lt;</span>num<span class=\"token operator\">></span>q<span class=\"token punctuation\">;</span>\n\tnum x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>N<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tx<span class=\"token punctuation\">.</span>n<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tx<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ty<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>v<span class=\"token operator\">></span>y<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tx<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ty<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>v<span class=\"token operator\">></span>y<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-Snuke-Prime\"><a href=\"#D-Snuke-Prime\" class=\"headerlink\" title=\"D - Snuke Prime\"></a>D - Snuke Prime</h2><h3 id=\"珂朵莉树\"><a href=\"#珂朵莉树\" class=\"headerlink\" title=\"珂朵莉树\"></a>珂朵莉树</h3><p>珂朵莉树，利用珂朵莉树每个节点都是一段值相等的线段，和题目要求很符合。一开始我直接套了模版上去，没有改，结果 TLE 了。原因是珂朵莉树是用于区间求和的，我们需要修改一下，使用差分思想，节点值定义为进入该区间价格的改变值。这样的好处是原本珂朵莉树会将某个区间内所有节点值都加上改变值（最坏情况下时间是 O(n) ），而改良后是 O(1) 。进入区间和离开区间改变而已。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">mutable</span> ll value<span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n  <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> c<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Node<span class=\"token operator\">&amp;</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> l<span class=\"token operator\">&lt;</span>o<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nset<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span>s<span class=\"token punctuation\">;</span>\nset<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tset<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span>l<span class=\"token operator\">==</span>pos <span class=\"token operator\">&amp;&amp;</span> it<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> it<span class=\"token punctuation\">;</span><span class=\"token comment\">// </span>\n\t<span class=\"token operator\">--</span>it<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">></span> it<span class=\"token operator\">-></span>r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n\t<span class=\"token keyword\">int</span> L<span class=\"token operator\">=</span>it<span class=\"token operator\">-></span>l<span class=\"token punctuation\">,</span>R<span class=\"token operator\">=</span>it<span class=\"token operator\">-></span>r<span class=\"token punctuation\">;</span>\n\tll V<span class=\"token operator\">=</span>it<span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>pos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span>ll v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> R<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>L<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token operator\">-></span>value<span class=\"token operator\">+=</span>v<span class=\"token punctuation\">;</span>\n\tR<span class=\"token operator\">-></span>value<span class=\"token operator\">-=</span>v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n\tll C<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1e9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tcin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tval<span class=\"token operator\">+=</span> it<span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span>\n\t\tans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"map解法\"><a href=\"#map解法\" class=\"headerlink\" title=\"map解法\"></a>map解法</h3><p>思路跟珂朵莉树差不多，最终必定分为连续的若干个区间。区间之间会改变花费值，这些区间短点要么是 a<sub>i</sub> ，要么是 b<sub>i</sub>+1 。于是我们用把变化值映射到区间端点上，遍历时取当前花费与 C 的较小值即可。珂朵莉树也是基于此思路，莫非常数太大。我找个时间优化一下（没错，5分钟后我就优化了）。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n\tll C<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>ll<span class=\"token operator\">></span>changes<span class=\"token punctuation\">;</span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tcin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tchanges<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>c<span class=\"token punctuation\">;</span>\n\t\tchanges<span class=\"token punctuation\">[</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-=</span>c<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tll val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator L<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator R<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>R<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>R<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">==</span>R<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tval<span class=\"token operator\">+=</span>changes<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>R<span class=\"token operator\">-</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tL<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tval<span class=\"token operator\">+=</span>changes<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"E-Peddler\"><a href=\"#E-Peddler\" class=\"headerlink\" title=\"E - Peddler\"></a>E - Peddler</h2><p>简单的 dp 题目，dp[i] 表示到 i 城市时，最少能以多少单价买到黄金。遍历以 i 城市为终点的路线，更新最小黄金价格，然后计算在该城市卖掉黄金的利润，即该城市售价减去最小黄金单价。然后更新该城市最小黄金单价。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">200010</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">2333</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>v<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>INF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tv<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>INF<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator j<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">!=</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"F-1-1x2\"><a href=\"#F-1-1x2\" class=\"headerlink\" title=\"F - +1-1x2\"></a>F - +1-1x2</h2><p>如果 x &gt;= y ，答案是 x - y 。</p>\n<p>如果 x &lt; y ，采用 BFS ，但是需要剪枝操作。我们从 y 开始 BFS 。我们每一次尝试用 当前次数 + |当前值 - x| 更新答案最小值。于是当前值为偶数时，我们不必对偶数尝试 +1 或者 -1 。当前值是奇数，我们尝试 +1 -1 放入队列。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">200010</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">2333</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll v<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">node</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span>ll b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> v<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tll x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">>=</span>y<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">-</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tqueue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span>q<span class=\"token punctuation\">;</span>\n\tset<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span>vis<span class=\"token punctuation\">;</span>\n\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvis<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tans<span class=\"token operator\">=</span>y<span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tnode n<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">==</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tans<span class=\"token operator\">=</span>n<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tans<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>s<span class=\"token operator\">>=</span>ans<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tvis<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tvis<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>vis<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tvis<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>v<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<!-- Q.E.D. -->"},{"title":"AtCoder Beginner Contest 189","date":"2021-01-24T03:34:44.000Z","updated":"2021-01-25T08:06:59.000Z","_content":"其实有时间打的，不过我懒，所以赛后打的。\n\t\tABC的难度就是前几题暴力，后面还是挺有挑战性的，下次有机会一定打。而且时间太舒服了，晚上8点。\n\n<!-- more -->\n\n## **A - Slot**\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=1e6;\n\nint main(){\n    char a,b,c;\n    scanf(\"%c%c%c\",&a,&b,&c);\n    if (a==b && b==c) printf(\"Won\\n\");\n    else printf(\"Lost\\n\");\n    return 0;\n}\n```\n\n## **B - Alcoholic**\n\n问题很简单，但是就是小数位数很难解决，最后我也没 Debug 出来，所以最好的办法就是百分数不用除 100 ，将其他数全部乘以 100，防止百分数出现。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=1e6;\n\nint main(){\n\tint n,x,v,p;\n    scanf (\"%d %d\",&n,&x);\n    x*=100;\n    for (int i=1;i<=n;i++)\n    {\n    \tscanf(\"%d%d\",&v,&p);\n    \tx-=v*p;\n    \tif (x<0) \n\t\t{\n\t\t\tprintf(\"%d\\n\",i);\n\t\t\treturn 0;\n\t\t}\n\t}\n    printf(\"-1\\n\");\n\treturn 0;\n}\n```\n\n## **C - Mandarin Orange**\n\n第一反应是 ST 表，所以我就写了一个 [ST 表解法](https://www.inzamz.top/2020/11/30/BinaryIndexedTreeandSparseTable/?t=1611456876942#%E4%BE%8B%E9%A2%98AtcoderABC189_C)。我放在 ST 表的文章了。\n\n我看了题解，有另一个解法。我们先确定起点，然后不断改变终点的值，同时维护区间内最小值即可。这样是复杂度是 O( N<sup>2</sup> )，不会超时。相反线段树是会超时的。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=1e5+10;\nint a[maxn]; \n\nint main(){\n\tint n,ans=0;\n\tscanf(\"%d\",&n);\n\tfor (int i=0;i<n;i++) scanf(\"%d\",&a[i]);\n\tfor (int i=0;i<n;i++)\n\t{\n\t\tint x=a[i];\n\t\tfor (int j=i;j<n;j++)\n\t\t{\n\t\t\tx=min(x,a[j]);\n\t\t\tans=max(ans,(j-i+1)*x);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n## **D - Logical Expression**\n\n因为优先级是一样的，所以下一次的结果只与符号以及上一次的答案有关，是个简单的 DP 。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=100;\nchar s[10];\nll a[maxn]={0},dp[maxn][0];\n\nint main(){\n\tint n,ans=0;\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++) \n\t{\n\t\tmemset(s,0,sizeof(s));\n\t\tscanf(\"%s\",s);\n\t\ta[i]=(strcmp(s,\"AND\")==0)?1:0;\n\t}\n\tdp[0][0]=dp[0][1]=1;\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tif (a[i]==1) \n\t\t{\n\t\t\tdp[i][0]=dp[i-1][0]*2+dp[i-1][1];\n\t\t\tdp[i][1]=dp[i-1][1];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tdp[i][0]=dp[i-1][0];\n\t\t\tdp[i][1]=dp[i-1][0]+dp[i-1][1]*2;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",dp[n][1]);\n\treturn 0;\n}\n```\n\n## **E - Rotate and Flip**\n\n参考题解：https://cp-wiki.vercel.app/tutorial/atcoder/ABC189/#problem-e-rotate-and-flip\n\n一开始看错了，没理解题意。绝对不可能存下每个点的位置，然后对图进行操作。我们发现是对所有点进行操作，也就是我们只需要中找到第n次操作后，点坐标对应的变化规律就好了。看了题解，可以用五个变量来记录，也可以用矩阵来表示。\n\n### 变量法\n\n五个变量分别是：\n\n- iswap：表示坐标 x y 变量是否交换了位置。\n- cx：（change x）即 横坐标 的变化量。记住是横坐标而不是变量 x ，因为 x y 可能对调。\n- cy：同上，纵坐标 的变化量\n- xmux / ymux：记录 横坐标/纵坐标 的符号是否变化了\n\n操作对应变化为：\n\n- op1：iswap取反，xmux与ymux对调，cx与cy对调，cy与ymux取反\n- op2：iswap取反，xmux与ymux对调，cx与cy对调，cx与xmux取反\n- op3：cx与xmux取反，cx加上2p\n- op4：cy与ymux取反，cy加上2p\n\n最终答案：\n\n- 如果 iswap 值为true：则将初始值的 x y 对调\n- 根据 xmux ymux 决定正负\n- 加上 cx 与 cy 的值\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=2e5+10;\nll co[maxn][2],cx[maxn],cy[maxn];\nbool xmux[maxn],ymux[maxn],iswap[maxn];\n\nint main(){\n\tint N,M,Q;\n\tscanf(\"%d\",&N);\n\tfor (int i=1;i<=N;i++) \n\t\tscanf (\"%lld %lld\",&co[i][0],&co[i][1]);\n\tscanf(\"%d\",&M);\n\tfor (int i=1;i<=M;i++)\n\t{\n\t\tint op;\n\t\tll p;\n\t\tscanf(\"%d\",&op);\n\t\tif (op==3 || op==4)\n\t\t{\n\t\t\tscanf(\"%lld\",&p);\n\t\t\tif (op==3) \n\t\t\t{\n\t\t\t\tiswap[i]=iswap[i-1];\n\t\t\t\txmux[i]=!xmux[i-1];\n\t\t\t\tcx[i]=-cx[i-1]+2*p;\n\t\t\t\tymux[i]=ymux[i-1];\n\t\t\t\tcy[i]=cy[i-1];\n\t\t\t}\n\t\t\telse if (op==4)\n\t\t\t{\n\t\t\t\tiswap[i]=iswap[i-1];\n\t\t\t\tymux[i]=!ymux[i-1];\n\t\t\t\tcy[i]=-cy[i-1]+2*p;\n\t\t\t\txmux[i]=xmux[i-1];\n\t\t\t\tcx[i]=cx[i-1];\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (op==1) \n\t\t\t{\n\t\t\t\tiswap[i]=!iswap[i-1];\n\t\t\t\txmux[i]=ymux[i-1];\n\t\t\t\tymux[i]=!xmux[i-1];\n\t\t\t\tcx[i]=cy[i-1];\n\t\t\t\tcy[i]=-cx[i-1];\n\t\t\t}\n\t\t\telse if (op==2) \n\t\t\t{\n\t\t\t\tiswap[i]=!iswap[i-1];\n\t\t\t\tymux[i]=xmux[i-1];\n\t\t\t\txmux[i]=!ymux[i-1];\n\t\t\t\tcy[i]=cx[i-1];\n\t\t\t\tcx[i]=-cy[i-1];\n\t\t\t}\n\t\t}\n\t}\n\tscanf(\"%d\",&Q);\n\tfor (int i=1;i<=Q;i++)\n\t{\n\t\tll a,b,x,y;\n\t\tscanf(\"%lld %lld\",&a,&b);\n\t\tx=co[b][0];y=co[b][1];\n\t\tif (iswap[a]) swap(x,y);\n\t\tif (xmux[a]) x=-x;\n\t\tif (ymux[a]) y=-y;\n\t\tx+=cx[a];y+=cy[a];\n\t\tprintf(\"%lld %lld\\n\",x,y);\n\t}\n\treturn 0;\n}\n```\n\n### 矩阵法\n\n每次变化都对应一个矩阵\n$$\n  \\begin{pmatrix}       %开始数学环境\n    0 & 1 & 0\\\\  %第一行元素\n    -1 & 0 & 0\\\\ %第二行元素\n    0 & 0 & 1\\\\\n  \\end{pmatrix}\n  \n  \\begin{pmatrix}\n    0 & -1 & 0\\\\  %第一行元素\n    1 & 0 & 0\\\\ %第二行元素\n    0 & 0 & 1\n  \\end{pmatrix}\n\n  \\begin{pmatrix}\n    -1 & 0 & 2p\\\\  %第一行元素\n    0 & 1 & 0\\\\ %第二行元素\n    0 & 0 & 1\n  \\end{pmatrix}\n  \n  \\begin{pmatrix}\n    1 & 0 & 0\\\\ \n    0 & -1 & 2p\\\\ \n    0 & 0 & 1\n  \\end{pmatrix}\n$$\n只需要不断做矩阵乘法并且储存起来即可。\n\n> 易错点：每一次变换都是对坐标组成的列向量$(x,y,1)^T$进行变换，所以每一次都是左乘。因为以上矩阵大部分不可交换，因此左乘才正确。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=2e5+10;\nll co[maxn][2];\n\nstruct Matrix\n{\n\tll matrix[3][3];\n\tvoid make(int op)\n\t{\n\t\tmemset(matrix,0,sizeof(matrix));\n\t\tmatrix[2][2]=1;\n\t\tmatrix[0][1]=(op==1)?1:-1;\n\t\tmatrix[1][0]=(op==1)?-1:1;\n\t}\n\tvoid make(int op,ll p)\n\t{\n\t\tmemset(matrix,0,sizeof(matrix));\n\t\tmatrix[0][0]=(op==3)?-1:1;\n\t\tmatrix[1][1]=(op==4)?-1:1;\n\t\tmatrix[2][2]=1;\n\t\tmatrix[op-3][2]=2*p;\n\t\treturn ;\n\t}\n\tMatrix operator*(const Matrix& a)\n\t{\n\t\tMatrix ans;\n\t\tfor (int i=0;i<3;i++)\n\t\t{\n\t\t\tfor (int j=0;j<3;j++)\n\t\t\t{\n\t\t\t\tans.matrix[i][j]=0;\n\t\t\t\tfor (int k=0;k<3;k++)\n\t\t\t\t\tans.matrix[i][j]+=(matrix[i][k]*a.matrix[k][j]);\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}mat[maxn];\n\nint main(){\n\tint N,M,Q;\n\tscanf(\"%d\",&N);\n\tfor (int i=1;i<=N;i++) \n\t\tscanf (\"%lld %lld\",&co[i][0],&co[i][1]);\n\tscanf(\"%d\",&M);\n\tmat[0].matrix[0][0]=1;\n\tmat[0].matrix[1][1]=1;\n\tmat[0].matrix[2][2]=1;\n\tfor (int i=1;i<=M;i++)\n\t{\n\t\tint op;\n\t\tll p;\n\t\tscanf(\"%d\",&op);\n\t\tif (op==3 || op==4)\n\t\t{\n\t\t\tscanf(\"%lld\",&p);\n\t\t\tmat[i].make(op,p);\n\t\t\tmat[i]=mat[i]*mat[i-1];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tmat[i].make(op);\n\t\t\tmat[i]=mat[i]*mat[i-1];\n\t\t}\n\t}\n\tscanf(\"%d\",&Q);\n\tfor (int i=0;i<Q;i++)\n\t{\n\t\tll a,b,x,y;\n\t\tscanf(\"%lld %lld\",&a,&b);\n\t\tx=co[b][0];y=co[b][1];\n\t\tprintf(\"%lld %lld\\n\"\n\t\t,x*mat[a].matrix[0][0]+y*mat[a].matrix[0][1]+mat[a].matrix[0][2]\n        ,x*mat[a].matrix[1][0]+y*mat[a].matrix[1][1]+mat[a].matrix[1][2]);\n\t}\n\treturn 0;\n}\n```\n\n## F - Sugoroku2\n\n这道题是一道求数学期望的题，以前没有接触过这种题，其实可以转换成数学题目。我看了很多种解法，目前只看懂一种，大概写一下。\n\n参考自：https://atcoder.jp/contests/abc189/editorial/588 \n\n这是一种 dp 思路，记 f<sub>i</sub> 为从 i 到 n 的期望值。我们找到递推公式：\n\n- 如果 i 大于等于 n ，则期望值为 0\n- 如果 i 是 A 数组中的元素，那么期望值等于 f<sub>0</sub> \n- 如果 i 不满足上述条件，则：\n\n$$\nf_i=1+\\frac{1}{m}\\sum_{j=i+1}^{i+m}f_j\n$$\n\n于是根据上式，我们从 n 倒推得到关于 f<sub>0</sub> 的一元一次方程，可以求解。防止精度问题，我们使用long double。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=2e5+10;\nll A[maxn]={0};\nbool exist[maxn];\n\nstruct P\n{\n\tlong double k,b;\n\tP operator + (const P& a)\n\t{\n\t\treturn {k+a.k,b+a.b};\n\t}\n\t\n\tP operator - (const P& a)\n\t{\n\t\treturn {k-a.k,b-a.b};\n\t}\n\t\t\n\tP operator / (const long double a)\n\t{\n\t\treturn {k/a,b/a};\n\t}\n}f[maxn],sum[maxn];\n\nint main(){\n\tint N,K;\n\tlong double M;\n\tscanf(\"%d%Lf%d\",&N,&M,&K);\n\tfor (int i=1;i<=K;i++)\n\t{\n\t\tscanf (\"%d\",&A[i]);\n\t\texist[A[i]]=true;\n\t} \n\tfor (int i=N-1;i>=0;i--)\n\t{\n\t\tif (exist[i]) f[i]=(P){1,0};\n\t\telse f[i]=(sum[i+1]-sum[int(i+M+1)])/M+(P){0,1};\n\t\tsum[i]=sum[i+1]+f[i];\n\t}\n\tif (fabs(f[0].k-1)<1e-6) printf(\"-1\\n\");\n\telse printf(\"%.4Lf\\n\",-f[0].b/(f[0].k-1));\n\treturn 0;\n}\n```\n\n---\n\n​\tF题的其他方法以后有时间再搞吧。\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/ABC189.md","raw":"---\ntitle: AtCoder Beginner Contest 189\ndate: 2021-01-24 11:34:44\nupdated: 2021-01-25 16:06:59\ntags:\n\t- 贪心\n\t- ST表\n\t- 动态规划DP\n\t- 矩阵\ncategories:\n\t- ICPC Programming Contest\n---\n其实有时间打的，不过我懒，所以赛后打的。\n\t\tABC的难度就是前几题暴力，后面还是挺有挑战性的，下次有机会一定打。而且时间太舒服了，晚上8点。\n\n<!-- more -->\n\n## **A - Slot**\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=1e6;\n\nint main(){\n    char a,b,c;\n    scanf(\"%c%c%c\",&a,&b,&c);\n    if (a==b && b==c) printf(\"Won\\n\");\n    else printf(\"Lost\\n\");\n    return 0;\n}\n```\n\n## **B - Alcoholic**\n\n问题很简单，但是就是小数位数很难解决，最后我也没 Debug 出来，所以最好的办法就是百分数不用除 100 ，将其他数全部乘以 100，防止百分数出现。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=1e6;\n\nint main(){\n\tint n,x,v,p;\n    scanf (\"%d %d\",&n,&x);\n    x*=100;\n    for (int i=1;i<=n;i++)\n    {\n    \tscanf(\"%d%d\",&v,&p);\n    \tx-=v*p;\n    \tif (x<0) \n\t\t{\n\t\t\tprintf(\"%d\\n\",i);\n\t\t\treturn 0;\n\t\t}\n\t}\n    printf(\"-1\\n\");\n\treturn 0;\n}\n```\n\n## **C - Mandarin Orange**\n\n第一反应是 ST 表，所以我就写了一个 [ST 表解法](https://www.inzamz.top/2020/11/30/BinaryIndexedTreeandSparseTable/?t=1611456876942#%E4%BE%8B%E9%A2%98AtcoderABC189_C)。我放在 ST 表的文章了。\n\n我看了题解，有另一个解法。我们先确定起点，然后不断改变终点的值，同时维护区间内最小值即可。这样是复杂度是 O( N<sup>2</sup> )，不会超时。相反线段树是会超时的。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=1e5+10;\nint a[maxn]; \n\nint main(){\n\tint n,ans=0;\n\tscanf(\"%d\",&n);\n\tfor (int i=0;i<n;i++) scanf(\"%d\",&a[i]);\n\tfor (int i=0;i<n;i++)\n\t{\n\t\tint x=a[i];\n\t\tfor (int j=i;j<n;j++)\n\t\t{\n\t\t\tx=min(x,a[j]);\n\t\t\tans=max(ans,(j-i+1)*x);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n## **D - Logical Expression**\n\n因为优先级是一样的，所以下一次的结果只与符号以及上一次的答案有关，是个简单的 DP 。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=100;\nchar s[10];\nll a[maxn]={0},dp[maxn][0];\n\nint main(){\n\tint n,ans=0;\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++) \n\t{\n\t\tmemset(s,0,sizeof(s));\n\t\tscanf(\"%s\",s);\n\t\ta[i]=(strcmp(s,\"AND\")==0)?1:0;\n\t}\n\tdp[0][0]=dp[0][1]=1;\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tif (a[i]==1) \n\t\t{\n\t\t\tdp[i][0]=dp[i-1][0]*2+dp[i-1][1];\n\t\t\tdp[i][1]=dp[i-1][1];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tdp[i][0]=dp[i-1][0];\n\t\t\tdp[i][1]=dp[i-1][0]+dp[i-1][1]*2;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",dp[n][1]);\n\treturn 0;\n}\n```\n\n## **E - Rotate and Flip**\n\n参考题解：https://cp-wiki.vercel.app/tutorial/atcoder/ABC189/#problem-e-rotate-and-flip\n\n一开始看错了，没理解题意。绝对不可能存下每个点的位置，然后对图进行操作。我们发现是对所有点进行操作，也就是我们只需要中找到第n次操作后，点坐标对应的变化规律就好了。看了题解，可以用五个变量来记录，也可以用矩阵来表示。\n\n### 变量法\n\n五个变量分别是：\n\n- iswap：表示坐标 x y 变量是否交换了位置。\n- cx：（change x）即 横坐标 的变化量。记住是横坐标而不是变量 x ，因为 x y 可能对调。\n- cy：同上，纵坐标 的变化量\n- xmux / ymux：记录 横坐标/纵坐标 的符号是否变化了\n\n操作对应变化为：\n\n- op1：iswap取反，xmux与ymux对调，cx与cy对调，cy与ymux取反\n- op2：iswap取反，xmux与ymux对调，cx与cy对调，cx与xmux取反\n- op3：cx与xmux取反，cx加上2p\n- op4：cy与ymux取反，cy加上2p\n\n最终答案：\n\n- 如果 iswap 值为true：则将初始值的 x y 对调\n- 根据 xmux ymux 决定正负\n- 加上 cx 与 cy 的值\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=2e5+10;\nll co[maxn][2],cx[maxn],cy[maxn];\nbool xmux[maxn],ymux[maxn],iswap[maxn];\n\nint main(){\n\tint N,M,Q;\n\tscanf(\"%d\",&N);\n\tfor (int i=1;i<=N;i++) \n\t\tscanf (\"%lld %lld\",&co[i][0],&co[i][1]);\n\tscanf(\"%d\",&M);\n\tfor (int i=1;i<=M;i++)\n\t{\n\t\tint op;\n\t\tll p;\n\t\tscanf(\"%d\",&op);\n\t\tif (op==3 || op==4)\n\t\t{\n\t\t\tscanf(\"%lld\",&p);\n\t\t\tif (op==3) \n\t\t\t{\n\t\t\t\tiswap[i]=iswap[i-1];\n\t\t\t\txmux[i]=!xmux[i-1];\n\t\t\t\tcx[i]=-cx[i-1]+2*p;\n\t\t\t\tymux[i]=ymux[i-1];\n\t\t\t\tcy[i]=cy[i-1];\n\t\t\t}\n\t\t\telse if (op==4)\n\t\t\t{\n\t\t\t\tiswap[i]=iswap[i-1];\n\t\t\t\tymux[i]=!ymux[i-1];\n\t\t\t\tcy[i]=-cy[i-1]+2*p;\n\t\t\t\txmux[i]=xmux[i-1];\n\t\t\t\tcx[i]=cx[i-1];\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (op==1) \n\t\t\t{\n\t\t\t\tiswap[i]=!iswap[i-1];\n\t\t\t\txmux[i]=ymux[i-1];\n\t\t\t\tymux[i]=!xmux[i-1];\n\t\t\t\tcx[i]=cy[i-1];\n\t\t\t\tcy[i]=-cx[i-1];\n\t\t\t}\n\t\t\telse if (op==2) \n\t\t\t{\n\t\t\t\tiswap[i]=!iswap[i-1];\n\t\t\t\tymux[i]=xmux[i-1];\n\t\t\t\txmux[i]=!ymux[i-1];\n\t\t\t\tcy[i]=cx[i-1];\n\t\t\t\tcx[i]=-cy[i-1];\n\t\t\t}\n\t\t}\n\t}\n\tscanf(\"%d\",&Q);\n\tfor (int i=1;i<=Q;i++)\n\t{\n\t\tll a,b,x,y;\n\t\tscanf(\"%lld %lld\",&a,&b);\n\t\tx=co[b][0];y=co[b][1];\n\t\tif (iswap[a]) swap(x,y);\n\t\tif (xmux[a]) x=-x;\n\t\tif (ymux[a]) y=-y;\n\t\tx+=cx[a];y+=cy[a];\n\t\tprintf(\"%lld %lld\\n\",x,y);\n\t}\n\treturn 0;\n}\n```\n\n### 矩阵法\n\n每次变化都对应一个矩阵\n$$\n  \\begin{pmatrix}       %开始数学环境\n    0 & 1 & 0\\\\  %第一行元素\n    -1 & 0 & 0\\\\ %第二行元素\n    0 & 0 & 1\\\\\n  \\end{pmatrix}\n  \n  \\begin{pmatrix}\n    0 & -1 & 0\\\\  %第一行元素\n    1 & 0 & 0\\\\ %第二行元素\n    0 & 0 & 1\n  \\end{pmatrix}\n\n  \\begin{pmatrix}\n    -1 & 0 & 2p\\\\  %第一行元素\n    0 & 1 & 0\\\\ %第二行元素\n    0 & 0 & 1\n  \\end{pmatrix}\n  \n  \\begin{pmatrix}\n    1 & 0 & 0\\\\ \n    0 & -1 & 2p\\\\ \n    0 & 0 & 1\n  \\end{pmatrix}\n$$\n只需要不断做矩阵乘法并且储存起来即可。\n\n> 易错点：每一次变换都是对坐标组成的列向量$(x,y,1)^T$进行变换，所以每一次都是左乘。因为以上矩阵大部分不可交换，因此左乘才正确。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=2e5+10;\nll co[maxn][2];\n\nstruct Matrix\n{\n\tll matrix[3][3];\n\tvoid make(int op)\n\t{\n\t\tmemset(matrix,0,sizeof(matrix));\n\t\tmatrix[2][2]=1;\n\t\tmatrix[0][1]=(op==1)?1:-1;\n\t\tmatrix[1][0]=(op==1)?-1:1;\n\t}\n\tvoid make(int op,ll p)\n\t{\n\t\tmemset(matrix,0,sizeof(matrix));\n\t\tmatrix[0][0]=(op==3)?-1:1;\n\t\tmatrix[1][1]=(op==4)?-1:1;\n\t\tmatrix[2][2]=1;\n\t\tmatrix[op-3][2]=2*p;\n\t\treturn ;\n\t}\n\tMatrix operator*(const Matrix& a)\n\t{\n\t\tMatrix ans;\n\t\tfor (int i=0;i<3;i++)\n\t\t{\n\t\t\tfor (int j=0;j<3;j++)\n\t\t\t{\n\t\t\t\tans.matrix[i][j]=0;\n\t\t\t\tfor (int k=0;k<3;k++)\n\t\t\t\t\tans.matrix[i][j]+=(matrix[i][k]*a.matrix[k][j]);\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}mat[maxn];\n\nint main(){\n\tint N,M,Q;\n\tscanf(\"%d\",&N);\n\tfor (int i=1;i<=N;i++) \n\t\tscanf (\"%lld %lld\",&co[i][0],&co[i][1]);\n\tscanf(\"%d\",&M);\n\tmat[0].matrix[0][0]=1;\n\tmat[0].matrix[1][1]=1;\n\tmat[0].matrix[2][2]=1;\n\tfor (int i=1;i<=M;i++)\n\t{\n\t\tint op;\n\t\tll p;\n\t\tscanf(\"%d\",&op);\n\t\tif (op==3 || op==4)\n\t\t{\n\t\t\tscanf(\"%lld\",&p);\n\t\t\tmat[i].make(op,p);\n\t\t\tmat[i]=mat[i]*mat[i-1];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tmat[i].make(op);\n\t\t\tmat[i]=mat[i]*mat[i-1];\n\t\t}\n\t}\n\tscanf(\"%d\",&Q);\n\tfor (int i=0;i<Q;i++)\n\t{\n\t\tll a,b,x,y;\n\t\tscanf(\"%lld %lld\",&a,&b);\n\t\tx=co[b][0];y=co[b][1];\n\t\tprintf(\"%lld %lld\\n\"\n\t\t,x*mat[a].matrix[0][0]+y*mat[a].matrix[0][1]+mat[a].matrix[0][2]\n        ,x*mat[a].matrix[1][0]+y*mat[a].matrix[1][1]+mat[a].matrix[1][2]);\n\t}\n\treturn 0;\n}\n```\n\n## F - Sugoroku2\n\n这道题是一道求数学期望的题，以前没有接触过这种题，其实可以转换成数学题目。我看了很多种解法，目前只看懂一种，大概写一下。\n\n参考自：https://atcoder.jp/contests/abc189/editorial/588 \n\n这是一种 dp 思路，记 f<sub>i</sub> 为从 i 到 n 的期望值。我们找到递推公式：\n\n- 如果 i 大于等于 n ，则期望值为 0\n- 如果 i 是 A 数组中的元素，那么期望值等于 f<sub>0</sub> \n- 如果 i 不满足上述条件，则：\n\n$$\nf_i=1+\\frac{1}{m}\\sum_{j=i+1}^{i+m}f_j\n$$\n\n于是根据上式，我们从 n 倒推得到关于 f<sub>0</sub> 的一元一次方程，可以求解。防止精度问题，我们使用long double。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=2e5+10;\nll A[maxn]={0};\nbool exist[maxn];\n\nstruct P\n{\n\tlong double k,b;\n\tP operator + (const P& a)\n\t{\n\t\treturn {k+a.k,b+a.b};\n\t}\n\t\n\tP operator - (const P& a)\n\t{\n\t\treturn {k-a.k,b-a.b};\n\t}\n\t\t\n\tP operator / (const long double a)\n\t{\n\t\treturn {k/a,b/a};\n\t}\n}f[maxn],sum[maxn];\n\nint main(){\n\tint N,K;\n\tlong double M;\n\tscanf(\"%d%Lf%d\",&N,&M,&K);\n\tfor (int i=1;i<=K;i++)\n\t{\n\t\tscanf (\"%d\",&A[i]);\n\t\texist[A[i]]=true;\n\t} \n\tfor (int i=N-1;i>=0;i--)\n\t{\n\t\tif (exist[i]) f[i]=(P){1,0};\n\t\telse f[i]=(sum[i+1]-sum[int(i+M+1)])/M+(P){0,1};\n\t\tsum[i]=sum[i+1]+f[i];\n\t}\n\tif (fabs(f[0].k-1)<1e-6) printf(\"-1\\n\");\n\telse printf(\"%.4Lf\\n\",-f[0].b/(f[0].k-1));\n\treturn 0;\n}\n```\n\n---\n\n​\tF题的其他方法以后有时间再搞吧。\n\n<!-- Q.E.D. -->","slug":"XCPC/ABC189","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujf000w63jn1x8hd1at","content":"<p>其实有时间打的，不过我懒，所以赛后打的。<br>        ABC的难度就是前几题暴力，后面还是挺有挑战性的，下次有机会一定打。而且时间太舒服了，晚上8点。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"A-Slot\"><a href=\"#A-Slot\" class=\"headerlink\" title=\"A - Slot\"></a><strong>A - Slot</strong></h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e6</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c%c%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span>b <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token operator\">==</span>c<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Won\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lost\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Alcoholic\"><a href=\"#B-Alcoholic\" class=\"headerlink\" title=\"B - Alcoholic\"></a><strong>B - Alcoholic</strong></h2><p>问题很简单，但是就是小数位数很难解决，最后我也没 Debug 出来，所以最好的办法就是百分数不用除 100 ，将其他数全部乘以 100，防止百分数出现。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e6</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    x<span class=\"token operator\">*=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tx<span class=\"token operator\">-=</span>v<span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-Mandarin-Orange\"><a href=\"#C-Mandarin-Orange\" class=\"headerlink\" title=\"C - Mandarin Orange\"></a><strong>C - Mandarin Orange</strong></h2><p>第一反应是 ST 表，所以我就写了一个 <a href=\"https://www.inzamz.top/2020/11/30/BinaryIndexedTreeandSparseTable/?t=1611456876942#%E4%BE%8B%E9%A2%98AtcoderABC189_C\">ST 表解法</a>。我放在 ST 表的文章了。</p>\n<p>我看了题解，有另一个解法。我们先确定起点，然后不断改变终点的值，同时维护区间内最小值即可。这样是复杂度是 O( N<sup>2</sup> )，不会超时。相反线段树是会超时的。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tx<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-Logical-Expression\"><a href=\"#D-Logical-Expression\" class=\"headerlink\" title=\"D - Logical Expression\"></a><strong>D - Logical Expression</strong></h2><p>因为优先级是一样的，所以下一次的结果只与符号以及上一次的答案有关，是个简单的 DP 。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token string\">\"AND\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tdp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"E-Rotate-and-Flip\"><a href=\"#E-Rotate-and-Flip\" class=\"headerlink\" title=\"E - Rotate and Flip\"></a><strong>E - Rotate and Flip</strong></h2><p>参考题解：<a href=\"https://cp-wiki.vercel.app/tutorial/atcoder/ABC189/#problem-e-rotate-and-flip\">https://cp-wiki.vercel.app/tutorial/atcoder/ABC189/#problem-e-rotate-and-flip</a></p>\n<p>一开始看错了，没理解题意。绝对不可能存下每个点的位置，然后对图进行操作。我们发现是对所有点进行操作，也就是我们只需要中找到第n次操作后，点坐标对应的变化规律就好了。看了题解，可以用五个变量来记录，也可以用矩阵来表示。</p>\n<h3 id=\"变量法\"><a href=\"#变量法\" class=\"headerlink\" title=\"变量法\"></a>变量法</h3><p>五个变量分别是：</p>\n<ul>\n<li>iswap：表示坐标 x y 变量是否交换了位置。</li>\n<li>cx：（change x）即 横坐标 的变化量。记住是横坐标而不是变量 x ，因为 x y 可能对调。</li>\n<li>cy：同上，纵坐标 的变化量</li>\n<li>xmux / ymux：记录 横坐标/纵坐标 的符号是否变化了</li>\n</ul>\n<p>操作对应变化为：</p>\n<ul>\n<li>op1：iswap取反，xmux与ymux对调，cx与cy对调，cy与ymux取反</li>\n<li>op2：iswap取反，xmux与ymux对调，cx与cy对调，cx与xmux取反</li>\n<li>op3：cx与xmux取反，cx加上2p</li>\n<li>op4：cy与ymux取反，cy加上2p</li>\n</ul>\n<p>最终答案：</p>\n<ul>\n<li>如果 iswap 值为true：则将初始值的 x y 对调</li>\n<li>根据 xmux ymux 决定正负</li>\n<li>加上 cx 与 cy 的值</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">2e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nll co<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cx<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cy<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> xmux<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ymux<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>iswap<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span>Q<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>co<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>co<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>M<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> op<span class=\"token punctuation\">;</span>\n\t\tll p<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">3</span> <span class=\"token operator\">||</span> op<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tiswap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>iswap<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\txmux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>xmux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span>cx<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t\t\t\tymux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ymux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>cy<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tiswap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>iswap<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tymux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>ymux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span>cy<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t\t\t\txmux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>xmux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>cx<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tiswap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>iswap<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\txmux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ymux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tymux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>xmux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>cy<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span>cx<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tiswap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>iswap<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tymux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>xmux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\txmux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>ymux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>cx<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span>cy<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>Q<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tll a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tx<span class=\"token operator\">=</span>co<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>y<span class=\"token operator\">=</span>co<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iswap<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xmux<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> x<span class=\"token operator\">=</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ymux<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> y<span class=\"token operator\">=</span><span class=\"token operator\">-</span>y<span class=\"token punctuation\">;</span>\n\t\tx<span class=\"token operator\">+=</span>cx<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>y<span class=\"token operator\">+=</span>cy<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"矩阵法\"><a href=\"#矩阵法\" class=\"headerlink\" title=\"矩阵法\"></a>矩阵法</h3><p>每次变化都对应一个矩阵<br>$$<br>  \\begin{pmatrix}       %开始数学环境<br>    0 &amp; 1 &amp; 0\\  %第一行元素<br>    -1 &amp; 0 &amp; 0\\ %第二行元素<br>    0 &amp; 0 &amp; 1\\<br>  \\end{pmatrix}</p>\n<p>  \\begin{pmatrix}<br>    0 &amp; -1 &amp; 0\\  %第一行元素<br>    1 &amp; 0 &amp; 0\\ %第二行元素<br>    0 &amp; 0 &amp; 1<br>  \\end{pmatrix}</p>\n<p>  \\begin{pmatrix}<br>    -1 &amp; 0 &amp; 2p\\  %第一行元素<br>    0 &amp; 1 &amp; 0\\ %第二行元素<br>    0 &amp; 0 &amp; 1<br>  \\end{pmatrix}</p>\n<p>  \\begin{pmatrix}<br>    1 &amp; 0 &amp; 0\\<br>    0 &amp; -1 &amp; 2p\\<br>    0 &amp; 0 &amp; 1<br>  \\end{pmatrix}<br>$$<br>只需要不断做矩阵乘法并且储存起来即可。</p>\n<blockquote>\n<p>易错点：每一次变换都是对坐标组成的列向量$(x,y,1)^T$进行变换，所以每一次都是左乘。因为以上矩阵大部分不可交换，因此左乘才正确。</p>\n</blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">2e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nll co<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Matrix</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll matrix<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> op<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> op<span class=\"token punctuation\">,</span>ll p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span>op<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tMatrix <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Matrix<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tMatrix ans<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tans<span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\tans<span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>mat<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span>Q<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>co<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>co<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tmat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tmat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>M<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> op<span class=\"token punctuation\">;</span>\n\t\tll p<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">3</span> <span class=\"token operator\">||</span> op<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tmat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>Q<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tll a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tx<span class=\"token operator\">=</span>co<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>y<span class=\"token operator\">=</span>co<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\\n\"</span>\n\t\t<span class=\"token punctuation\">,</span>x<span class=\"token operator\">*</span>mat<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>mat<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>mat<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">,</span>x<span class=\"token operator\">*</span>mat<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>mat<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>mat<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"F-Sugoroku2\"><a href=\"#F-Sugoroku2\" class=\"headerlink\" title=\"F - Sugoroku2\"></a>F - Sugoroku2</h2><p>这道题是一道求数学期望的题，以前没有接触过这种题，其实可以转换成数学题目。我看了很多种解法，目前只看懂一种，大概写一下。</p>\n<p>参考自：<a href=\"https://atcoder.jp/contests/abc189/editorial/588\">https://atcoder.jp/contests/abc189/editorial/588</a> </p>\n<p>这是一种 dp 思路，记 f<sub>i</sub> 为从 i 到 n 的期望值。我们找到递推公式：</p>\n<ul>\n<li>如果 i 大于等于 n ，则期望值为 0</li>\n<li>如果 i 是 A 数组中的元素，那么期望值等于 f<sub>0</sub> </li>\n<li>如果 i 不满足上述条件，则：</li>\n</ul>\n<p>$$<br>f_i=1+\\frac{1}{m}\\sum_{j=i+1}^{i+m}f_j<br>$$</p>\n<p>于是根据上式，我们从 n 倒推得到关于 f<sub>0</sub> 的一元一次方程，可以求解。防止精度问题，我们使用long double。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">2e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nll A<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> exist<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">P</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> k<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n\tP <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> P<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>k<span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span>k<span class=\"token punctuation\">,</span>b<span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\tP <span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> P<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>k<span class=\"token operator\">-</span>a<span class=\"token punctuation\">.</span>k<span class=\"token punctuation\">,</span>b<span class=\"token operator\">-</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\tP <span class=\"token keyword\">operator</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>k<span class=\"token operator\">/</span>a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">/</span>a<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>f<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> M<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%Lf%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>K<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texist<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> \n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>sum<span class=\"token punctuation\">[</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>M<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\tsum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">1e-6</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.4Lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>b<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<p>​    F题的其他方法以后有时间再搞吧。</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>其实有时间打的，不过我懒，所以赛后打的。<br>        ABC的难度就是前几题暴力，后面还是挺有挑战性的，下次有机会一定打。而且时间太舒服了，晚上8点。</p>","more":"<h2 id=\"A-Slot\"><a href=\"#A-Slot\" class=\"headerlink\" title=\"A - Slot\"></a><strong>A - Slot</strong></h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e6</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c%c%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span>b <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token operator\">==</span>c<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Won\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lost\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Alcoholic\"><a href=\"#B-Alcoholic\" class=\"headerlink\" title=\"B - Alcoholic\"></a><strong>B - Alcoholic</strong></h2><p>问题很简单，但是就是小数位数很难解决，最后我也没 Debug 出来，所以最好的办法就是百分数不用除 100 ，将其他数全部乘以 100，防止百分数出现。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e6</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    x<span class=\"token operator\">*=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tx<span class=\"token operator\">-=</span>v<span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-Mandarin-Orange\"><a href=\"#C-Mandarin-Orange\" class=\"headerlink\" title=\"C - Mandarin Orange\"></a><strong>C - Mandarin Orange</strong></h2><p>第一反应是 ST 表，所以我就写了一个 <a href=\"https://www.inzamz.top/2020/11/30/BinaryIndexedTreeandSparseTable/?t=1611456876942#%E4%BE%8B%E9%A2%98AtcoderABC189_C\">ST 表解法</a>。我放在 ST 表的文章了。</p>\n<p>我看了题解，有另一个解法。我们先确定起点，然后不断改变终点的值，同时维护区间内最小值即可。这样是复杂度是 O( N<sup>2</sup> )，不会超时。相反线段树是会超时的。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tx<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-Logical-Expression\"><a href=\"#D-Logical-Expression\" class=\"headerlink\" title=\"D - Logical Expression\"></a><strong>D - Logical Expression</strong></h2><p>因为优先级是一样的，所以下一次的结果只与符号以及上一次的答案有关，是个简单的 DP 。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token string\">\"AND\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tdp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"E-Rotate-and-Flip\"><a href=\"#E-Rotate-and-Flip\" class=\"headerlink\" title=\"E - Rotate and Flip\"></a><strong>E - Rotate and Flip</strong></h2><p>参考题解：<a href=\"https://cp-wiki.vercel.app/tutorial/atcoder/ABC189/#problem-e-rotate-and-flip\">https://cp-wiki.vercel.app/tutorial/atcoder/ABC189/#problem-e-rotate-and-flip</a></p>\n<p>一开始看错了，没理解题意。绝对不可能存下每个点的位置，然后对图进行操作。我们发现是对所有点进行操作，也就是我们只需要中找到第n次操作后，点坐标对应的变化规律就好了。看了题解，可以用五个变量来记录，也可以用矩阵来表示。</p>\n<h3 id=\"变量法\"><a href=\"#变量法\" class=\"headerlink\" title=\"变量法\"></a>变量法</h3><p>五个变量分别是：</p>\n<ul>\n<li>iswap：表示坐标 x y 变量是否交换了位置。</li>\n<li>cx：（change x）即 横坐标 的变化量。记住是横坐标而不是变量 x ，因为 x y 可能对调。</li>\n<li>cy：同上，纵坐标 的变化量</li>\n<li>xmux / ymux：记录 横坐标/纵坐标 的符号是否变化了</li>\n</ul>\n<p>操作对应变化为：</p>\n<ul>\n<li>op1：iswap取反，xmux与ymux对调，cx与cy对调，cy与ymux取反</li>\n<li>op2：iswap取反，xmux与ymux对调，cx与cy对调，cx与xmux取反</li>\n<li>op3：cx与xmux取反，cx加上2p</li>\n<li>op4：cy与ymux取反，cy加上2p</li>\n</ul>\n<p>最终答案：</p>\n<ul>\n<li>如果 iswap 值为true：则将初始值的 x y 对调</li>\n<li>根据 xmux ymux 决定正负</li>\n<li>加上 cx 与 cy 的值</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">2e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nll co<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cx<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cy<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> xmux<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ymux<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>iswap<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span>Q<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>co<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>co<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>M<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> op<span class=\"token punctuation\">;</span>\n\t\tll p<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">3</span> <span class=\"token operator\">||</span> op<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tiswap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>iswap<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\txmux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>xmux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span>cx<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t\t\t\tymux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ymux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>cy<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tiswap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>iswap<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tymux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>ymux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span>cy<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t\t\t\txmux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>xmux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>cx<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tiswap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>iswap<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\txmux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ymux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tymux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>xmux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>cy<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span>cx<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tiswap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>iswap<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tymux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>xmux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\txmux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>ymux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>cx<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span>cy<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>Q<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tll a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tx<span class=\"token operator\">=</span>co<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>y<span class=\"token operator\">=</span>co<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iswap<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xmux<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> x<span class=\"token operator\">=</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ymux<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> y<span class=\"token operator\">=</span><span class=\"token operator\">-</span>y<span class=\"token punctuation\">;</span>\n\t\tx<span class=\"token operator\">+=</span>cx<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>y<span class=\"token operator\">+=</span>cy<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"矩阵法\"><a href=\"#矩阵法\" class=\"headerlink\" title=\"矩阵法\"></a>矩阵法</h3><p>每次变化都对应一个矩阵<br>$$<br>  \\begin{pmatrix}       %开始数学环境<br>    0 &amp; 1 &amp; 0\\  %第一行元素<br>    -1 &amp; 0 &amp; 0\\ %第二行元素<br>    0 &amp; 0 &amp; 1\\<br>  \\end{pmatrix}</p>\n<p>  \\begin{pmatrix}<br>    0 &amp; -1 &amp; 0\\  %第一行元素<br>    1 &amp; 0 &amp; 0\\ %第二行元素<br>    0 &amp; 0 &amp; 1<br>  \\end{pmatrix}</p>\n<p>  \\begin{pmatrix}<br>    -1 &amp; 0 &amp; 2p\\  %第一行元素<br>    0 &amp; 1 &amp; 0\\ %第二行元素<br>    0 &amp; 0 &amp; 1<br>  \\end{pmatrix}</p>\n<p>  \\begin{pmatrix}<br>    1 &amp; 0 &amp; 0\\<br>    0 &amp; -1 &amp; 2p\\<br>    0 &amp; 0 &amp; 1<br>  \\end{pmatrix}<br>$$<br>只需要不断做矩阵乘法并且储存起来即可。</p>\n<blockquote>\n<p>易错点：每一次变换都是对坐标组成的列向量$(x,y,1)^T$进行变换，所以每一次都是左乘。因为以上矩阵大部分不可交换，因此左乘才正确。</p>\n</blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">2e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nll co<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Matrix</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll matrix<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> op<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> op<span class=\"token punctuation\">,</span>ll p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tmatrix<span class=\"token punctuation\">[</span>op<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tMatrix <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Matrix<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tMatrix ans<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tans<span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\tans<span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>mat<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span>Q<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>co<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>co<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tmat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tmat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>M<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> op<span class=\"token punctuation\">;</span>\n\t\tll p<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">3</span> <span class=\"token operator\">||</span> op<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tmat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>Q<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tll a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tx<span class=\"token operator\">=</span>co<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>y<span class=\"token operator\">=</span>co<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\\n\"</span>\n\t\t<span class=\"token punctuation\">,</span>x<span class=\"token operator\">*</span>mat<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>mat<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>mat<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">,</span>x<span class=\"token operator\">*</span>mat<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>mat<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>mat<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"F-Sugoroku2\"><a href=\"#F-Sugoroku2\" class=\"headerlink\" title=\"F - Sugoroku2\"></a>F - Sugoroku2</h2><p>这道题是一道求数学期望的题，以前没有接触过这种题，其实可以转换成数学题目。我看了很多种解法，目前只看懂一种，大概写一下。</p>\n<p>参考自：<a href=\"https://atcoder.jp/contests/abc189/editorial/588\">https://atcoder.jp/contests/abc189/editorial/588</a> </p>\n<p>这是一种 dp 思路，记 f<sub>i</sub> 为从 i 到 n 的期望值。我们找到递推公式：</p>\n<ul>\n<li>如果 i 大于等于 n ，则期望值为 0</li>\n<li>如果 i 是 A 数组中的元素，那么期望值等于 f<sub>0</sub> </li>\n<li>如果 i 不满足上述条件，则：</li>\n</ul>\n<p>$$<br>f_i=1+\\frac{1}{m}\\sum_{j=i+1}^{i+m}f_j<br>$$</p>\n<p>于是根据上式，我们从 n 倒推得到关于 f<sub>0</sub> 的一元一次方程，可以求解。防止精度问题，我们使用long double。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">2e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nll A<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> exist<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">P</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> k<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n\tP <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> P<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>k<span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span>k<span class=\"token punctuation\">,</span>b<span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\tP <span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> P<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>k<span class=\"token operator\">-</span>a<span class=\"token punctuation\">.</span>k<span class=\"token punctuation\">,</span>b<span class=\"token operator\">-</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\tP <span class=\"token keyword\">operator</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> a<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>k<span class=\"token operator\">/</span>a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">/</span>a<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>f<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> M<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%Lf%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>K<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texist<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> \n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>sum<span class=\"token punctuation\">[</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>M<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\tsum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">1e-6</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.4Lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>b<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<p>​    F题的其他方法以后有时间再搞吧。</p>\n<!-- Q.E.D. -->"},{"title":"AtCoder Regular Contest 106","date":"2020-10-29T04:38:45.000Z","_content":"\n## Problem A-106\n\n### 题目大意\n\n给定数N，找到两个数A, B, 使得 3<sup>A</sup> + 5<sup>B</sup> = N .\n\n- 1 ≤ N ≤ 10<sup>18</sup> \n- All values in input are integers.\n\n### Solution Code\n\n打表, 数据范围小, longlong算好 3 , 5 的 n 次方.每次枚举和即可. 当和大于 N 时,退出这一层循环.\n\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\n\ntypedef unsigned long long llint;\n\nllint thr[100],fiv[100];\n\nint main()\n{\n\tllint N,n;\n\tscanf(\"%lld\",&N);\n\t\n\tn=1;\n\tfor (int i=0;n<1e19;i++){\n\t\tthr[i]=n;\n\t\tn=n*llint(3);\n\t}\n\t\n\tn=1;\n\tfor (int i=0;n<1e19;i++){\n\t\tfiv[i]=n;\n\t\tn=n*llint(5);\n\t}\n\t\n\tfor (int i=1;;i++){\n\t\tif (thr[i]>N) break;\n\t\tfor (int j=1;;j++){\n\t\t\tif (thr[i]+fiv[j]==N){\n\t\t\t\tprintf(\"%d %d\\n\",i,j);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse if (thr[i]+fiv[j]>N) break;\n\t\t}\n\t}\n\tprintf(\"-1\\n\");\n\treturn 0;\n } \n```\n\n\n\n## Problem B-Value\n\n### 题目大意\n\n​\t\t给定一个无环图，每次可以选择一条边使其连接的节点均减1或者加1，给出每个节点的初始值和目标值问是否可以达到目标值？\n### 75%解法？\n\n​\t\t任选一个节点为起点，dfs这个节点所在的图。一开始想的是只要算出sum ( a<sub>i</sub> - b<sub>i</sub> ) 判断奇偶即可？偶数可以。忽略了操作分正负，合为偶可能到最后两个节点会导致一个要减一个要加。然而正解毕竟包含在这种情况中，所以AC 36/48\n\n```cpp\n//75%AC code\nfor (int i=1;i<=N;i++){\n\t\tif (vis[i]) continue;\n\t\tll cnt=0;\n\t\t//record sum of (b-a). once cnt is odd ,ans will never be YES\n\t\t\n\t\t//dfs an unvisited node's tree;\n\t\t//by the way, calculate the value of sum of (b-a)\n\t\tq.push(i);\n\t\tvis[i]=mark;\n\t\twhile(!q.empty()){\n\t\t\tint node;\n\t\t\tnode=q.front();\n\t\t\tq.pop();\n\t\t\tcnt+=(b[node]-a[node]);\n\t\t\tfor (vector<int>::iterator it=u[node].begin();it!=u[node].end();it++){\n\t\t\t\tint m=*it;\n\t\t\t\tif (vis[m]==0)\n\t\t\t\t{\n\t\t\t\t\tvis[m]=mark;\n\t\t\t\t\tq.push(m);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//end of one time of dfs\n\t\tif (cnt%2==1){\n\t\t\tprintf(\"No\\n\");\n\t\t\treturn 0;\n\t\t}\n\t\tmark++;\n\t}\n\tprintf(\"Yes\\n\");\n}\n```\n### 思考与修改\n\n​\t\tWA数据点分布广，不是被卡大数据，因此找一下遗漏。我们把图退化成两个节点上面出现的问题就显然了。我们放到三个节点，发现如果父节点和子节点变换方向相同（同加或同减）可以抵消一部分，所以我们可以计算这种变化的和，每次用上一层的结果减去下一层的变化量，最后判断是否为0就好了。\n\n### Solution Code\n\n~~请忽略这头文件~~\n\n```cpp\n#define A_Wei using namespace \n#define si_ne std \n\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <iostream>\nA_Wei si_ne;\n\ntypedef long long ll;\nconst int maxn=200050;\n\nvector<int>u[maxn];\nqueue<int>q;\n\nll a[maxn],b[maxn];\nint vis[maxn];\n\nint main()\n{\n\tint N,M;\n\tscanf(\"%d %d\",&N,&M);\n\t\n\tfor(int i=1;i<=N;i++) scanf (\"%lld\",&a[i]);\n\tfor(int i=1;i<=N;i++) scanf (\"%lld\",&b[i]);\n\t\n\tfor(int i=1;i<=M;i++){\n\t\tint v1,v2;\n\t\tscanf (\"%d %d\",&v1,&v2);\n\t\tu[v1].push_back(v2);\n\t\tu[v2].push_back(v1);\n\t}\n\t\n\tfor (int i=1;i<=N;i++){\n\t\tif (vis[i]) continue;\n\t\tll cnt=0;\n\t\t//record sum of (b-a). only when cnt is 0 ,ans is YES\n\t\t//result of last level should minus the values of this level\n\n\t\t//dfs an unvisited node's tree;\n\t\t//by the way, calculate the value of sum of (b-a)\n\t\tq.push(i);\n\t\tvis[i]=1;\n\t\twhile(!q.empty()){\n\t\t\tint node,markt;\n\t\t\tnode=q.front();\n\t\t\tq.pop();\n\t\t\tmarkt=vis[node];\n\t\t\tif (markt==1) cnt+=(b[node]-a[node]);\n\t\t\telse cnt-=(a[node]-b[node]);\n\t\t\t\n\t\t\tfor (vector<int>::iterator it=u[node].begin();it!=u[node].end();it++){\n\t\t\t\tint m=(*it);\n\t\t\t\tif (vis[m]==0){\n\t\t\t\t\tif (markt==1) vis[m]=markt+1;\n\t\t\t\t\telse vis[m]=markt-1;\n\t\t\t\t\tq.push(m);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//end of one time of dfs\n\t\tif (cnt!=0){\n\t\t\tprintf(\"No\\n\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"Yes\\n\");\n\treturn 0;\n\t\n } \n```\n\n## Problem C-Solution\n\n### 题目大意 & 分析\n\n​\t\t问题 P 是 最多区间调度问题 , 其中 Takahashi 和 Aoki 分别给出解 , 两人输出解的差定义为 M.输入区间个数 N 和 M, 要求构造出任意一个满足条件的 N 个区间. 无解输出 -1.\n\n​\t\t其中 Takahashi 给出的就是正解, 不知道这个这道题就做不了了. 大致分为以下情况 : \n\n- M < 0 , 正解给出的数是最大的, 无解\n\n- M = N , 意味着 Aoki 的解小于等于0, 无解\n\n- M = N - 1 ,只有一种可能, Takahashi 输出 N , 而 Aoki 输出 1. Aoki输出了 1 , 说明有一个区间包含了全部区间, 那么 Tasahashi 不可能输出 N 了 , 无解 ( 有例外 )\n\n- M = 0 , 这样的话两组解相同, 那所有区间不重叠即可 . 当 N = 1 时 ,就是上面情况的例外了.\n\n- 0 < M < N + 1 , 构造这样 N 个区间 , 我们只要想办法把差部分解决即可, 构造方法如下.\n\n    在一个大区间中放入 M+1 个不重叠小区间, 再构造 N - M - 2 个不重叠的区间即可.\n\n    在大区间中, Aoki 只能选择 1 个区间, 而 Tasahashi 会优先选择里面的 M+1 个小区间, 解的差构造完成.\n\n    ### Solution Code\n\n    ```cpp\n    #include <bits/stdc++.h>\n    using namespace std;\n    \n    int main()\n    {\n            int N,M;\n            scanf (\"%d %d\",&N,&M);\n            if (M<0) printf(\"-1\\n\");\n            else if (M==N-1&&N>=2) printf(\"-1\\n\");\n            else if (M==N) printf(\"-1\\n\");\n            else if (M==0)\n                    for (int i=0;i<N;i++)        printf(\"%d %d\\n\",3*i+2,3*i+3);\n            else{\n                    for (int i=0;i<N;i++){\n                            if (i+1==M+2) printf(\"%d %d\\n\",1,3*i+1);\n                            else printf(\"%d %d\\n\",3*i+2,3*i+3);\n                    }\n            }\n            return 0;\n    }   \n    ```\n\n    \n\n## Problem D-Powers\n\n菜鸡加载中...","source":"_posts/XCPC/ARC106.md","raw":"---\ntitle: AtCoder Regular Contest 106\ndate: 2020-10-29 12:38:45\ncategories:\n    - ICPC Programming Contest\ntags:\n\t- 贪心\n\t- dfs\n\t- 最大区间调度\n---\n\n## Problem A-106\n\n### 题目大意\n\n给定数N，找到两个数A, B, 使得 3<sup>A</sup> + 5<sup>B</sup> = N .\n\n- 1 ≤ N ≤ 10<sup>18</sup> \n- All values in input are integers.\n\n### Solution Code\n\n打表, 数据范围小, longlong算好 3 , 5 的 n 次方.每次枚举和即可. 当和大于 N 时,退出这一层循环.\n\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\n\ntypedef unsigned long long llint;\n\nllint thr[100],fiv[100];\n\nint main()\n{\n\tllint N,n;\n\tscanf(\"%lld\",&N);\n\t\n\tn=1;\n\tfor (int i=0;n<1e19;i++){\n\t\tthr[i]=n;\n\t\tn=n*llint(3);\n\t}\n\t\n\tn=1;\n\tfor (int i=0;n<1e19;i++){\n\t\tfiv[i]=n;\n\t\tn=n*llint(5);\n\t}\n\t\n\tfor (int i=1;;i++){\n\t\tif (thr[i]>N) break;\n\t\tfor (int j=1;;j++){\n\t\t\tif (thr[i]+fiv[j]==N){\n\t\t\t\tprintf(\"%d %d\\n\",i,j);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse if (thr[i]+fiv[j]>N) break;\n\t\t}\n\t}\n\tprintf(\"-1\\n\");\n\treturn 0;\n } \n```\n\n\n\n## Problem B-Value\n\n### 题目大意\n\n​\t\t给定一个无环图，每次可以选择一条边使其连接的节点均减1或者加1，给出每个节点的初始值和目标值问是否可以达到目标值？\n### 75%解法？\n\n​\t\t任选一个节点为起点，dfs这个节点所在的图。一开始想的是只要算出sum ( a<sub>i</sub> - b<sub>i</sub> ) 判断奇偶即可？偶数可以。忽略了操作分正负，合为偶可能到最后两个节点会导致一个要减一个要加。然而正解毕竟包含在这种情况中，所以AC 36/48\n\n```cpp\n//75%AC code\nfor (int i=1;i<=N;i++){\n\t\tif (vis[i]) continue;\n\t\tll cnt=0;\n\t\t//record sum of (b-a). once cnt is odd ,ans will never be YES\n\t\t\n\t\t//dfs an unvisited node's tree;\n\t\t//by the way, calculate the value of sum of (b-a)\n\t\tq.push(i);\n\t\tvis[i]=mark;\n\t\twhile(!q.empty()){\n\t\t\tint node;\n\t\t\tnode=q.front();\n\t\t\tq.pop();\n\t\t\tcnt+=(b[node]-a[node]);\n\t\t\tfor (vector<int>::iterator it=u[node].begin();it!=u[node].end();it++){\n\t\t\t\tint m=*it;\n\t\t\t\tif (vis[m]==0)\n\t\t\t\t{\n\t\t\t\t\tvis[m]=mark;\n\t\t\t\t\tq.push(m);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//end of one time of dfs\n\t\tif (cnt%2==1){\n\t\t\tprintf(\"No\\n\");\n\t\t\treturn 0;\n\t\t}\n\t\tmark++;\n\t}\n\tprintf(\"Yes\\n\");\n}\n```\n### 思考与修改\n\n​\t\tWA数据点分布广，不是被卡大数据，因此找一下遗漏。我们把图退化成两个节点上面出现的问题就显然了。我们放到三个节点，发现如果父节点和子节点变换方向相同（同加或同减）可以抵消一部分，所以我们可以计算这种变化的和，每次用上一层的结果减去下一层的变化量，最后判断是否为0就好了。\n\n### Solution Code\n\n~~请忽略这头文件~~\n\n```cpp\n#define A_Wei using namespace \n#define si_ne std \n\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <iostream>\nA_Wei si_ne;\n\ntypedef long long ll;\nconst int maxn=200050;\n\nvector<int>u[maxn];\nqueue<int>q;\n\nll a[maxn],b[maxn];\nint vis[maxn];\n\nint main()\n{\n\tint N,M;\n\tscanf(\"%d %d\",&N,&M);\n\t\n\tfor(int i=1;i<=N;i++) scanf (\"%lld\",&a[i]);\n\tfor(int i=1;i<=N;i++) scanf (\"%lld\",&b[i]);\n\t\n\tfor(int i=1;i<=M;i++){\n\t\tint v1,v2;\n\t\tscanf (\"%d %d\",&v1,&v2);\n\t\tu[v1].push_back(v2);\n\t\tu[v2].push_back(v1);\n\t}\n\t\n\tfor (int i=1;i<=N;i++){\n\t\tif (vis[i]) continue;\n\t\tll cnt=0;\n\t\t//record sum of (b-a). only when cnt is 0 ,ans is YES\n\t\t//result of last level should minus the values of this level\n\n\t\t//dfs an unvisited node's tree;\n\t\t//by the way, calculate the value of sum of (b-a)\n\t\tq.push(i);\n\t\tvis[i]=1;\n\t\twhile(!q.empty()){\n\t\t\tint node,markt;\n\t\t\tnode=q.front();\n\t\t\tq.pop();\n\t\t\tmarkt=vis[node];\n\t\t\tif (markt==1) cnt+=(b[node]-a[node]);\n\t\t\telse cnt-=(a[node]-b[node]);\n\t\t\t\n\t\t\tfor (vector<int>::iterator it=u[node].begin();it!=u[node].end();it++){\n\t\t\t\tint m=(*it);\n\t\t\t\tif (vis[m]==0){\n\t\t\t\t\tif (markt==1) vis[m]=markt+1;\n\t\t\t\t\telse vis[m]=markt-1;\n\t\t\t\t\tq.push(m);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//end of one time of dfs\n\t\tif (cnt!=0){\n\t\t\tprintf(\"No\\n\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"Yes\\n\");\n\treturn 0;\n\t\n } \n```\n\n## Problem C-Solution\n\n### 题目大意 & 分析\n\n​\t\t问题 P 是 最多区间调度问题 , 其中 Takahashi 和 Aoki 分别给出解 , 两人输出解的差定义为 M.输入区间个数 N 和 M, 要求构造出任意一个满足条件的 N 个区间. 无解输出 -1.\n\n​\t\t其中 Takahashi 给出的就是正解, 不知道这个这道题就做不了了. 大致分为以下情况 : \n\n- M < 0 , 正解给出的数是最大的, 无解\n\n- M = N , 意味着 Aoki 的解小于等于0, 无解\n\n- M = N - 1 ,只有一种可能, Takahashi 输出 N , 而 Aoki 输出 1. Aoki输出了 1 , 说明有一个区间包含了全部区间, 那么 Tasahashi 不可能输出 N 了 , 无解 ( 有例外 )\n\n- M = 0 , 这样的话两组解相同, 那所有区间不重叠即可 . 当 N = 1 时 ,就是上面情况的例外了.\n\n- 0 < M < N + 1 , 构造这样 N 个区间 , 我们只要想办法把差部分解决即可, 构造方法如下.\n\n    在一个大区间中放入 M+1 个不重叠小区间, 再构造 N - M - 2 个不重叠的区间即可.\n\n    在大区间中, Aoki 只能选择 1 个区间, 而 Tasahashi 会优先选择里面的 M+1 个小区间, 解的差构造完成.\n\n    ### Solution Code\n\n    ```cpp\n    #include <bits/stdc++.h>\n    using namespace std;\n    \n    int main()\n    {\n            int N,M;\n            scanf (\"%d %d\",&N,&M);\n            if (M<0) printf(\"-1\\n\");\n            else if (M==N-1&&N>=2) printf(\"-1\\n\");\n            else if (M==N) printf(\"-1\\n\");\n            else if (M==0)\n                    for (int i=0;i<N;i++)        printf(\"%d %d\\n\",3*i+2,3*i+3);\n            else{\n                    for (int i=0;i<N;i++){\n                            if (i+1==M+2) printf(\"%d %d\\n\",1,3*i+1);\n                            else printf(\"%d %d\\n\",3*i+2,3*i+3);\n                    }\n            }\n            return 0;\n    }   \n    ```\n\n    \n\n## Problem D-Powers\n\n菜鸡加载中...","slug":"XCPC/ARC106","published":1,"updated":"2021-06-26T15:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujg001163jn4nhp6mnl","content":"<h2 id=\"Problem-A-106\"><a href=\"#Problem-A-106\" class=\"headerlink\" title=\"Problem A-106\"></a>Problem A-106</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定数N，找到两个数A, B, 使得 3<sup>A</sup> + 5<sup>B</sup> = N .</p>\n<ul>\n<li>1 ≤ N ≤ 10<sup>18</sup> </li>\n<li>All values in input are integers.</li>\n</ul>\n<h3 id=\"Solution-Code\"><a href=\"#Solution-Code\" class=\"headerlink\" title=\"Solution Code\"></a>Solution Code</h3><p>打表, 数据范围小, longlong算好 3 , 5 的 n 次方.每次枚举和即可. 当和大于 N 时,退出这一层循环.</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> llint<span class=\"token punctuation\">;</span>\n\nllint thr<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>fiv<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tllint N<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tn<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>n<span class=\"token operator\">&lt;</span><span class=\"token number\">1e19</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tthr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n\t\tn<span class=\"token operator\">=</span>n<span class=\"token operator\">*</span><span class=\"token function\">llint</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\tn<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>n<span class=\"token operator\">&lt;</span><span class=\"token number\">1e19</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tfiv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n\t\tn<span class=\"token operator\">=</span>n<span class=\"token operator\">*</span><span class=\"token function\">llint</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>N<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>fiv<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>fiv<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>N<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Problem-B-Value\"><a href=\"#Problem-B-Value\" class=\"headerlink\" title=\"Problem B-Value\"></a>Problem B-Value</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>​        给定一个无环图，每次可以选择一条边使其连接的节点均减1或者加1，给出每个节点的初始值和目标值问是否可以达到目标值？</p>\n<h3 id=\"75-解法？\"><a href=\"#75-解法？\" class=\"headerlink\" title=\"75%解法？\"></a>75%解法？</h3><p>​        任选一个节点为起点，dfs这个节点所在的图。一开始想的是只要算出sum ( a<sub>i</sub> - b<sub>i</sub> ) 判断奇偶即可？偶数可以。忽略了操作分正负，合为偶可能到最后两个节点会导致一个要减一个要加。然而正解毕竟包含在这种情况中，所以AC 36/48</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//75%AC code</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\tll cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//record sum of (b-a). once cnt is odd ,ans will never be YES</span>\n\t\t\n\t\t<span class=\"token comment\">//dfs an unvisited node's tree;</span>\n\t\t<span class=\"token comment\">//by the way, calculate the value of sum of (b-a)</span>\n\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tvis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>mark<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">int</span> node<span class=\"token punctuation\">;</span>\n\t\t\tnode<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcnt<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>u<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>u<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tvis<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>mark<span class=\"token punctuation\">;</span>\n\t\t\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\t\t<span class=\"token comment\">//end of one time of dfs</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tmark<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yes\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"思考与修改\"><a href=\"#思考与修改\" class=\"headerlink\" title=\"思考与修改\"></a>思考与修改</h3><p>​        WA数据点分布广，不是被卡大数据，因此找一下遗漏。我们把图退化成两个节点上面出现的问题就显然了。我们放到三个节点，发现如果父节点和子节点变换方向相同（同加或同减）可以抵消一部分，所以我们可以计算这种变化的和，每次用上一层的结果减去下一层的变化量，最后判断是否为0就好了。</p>\n<h3 id=\"Solution-Code-1\"><a href=\"#Solution-Code-1\" class=\"headerlink\" title=\"Solution Code\"></a>Solution Code</h3><p><del>请忽略这头文件</del></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">A_Wei</span> <span class=\"token expression\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">si_ne</span> <span class=\"token expression\">std </span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\nA_Wei si_ne<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">200050</span><span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>u<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nqueue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>q<span class=\"token punctuation\">;</span>\n\nll a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> vis<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>M<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>v1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tu<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tu<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\tll cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//record sum of (b-a). only when cnt is 0 ,ans is YES</span>\n\t\t<span class=\"token comment\">//result of last level should minus the values of this level</span>\n\n\t\t<span class=\"token comment\">//dfs an unvisited node's tree;</span>\n\t\t<span class=\"token comment\">//by the way, calculate the value of sum of (b-a)</span>\n\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tvis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">int</span> node<span class=\"token punctuation\">,</span>markt<span class=\"token punctuation\">;</span>\n\t\t\tnode<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmarkt<span class=\"token operator\">=</span>vis<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>markt<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> cnt<span class=\"token operator\">-=</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>b<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>u<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>u<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>markt<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> vis<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>markt<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span> vis<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>markt<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\t\t<span class=\"token comment\">//end of one time of dfs</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yes\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\n <span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Problem-C-Solution\"><a href=\"#Problem-C-Solution\" class=\"headerlink\" title=\"Problem C-Solution\"></a>Problem C-Solution</h2><h3 id=\"题目大意-amp-分析\"><a href=\"#题目大意-amp-分析\" class=\"headerlink\" title=\"题目大意 &amp; 分析\"></a>题目大意 &amp; 分析</h3><p>​        问题 P 是 最多区间调度问题 , 其中 Takahashi 和 Aoki 分别给出解 , 两人输出解的差定义为 M.输入区间个数 N 和 M, 要求构造出任意一个满足条件的 N 个区间. 无解输出 -1.</p>\n<p>​        其中 Takahashi 给出的就是正解, 不知道这个这道题就做不了了. 大致分为以下情况 : </p>\n<ul>\n<li><p>M &lt; 0 , 正解给出的数是最大的, 无解</p>\n</li>\n<li><p>M = N , 意味着 Aoki 的解小于等于0, 无解</p>\n</li>\n<li><p>M = N - 1 ,只有一种可能, Takahashi 输出 N , 而 Aoki 输出 1. Aoki输出了 1 , 说明有一个区间包含了全部区间, 那么 Tasahashi 不可能输出 N 了 , 无解 ( 有例外 )</p>\n</li>\n<li><p>M = 0 , 这样的话两组解相同, 那所有区间不重叠即可 . 当 N = 1 时 ,就是上面情况的例外了.</p>\n</li>\n<li><p>0 &lt; M &lt; N + 1 , 构造这样 N 个区间 , 我们只要想办法把差部分解决即可, 构造方法如下.</p>\n<p>  在一个大区间中放入 M+1 个不重叠小区间, 再构造 N - M - 2 个不重叠的区间即可.</p>\n<p>  在大区间中, Aoki 只能选择 1 个区间, 而 Tasahashi 会优先选择里面的 M+1 个小区间, 解的差构造完成.</p>\n<h3 id=\"Solution-Code-2\"><a href=\"#Solution-Code-2\" class=\"headerlink\" title=\"Solution Code\"></a>Solution Code</h3>  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>M<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>M<span class=\"token operator\">==</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>N<span class=\"token operator\">>=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>M<span class=\"token operator\">==</span>N<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>M<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">==</span>M<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</li>\n</ul>\n<h2 id=\"Problem-D-Powers\"><a href=\"#Problem-D-Powers\" class=\"headerlink\" title=\"Problem D-Powers\"></a>Problem D-Powers</h2><p>菜鸡加载中…</p>\n","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":"<h2 id=\"Problem-A-106\"><a href=\"#Problem-A-106\" class=\"headerlink\" title=\"Problem A-106\"></a>Problem A-106</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定数N，找到两个数A, B, 使得 3<sup>A</sup> + 5<sup>B</sup> = N .</p>\n<ul>\n<li>1 ≤ N ≤ 10<sup>18</sup> </li>\n<li>All values in input are integers.</li>\n</ul>\n<h3 id=\"Solution-Code\"><a href=\"#Solution-Code\" class=\"headerlink\" title=\"Solution Code\"></a>Solution Code</h3><p>打表, 数据范围小, longlong算好 3 , 5 的 n 次方.每次枚举和即可. 当和大于 N 时,退出这一层循环.</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> llint<span class=\"token punctuation\">;</span>\n\nllint thr<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>fiv<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tllint N<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tn<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>n<span class=\"token operator\">&lt;</span><span class=\"token number\">1e19</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tthr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n\t\tn<span class=\"token operator\">=</span>n<span class=\"token operator\">*</span><span class=\"token function\">llint</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\tn<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>n<span class=\"token operator\">&lt;</span><span class=\"token number\">1e19</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tfiv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n\t\tn<span class=\"token operator\">=</span>n<span class=\"token operator\">*</span><span class=\"token function\">llint</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>N<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>fiv<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>fiv<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>N<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Problem-B-Value\"><a href=\"#Problem-B-Value\" class=\"headerlink\" title=\"Problem B-Value\"></a>Problem B-Value</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>​        给定一个无环图，每次可以选择一条边使其连接的节点均减1或者加1，给出每个节点的初始值和目标值问是否可以达到目标值？</p>\n<h3 id=\"75-解法？\"><a href=\"#75-解法？\" class=\"headerlink\" title=\"75%解法？\"></a>75%解法？</h3><p>​        任选一个节点为起点，dfs这个节点所在的图。一开始想的是只要算出sum ( a<sub>i</sub> - b<sub>i</sub> ) 判断奇偶即可？偶数可以。忽略了操作分正负，合为偶可能到最后两个节点会导致一个要减一个要加。然而正解毕竟包含在这种情况中，所以AC 36/48</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//75%AC code</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\tll cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//record sum of (b-a). once cnt is odd ,ans will never be YES</span>\n\t\t\n\t\t<span class=\"token comment\">//dfs an unvisited node's tree;</span>\n\t\t<span class=\"token comment\">//by the way, calculate the value of sum of (b-a)</span>\n\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tvis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>mark<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">int</span> node<span class=\"token punctuation\">;</span>\n\t\t\tnode<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcnt<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>u<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>u<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tvis<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>mark<span class=\"token punctuation\">;</span>\n\t\t\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\t\t<span class=\"token comment\">//end of one time of dfs</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tmark<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yes\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"思考与修改\"><a href=\"#思考与修改\" class=\"headerlink\" title=\"思考与修改\"></a>思考与修改</h3><p>​        WA数据点分布广，不是被卡大数据，因此找一下遗漏。我们把图退化成两个节点上面出现的问题就显然了。我们放到三个节点，发现如果父节点和子节点变换方向相同（同加或同减）可以抵消一部分，所以我们可以计算这种变化的和，每次用上一层的结果减去下一层的变化量，最后判断是否为0就好了。</p>\n<h3 id=\"Solution-Code-1\"><a href=\"#Solution-Code-1\" class=\"headerlink\" title=\"Solution Code\"></a>Solution Code</h3><p><del>请忽略这头文件</del></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">A_Wei</span> <span class=\"token expression\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">si_ne</span> <span class=\"token expression\">std </span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\nA_Wei si_ne<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">200050</span><span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>u<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nqueue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>q<span class=\"token punctuation\">;</span>\n\nll a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> vis<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>M<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>v1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tu<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tu<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\tll cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//record sum of (b-a). only when cnt is 0 ,ans is YES</span>\n\t\t<span class=\"token comment\">//result of last level should minus the values of this level</span>\n\n\t\t<span class=\"token comment\">//dfs an unvisited node's tree;</span>\n\t\t<span class=\"token comment\">//by the way, calculate the value of sum of (b-a)</span>\n\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tvis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">int</span> node<span class=\"token punctuation\">,</span>markt<span class=\"token punctuation\">;</span>\n\t\t\tnode<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmarkt<span class=\"token operator\">=</span>vis<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>markt<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> cnt<span class=\"token operator\">-=</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>b<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>u<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>u<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>markt<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> vis<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>markt<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span> vis<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>markt<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\t\t<span class=\"token comment\">//end of one time of dfs</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yes\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\n <span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Problem-C-Solution\"><a href=\"#Problem-C-Solution\" class=\"headerlink\" title=\"Problem C-Solution\"></a>Problem C-Solution</h2><h3 id=\"题目大意-amp-分析\"><a href=\"#题目大意-amp-分析\" class=\"headerlink\" title=\"题目大意 &amp; 分析\"></a>题目大意 &amp; 分析</h3><p>​        问题 P 是 最多区间调度问题 , 其中 Takahashi 和 Aoki 分别给出解 , 两人输出解的差定义为 M.输入区间个数 N 和 M, 要求构造出任意一个满足条件的 N 个区间. 无解输出 -1.</p>\n<p>​        其中 Takahashi 给出的就是正解, 不知道这个这道题就做不了了. 大致分为以下情况 : </p>\n<ul>\n<li><p>M &lt; 0 , 正解给出的数是最大的, 无解</p>\n</li>\n<li><p>M = N , 意味着 Aoki 的解小于等于0, 无解</p>\n</li>\n<li><p>M = N - 1 ,只有一种可能, Takahashi 输出 N , 而 Aoki 输出 1. Aoki输出了 1 , 说明有一个区间包含了全部区间, 那么 Tasahashi 不可能输出 N 了 , 无解 ( 有例外 )</p>\n</li>\n<li><p>M = 0 , 这样的话两组解相同, 那所有区间不重叠即可 . 当 N = 1 时 ,就是上面情况的例外了.</p>\n</li>\n<li><p>0 &lt; M &lt; N + 1 , 构造这样 N 个区间 , 我们只要想办法把差部分解决即可, 构造方法如下.</p>\n<p>  在一个大区间中放入 M+1 个不重叠小区间, 再构造 N - M - 2 个不重叠的区间即可.</p>\n<p>  在大区间中, Aoki 只能选择 1 个区间, 而 Tasahashi 会优先选择里面的 M+1 个小区间, 解的差构造完成.</p>\n<h3 id=\"Solution-Code-2\"><a href=\"#Solution-Code-2\" class=\"headerlink\" title=\"Solution Code\"></a>Solution Code</h3>  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>M<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>M<span class=\"token operator\">==</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>N<span class=\"token operator\">>=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>M<span class=\"token operator\">==</span>N<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>M<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">==</span>M<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</li>\n</ul>\n<h2 id=\"Problem-D-Powers\"><a href=\"#Problem-D-Powers\" class=\"headerlink\" title=\"Problem D-Powers\"></a>Problem D-Powers</h2><p>菜鸡加载中…</p>\n"},{"title":"AtCoder Regular Contest 116","date":"2021-03-29T04:56:48.000Z","updated":"2021-03-29T04:56:48.000Z","_content":"\n最终狠下心来放弃 Codeforces , 转而开始打 Atcoder . 这个时间太香了 , 每周两场 , 不定期有 AGC . 勉强写了一下 , 写了一道 , 剩下一道想不到优化 , 归根结底数学太菜 .\n\n<!-- more -->\n\n---\n\n## A - Odd vs Even\n\n### 解题思路\n\n一开始其实就是写了个暴力 , 问一个数的奇数因子多还是偶数因子多 . 这不就是TLE吗 , 后面写了一下发现偶数因子不是一定要有因子 2 吗 . 而且偶数因子数量为$N(even)*(2^{N(odd)}-1)$ , 奇数因子为$2^{N(odd)}-1$ , 所以就是判断 $N(even)$ 而已嘛 . 但是我直接跑了一遍因子 2 的数目 . 但是$N(even)$大于等于 2 是没区别的 , 其实就是能否被 4 整除 .\n\n### 代码(比赛中)\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn (1e5 + 10)\nint main()\n{\n    ios::sync_with_stdio(false);\n    long long T, n;\n    cin >> T;\n    while (T--)\n    {\n        long long ecnt = 0;\n        cin >> n;\n        while (n % 2 == 0)\n        {\n            ++ecnt;\n            n /= 2;\n        }\n        if (ecnt == 1)\n            cout << \"Same\" << endl;\n        else if (ecnt == 0)\n            cout << \"Odd\" << endl;\n        else\n            cout << \"Even\" << endl;\n    }\n    return 0;\n}\n```\n\n### 完美代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    long long T, n;\n    cin >> T;\n    while (T--)\n    {\n        long long ecnt = 0;\n        cin >> n;\n        if (n % 4 == 0)\n            cout << \"Even\" << endl;\n        else if (n % 2 == 0)\n            cout << \"Same\" << endl;\n        else\n            cout << \"Odd\" << endl;\n    }\n    return 0;\n}\n```\n\n## B - Products of Min-Max\n\n### 解题思路\n\n给定一个集合 , 问你每个非空子集的最大最小值乘积的和是多少 . 当然我只会先想暴力 , 但是问题出现了 : 怎么枚举以及时间复杂度 . 这种编码本来就难 , 但是我居然真的做出来了 . \n\n考虑前 n 个元素的子集的集合 , 现加入一个元素 , 如何构造新集合的子集 . 把所有集合子集遍历一遍 , 在原来子集基础上加上由原来子集和新元素构成的新子集 . 但是没有意义 , 因为时间复杂度$O(2^{N+1})$.\n\n于是我就考虑了优化 , 为什么不排个序呢 . 集合有序,选定最大最小值 , 再计算有几个子集的最大最小值满足选定值就好了 .\n$$\nAns=\\sum^{n}_{i=1} \\sum^{n}_{j=i+1}a[i]*a[j]*2^{j-i-1}+ \n\\sum^n_{i=1}a[i]*a[i];\n$$\n 时间复杂度是$O(N^2)$ , 好一点了.但是两秒时间 , $O(N^2)$算法还是不对.\n\n于是上式应进行化简 . \n$$\n\\begin{aligned}\nAns &= \\sum^{n}_{i=1} \\sum^{n}_{j=i+1}a[i]*a[j]*2^{j-i-1}+\\sum^n_{i=1}a[i]*a[i]\\\\\n    &= \\sum^{n}_{i=1}a[i]*\\sum^n_{j=i+1}a[j]*2^{j-i-1}+\\sum^n_{i=1}a[i]*a[i]\\\\\n    &\\sum^n_{j=i}a[j]*2^{j-i} =2 * \\sum^n_{j=i+1}a[j]*2^{j-i-1}+a[i]\n\\end{aligned}\n$$\n最主要的就是下面的递推式 , 使一个$O(N)$的过程优化成$O(1)$. 所以复杂度规模直接变成了sort的规模了.时间复杂度$O(NlogN)$.\n\n### TLE 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 2e5 + 10;\nusing ll = long long;\nconst ll mod = 998244353;\n\nll a[maxn], ans = 0;\n\ninline ll qpow(int a, int n, int m)\n{\n    long long ans = 1;\n    while(n){\n        if(n&1){\n            ans = (ans * a) % m;\n        }\n        a = (a * a) % m;\n        n >>= 1;\n    }\n    return ans;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i)\n    {\n        cin >> a[i];\n        ans += ((a[i] * a[i]) % mod);\n        ans %= mod;\n    }\n    sort(a, a + n);\n    for (int i = 0; i < n; ++i)\n    {\n        for (int j = i + 1; j < n; ++j)\n        {\n            ans += ((a[i] * a[j]) % mod * qpow(2,j - i - 1,mod)) % mod;\n            ans %= mod;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 2e5 + 10;\nusing ll = long long;\nconst ll mod = 998244353;\n\nll a[maxn], ans = 0, sum = 0;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i)\n    {\n        cin >> a[i];\n        ans += ((a[i] * a[i]) % mod);\n        ans %= mod;\n    }\n    sort(a, a + n);\n    sum = a[n - 1];\n    for (int i = n - 2; i >= 0; --i)\n    {\n        ans = ans + sum * a[i] % mod;\n        ans %= mod;\n        sum = sum * 2 + a[i];\n        sum %= mod;\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/ARC116.md","raw":"---\ntitle: AtCoder Regular Contest 116\ndate: 2021-03-29 12:56:48\nupdated: 2021-03-29 12:56:48\ntags:\n\t- 数学\ncategories:\n\t- ICPC Programming Contest\n---\n\n最终狠下心来放弃 Codeforces , 转而开始打 Atcoder . 这个时间太香了 , 每周两场 , 不定期有 AGC . 勉强写了一下 , 写了一道 , 剩下一道想不到优化 , 归根结底数学太菜 .\n\n<!-- more -->\n\n---\n\n## A - Odd vs Even\n\n### 解题思路\n\n一开始其实就是写了个暴力 , 问一个数的奇数因子多还是偶数因子多 . 这不就是TLE吗 , 后面写了一下发现偶数因子不是一定要有因子 2 吗 . 而且偶数因子数量为$N(even)*(2^{N(odd)}-1)$ , 奇数因子为$2^{N(odd)}-1$ , 所以就是判断 $N(even)$ 而已嘛 . 但是我直接跑了一遍因子 2 的数目 . 但是$N(even)$大于等于 2 是没区别的 , 其实就是能否被 4 整除 .\n\n### 代码(比赛中)\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn (1e5 + 10)\nint main()\n{\n    ios::sync_with_stdio(false);\n    long long T, n;\n    cin >> T;\n    while (T--)\n    {\n        long long ecnt = 0;\n        cin >> n;\n        while (n % 2 == 0)\n        {\n            ++ecnt;\n            n /= 2;\n        }\n        if (ecnt == 1)\n            cout << \"Same\" << endl;\n        else if (ecnt == 0)\n            cout << \"Odd\" << endl;\n        else\n            cout << \"Even\" << endl;\n    }\n    return 0;\n}\n```\n\n### 完美代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    long long T, n;\n    cin >> T;\n    while (T--)\n    {\n        long long ecnt = 0;\n        cin >> n;\n        if (n % 4 == 0)\n            cout << \"Even\" << endl;\n        else if (n % 2 == 0)\n            cout << \"Same\" << endl;\n        else\n            cout << \"Odd\" << endl;\n    }\n    return 0;\n}\n```\n\n## B - Products of Min-Max\n\n### 解题思路\n\n给定一个集合 , 问你每个非空子集的最大最小值乘积的和是多少 . 当然我只会先想暴力 , 但是问题出现了 : 怎么枚举以及时间复杂度 . 这种编码本来就难 , 但是我居然真的做出来了 . \n\n考虑前 n 个元素的子集的集合 , 现加入一个元素 , 如何构造新集合的子集 . 把所有集合子集遍历一遍 , 在原来子集基础上加上由原来子集和新元素构成的新子集 . 但是没有意义 , 因为时间复杂度$O(2^{N+1})$.\n\n于是我就考虑了优化 , 为什么不排个序呢 . 集合有序,选定最大最小值 , 再计算有几个子集的最大最小值满足选定值就好了 .\n$$\nAns=\\sum^{n}_{i=1} \\sum^{n}_{j=i+1}a[i]*a[j]*2^{j-i-1}+ \n\\sum^n_{i=1}a[i]*a[i];\n$$\n 时间复杂度是$O(N^2)$ , 好一点了.但是两秒时间 , $O(N^2)$算法还是不对.\n\n于是上式应进行化简 . \n$$\n\\begin{aligned}\nAns &= \\sum^{n}_{i=1} \\sum^{n}_{j=i+1}a[i]*a[j]*2^{j-i-1}+\\sum^n_{i=1}a[i]*a[i]\\\\\n    &= \\sum^{n}_{i=1}a[i]*\\sum^n_{j=i+1}a[j]*2^{j-i-1}+\\sum^n_{i=1}a[i]*a[i]\\\\\n    &\\sum^n_{j=i}a[j]*2^{j-i} =2 * \\sum^n_{j=i+1}a[j]*2^{j-i-1}+a[i]\n\\end{aligned}\n$$\n最主要的就是下面的递推式 , 使一个$O(N)$的过程优化成$O(1)$. 所以复杂度规模直接变成了sort的规模了.时间复杂度$O(NlogN)$.\n\n### TLE 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 2e5 + 10;\nusing ll = long long;\nconst ll mod = 998244353;\n\nll a[maxn], ans = 0;\n\ninline ll qpow(int a, int n, int m)\n{\n    long long ans = 1;\n    while(n){\n        if(n&1){\n            ans = (ans * a) % m;\n        }\n        a = (a * a) % m;\n        n >>= 1;\n    }\n    return ans;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i)\n    {\n        cin >> a[i];\n        ans += ((a[i] * a[i]) % mod);\n        ans %= mod;\n    }\n    sort(a, a + n);\n    for (int i = 0; i < n; ++i)\n    {\n        for (int j = i + 1; j < n; ++j)\n        {\n            ans += ((a[i] * a[j]) % mod * qpow(2,j - i - 1,mod)) % mod;\n            ans %= mod;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 2e5 + 10;\nusing ll = long long;\nconst ll mod = 998244353;\n\nll a[maxn], ans = 0, sum = 0;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i)\n    {\n        cin >> a[i];\n        ans += ((a[i] * a[i]) % mod);\n        ans %= mod;\n    }\n    sort(a, a + n);\n    sum = a[n - 1];\n    for (int i = n - 2; i >= 0; --i)\n    {\n        ans = ans + sum * a[i] % mod;\n        ans %= mod;\n        sum = sum * 2 + a[i];\n        sum %= mod;\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/ARC116","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujg001463jnaz4i6w5b","content":"<p>最终狠下心来放弃 Codeforces , 转而开始打 Atcoder . 这个时间太香了 , 每周两场 , 不定期有 AGC . 勉强写了一下 , 写了一道 , 剩下一道想不到优化 , 归根结底数学太菜 .</p>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"A-Odd-vs-Even\"><a href=\"#A-Odd-vs-Even\" class=\"headerlink\" title=\"A - Odd vs Even\"></a>A - Odd vs Even</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>一开始其实就是写了个暴力 , 问一个数的奇数因子多还是偶数因子多 . 这不就是TLE吗 , 后面写了一下发现偶数因子不是一定要有因子 2 吗 . 而且偶数因子数量为$N(even)*(2^{N(odd)}-1)$ , 奇数因子为$2^{N(odd)}-1$ , 所以就是判断 $N(even)$ 而已嘛 . 但是我直接跑了一遍因子 2 的数目 . 但是$N(even)$大于等于 2 是没区别的 , 其实就是能否被 4 整除 .</p>\n<h3 id=\"代码-比赛中\"><a href=\"#代码-比赛中\" class=\"headerlink\" title=\"代码(比赛中)\"></a>代码(比赛中)</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> T<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ecnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token operator\">++</span>ecnt<span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ecnt <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Same\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ecnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Odd\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Even\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"完美代码\"><a href=\"#完美代码\" class=\"headerlink\" title=\"完美代码\"></a>完美代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> T<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ecnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Even\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Same\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Odd\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Products-of-Min-Max\"><a href=\"#B-Products-of-Min-Max\" class=\"headerlink\" title=\"B - Products of Min-Max\"></a>B - Products of Min-Max</h2><h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>给定一个集合 , 问你每个非空子集的最大最小值乘积的和是多少 . 当然我只会先想暴力 , 但是问题出现了 : 怎么枚举以及时间复杂度 . 这种编码本来就难 , 但是我居然真的做出来了 . </p>\n<p>考虑前 n 个元素的子集的集合 , 现加入一个元素 , 如何构造新集合的子集 . 把所有集合子集遍历一遍 , 在原来子集基础上加上由原来子集和新元素构成的新子集 . 但是没有意义 , 因为时间复杂度$O(2^{N+1})$.</p>\n<p>于是我就考虑了优化 , 为什么不排个序呢 . 集合有序,选定最大最小值 , 再计算有几个子集的最大最小值满足选定值就好了 .<br>$$<br>Ans=\\sum^{n}<em>{i=1} \\sum^{n}</em>{j=i+1}a[i]*a[j]*2^{j-i-1}+<br>\\sum^n_{i=1}a[i]*a[i];<br>$$<br> 时间复杂度是$O(N^2)$ , 好一点了.但是两秒时间 , $O(N^2)$算法还是不对.</p>\n<p>于是上式应进行化简 .<br>$$<br>\\begin{aligned}<br>Ans &amp;= \\sum^{n}<em>{i=1} \\sum^{n}</em>{j=i+1}a[i]*a[j]*2^{j-i-1}+\\sum^n_{i=1}a[i]*a[i]\\<br>    &amp;= \\sum^{n}<em>{i=1}a[i]*\\sum^n</em>{j=i+1}a[j]*2^{j-i-1}+\\sum^n_{i=1}a[i]*a[i]\\<br>    &amp;\\sum^n_{j=i}a[j]*2^{j-i} =2 * \\sum^n_{j=i+1}a[j]*2^{j-i-1}+a[i]<br>\\end{aligned}<br>$$<br>最主要的就是下面的递推式 , 使一个$O(N)$的过程优化成$O(1)$. 所以复杂度规模直接变成了sort的规模了.时间复杂度$O(NlogN)$.</p>\n<h3 id=\"TLE-代码\"><a href=\"#TLE-代码\" class=\"headerlink\" title=\"TLE 代码\"></a>TLE 代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">2e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ll mod <span class=\"token operator\">=</span> <span class=\"token number\">998244353</span><span class=\"token punctuation\">;</span>\n\nll a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> ll <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> m<span class=\"token punctuation\">;</span>\n        n <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">%=</span> mod<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod <span class=\"token operator\">*</span> <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n            ans <span class=\"token operator\">%=</span> mod<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">2e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ll mod <span class=\"token operator\">=</span> <span class=\"token number\">998244353</span><span class=\"token punctuation\">;</span>\n\nll a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">%=</span> mod<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sum <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">+</span> sum <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">%=</span> mod<span class=\"token punctuation\">;</span>\n        sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        sum <span class=\"token operator\">%=</span> mod<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>最终狠下心来放弃 Codeforces , 转而开始打 Atcoder . 这个时间太香了 , 每周两场 , 不定期有 AGC . 勉强写了一下 , 写了一道 , 剩下一道想不到优化 , 归根结底数学太菜 .</p>","more":"<hr>\n<h2 id=\"A-Odd-vs-Even\"><a href=\"#A-Odd-vs-Even\" class=\"headerlink\" title=\"A - Odd vs Even\"></a>A - Odd vs Even</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>一开始其实就是写了个暴力 , 问一个数的奇数因子多还是偶数因子多 . 这不就是TLE吗 , 后面写了一下发现偶数因子不是一定要有因子 2 吗 . 而且偶数因子数量为$N(even)*(2^{N(odd)}-1)$ , 奇数因子为$2^{N(odd)}-1$ , 所以就是判断 $N(even)$ 而已嘛 . 但是我直接跑了一遍因子 2 的数目 . 但是$N(even)$大于等于 2 是没区别的 , 其实就是能否被 4 整除 .</p>\n<h3 id=\"代码-比赛中\"><a href=\"#代码-比赛中\" class=\"headerlink\" title=\"代码(比赛中)\"></a>代码(比赛中)</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> T<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ecnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token operator\">++</span>ecnt<span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ecnt <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Same\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ecnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Odd\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Even\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"完美代码\"><a href=\"#完美代码\" class=\"headerlink\" title=\"完美代码\"></a>完美代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> T<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ecnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Even\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Same\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Odd\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Products-of-Min-Max\"><a href=\"#B-Products-of-Min-Max\" class=\"headerlink\" title=\"B - Products of Min-Max\"></a>B - Products of Min-Max</h2><h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>给定一个集合 , 问你每个非空子集的最大最小值乘积的和是多少 . 当然我只会先想暴力 , 但是问题出现了 : 怎么枚举以及时间复杂度 . 这种编码本来就难 , 但是我居然真的做出来了 . </p>\n<p>考虑前 n 个元素的子集的集合 , 现加入一个元素 , 如何构造新集合的子集 . 把所有集合子集遍历一遍 , 在原来子集基础上加上由原来子集和新元素构成的新子集 . 但是没有意义 , 因为时间复杂度$O(2^{N+1})$.</p>\n<p>于是我就考虑了优化 , 为什么不排个序呢 . 集合有序,选定最大最小值 , 再计算有几个子集的最大最小值满足选定值就好了 .<br>$$<br>Ans=\\sum^{n}<em>{i=1} \\sum^{n}</em>{j=i+1}a[i]*a[j]*2^{j-i-1}+<br>\\sum^n_{i=1}a[i]*a[i];<br>$$<br> 时间复杂度是$O(N^2)$ , 好一点了.但是两秒时间 , $O(N^2)$算法还是不对.</p>\n<p>于是上式应进行化简 .<br>$$<br>\\begin{aligned}<br>Ans &amp;= \\sum^{n}<em>{i=1} \\sum^{n}</em>{j=i+1}a[i]*a[j]*2^{j-i-1}+\\sum^n_{i=1}a[i]*a[i]\\<br>    &amp;= \\sum^{n}<em>{i=1}a[i]*\\sum^n</em>{j=i+1}a[j]*2^{j-i-1}+\\sum^n_{i=1}a[i]*a[i]\\<br>    &amp;\\sum^n_{j=i}a[j]*2^{j-i} =2 * \\sum^n_{j=i+1}a[j]*2^{j-i-1}+a[i]<br>\\end{aligned}<br>$$<br>最主要的就是下面的递推式 , 使一个$O(N)$的过程优化成$O(1)$. 所以复杂度规模直接变成了sort的规模了.时间复杂度$O(NlogN)$.</p>\n<h3 id=\"TLE-代码\"><a href=\"#TLE-代码\" class=\"headerlink\" title=\"TLE 代码\"></a>TLE 代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">2e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ll mod <span class=\"token operator\">=</span> <span class=\"token number\">998244353</span><span class=\"token punctuation\">;</span>\n\nll a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> ll <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> m<span class=\"token punctuation\">;</span>\n        n <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">%=</span> mod<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod <span class=\"token operator\">*</span> <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n            ans <span class=\"token operator\">%=</span> mod<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">2e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ll mod <span class=\"token operator\">=</span> <span class=\"token number\">998244353</span><span class=\"token punctuation\">;</span>\n\nll a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">%=</span> mod<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sum <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">+</span> sum <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">%=</span> mod<span class=\"token punctuation\">;</span>\n        sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        sum <span class=\"token operator\">%=</span> mod<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"树状数组","date":"2020-11-30T01:33:52.000Z","update":"2021-01-24T03:54:22.000Z","_content":"树状数组是二进制的巧妙利用，可以完成区间求和的基本操作。他虽然功能不及线段树，但是易于编写。\n\n<!-- more -->\n\n## 区间求和问题\n\n给定一组数据 , 可以进行两种操作 , 修改值和区间求和 . 最开始想法就是前缀和 , 这样的话求和复杂度是  O( 1 ) , 但是区间维护操作是 O(N) , 所以有没有更优秀的数据结构呢 . \n\n### 原理\n\n树状数组就是在数组上模拟树 , 对节点进行求和 . 树状数组利用了二进制的思想 , 使求和和维护的复杂度都在 O ( N*logN) .\n\n<img src=\"https://p.130014.xyz/2020/11/30/treearray001.png\" style=\"zoom:80%;\" />\n\nA数组就是原来的数 , 而C数组就是树状数组 . \n\n### Lowbit 函数\n\n树状数组的核心就是lowbit函数 , 如果不明所以 , 可以很快写出代码的 , 但我还是想折腾一下 . 首先lowbit求的就是要加几个数 , 而这个数一定是 2 的 k 次方 . 问题转化为k了 . 我们举几个例子:\n\n- Sum6 , 6的二进制码为 110 . Sum6=C6+C4 .\n- Sum7 , 7的二进制码为 111 . Sum7=C7+C6+C4\n\n其实不难看出 , 每一个C , 存的都是某个1代表的和 . 而每一次求和就是求每一个1代表数的和 . \n\n<center>Sum5=C4+C5 5 : 101</center>\n\n<center>Sum6=C4+C6 6 : 110</center>\n\n然后接下来就是找 k , 其实慢慢移动就太慢了 , 和位运算有关 , 那么就可以考滤位运算 . \n\n#### 方法一  \n\n<center>lowbit(i)=x & (x^(x-1))</center>\n\n考虑二进制 x-1 会导致最低位(即第k位) 1 以及之后的位数全部和之前相反 , 这样异或一下 , 就会使最低位 ( k 位) 以及比 k 低的位数全为 1 , 因为比 k 位高的位数全是 0 , 所以与操作后必为 0 , 加上第k位 , 是最低位 1 , 再低的位数就没有 1 了 , 所以除了 k 位以外全为 0 , 这个数就是 2<sup>k</sup> .\n\n#### 方法二  \n\n<center>lowbit(x)=x&(-x)</center>\n\n这个方法是最常用的 , 它利用了储存负数的机制 , 就是补码 . 补码就是反码加一 , 反码的每一位都和原来不同 . 而末尾的 0 就会变成 1 , 加上1 , 反码末尾的 1 变成 0 , 还把反码末尾第一个 0 变成 1 .这样第 k 位前仍然互为反码 , 第 k 位后 -x 全为零 , 第 k 位全为 1 .​\n### 求和\n\n先讲求和对后面的建立数组的理解很有帮助。因为树状数组储存的是最后一位 1 代表的数字。加上所有 1 代表的数字就是答案了。\n$$\nSum_i=C_i+C_{i-2^{k1}}+C_{i-2^{k1}-2^{k2}}+……\n$$\n​    代码如下 : \n\n``` cpp\nint getsum(int i)\n{\n    int res=0;\n    while(i>0){\n        res+=c[i];\n        i-=lowbit(i);\n    }\n    return res;\n}\n```\n### 维护和构建树状数组\n根据求和规则，我们发现在 i 处的数包含于最低位1及之后的1上。例如：\n* 6(110)，那么就是6(110)，8(100)，16(1000)…\n* 9(1001)，9(1001)，10(1010)，12(1100)，16(1000)，32(10000)…\n这里我引用一下百度百科的图，会更好理解。\n\n<img src=\"https://p.130014.xyz/2020/12/01/F99344C7-C642-4AE8-B42E-02F2DDBBBD94.png\" style=\"zoom:80%;\" />\n\n代码如下 :\n\n```cpp\nvoid update(int i,int val)\n{\n    while (i<=n){\n        c[i]+=val;\n        i+=lowbit(i);\n    }\n}\n```\n\n### 例题:[HDU1166](http://acm.hdu.edu.cn/showproblem.php?pid=1166)\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\nint a[50010],n;\n\nint lowbit(int x){\treturn x&(-x);}\n\nvoid update(int i,int val)\n{\n\twhile(i<=n){\n\t\ta[i]+=val;\n\t\ti+=lowbit(i);\n\t}\n}\n\nint getsum(int i)\n{\n\tint res=0;\n\twhile(i>0){\n\t\tres+=a[i];\n\t\ti-=lowbit(i);\n\t}\n\treturn res;\n}\n\nint main()\n{\n\tint num,x,y,T;\n\tchar op[10];\n\tscanf (\"%d \",&T);\n\tfor (int i=1;i<=T;i++){\n\t\tprintf(\"Case %d:\\n\",i);\n\t\tscanf(\"%d \",&n);\n\t\tmemset(a,0,sizeof(int)*(n+1));\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tscanf (\"%d \",&num);\n\t\t\tupdate(i,num);\n\t\t}\n\t\twhile(1)\n\t\t{\n\t\t\tmemset(op,0,sizeof(op));\n\t\t\tscanf (\"%s\",&op);\n\t\t\tif (!strcmp(\"End\",op)) break;\n\t\t\telse if (strcmp(\"Add\",op)==0) {\n\t\t\t\tscanf(\"%d %d \",&x,&y);\n\t\t\t\tupdate(x,y);\n\t\t\t}\n\t\t\telse if (!strcmp(\"Sub\",op)) {\n\t\t\t\tscanf(\"%d %d \",&x,&y);\n\t\t\t\tupdate(x,-y);\n\t\t\t}\n\t\t\telse if (!strcmp(\"Query\",op)){\n\t\t\t\tscanf(\"%d %d \",&x,&y);\n\t\t\t\tprintf(\"%d\\n\",getsum(y)-getsum(x-1));\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\n## 区间修改&单点查询\n\n一组数据，要能够完成区间值加减和单点询问。\n### 思路\n因为只是单点查询，可以利用差分思想，记录与前一个数的差即可。区间修改不改变区间内差值，只需修改区间两边的值即可。树状数组即可解决。\n\n### 例题:[LUOGU3368](https://www.luogu.com.cn/problem/P3368)\n\n```cpp\n#include <bits/stdcpp.h>\nusing namespace std;\nint a[500010],n;\nint lowbit(int x)\t{\treturn x&(-x);}\nvoid update(int i,int val)\n{\n\twhile(i<=n){\n\t\ta[i]+=val;\n\t\ti+=lowbit(i);\n\t}\n}\nint getsum(int i)\n{\n\tint res=0;\n\twhile(i>0){\n\t\tres+=a[i];\n\t\ti-=lowbit(i);\n\t}\n\treturn res;\n}\nint main()\n{\n\tint m,k,num1=0,num2=0,op,x,y;\n\tscanf (\"%d%d\",&n,&m);\n\tfor (int i=1;i<=n;i++){\n\t\tscanf (\"%d\",&num1);\n\t\tupdate(i,num1-num2);\n\t\tnum2=num1;\n\t}\n\tfor (int i=1;i<=m;i++){\n\t\tscanf (\"%d\",&op);\n\t\tif (op==1) {\n\t\t\tscanf(\"%d %d %d\",&x,&y,&k);\n\t\t\tupdate(x,k);update(y+1,-k);\n\t\t}\n\t\telse if (op==2) {\n\t\t\tscanf(\"%d\",&x);\n\t\t\tprintf(\"%d\\n\",getsum(x));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\n## 区间修改&区间查询\n\n一组数据 , 要求能够区间修改和区间询问 . \n\n### 思路\n\n同时要完成两种操作 , 这样就只要维护两个树状数组就好了 . 一个差分数组 , 另一个是对差分数组进行求和的数组 . \n$$\n\\begin{aligned}\nSum(n)=\\sum_{i=1}^n a_i&=a_n+a_{n-1}+...+a_1\\\\&=(d_n+...+d_1)+(d_{n-1}+...+d_1)+...+d_1\\\\&=(n-(n-1))*d_n+(n-(n-2))*d_{n-1}+...+(n-0)*d_1\\\\&=n*\\sum_{i=1}^n d_i-\\sum_{i=1}^n d_i*(i-1)\n\\end{aligned}\n$$\n\n### 例题:[POJ3468](http://poj.org/problem?id=3468)\n\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\n\ntypedef long long ll;\nll a[100010],b[100010],N;\n\nll lowbit(ll x){\treturn x&(-x);}\n\nvoid update(ll i,ll val)\n{\n\tll x=i;\n\twhile(i<=N){\n\t\ta[i]+=val;\n\t\tb[i]+=(val*(x-1));\n\t\ti+=lowbit(i);\n\t}\n}\n\nll getsum(ll i)\n{\n\tll res=0,x=i;\n\twhile(i>0){\n\t\tres+=(a[i]*x-b[i]);\n\t\ti-=lowbit(i);\n\t}\n\treturn res;\n}\n\nint main()\n{\n\tll Q,num1,num2=0;\n\tscanf (\"%lld %lld\",&N,&Q);\n\tfor (int i=1;i<=N;i++){\n\t\tscanf (\"%lld\",&num1);\n\t\tupdate(i,num1-num2);\n\t\tnum2=num1;\n\t}e\n\tfor (int i=1;i<=Q;i++)\n\t{\n\t\tchar op=getchar();\n\t\tll x,y,k;\n\t\tif (op=='C') {\n\t\t\tscanf (\"%lld %lld %lld\",&x,&y,&k);\n\t\t\tupdate(x,k);\n\t\t\tupdate(y+1,-k);\n\t\t}\n\t\telse if (op=='Q') {\n\t\t\tscanf(\"%lld %lld\",&x,&y);\n\t\t\tprintf(\"%lld\\n\",getsum(y)-getsum(x-1));\n\t\t}\n\t\telse i--;\n\t}\n\treturn 0;\n}\n```\n","source":"_posts/XCPC/BinaryIndexedTree.md","raw":"---\ntitle: 树状数组\ndate: 2020-11-30 9:33:52\nupdate: 2021-01-24 11:54:22\ncategories:\n\t- ICPC 数据结构\ntags:\n\t- 树状数组\n---\n树状数组是二进制的巧妙利用，可以完成区间求和的基本操作。他虽然功能不及线段树，但是易于编写。\n\n<!-- more -->\n\n## 区间求和问题\n\n给定一组数据 , 可以进行两种操作 , 修改值和区间求和 . 最开始想法就是前缀和 , 这样的话求和复杂度是  O( 1 ) , 但是区间维护操作是 O(N) , 所以有没有更优秀的数据结构呢 . \n\n### 原理\n\n树状数组就是在数组上模拟树 , 对节点进行求和 . 树状数组利用了二进制的思想 , 使求和和维护的复杂度都在 O ( N*logN) .\n\n<img src=\"https://p.130014.xyz/2020/11/30/treearray001.png\" style=\"zoom:80%;\" />\n\nA数组就是原来的数 , 而C数组就是树状数组 . \n\n### Lowbit 函数\n\n树状数组的核心就是lowbit函数 , 如果不明所以 , 可以很快写出代码的 , 但我还是想折腾一下 . 首先lowbit求的就是要加几个数 , 而这个数一定是 2 的 k 次方 . 问题转化为k了 . 我们举几个例子:\n\n- Sum6 , 6的二进制码为 110 . Sum6=C6+C4 .\n- Sum7 , 7的二进制码为 111 . Sum7=C7+C6+C4\n\n其实不难看出 , 每一个C , 存的都是某个1代表的和 . 而每一次求和就是求每一个1代表数的和 . \n\n<center>Sum5=C4+C5 5 : 101</center>\n\n<center>Sum6=C4+C6 6 : 110</center>\n\n然后接下来就是找 k , 其实慢慢移动就太慢了 , 和位运算有关 , 那么就可以考滤位运算 . \n\n#### 方法一  \n\n<center>lowbit(i)=x & (x^(x-1))</center>\n\n考虑二进制 x-1 会导致最低位(即第k位) 1 以及之后的位数全部和之前相反 , 这样异或一下 , 就会使最低位 ( k 位) 以及比 k 低的位数全为 1 , 因为比 k 位高的位数全是 0 , 所以与操作后必为 0 , 加上第k位 , 是最低位 1 , 再低的位数就没有 1 了 , 所以除了 k 位以外全为 0 , 这个数就是 2<sup>k</sup> .\n\n#### 方法二  \n\n<center>lowbit(x)=x&(-x)</center>\n\n这个方法是最常用的 , 它利用了储存负数的机制 , 就是补码 . 补码就是反码加一 , 反码的每一位都和原来不同 . 而末尾的 0 就会变成 1 , 加上1 , 反码末尾的 1 变成 0 , 还把反码末尾第一个 0 变成 1 .这样第 k 位前仍然互为反码 , 第 k 位后 -x 全为零 , 第 k 位全为 1 .​\n### 求和\n\n先讲求和对后面的建立数组的理解很有帮助。因为树状数组储存的是最后一位 1 代表的数字。加上所有 1 代表的数字就是答案了。\n$$\nSum_i=C_i+C_{i-2^{k1}}+C_{i-2^{k1}-2^{k2}}+……\n$$\n​    代码如下 : \n\n``` cpp\nint getsum(int i)\n{\n    int res=0;\n    while(i>0){\n        res+=c[i];\n        i-=lowbit(i);\n    }\n    return res;\n}\n```\n### 维护和构建树状数组\n根据求和规则，我们发现在 i 处的数包含于最低位1及之后的1上。例如：\n* 6(110)，那么就是6(110)，8(100)，16(1000)…\n* 9(1001)，9(1001)，10(1010)，12(1100)，16(1000)，32(10000)…\n这里我引用一下百度百科的图，会更好理解。\n\n<img src=\"https://p.130014.xyz/2020/12/01/F99344C7-C642-4AE8-B42E-02F2DDBBBD94.png\" style=\"zoom:80%;\" />\n\n代码如下 :\n\n```cpp\nvoid update(int i,int val)\n{\n    while (i<=n){\n        c[i]+=val;\n        i+=lowbit(i);\n    }\n}\n```\n\n### 例题:[HDU1166](http://acm.hdu.edu.cn/showproblem.php?pid=1166)\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\nint a[50010],n;\n\nint lowbit(int x){\treturn x&(-x);}\n\nvoid update(int i,int val)\n{\n\twhile(i<=n){\n\t\ta[i]+=val;\n\t\ti+=lowbit(i);\n\t}\n}\n\nint getsum(int i)\n{\n\tint res=0;\n\twhile(i>0){\n\t\tres+=a[i];\n\t\ti-=lowbit(i);\n\t}\n\treturn res;\n}\n\nint main()\n{\n\tint num,x,y,T;\n\tchar op[10];\n\tscanf (\"%d \",&T);\n\tfor (int i=1;i<=T;i++){\n\t\tprintf(\"Case %d:\\n\",i);\n\t\tscanf(\"%d \",&n);\n\t\tmemset(a,0,sizeof(int)*(n+1));\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tscanf (\"%d \",&num);\n\t\t\tupdate(i,num);\n\t\t}\n\t\twhile(1)\n\t\t{\n\t\t\tmemset(op,0,sizeof(op));\n\t\t\tscanf (\"%s\",&op);\n\t\t\tif (!strcmp(\"End\",op)) break;\n\t\t\telse if (strcmp(\"Add\",op)==0) {\n\t\t\t\tscanf(\"%d %d \",&x,&y);\n\t\t\t\tupdate(x,y);\n\t\t\t}\n\t\t\telse if (!strcmp(\"Sub\",op)) {\n\t\t\t\tscanf(\"%d %d \",&x,&y);\n\t\t\t\tupdate(x,-y);\n\t\t\t}\n\t\t\telse if (!strcmp(\"Query\",op)){\n\t\t\t\tscanf(\"%d %d \",&x,&y);\n\t\t\t\tprintf(\"%d\\n\",getsum(y)-getsum(x-1));\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\n## 区间修改&单点查询\n\n一组数据，要能够完成区间值加减和单点询问。\n### 思路\n因为只是单点查询，可以利用差分思想，记录与前一个数的差即可。区间修改不改变区间内差值，只需修改区间两边的值即可。树状数组即可解决。\n\n### 例题:[LUOGU3368](https://www.luogu.com.cn/problem/P3368)\n\n```cpp\n#include <bits/stdcpp.h>\nusing namespace std;\nint a[500010],n;\nint lowbit(int x)\t{\treturn x&(-x);}\nvoid update(int i,int val)\n{\n\twhile(i<=n){\n\t\ta[i]+=val;\n\t\ti+=lowbit(i);\n\t}\n}\nint getsum(int i)\n{\n\tint res=0;\n\twhile(i>0){\n\t\tres+=a[i];\n\t\ti-=lowbit(i);\n\t}\n\treturn res;\n}\nint main()\n{\n\tint m,k,num1=0,num2=0,op,x,y;\n\tscanf (\"%d%d\",&n,&m);\n\tfor (int i=1;i<=n;i++){\n\t\tscanf (\"%d\",&num1);\n\t\tupdate(i,num1-num2);\n\t\tnum2=num1;\n\t}\n\tfor (int i=1;i<=m;i++){\n\t\tscanf (\"%d\",&op);\n\t\tif (op==1) {\n\t\t\tscanf(\"%d %d %d\",&x,&y,&k);\n\t\t\tupdate(x,k);update(y+1,-k);\n\t\t}\n\t\telse if (op==2) {\n\t\t\tscanf(\"%d\",&x);\n\t\t\tprintf(\"%d\\n\",getsum(x));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\n## 区间修改&区间查询\n\n一组数据 , 要求能够区间修改和区间询问 . \n\n### 思路\n\n同时要完成两种操作 , 这样就只要维护两个树状数组就好了 . 一个差分数组 , 另一个是对差分数组进行求和的数组 . \n$$\n\\begin{aligned}\nSum(n)=\\sum_{i=1}^n a_i&=a_n+a_{n-1}+...+a_1\\\\&=(d_n+...+d_1)+(d_{n-1}+...+d_1)+...+d_1\\\\&=(n-(n-1))*d_n+(n-(n-2))*d_{n-1}+...+(n-0)*d_1\\\\&=n*\\sum_{i=1}^n d_i-\\sum_{i=1}^n d_i*(i-1)\n\\end{aligned}\n$$\n\n### 例题:[POJ3468](http://poj.org/problem?id=3468)\n\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\n\ntypedef long long ll;\nll a[100010],b[100010],N;\n\nll lowbit(ll x){\treturn x&(-x);}\n\nvoid update(ll i,ll val)\n{\n\tll x=i;\n\twhile(i<=N){\n\t\ta[i]+=val;\n\t\tb[i]+=(val*(x-1));\n\t\ti+=lowbit(i);\n\t}\n}\n\nll getsum(ll i)\n{\n\tll res=0,x=i;\n\twhile(i>0){\n\t\tres+=(a[i]*x-b[i]);\n\t\ti-=lowbit(i);\n\t}\n\treturn res;\n}\n\nint main()\n{\n\tll Q,num1,num2=0;\n\tscanf (\"%lld %lld\",&N,&Q);\n\tfor (int i=1;i<=N;i++){\n\t\tscanf (\"%lld\",&num1);\n\t\tupdate(i,num1-num2);\n\t\tnum2=num1;\n\t}e\n\tfor (int i=1;i<=Q;i++)\n\t{\n\t\tchar op=getchar();\n\t\tll x,y,k;\n\t\tif (op=='C') {\n\t\t\tscanf (\"%lld %lld %lld\",&x,&y,&k);\n\t\t\tupdate(x,k);\n\t\t\tupdate(y+1,-k);\n\t\t}\n\t\telse if (op=='Q') {\n\t\t\tscanf(\"%lld %lld\",&x,&y);\n\t\t\tprintf(\"%lld\\n\",getsum(y)-getsum(x-1));\n\t\t}\n\t\telse i--;\n\t}\n\treturn 0;\n}\n```\n","slug":"XCPC/BinaryIndexedTree","published":1,"updated":"2021-06-26T15:46:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujj001663jng6y61co8","content":"<p>树状数组是二进制的巧妙利用，可以完成区间求和的基本操作。他虽然功能不及线段树，但是易于编写。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"区间求和问题\"><a href=\"#区间求和问题\" class=\"headerlink\" title=\"区间求和问题\"></a>区间求和问题</h2><p>给定一组数据 , 可以进行两种操作 , 修改值和区间求和 . 最开始想法就是前缀和 , 这样的话求和复杂度是  O( 1 ) , 但是区间维护操作是 O(N) , 所以有没有更优秀的数据结构呢 . </p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>树状数组就是在数组上模拟树 , 对节点进行求和 . 树状数组利用了二进制的思想 , 使求和和维护的复杂度都在 O ( N*logN) .</p>\n<img src=\"https://p.130014.xyz/2020/11/30/treearray001.png\" style=\"zoom:80%;\" / loading=\"lazy\">\n\n<p>A数组就是原来的数 , 而C数组就是树状数组 . </p>\n<h3 id=\"Lowbit-函数\"><a href=\"#Lowbit-函数\" class=\"headerlink\" title=\"Lowbit 函数\"></a>Lowbit 函数</h3><p>树状数组的核心就是lowbit函数 , 如果不明所以 , 可以很快写出代码的 , 但我还是想折腾一下 . 首先lowbit求的就是要加几个数 , 而这个数一定是 2 的 k 次方 . 问题转化为k了 . 我们举几个例子:</p>\n<ul>\n<li>Sum6 , 6的二进制码为 110 . Sum6=C6+C4 .</li>\n<li>Sum7 , 7的二进制码为 111 . Sum7=C7+C6+C4</li>\n</ul>\n<p>其实不难看出 , 每一个C , 存的都是某个1代表的和 . 而每一次求和就是求每一个1代表数的和 . </p>\n<center>Sum5=C4+C5 5 : 101</center>\n\n<center>Sum6=C4+C6 6 : 110</center>\n\n<p>然后接下来就是找 k , 其实慢慢移动就太慢了 , 和位运算有关 , 那么就可以考滤位运算 . </p>\n<h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><center>lowbit(i)=x & (x^(x-1))</center>\n\n<p>考虑二进制 x-1 会导致最低位(即第k位) 1 以及之后的位数全部和之前相反 , 这样异或一下 , 就会使最低位 ( k 位) 以及比 k 低的位数全为 1 , 因为比 k 位高的位数全是 0 , 所以与操作后必为 0 , 加上第k位 , 是最低位 1 , 再低的位数就没有 1 了 , 所以除了 k 位以外全为 0 , 这个数就是 2<sup>k</sup> .</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><center>lowbit(x)=x&(-x)</center>\n\n<p>这个方法是最常用的 , 它利用了储存负数的机制 , 就是补码 . 补码就是反码加一 , 反码的每一位都和原来不同 . 而末尾的 0 就会变成 1 , 加上1 , 反码末尾的 1 变成 0 , 还把反码末尾第一个 0 变成 1 .这样第 k 位前仍然互为反码 , 第 k 位后 -x 全为零 , 第 k 位全为 1 .​</p>\n<h3 id=\"求和\"><a href=\"#求和\" class=\"headerlink\" title=\"求和\"></a>求和</h3><p>先讲求和对后面的建立数组的理解很有帮助。因为树状数组储存的是最后一位 1 代表的数字。加上所有 1 代表的数字就是答案了。<br>$$<br>Sum_i=C_i+C_{i-2^{k1}}+C_{i-2^{k1}-2^{k2}}+……<br>$$<br>​    代码如下 : </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        res<span class=\"token operator\">+=</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">-=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"维护和构建树状数组\"><a href=\"#维护和构建树状数组\" class=\"headerlink\" title=\"维护和构建树状数组\"></a>维护和构建树状数组</h3><p>根据求和规则，我们发现在 i 处的数包含于最低位1及之后的1上。例如：</p>\n<ul>\n<li>6(110)，那么就是6(110)，8(100)，16(1000)…</li>\n<li>9(1001)，9(1001)，10(1010)，12(1100)，16(1000)，32(10000)…<br>这里我引用一下百度百科的图，会更好理解。</li>\n</ul>\n<img src=\"https://p.130014.xyz/2020/12/01/F99344C7-C642-4AE8-B42E-02F2DDBBBD94.png\" style=\"zoom:80%;\" / loading=\"lazy\">\n\n<p>代码如下 :</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>val<span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">+=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"例题-HDU1166\"><a href=\"#例题-HDU1166\" class=\"headerlink\" title=\"例题:HDU1166\"></a>例题:<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1166\">HDU1166</a></h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">50010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>val<span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">+=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">-=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>T<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>T<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Case %d:\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End\"</span><span class=\"token punctuation\">,</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Add\"</span><span class=\"token punctuation\">,</span>op<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sub\"</span><span class=\"token punctuation\">,</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Query\"</span><span class=\"token punctuation\">,</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"区间修改-amp-单点查询\"><a href=\"#区间修改-amp-单点查询\" class=\"headerlink\" title=\"区间修改&amp;单点查询\"></a>区间修改&amp;单点查询</h2><p>一组数据，要能够完成区间值加减和单点询问。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>因为只是单点查询，可以利用差分思想，记录与前一个数的差即可。区间修改不改变区间内差值，只需修改区间两边的值即可。树状数组即可解决。</p>\n<h3 id=\"例题-LUOGU3368\"><a href=\"#例题-LUOGU3368\" class=\"headerlink\" title=\"例题:LUOGU3368\"></a>例题:<a href=\"https://www.luogu.com.cn/problem/P3368\">LUOGU3368</a></h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdcpp.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">500010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">&#123;</span>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>val<span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">+=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">-=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>num1<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>num2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>op<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>num1<span class=\"token operator\">-</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnum2<span class=\"token operator\">=</span>num1<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"区间修改-amp-区间查询\"><a href=\"#区间修改-amp-区间查询\" class=\"headerlink\" title=\"区间修改&amp;区间查询\"></a>区间修改&amp;区间查询</h2><p>一组数据 , 要求能够区间修改和区间询问 . </p>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>同时要完成两种操作 , 这样就只要维护两个树状数组就好了 . 一个差分数组 , 另一个是对差分数组进行求和的数组 .<br>$$<br>\\begin{aligned}<br>Sum(n)=\\sum_{i=1}^n a_i&amp;=a_n+a_{n-1}+…+a_1\\&amp;=(d_n+…+d_1)+(d_{n-1}+…+d_1)+…+d_1\\&amp;=(n-(n-1))*d_n+(n-(n-2))<em>d_{n-1}+…+(n-0)<em>d_1\\&amp;=n</em>\\sum_{i=1}^n d_i-\\sum_{i=1}^n d_i</em>(i-1)<br>\\end{aligned}<br>$$</p>\n<h3 id=\"例题-POJ3468\"><a href=\"#例题-POJ3468\" class=\"headerlink\" title=\"例题:POJ3468\"></a>例题:<a href=\"http://poj.org/problem?id=3468\">POJ3468</a></h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nll a<span class=\"token punctuation\">[</span><span class=\"token number\">100010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">100010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">;</span>\n\nll <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>ll i<span class=\"token punctuation\">,</span>ll val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll x<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>val<span class=\"token punctuation\">;</span>\n\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">+=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>ll i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>x<span class=\"token operator\">-</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">-=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll Q<span class=\"token punctuation\">,</span>num1<span class=\"token punctuation\">,</span>num2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>num1<span class=\"token operator\">-</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnum2<span class=\"token operator\">=</span>num1<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>e\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>Q<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">char</span> op<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tll x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token string\">'Q'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>树状数组是二进制的巧妙利用，可以完成区间求和的基本操作。他虽然功能不及线段树，但是易于编写。</p>","more":"<h2 id=\"区间求和问题\"><a href=\"#区间求和问题\" class=\"headerlink\" title=\"区间求和问题\"></a>区间求和问题</h2><p>给定一组数据 , 可以进行两种操作 , 修改值和区间求和 . 最开始想法就是前缀和 , 这样的话求和复杂度是  O( 1 ) , 但是区间维护操作是 O(N) , 所以有没有更优秀的数据结构呢 . </p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>树状数组就是在数组上模拟树 , 对节点进行求和 . 树状数组利用了二进制的思想 , 使求和和维护的复杂度都在 O ( N*logN) .</p>\n<img src=\"https://p.130014.xyz/2020/11/30/treearray001.png\" style=\"zoom:80%;\" />\n\n<p>A数组就是原来的数 , 而C数组就是树状数组 . </p>\n<h3 id=\"Lowbit-函数\"><a href=\"#Lowbit-函数\" class=\"headerlink\" title=\"Lowbit 函数\"></a>Lowbit 函数</h3><p>树状数组的核心就是lowbit函数 , 如果不明所以 , 可以很快写出代码的 , 但我还是想折腾一下 . 首先lowbit求的就是要加几个数 , 而这个数一定是 2 的 k 次方 . 问题转化为k了 . 我们举几个例子:</p>\n<ul>\n<li>Sum6 , 6的二进制码为 110 . Sum6=C6+C4 .</li>\n<li>Sum7 , 7的二进制码为 111 . Sum7=C7+C6+C4</li>\n</ul>\n<p>其实不难看出 , 每一个C , 存的都是某个1代表的和 . 而每一次求和就是求每一个1代表数的和 . </p>\n<center>Sum5=C4+C5 5 : 101</center>\n\n<center>Sum6=C4+C6 6 : 110</center>\n\n<p>然后接下来就是找 k , 其实慢慢移动就太慢了 , 和位运算有关 , 那么就可以考滤位运算 . </p>\n<h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><center>lowbit(i)=x & (x^(x-1))</center>\n\n<p>考虑二进制 x-1 会导致最低位(即第k位) 1 以及之后的位数全部和之前相反 , 这样异或一下 , 就会使最低位 ( k 位) 以及比 k 低的位数全为 1 , 因为比 k 位高的位数全是 0 , 所以与操作后必为 0 , 加上第k位 , 是最低位 1 , 再低的位数就没有 1 了 , 所以除了 k 位以外全为 0 , 这个数就是 2<sup>k</sup> .</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><center>lowbit(x)=x&(-x)</center>\n\n<p>这个方法是最常用的 , 它利用了储存负数的机制 , 就是补码 . 补码就是反码加一 , 反码的每一位都和原来不同 . 而末尾的 0 就会变成 1 , 加上1 , 反码末尾的 1 变成 0 , 还把反码末尾第一个 0 变成 1 .这样第 k 位前仍然互为反码 , 第 k 位后 -x 全为零 , 第 k 位全为 1 .​</p>\n<h3 id=\"求和\"><a href=\"#求和\" class=\"headerlink\" title=\"求和\"></a>求和</h3><p>先讲求和对后面的建立数组的理解很有帮助。因为树状数组储存的是最后一位 1 代表的数字。加上所有 1 代表的数字就是答案了。<br>$$<br>Sum_i=C_i+C_{i-2^{k1}}+C_{i-2^{k1}-2^{k2}}+……<br>$$<br>​    代码如下 : </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        res<span class=\"token operator\">+=</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">-=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"维护和构建树状数组\"><a href=\"#维护和构建树状数组\" class=\"headerlink\" title=\"维护和构建树状数组\"></a>维护和构建树状数组</h3><p>根据求和规则，我们发现在 i 处的数包含于最低位1及之后的1上。例如：</p>\n<ul>\n<li>6(110)，那么就是6(110)，8(100)，16(1000)…</li>\n<li>9(1001)，9(1001)，10(1010)，12(1100)，16(1000)，32(10000)…<br>这里我引用一下百度百科的图，会更好理解。</li>\n</ul>\n<img src=\"https://p.130014.xyz/2020/12/01/F99344C7-C642-4AE8-B42E-02F2DDBBBD94.png\" style=\"zoom:80%;\" />\n\n<p>代码如下 :</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>val<span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">+=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"例题-HDU1166\"><a href=\"#例题-HDU1166\" class=\"headerlink\" title=\"例题:HDU1166\"></a>例题:<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1166\">HDU1166</a></h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">50010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>val<span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">+=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">-=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>T<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>T<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Case %d:\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End\"</span><span class=\"token punctuation\">,</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Add\"</span><span class=\"token punctuation\">,</span>op<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sub\"</span><span class=\"token punctuation\">,</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Query\"</span><span class=\"token punctuation\">,</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"区间修改-amp-单点查询\"><a href=\"#区间修改-amp-单点查询\" class=\"headerlink\" title=\"区间修改&amp;单点查询\"></a>区间修改&amp;单点查询</h2><p>一组数据，要能够完成区间值加减和单点询问。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>因为只是单点查询，可以利用差分思想，记录与前一个数的差即可。区间修改不改变区间内差值，只需修改区间两边的值即可。树状数组即可解决。</p>\n<h3 id=\"例题-LUOGU3368\"><a href=\"#例题-LUOGU3368\" class=\"headerlink\" title=\"例题:LUOGU3368\"></a>例题:<a href=\"https://www.luogu.com.cn/problem/P3368\">LUOGU3368</a></h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdcpp.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">500010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">&#123;</span>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>val<span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">+=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">-=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>num1<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>num2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>op<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>num1<span class=\"token operator\">-</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnum2<span class=\"token operator\">=</span>num1<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"区间修改-amp-区间查询\"><a href=\"#区间修改-amp-区间查询\" class=\"headerlink\" title=\"区间修改&amp;区间查询\"></a>区间修改&amp;区间查询</h2><p>一组数据 , 要求能够区间修改和区间询问 . </p>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>同时要完成两种操作 , 这样就只要维护两个树状数组就好了 . 一个差分数组 , 另一个是对差分数组进行求和的数组 .<br>$$<br>\\begin{aligned}<br>Sum(n)=\\sum_{i=1}^n a_i&amp;=a_n+a_{n-1}+…+a_1\\&amp;=(d_n+…+d_1)+(d_{n-1}+…+d_1)+…+d_1\\&amp;=(n-(n-1))*d_n+(n-(n-2))<em>d_{n-1}+…+(n-0)<em>d_1\\&amp;=n</em>\\sum_{i=1}^n d_i-\\sum_{i=1}^n d_i</em>(i-1)<br>\\end{aligned}<br>$$</p>\n<h3 id=\"例题-POJ3468\"><a href=\"#例题-POJ3468\" class=\"headerlink\" title=\"例题:POJ3468\"></a>例题:<a href=\"http://poj.org/problem?id=3468\">POJ3468</a></h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nll a<span class=\"token punctuation\">[</span><span class=\"token number\">100010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">100010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">;</span>\n\nll <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>ll i<span class=\"token punctuation\">,</span>ll val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll x<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>val<span class=\"token punctuation\">;</span>\n\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">+=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>ll i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>x<span class=\"token operator\">-</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">-=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll Q<span class=\"token punctuation\">,</span>num1<span class=\"token punctuation\">,</span>num2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>num1<span class=\"token operator\">-</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnum2<span class=\"token operator\">=</span>num1<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>e\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>Q<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">char</span> op<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tll x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token string\">'Q'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"Codeforces Round 684 (Div.2)","date":"2020-11-18T14:44:13.000Z","_content":"\n## A. Buy the String\n\n签到题，滴。给定条件就可以知道换到底划不划算，然后求和。\n\n### Code\n\n```cpp\n#define AWSL <bits/stdc++.h>\n#define awei_sine using namespace std\n#include AWSL\nawei_sine;\n\nint main()\n{\n\tint t,c0,c1,h,n,ans;\n\tchar ch;\n\tcin>>t;\n\twhile (t--) {\n\t\tans=0;\n\t\tscanf (\"%d %d %d %d \",&n,&c0,&c1,&h);\n\t\tif (c0>=c1+h) c0=c1+h;\n\t\telse if (c1>=c0+h) c1=c0+h;\n\t\tfor (int i=0;i<n;i++){\n\t\t\tch=getchar();\n\t\t\tif (ch=='0') ans+=c0;\n\t\t\telse ans+=c1;\n\t\t}\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}\n```\n\n## B. Sum of Medians\n\n先算出中位数在第几位，把前几位用小的数填满。后面就先优先填写每个数组，这样下个数组的中位数就尽量的大了。其实看样例推一下就出来了，然后我却一直空想，托了好久。\n\n### Code\n\n```cpp\n#define AWSL <bits/stdc++.h>\n#define awei_sine using namespace std\n#include AWSL\nawei_sine;\n\nll s[200005];\n\nint main()\n{\n\tll t,n,k;\n\tcin>>t;\n\twhile (t--){\n\t\tll N,mid,cnt=0,ans=0;\n\t\tscanf (\"%lld %lld\",&n,&k);\n\t\tN=n*k;\n\t\tmid=(n%2)?n/2+1:n/2;\n\t\tfor (int i=0;i<N;i++){\n\t\t\tscanf (\"%lld\",&s[i]);\n\t\t}\n\t\tfor (int i=k*(mid-1);i<N;i+=(n-mid+1)) {\n\t\t\tans+=s[i];\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n\n## C. Binary Table (Easy&Hard Version)\n\n啪地一下上来，很快阿，因为上一道题太久，心想要快点A掉，明显是有备而来。\n\n我就想，3mn这么巧的限制，我就把每个点跑一遍，不就好了吗，看到当时只有1000+A了，有点慌，但我这写代码能力真的菜！<div class='heimu'>就算是赛后打，debug也搞了一晚上，菜！</div>\n\n比较特殊的是最后两行要同时处理，把 1 ～ m-1 列全部化为0，剩下 m 列 n-1 行和 m 列 n 行 两个数。就三种情况，用 if 写好就行了。\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\nint ans[20005][6],top=0;\nbool s[110][110];\n\nvoid prians(int a,int b,int c,int d,int e,int f)\n{\n        ans[top][0]=a;\n        ans[top][1]=b;\n        ans[top][2]=c;\n        ans[top][3]=d;\n        ans[top][4]=e;\n        ans[top][5]=f;\n        s[a][b]=!s[a][b];\n        s[c][d]=!s[c][d];\n        s[e][f]=!s[e][f];\n        top++;\n        return ;\n}\n\nint main()\n{\n        int n,m,t;\n        scanf (\"%d\",&t);\n        while (t--){\n                top=0;\n                scanf (\"%d %d \",&n,&m);\n                for (int i=1;i<=n;i++){\n                        for (int j=1;j<=m;j++){\n                                scanf(\"%1d\",&s[i][j]);\n                        }\n                }\n                for (int i=1;i<n-1;i++){\n                        for (int j=1;j<m;j++){\n                                if (s[i][j]) prians(i,j,i+1,j,i+1,j+1);\n                        }\n                        if (s[i][m]) prians(i,m,i+1,m-1,i+1,m);\n                }\n                for (int i=1;i<m;i++){\n                        if (s[n-1][i]==0 && s[n][i]==1) prians(n,i,n,i+1,n-1,i+1);\n                        else if (s[n-1][i]==1 && s[n][i]==0) prians(n-1,i,n,i+1,n-1,i+1);\n                        else if (s[n-1][i]==1 && s[n][i]==1) prians(n-1,i,n,i,n-1,i+1);\n                }\n                if (s[n-1][m] && s[n][m]){\n                        prians(n-1,m-1,n,m-1,n,m);\n                        prians(n-1,m-1,n,m-1,n-1,m);\n                }\n                else if (!s[n-1][m] && !s[n][m]) ;\n                else if (!s[n-1][m]){\n                        prians(n-1,m,n,m-1,n,m);\n                        prians(n-1,m-1,n-1,m,n,m);\n                        prians(n-1,m-1,n,m-1,n,m);\n                }\n                else if (!s[n][m]){\n                        prians(n-1,m-1,n-1,m,n,m);\n                        prians(n-1,m-1,n-1,m,n,m-1);\n                        prians(n-1,m,n,m-1,n,m);\n                }\n            \tprintf(\"%d\\n\",top);\n                for (int i=0;i<top;i++){\n                        for (int j=0;j<6;j++) printf(\"%d \",ans[i][j]);\n                        putchar('\\n');\n                }\n        }\n        return 0;\n}\n```\n\n\n\n## 总结\n\n就能力来说，我觉得 ABC 是没问题的，但是总是会出问题。希望早日上分吧，每次就几十几十，没有出路。","source":"_posts/XCPC/CF1440_R684.md","raw":"---\ntitle: Codeforces Round 684 (Div.2)\ndate: 2020-11-18 22:44:13\ncategories:\n\t- ICPC Programming Contest\ntags:\n\t- 暴力枚举\n\t- 贪心\n---\n\n## A. Buy the String\n\n签到题，滴。给定条件就可以知道换到底划不划算，然后求和。\n\n### Code\n\n```cpp\n#define AWSL <bits/stdc++.h>\n#define awei_sine using namespace std\n#include AWSL\nawei_sine;\n\nint main()\n{\n\tint t,c0,c1,h,n,ans;\n\tchar ch;\n\tcin>>t;\n\twhile (t--) {\n\t\tans=0;\n\t\tscanf (\"%d %d %d %d \",&n,&c0,&c1,&h);\n\t\tif (c0>=c1+h) c0=c1+h;\n\t\telse if (c1>=c0+h) c1=c0+h;\n\t\tfor (int i=0;i<n;i++){\n\t\t\tch=getchar();\n\t\t\tif (ch=='0') ans+=c0;\n\t\t\telse ans+=c1;\n\t\t}\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}\n```\n\n## B. Sum of Medians\n\n先算出中位数在第几位，把前几位用小的数填满。后面就先优先填写每个数组，这样下个数组的中位数就尽量的大了。其实看样例推一下就出来了，然后我却一直空想，托了好久。\n\n### Code\n\n```cpp\n#define AWSL <bits/stdc++.h>\n#define awei_sine using namespace std\n#include AWSL\nawei_sine;\n\nll s[200005];\n\nint main()\n{\n\tll t,n,k;\n\tcin>>t;\n\twhile (t--){\n\t\tll N,mid,cnt=0,ans=0;\n\t\tscanf (\"%lld %lld\",&n,&k);\n\t\tN=n*k;\n\t\tmid=(n%2)?n/2+1:n/2;\n\t\tfor (int i=0;i<N;i++){\n\t\t\tscanf (\"%lld\",&s[i]);\n\t\t}\n\t\tfor (int i=k*(mid-1);i<N;i+=(n-mid+1)) {\n\t\t\tans+=s[i];\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n\n## C. Binary Table (Easy&Hard Version)\n\n啪地一下上来，很快阿，因为上一道题太久，心想要快点A掉，明显是有备而来。\n\n我就想，3mn这么巧的限制，我就把每个点跑一遍，不就好了吗，看到当时只有1000+A了，有点慌，但我这写代码能力真的菜！<div class='heimu'>就算是赛后打，debug也搞了一晚上，菜！</div>\n\n比较特殊的是最后两行要同时处理，把 1 ～ m-1 列全部化为0，剩下 m 列 n-1 行和 m 列 n 行 两个数。就三种情况，用 if 写好就行了。\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\nint ans[20005][6],top=0;\nbool s[110][110];\n\nvoid prians(int a,int b,int c,int d,int e,int f)\n{\n        ans[top][0]=a;\n        ans[top][1]=b;\n        ans[top][2]=c;\n        ans[top][3]=d;\n        ans[top][4]=e;\n        ans[top][5]=f;\n        s[a][b]=!s[a][b];\n        s[c][d]=!s[c][d];\n        s[e][f]=!s[e][f];\n        top++;\n        return ;\n}\n\nint main()\n{\n        int n,m,t;\n        scanf (\"%d\",&t);\n        while (t--){\n                top=0;\n                scanf (\"%d %d \",&n,&m);\n                for (int i=1;i<=n;i++){\n                        for (int j=1;j<=m;j++){\n                                scanf(\"%1d\",&s[i][j]);\n                        }\n                }\n                for (int i=1;i<n-1;i++){\n                        for (int j=1;j<m;j++){\n                                if (s[i][j]) prians(i,j,i+1,j,i+1,j+1);\n                        }\n                        if (s[i][m]) prians(i,m,i+1,m-1,i+1,m);\n                }\n                for (int i=1;i<m;i++){\n                        if (s[n-1][i]==0 && s[n][i]==1) prians(n,i,n,i+1,n-1,i+1);\n                        else if (s[n-1][i]==1 && s[n][i]==0) prians(n-1,i,n,i+1,n-1,i+1);\n                        else if (s[n-1][i]==1 && s[n][i]==1) prians(n-1,i,n,i,n-1,i+1);\n                }\n                if (s[n-1][m] && s[n][m]){\n                        prians(n-1,m-1,n,m-1,n,m);\n                        prians(n-1,m-1,n,m-1,n-1,m);\n                }\n                else if (!s[n-1][m] && !s[n][m]) ;\n                else if (!s[n-1][m]){\n                        prians(n-1,m,n,m-1,n,m);\n                        prians(n-1,m-1,n-1,m,n,m);\n                        prians(n-1,m-1,n,m-1,n,m);\n                }\n                else if (!s[n][m]){\n                        prians(n-1,m-1,n-1,m,n,m);\n                        prians(n-1,m-1,n-1,m,n,m-1);\n                        prians(n-1,m,n,m-1,n,m);\n                }\n            \tprintf(\"%d\\n\",top);\n                for (int i=0;i<top;i++){\n                        for (int j=0;j<6;j++) printf(\"%d \",ans[i][j]);\n                        putchar('\\n');\n                }\n        }\n        return 0;\n}\n```\n\n\n\n## 总结\n\n就能力来说，我觉得 ABC 是没问题的，但是总是会出问题。希望早日上分吧，每次就几十几十，没有出路。","slug":"XCPC/CF1440_R684","published":1,"updated":"2021-06-26T15:35:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujl001a63jn24ptc96m","content":"<h2 id=\"A-Buy-the-String\"><a href=\"#A-Buy-the-String\" class=\"headerlink\" title=\"A. Buy the String\"></a>A. Buy the String</h2><p>签到题，滴。给定条件就可以知道换到底划不划算，然后求和。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">AWSL</span> <span class=\"token expression\"><span class=\"token operator\">&lt;</span>bits<span class=\"token operator\">/</span>stdc<span class=\"token operator\">++</span><span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">awei_sine</span> <span class=\"token expression\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token expression\">AWSL</span></span>\nawei_sine<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>c0<span class=\"token punctuation\">,</span>c1<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c0<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c0<span class=\"token operator\">>=</span>c1<span class=\"token operator\">+</span>h<span class=\"token punctuation\">)</span> c0<span class=\"token operator\">=</span>c1<span class=\"token operator\">+</span>h<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1<span class=\"token operator\">>=</span>c0<span class=\"token operator\">+</span>h<span class=\"token punctuation\">)</span> c1<span class=\"token operator\">=</span>c0<span class=\"token operator\">+</span>h<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tch<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> ans<span class=\"token operator\">+=</span>c0<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> ans<span class=\"token operator\">+=</span>c1<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Sum-of-Medians\"><a href=\"#B-Sum-of-Medians\" class=\"headerlink\" title=\"B. Sum of Medians\"></a>B. Sum of Medians</h2><p>先算出中位数在第几位，把前几位用小的数填满。后面就先优先填写每个数组，这样下个数组的中位数就尽量的大了。其实看样例推一下就出来了，然后我却一直空想，托了好久。</p>\n<h3 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">AWSL</span> <span class=\"token expression\"><span class=\"token operator\">&lt;</span>bits<span class=\"token operator\">/</span>stdc<span class=\"token operator\">++</span><span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">awei_sine</span> <span class=\"token expression\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token expression\">AWSL</span></span>\nawei_sine<span class=\"token punctuation\">;</span>\n\nll s<span class=\"token punctuation\">[</span><span class=\"token number\">200005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tll N<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tN<span class=\"token operator\">=</span>n<span class=\"token operator\">*</span>k<span class=\"token punctuation\">;</span>\n\t\tmid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">:</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>k<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tans<span class=\"token operator\">+=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-Binary-Table-Easy-amp-Hard-Version\"><a href=\"#C-Binary-Table-Easy-amp-Hard-Version\" class=\"headerlink\" title=\"C. Binary Table (Easy&amp;Hard Version)\"></a>C. Binary Table (Easy&amp;Hard Version)</h2><p>啪地一下上来，很快阿，因为上一道题太久，心想要快点A掉，明显是有备而来。</p>\n<p>我就想，3mn这么巧的限制，我就把每个点跑一遍，不就好了吗，看到当时只有1000+A了，有点慌，但我这写代码能力真的菜！<div class='heimu'>就算是赛后打，debug也搞了一晚上，菜！</div></p>\n<p>比较特殊的是最后两行要同时处理，把 1 ～ m-1 列全部化为0，剩下 m 列 n-1 行和 m 列 n 行 两个数。就三种情况，用 if 写好就行了。</p>\n<h3 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">[</span><span class=\"token number\">20005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>top<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span>\n        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>d<span class=\"token punctuation\">;</span>\n        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                top<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                                <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>top<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>就能力来说，我觉得 ABC 是没问题的，但是总是会出问题。希望早日上分吧，每次就几十几十，没有出路。</p>\n","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":"<h2 id=\"A-Buy-the-String\"><a href=\"#A-Buy-the-String\" class=\"headerlink\" title=\"A. Buy the String\"></a>A. Buy the String</h2><p>签到题，滴。给定条件就可以知道换到底划不划算，然后求和。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">AWSL</span> <span class=\"token expression\"><span class=\"token operator\">&lt;</span>bits<span class=\"token operator\">/</span>stdc<span class=\"token operator\">++</span><span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">awei_sine</span> <span class=\"token expression\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token expression\">AWSL</span></span>\nawei_sine<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>c0<span class=\"token punctuation\">,</span>c1<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c0<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c0<span class=\"token operator\">>=</span>c1<span class=\"token operator\">+</span>h<span class=\"token punctuation\">)</span> c0<span class=\"token operator\">=</span>c1<span class=\"token operator\">+</span>h<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1<span class=\"token operator\">>=</span>c0<span class=\"token operator\">+</span>h<span class=\"token punctuation\">)</span> c1<span class=\"token operator\">=</span>c0<span class=\"token operator\">+</span>h<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tch<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> ans<span class=\"token operator\">+=</span>c0<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> ans<span class=\"token operator\">+=</span>c1<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Sum-of-Medians\"><a href=\"#B-Sum-of-Medians\" class=\"headerlink\" title=\"B. Sum of Medians\"></a>B. Sum of Medians</h2><p>先算出中位数在第几位，把前几位用小的数填满。后面就先优先填写每个数组，这样下个数组的中位数就尽量的大了。其实看样例推一下就出来了，然后我却一直空想，托了好久。</p>\n<h3 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">AWSL</span> <span class=\"token expression\"><span class=\"token operator\">&lt;</span>bits<span class=\"token operator\">/</span>stdc<span class=\"token operator\">++</span><span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">awei_sine</span> <span class=\"token expression\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token expression\">AWSL</span></span>\nawei_sine<span class=\"token punctuation\">;</span>\n\nll s<span class=\"token punctuation\">[</span><span class=\"token number\">200005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tll N<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tN<span class=\"token operator\">=</span>n<span class=\"token operator\">*</span>k<span class=\"token punctuation\">;</span>\n\t\tmid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">:</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>k<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tans<span class=\"token operator\">+=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-Binary-Table-Easy-amp-Hard-Version\"><a href=\"#C-Binary-Table-Easy-amp-Hard-Version\" class=\"headerlink\" title=\"C. Binary Table (Easy&amp;Hard Version)\"></a>C. Binary Table (Easy&amp;Hard Version)</h2><p>啪地一下上来，很快阿，因为上一道题太久，心想要快点A掉，明显是有备而来。</p>\n<p>我就想，3mn这么巧的限制，我就把每个点跑一遍，不就好了吗，看到当时只有1000+A了，有点慌，但我这写代码能力真的菜！<div class='heimu'>就算是赛后打，debug也搞了一晚上，菜！</div></p>\n<p>比较特殊的是最后两行要同时处理，把 1 ～ m-1 列全部化为0，剩下 m 列 n-1 行和 m 列 n 行 两个数。就三种情况，用 if 写好就行了。</p>\n<h3 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">int</span> ans<span class=\"token punctuation\">[</span><span class=\"token number\">20005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>top<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span>\n        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>d<span class=\"token punctuation\">;</span>\n        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n        ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                top<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                                <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">prians</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>top<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>就能力来说，我觉得 ABC 是没问题的，但是总是会出问题。希望早日上分吧，每次就几十几十，没有出路。</p>\n"},{"title":"Codeforces Round 685 (Div. 2)","date":"2020-11-24T11:56:25.000Z","katex":true,"_content":"\n## A. Subtract or Divide\n\n### 题目大意\n\n​\t给一个数 , 每次操作可以减 1 或者除以除本身外的因子.问最少几次操作后可以变为 1 .\n\n### Solution\n\n​\t好水的题 , 尽管我没AC掉 . <span class=\"heimu\" title=\"你知道的太多了\">我菜爆了 . </span>偶数的话 , 除一次就是 2 了 , 再减一下就是 1 了 . 奇数减 1 就是偶数了 .当然 , 1 , 2 , 3 单独处理.\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int t,num;\n    scanf (\"%d\",&t);\n    while (t--)\n    {\n        scanf (\"%d\",&num);\n        if (num==1) cout<<0<<endl;\n        else if (num==2) cout<<1<<endl;\n        else if (num==3) cout<<2<<endl;\n        else if (num%2==0) cout<<2<<endl;\n        else cout<<3<<endl;\n    }\n    return 0;\n}\n```\n\n## B. Non-Substring Subsequence\n\n### 题目大意\n\n​\t给一个 01 字符串 . 每次询问一个连续字串 , 问是否有一个字串 (可不连续) 与之相同 . \n\n### Solution\n\n​\t还是水的 , 只要 给定区间的第一个字母不是第一次出现 或 给定区间的最后一个字母不是最后一次出现 即可 . 因为这样就可以换一个字母得到字串.\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nchar c[110];\nint main()\n{\n\tint t,q,n,l,r;\n\tbool flag;\n\tscanf (\"%d\",&t);\n\twhile (t--)\n\t{\n\t\tflag=false;\n\t\tscanf (\"%d %d \",&n,&q);\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tscanf(\"%c\",&c[i]);\n\t\t}\n\t\tfor (int i=1;i<=q;i++){\n\t\t\tflag=false;\n\t\t\tscanf(\"%d %d\",&l,&r);\t\t\n\t\t\tfor (int i=1;i<l;i++){\n\t\t\t\tif (c[i]==c[l]) {\n\t\t\t\t\tflag=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i=r+1; i<=n && !flag;i++){\n\t\t\t\tif (c[i]==c[r]) {\n\t\t\t\t\tflag=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) cout << \"YES\" << endl;\n\t\t\telse cout<<\"NO\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\n两道题都是转一下弯就可以做出来了 . 这就是临场问题了 , 首先可能状态不好 , 搞了一下午数模 , 而且一急<span class='heimu'>  想到掉分</span>天都塌了 ! 所以写不出来还是不要看 AC 人数了 . \n\n## C. String Equality\n\n### 题目大意\n\n​\t给一个只有小写字母字符串 , 可以进行以下操作 , 交换相邻元素 和 对 k 个相同元素都 +1 (z除外) . 问能不能变成目标字符串.\n\n### Solution\n\n​\t赛后写的 , 就几分钟就出来了...思路是统计字母个数 , 因为可交换且不计次数 , 直接升序排列方便处理 ,因为后面的字母可以由前面变来 .\n\n- 字符数量相等 , 无需操作.\n- 如果字符数大于目标字符串 , 考虑让若干 k 个字符 +1 ,尝试使当前字符数与目标相同 , 如果失败就不可能变换成目标字符串了.\n- 循环从 'a' 到 'y' ,全符合就成功了\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint a[30],b[30];\nint main()\n{\n\tint t,n,k;\tchar ch;\tbool flag;\n\tscanf (\"%d\",&t);\n\twhile (t--){\n\t\tmemset(a,0,sizeof(a));\n\t\tmemset(b,0,sizeof(b));\n\t\tflag=true;\n\t\tscanf (\"%d %d \",&n,&k);\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tscanf(\"%c\",&ch);\n\t\t\t++a[ch-'a'];\n\t\t}\n\t\tgetchar();\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tscanf(\"%c\",&ch);\n\t\t\t++b[ch-'a'];\n\t\t}\n\t\tfor(int i=0;i<25 && flag;i++){\n\t\t   if (a[i]==b[i]) continue;\n\t\t   else if (a[i]<b[i]) flag=false;\n\t\t   else if ((a[i]-b[i])%k==0) a[i+1]+=(a[i]-b[i]);\n\t\t   else flag=false;\n\t\t}\n\t\tcout<<(flag?\"Yes\":\"No\")<<endl;\n\t}\n\treturn 0;\n}\n```\n\n## D. Circle Game\n\n### 题目大意\n\n给一个圆的半径和一个整数 k . Ashish 和 Utkarsh 轮流移动在 ( 0 , 0 ) 的棋子 , 每次只能向上或右走 k 步 . 先走出圆判负 . \n\n### Solution\n\n一开始是想从外围逼近 , 推回到 ( 0 , 0 ) 就行 . 但是复杂度 *O ( N<sup>2</sup>)* , 对数据 1e5 来说太慢了 .所以正解是 , 在 y=x 线上有一个可达点最靠近圆的边缘 , 记为 ( kz , kz) .如果 ( kz , k(z+1) ) 在界外 , 则先手负 . 反之后手负 .\n\n可能有疑问 ( kz , k(z+2) ) 呢 . 下面给证明 : \n\n$$\nd^2 < (k+1) ^ 2 + (k+1) ^ 2 = 2k ^ 2+ 4k + 2 < 2k ^ 2 + 4k + 4 = (k+2) ^ 2 + k ^ 2\n$$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tlong long t,d,k,num;\n\tscanf (\"%lld\",&t);\n\twhile (t--){\n\t\tscanf (\"%lld %lld\",&d,&k);\n\t\tfor ( num=k ; 2*num*num <= d*d ;num+=k );\n\t\tnum-=k;\n\t\tif ( num*num+(num+k)*(num+k)>d*d ) printf(\"Utkarsh\\n\");\n\t\telse printf(\"Ashish\\n\");\t\n\t}\n\treturn 0;\n}\n```\n\n","source":"_posts/XCPC/CF1451_R685.md","raw":"---\ntitle: Codeforces Round 685 (Div. 2)\ndate: 2020-11-24 19:56:25\ncategories:\n\t- ICPC Programming Contest\ntags:\n\t- 贪心\n\t- 字符串\n\t- 平面几何\nkatex: true\n---\n\n## A. Subtract or Divide\n\n### 题目大意\n\n​\t给一个数 , 每次操作可以减 1 或者除以除本身外的因子.问最少几次操作后可以变为 1 .\n\n### Solution\n\n​\t好水的题 , 尽管我没AC掉 . <span class=\"heimu\" title=\"你知道的太多了\">我菜爆了 . </span>偶数的话 , 除一次就是 2 了 , 再减一下就是 1 了 . 奇数减 1 就是偶数了 .当然 , 1 , 2 , 3 单独处理.\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int t,num;\n    scanf (\"%d\",&t);\n    while (t--)\n    {\n        scanf (\"%d\",&num);\n        if (num==1) cout<<0<<endl;\n        else if (num==2) cout<<1<<endl;\n        else if (num==3) cout<<2<<endl;\n        else if (num%2==0) cout<<2<<endl;\n        else cout<<3<<endl;\n    }\n    return 0;\n}\n```\n\n## B. Non-Substring Subsequence\n\n### 题目大意\n\n​\t给一个 01 字符串 . 每次询问一个连续字串 , 问是否有一个字串 (可不连续) 与之相同 . \n\n### Solution\n\n​\t还是水的 , 只要 给定区间的第一个字母不是第一次出现 或 给定区间的最后一个字母不是最后一次出现 即可 . 因为这样就可以换一个字母得到字串.\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nchar c[110];\nint main()\n{\n\tint t,q,n,l,r;\n\tbool flag;\n\tscanf (\"%d\",&t);\n\twhile (t--)\n\t{\n\t\tflag=false;\n\t\tscanf (\"%d %d \",&n,&q);\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tscanf(\"%c\",&c[i]);\n\t\t}\n\t\tfor (int i=1;i<=q;i++){\n\t\t\tflag=false;\n\t\t\tscanf(\"%d %d\",&l,&r);\t\t\n\t\t\tfor (int i=1;i<l;i++){\n\t\t\t\tif (c[i]==c[l]) {\n\t\t\t\t\tflag=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i=r+1; i<=n && !flag;i++){\n\t\t\t\tif (c[i]==c[r]) {\n\t\t\t\t\tflag=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) cout << \"YES\" << endl;\n\t\t\telse cout<<\"NO\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\n两道题都是转一下弯就可以做出来了 . 这就是临场问题了 , 首先可能状态不好 , 搞了一下午数模 , 而且一急<span class='heimu'>  想到掉分</span>天都塌了 ! 所以写不出来还是不要看 AC 人数了 . \n\n## C. String Equality\n\n### 题目大意\n\n​\t给一个只有小写字母字符串 , 可以进行以下操作 , 交换相邻元素 和 对 k 个相同元素都 +1 (z除外) . 问能不能变成目标字符串.\n\n### Solution\n\n​\t赛后写的 , 就几分钟就出来了...思路是统计字母个数 , 因为可交换且不计次数 , 直接升序排列方便处理 ,因为后面的字母可以由前面变来 .\n\n- 字符数量相等 , 无需操作.\n- 如果字符数大于目标字符串 , 考虑让若干 k 个字符 +1 ,尝试使当前字符数与目标相同 , 如果失败就不可能变换成目标字符串了.\n- 循环从 'a' 到 'y' ,全符合就成功了\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint a[30],b[30];\nint main()\n{\n\tint t,n,k;\tchar ch;\tbool flag;\n\tscanf (\"%d\",&t);\n\twhile (t--){\n\t\tmemset(a,0,sizeof(a));\n\t\tmemset(b,0,sizeof(b));\n\t\tflag=true;\n\t\tscanf (\"%d %d \",&n,&k);\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tscanf(\"%c\",&ch);\n\t\t\t++a[ch-'a'];\n\t\t}\n\t\tgetchar();\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tscanf(\"%c\",&ch);\n\t\t\t++b[ch-'a'];\n\t\t}\n\t\tfor(int i=0;i<25 && flag;i++){\n\t\t   if (a[i]==b[i]) continue;\n\t\t   else if (a[i]<b[i]) flag=false;\n\t\t   else if ((a[i]-b[i])%k==0) a[i+1]+=(a[i]-b[i]);\n\t\t   else flag=false;\n\t\t}\n\t\tcout<<(flag?\"Yes\":\"No\")<<endl;\n\t}\n\treturn 0;\n}\n```\n\n## D. Circle Game\n\n### 题目大意\n\n给一个圆的半径和一个整数 k . Ashish 和 Utkarsh 轮流移动在 ( 0 , 0 ) 的棋子 , 每次只能向上或右走 k 步 . 先走出圆判负 . \n\n### Solution\n\n一开始是想从外围逼近 , 推回到 ( 0 , 0 ) 就行 . 但是复杂度 *O ( N<sup>2</sup>)* , 对数据 1e5 来说太慢了 .所以正解是 , 在 y=x 线上有一个可达点最靠近圆的边缘 , 记为 ( kz , kz) .如果 ( kz , k(z+1) ) 在界外 , 则先手负 . 反之后手负 .\n\n可能有疑问 ( kz , k(z+2) ) 呢 . 下面给证明 : \n\n$$\nd^2 < (k+1) ^ 2 + (k+1) ^ 2 = 2k ^ 2+ 4k + 2 < 2k ^ 2 + 4k + 4 = (k+2) ^ 2 + k ^ 2\n$$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tlong long t,d,k,num;\n\tscanf (\"%lld\",&t);\n\twhile (t--){\n\t\tscanf (\"%lld %lld\",&d,&k);\n\t\tfor ( num=k ; 2*num*num <= d*d ;num+=k );\n\t\tnum-=k;\n\t\tif ( num*num+(num+k)*(num+k)>d*d ) printf(\"Utkarsh\\n\");\n\t\telse printf(\"Ashish\\n\");\t\n\t}\n\treturn 0;\n}\n```\n\n","slug":"XCPC/CF1451_R685","published":1,"updated":"2021-06-26T15:35:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujm001b63jnbl77fuua","content":"<h2 id=\"A-Subtract-or-Divide\"><a href=\"#A-Subtract-or-Divide\" class=\"headerlink\" title=\"A. Subtract or Divide\"></a>A. Subtract or Divide</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>​    给一个数 , 每次操作可以减 1 或者除以除本身外的因子.问最少几次操作后可以变为 1 .</p>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>​    好水的题 , 尽管我没AC掉 . <span class=\"heimu\" title=\"你知道的太多了\">我菜爆了 . </span>偶数的话 , 除一次就是 2 了 , 再减一下就是 1 了 . 奇数减 1 就是偶数了 .当然 , 1 , 2 , 3 单独处理.</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Non-Substring-Subsequence\"><a href=\"#B-Non-Substring-Subsequence\" class=\"headerlink\" title=\"B. Non-Substring Subsequence\"></a>B. Non-Substring Subsequence</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>​    给一个 01 字符串 . 每次询问一个连续字串 , 问是否有一个字串 (可不连续) 与之相同 . </p>\n<h3 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>​    还是水的 , 只要 给定区间的第一个字母不是第一次出现 或 给定区间的最后一个字母不是最后一次出现 即可 . 因为这样就可以换一个字母得到字串.</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tflag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>q<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tflag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>l<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>c<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tflag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>c<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tflag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"YES\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"NO\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>两道题都是转一下弯就可以做出来了 . 这就是临场问题了 , 首先可能状态不好 , 搞了一下午数模 , 而且一急<span class='heimu'>  想到掉分</span>天都塌了 ! 所以写不出来还是不要看 AC 人数了 . </p>\n<h2 id=\"C-String-Equality\"><a href=\"#C-String-Equality\" class=\"headerlink\" title=\"C. String Equality\"></a>C. String Equality</h2><h3 id=\"题目大意-2\"><a href=\"#题目大意-2\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>​    给一个只有小写字母字符串 , 可以进行以下操作 , 交换相邻元素 和 对 k 个相同元素都 +1 (z除外) . 问能不能变成目标字符串.</p>\n<h3 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>​    赛后写的 , 就几分钟就出来了…思路是统计字母个数 , 因为可交换且不计次数 , 直接升序排列方便处理 ,因为后面的字母可以由前面变来 .</p>\n<ul>\n<li>字符数量相等 , 无需操作.</li>\n<li>如果字符数大于目标字符串 , 考虑让若干 k 个字符 +1 ,尝试使当前字符数与目标相同 , 如果失败就不可能变换成目标字符串了.</li>\n<li>循环从 ‘a’ 到 ‘y’ ,全符合就成功了</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tflag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">++</span>a<span class=\"token punctuation\">[</span>ch<span class=\"token operator\">-</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">++</span>b<span class=\"token punctuation\">[</span>ch<span class=\"token operator\">-</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">25</span> <span class=\"token operator\">&amp;&amp;</span> flag<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>k<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">else</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">?</span><span class=\"token string\">\"Yes\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"No\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-Circle-Game\"><a href=\"#D-Circle-Game\" class=\"headerlink\" title=\"D. Circle Game\"></a>D. Circle Game</h2><h3 id=\"题目大意-3\"><a href=\"#题目大意-3\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给一个圆的半径和一个整数 k . Ashish 和 Utkarsh 轮流移动在 ( 0 , 0 ) 的棋子 , 每次只能向上或右走 k 步 . 先走出圆判负 . </p>\n<h3 id=\"Solution-3\"><a href=\"#Solution-3\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>一开始是想从外围逼近 , 推回到 ( 0 , 0 ) 就行 . 但是复杂度 <em>O ( N<sup>2</sup>)</em> , 对数据 1e5 来说太慢了 .所以正解是 , 在 y=x 线上有一个可达点最靠近圆的边缘 , 记为 ( kz , kz) .如果 ( kz , k(z+1) ) 在界外 , 则先手负 . 反之后手负 .</p>\n<p>可能有疑问 ( kz , k(z+2) ) 呢 . 下面给证明 : </p>\n<p>$$<br>d^2 &lt; (k+1) ^ 2 + (k+1) ^ 2 = 2k ^ 2+ 4k + 2 &lt; 2k ^ 2 + 4k + 4 = (k+2) ^ 2 + k ^ 2<br>$$</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> t<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> num<span class=\"token operator\">=</span>k <span class=\"token punctuation\">;</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>num<span class=\"token operator\">*</span>num <span class=\"token operator\">&lt;=</span> d<span class=\"token operator\">*</span>d <span class=\"token punctuation\">;</span>num<span class=\"token operator\">+=</span>k <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnum<span class=\"token operator\">-=</span>k<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> num<span class=\"token operator\">*</span>num<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">></span>d<span class=\"token operator\">*</span>d <span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Utkarsh\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ashish\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":"<h2 id=\"A-Subtract-or-Divide\"><a href=\"#A-Subtract-or-Divide\" class=\"headerlink\" title=\"A. Subtract or Divide\"></a>A. Subtract or Divide</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>​    给一个数 , 每次操作可以减 1 或者除以除本身外的因子.问最少几次操作后可以变为 1 .</p>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>​    好水的题 , 尽管我没AC掉 . <span class=\"heimu\" title=\"你知道的太多了\">我菜爆了 . </span>偶数的话 , 除一次就是 2 了 , 再减一下就是 1 了 . 奇数减 1 就是偶数了 .当然 , 1 , 2 , 3 单独处理.</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Non-Substring-Subsequence\"><a href=\"#B-Non-Substring-Subsequence\" class=\"headerlink\" title=\"B. Non-Substring Subsequence\"></a>B. Non-Substring Subsequence</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>​    给一个 01 字符串 . 每次询问一个连续字串 , 问是否有一个字串 (可不连续) 与之相同 . </p>\n<h3 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>​    还是水的 , 只要 给定区间的第一个字母不是第一次出现 或 给定区间的最后一个字母不是最后一次出现 即可 . 因为这样就可以换一个字母得到字串.</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tflag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>q<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tflag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>l<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>c<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tflag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>c<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tflag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"YES\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"NO\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>两道题都是转一下弯就可以做出来了 . 这就是临场问题了 , 首先可能状态不好 , 搞了一下午数模 , 而且一急<span class='heimu'>  想到掉分</span>天都塌了 ! 所以写不出来还是不要看 AC 人数了 . </p>\n<h2 id=\"C-String-Equality\"><a href=\"#C-String-Equality\" class=\"headerlink\" title=\"C. String Equality\"></a>C. String Equality</h2><h3 id=\"题目大意-2\"><a href=\"#题目大意-2\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>​    给一个只有小写字母字符串 , 可以进行以下操作 , 交换相邻元素 和 对 k 个相同元素都 +1 (z除外) . 问能不能变成目标字符串.</p>\n<h3 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>​    赛后写的 , 就几分钟就出来了…思路是统计字母个数 , 因为可交换且不计次数 , 直接升序排列方便处理 ,因为后面的字母可以由前面变来 .</p>\n<ul>\n<li>字符数量相等 , 无需操作.</li>\n<li>如果字符数大于目标字符串 , 考虑让若干 k 个字符 +1 ,尝试使当前字符数与目标相同 , 如果失败就不可能变换成目标字符串了.</li>\n<li>循环从 ‘a’ 到 ‘y’ ,全符合就成功了</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tflag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">++</span>a<span class=\"token punctuation\">[</span>ch<span class=\"token operator\">-</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">++</span>b<span class=\"token punctuation\">[</span>ch<span class=\"token operator\">-</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">25</span> <span class=\"token operator\">&amp;&amp;</span> flag<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>k<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">else</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">?</span><span class=\"token string\">\"Yes\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"No\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-Circle-Game\"><a href=\"#D-Circle-Game\" class=\"headerlink\" title=\"D. Circle Game\"></a>D. Circle Game</h2><h3 id=\"题目大意-3\"><a href=\"#题目大意-3\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给一个圆的半径和一个整数 k . Ashish 和 Utkarsh 轮流移动在 ( 0 , 0 ) 的棋子 , 每次只能向上或右走 k 步 . 先走出圆判负 . </p>\n<h3 id=\"Solution-3\"><a href=\"#Solution-3\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>一开始是想从外围逼近 , 推回到 ( 0 , 0 ) 就行 . 但是复杂度 <em>O ( N<sup>2</sup>)</em> , 对数据 1e5 来说太慢了 .所以正解是 , 在 y=x 线上有一个可达点最靠近圆的边缘 , 记为 ( kz , kz) .如果 ( kz , k(z+1) ) 在界外 , 则先手负 . 反之后手负 .</p>\n<p>可能有疑问 ( kz , k(z+2) ) 呢 . 下面给证明 : </p>\n<p>$$<br>d^2 &lt; (k+1) ^ 2 + (k+1) ^ 2 = 2k ^ 2+ 4k + 2 &lt; 2k ^ 2 + 4k + 4 = (k+2) ^ 2 + k ^ 2<br>$$</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> t<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> num<span class=\"token operator\">=</span>k <span class=\"token punctuation\">;</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>num<span class=\"token operator\">*</span>num <span class=\"token operator\">&lt;=</span> d<span class=\"token operator\">*</span>d <span class=\"token punctuation\">;</span>num<span class=\"token operator\">+=</span>k <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnum<span class=\"token operator\">-=</span>k<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> num<span class=\"token operator\">*</span>num<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">></span>d<span class=\"token operator\">*</span>d <span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Utkarsh\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ashish\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"Educational Codeforces Round 98 (Rated for Div. 2)","date":"2020-11-20T05:04:42.000Z","_content":"\n## A. Robot Program\n\n### 题目大意\n\n有只机器人在原点出发 , 每次可以向上下左右走一步 或者不动. 问最少多少步能到指定位置 , 不能重复执行相同操作 , 指定位置在第一象限 . \n\n### Solution\n\n一直往右上走 , 直到有一个坐标满足了 , 接下来停一下 , 走一下就好了 .\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n        int x,y,t;\n        cin>>t;\n        while (t--){\n                cin>>x>>y;\n                int ans=min(x,y)*2+1+(max(x,y)-min(x,y)-1)*2;\n                if (x!=y) cout<<ans<<endl;\n                else cout<<x*2<<endl;\n        }\n        return 0;\n}\n```\n\n### 变题\n\n​\t把坐标变成 n 维 , 然后出题 .\n\n## B. Toy Blocks\n\n### \t题目大意\n​\t有n堆木块，问最少添加几个木块，使得任选其中一堆分配到其他堆后可以使其余 n-1 堆相等。\n\n### Solution\n这道AC率反而低于C题，我也是压时做出来的。\n我们要使任意堆成功，只要最小的那一堆成功就好了。要让最小堆能满足让其他堆都达到最大值。还有一个问题，要满足最后总数能被 n-1 整除。我们先把 每个堆块值和最大值的差 的和求出来。\n\n$$\n\ta_{min}>=all-ans-(mx-a_{min}) \n$$\n\n要使ans最小就是上式取等。然后就发现化简后，答案和 a<sub>min</sub> 没有关系。\n\n\n$$\n\tans=all-mx\n$$\n\n\n最后补全到能被整除。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nmultiset<ll>s;\nint main()\n{\n    int t;\n    cin>>t;\n    while (t--)\n    {\n\t       s.clear();\n        long long sum=0,all=0,num;\n        ll ans=0,mx=0,n;\n        scanf (\"%lld\",&n);\n        for (int i=1;i<=n;i++) {\n\t           scanf (\"%lld\",&num);\n\t           s.insert(num);\n\t           mx=max(mx,num);\n\t           sum+=num;\n        }\n        for (set<ll>::iterator it=s.begin();it!=s.end();++it){\n            all+=(mx-(*it));\n        }\n        ans=all-mx;\n        if (ans<=0) ans=0;\n        if ((ans+sum)%(n-1)==0) cout<<ans<<endl;\n        else cout<<ans+(n-1-((sum+ans)%(n-1)))<<endl;\n    }\n    return 0;\n}\n```\n## C. Two Brackets\n简单的括号匹配。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint cnt1=0,cnt2=0;\nint main()\n{\n    int t,n;\n    scanf (\"%d \",&t);\n    while (t--){\n        int ans=0;\n        char ch=getchar();\n        cnt1=0,cnt2=0;\n        while (ch!='\\n'){\n            if (ch=='(') cnt1++;\n            else if (ch=='[') cnt2++;\n            else if (ch==')' && cnt1) ans++,cnt1--;\n            else if (ch==']' && cnt2) ans++,cnt2--;  \n            ch=getchar();\n        }\n        cout<<ans<<endl;\n    }\n    return 0;\n}\n```","source":"_posts/XCPC/CF1452_EDU98.md","raw":"---\ntitle: Educational Codeforces Round 98 (Rated for Div. 2)\ndate: 2020-11-20 13:04:42\ncategories: \n\t- ICPC Programming Contest\ntags:\n\t- 贪心\n---\n\n## A. Robot Program\n\n### 题目大意\n\n有只机器人在原点出发 , 每次可以向上下左右走一步 或者不动. 问最少多少步能到指定位置 , 不能重复执行相同操作 , 指定位置在第一象限 . \n\n### Solution\n\n一直往右上走 , 直到有一个坐标满足了 , 接下来停一下 , 走一下就好了 .\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n        int x,y,t;\n        cin>>t;\n        while (t--){\n                cin>>x>>y;\n                int ans=min(x,y)*2+1+(max(x,y)-min(x,y)-1)*2;\n                if (x!=y) cout<<ans<<endl;\n                else cout<<x*2<<endl;\n        }\n        return 0;\n}\n```\n\n### 变题\n\n​\t把坐标变成 n 维 , 然后出题 .\n\n## B. Toy Blocks\n\n### \t题目大意\n​\t有n堆木块，问最少添加几个木块，使得任选其中一堆分配到其他堆后可以使其余 n-1 堆相等。\n\n### Solution\n这道AC率反而低于C题，我也是压时做出来的。\n我们要使任意堆成功，只要最小的那一堆成功就好了。要让最小堆能满足让其他堆都达到最大值。还有一个问题，要满足最后总数能被 n-1 整除。我们先把 每个堆块值和最大值的差 的和求出来。\n\n$$\n\ta_{min}>=all-ans-(mx-a_{min}) \n$$\n\n要使ans最小就是上式取等。然后就发现化简后，答案和 a<sub>min</sub> 没有关系。\n\n\n$$\n\tans=all-mx\n$$\n\n\n最后补全到能被整除。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nmultiset<ll>s;\nint main()\n{\n    int t;\n    cin>>t;\n    while (t--)\n    {\n\t       s.clear();\n        long long sum=0,all=0,num;\n        ll ans=0,mx=0,n;\n        scanf (\"%lld\",&n);\n        for (int i=1;i<=n;i++) {\n\t           scanf (\"%lld\",&num);\n\t           s.insert(num);\n\t           mx=max(mx,num);\n\t           sum+=num;\n        }\n        for (set<ll>::iterator it=s.begin();it!=s.end();++it){\n            all+=(mx-(*it));\n        }\n        ans=all-mx;\n        if (ans<=0) ans=0;\n        if ((ans+sum)%(n-1)==0) cout<<ans<<endl;\n        else cout<<ans+(n-1-((sum+ans)%(n-1)))<<endl;\n    }\n    return 0;\n}\n```\n## C. Two Brackets\n简单的括号匹配。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint cnt1=0,cnt2=0;\nint main()\n{\n    int t,n;\n    scanf (\"%d \",&t);\n    while (t--){\n        int ans=0;\n        char ch=getchar();\n        cnt1=0,cnt2=0;\n        while (ch!='\\n'){\n            if (ch=='(') cnt1++;\n            else if (ch=='[') cnt2++;\n            else if (ch==')' && cnt1) ans++,cnt1--;\n            else if (ch==']' && cnt2) ans++,cnt2--;  \n            ch=getchar();\n        }\n        cout<<ans<<endl;\n    }\n    return 0;\n}\n```","slug":"XCPC/CF1452_EDU98","published":1,"updated":"2021-06-26T15:35:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujn001f63jnhejy9dzt","content":"<h2 id=\"A-Robot-Program\"><a href=\"#A-Robot-Program\" class=\"headerlink\" title=\"A. Robot Program\"></a>A. Robot Program</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>有只机器人在原点出发 , 每次可以向上下左右走一步 或者不动. 问最少多少步能到指定位置 , 不能重复执行相同操作 , 指定位置在第一象限 . </p>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>一直往右上走 , 直到有一个坐标满足了 , 接下来停一下 , 走一下就好了 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                cin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">!=</span>y<span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"变题\"><a href=\"#变题\" class=\"headerlink\" title=\"变题\"></a>变题</h3><p>​    把坐标变成 n 维 , 然后出题 .</p>\n<h2 id=\"B-Toy-Blocks\"><a href=\"#B-Toy-Blocks\" class=\"headerlink\" title=\"B. Toy Blocks\"></a>B. Toy Blocks</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>​    有n堆木块，问最少添加几个木块，使得任选其中一堆分配到其他堆后可以使其余 n-1 堆相等。</p>\n<h3 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>这道AC率反而低于C题，我也是压时做出来的。<br>我们要使任意堆成功，只要最小的那一堆成功就好了。要让最小堆能满足让其他堆都达到最大值。还有一个问题，要满足最后总数能被 n-1 整除。我们先把 每个堆块值和最大值的差 的和求出来。</p>\n<p>$$<br>    a_{min}&gt;=all-ans-(mx-a_{min})<br>$$</p>\n<p>要使ans最小就是上式取等。然后就发现化简后，答案和 a<sub>min</sub> 没有关系。</p>\n<p>$$<br>    ans=all-mx<br>$$</p>\n<p>最后补全到能被整除。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nmultiset<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span>s<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n\t       s<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>all<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">;</span>\n        ll ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>mx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t           <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t           s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t           mx<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t           sum<span class=\"token operator\">+=</span>num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            all<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>mx<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        ans<span class=\"token operator\">=</span>all<span class=\"token operator\">-</span>mx<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ans<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ans<span class=\"token operator\">+</span>sum<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span>ans<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"C-Two-Brackets\"><a href=\"#C-Two-Brackets\" class=\"headerlink\" title=\"C. Two Brackets\"></a>C. Two Brackets</h2><p>简单的括号匹配。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> cnt1<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cnt2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> ch<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cnt1<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cnt2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ch<span class=\"token operator\">!=</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> cnt1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token string\">'['</span><span class=\"token punctuation\">)</span> cnt2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token string\">')'</span> <span class=\"token operator\">&amp;&amp;</span> cnt1<span class=\"token punctuation\">)</span> ans<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>cnt1<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token string\">']'</span> <span class=\"token operator\">&amp;&amp;</span> cnt2<span class=\"token punctuation\">)</span> ans<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>cnt2<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>  \n            ch<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":"<h2 id=\"A-Robot-Program\"><a href=\"#A-Robot-Program\" class=\"headerlink\" title=\"A. Robot Program\"></a>A. Robot Program</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>有只机器人在原点出发 , 每次可以向上下左右走一步 或者不动. 问最少多少步能到指定位置 , 不能重复执行相同操作 , 指定位置在第一象限 . </p>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>一直往右上走 , 直到有一个坐标满足了 , 接下来停一下 , 走一下就好了 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">;</span>\n        cin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                cin<span class=\"token operator\">>></span>x<span class=\"token operator\">>></span>y<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">!=</span>y<span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span>x<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"变题\"><a href=\"#变题\" class=\"headerlink\" title=\"变题\"></a>变题</h3><p>​    把坐标变成 n 维 , 然后出题 .</p>\n<h2 id=\"B-Toy-Blocks\"><a href=\"#B-Toy-Blocks\" class=\"headerlink\" title=\"B. Toy Blocks\"></a>B. Toy Blocks</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>​    有n堆木块，问最少添加几个木块，使得任选其中一堆分配到其他堆后可以使其余 n-1 堆相等。</p>\n<h3 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>这道AC率反而低于C题，我也是压时做出来的。<br>我们要使任意堆成功，只要最小的那一堆成功就好了。要让最小堆能满足让其他堆都达到最大值。还有一个问题，要满足最后总数能被 n-1 整除。我们先把 每个堆块值和最大值的差 的和求出来。</p>\n<p>$$<br>    a_{min}&gt;=all-ans-(mx-a_{min})<br>$$</p>\n<p>要使ans最小就是上式取等。然后就发现化简后，答案和 a<sub>min</sub> 没有关系。</p>\n<p>$$<br>    ans=all-mx<br>$$</p>\n<p>最后补全到能被整除。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nmultiset<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span>s<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n\t       s<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>all<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">;</span>\n        ll ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>mx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t           <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t           s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t           mx<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t           sum<span class=\"token operator\">+=</span>num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            all<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>mx<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        ans<span class=\"token operator\">=</span>all<span class=\"token operator\">-</span>mx<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ans<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ans<span class=\"token operator\">+</span>sum<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span>ans<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"C-Two-Brackets\"><a href=\"#C-Two-Brackets\" class=\"headerlink\" title=\"C. Two Brackets\"></a>C. Two Brackets</h2><p>简单的括号匹配。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> cnt1<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cnt2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> ch<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cnt1<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cnt2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ch<span class=\"token operator\">!=</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> cnt1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token string\">'['</span><span class=\"token punctuation\">)</span> cnt2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token string\">')'</span> <span class=\"token operator\">&amp;&amp;</span> cnt1<span class=\"token punctuation\">)</span> ans<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>cnt1<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token string\">']'</span> <span class=\"token operator\">&amp;&amp;</span> cnt2<span class=\"token punctuation\">)</span> ans<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>cnt2<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>  \n            ch<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"Codeforces Round 691 (Div. 2)","date":"2020-12-19T15:10:11.000Z","_content":"这次时间很舒服 , 下午五点 . 很快就写了签到题 , 本来第二题 20 分钟左右就出了 , 但是没看题 , 是单组数据的 , 结果拖了好久 . 不过想来居然是最好成绩 ? Rank 2500 , 所以低分段就是拼手速 .\n<!-- more -->\n\n\n---\n\n## A. Red-Blue Shuffle\n\n看谁的牌大的多呗 . \n\n```cpp\n#include<cstdio>\nint num[10000];\nint main() \n{\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile (t--)\n\t{\n\t\tint n,cr=0,cb=0;\n\t\tscanf(\"%d\",&n);\n\t\tfor (int i=1;i<=n;i++)\n\t\t{\n\t\t\tscanf(\"%1d\",&num[i]);\n\t\t}\n\t\tfor (int i=1;i<=n;i++)\n\t\t{\n\t\t\tscanf(\"%1d\",&num[0]);\n\t\t\tif (num[0]>num[i]) cb++;\n\t\t\telse if (num[0]<num[i]) cr++;\n\t\t}\n\t\tif (cr==cb) printf(\"EQUAL\\n\");\n\t\telse if (cr>cb) printf(\"RED\\n\");\n\t\telse if (cr<cb) printf(\"BLUE\\n\");\n\t}\n\treturn 0;\n}\n```\n\n## B. Move and Turn\n\n其实画一下图就会很明了了 . 发现奇数都是平方 , 偶数就是上一个奇数的四倍 , 但是有重叠部分 , 很巧的是重叠部分刚好是上一个偶数的位置 , 很巧 . 其实也可以简化一下 , 公式就出来了 .\n\n```cpp\n#include<cstdio>\ntypedef long long ll;\nint main() \n{\n\tll t,n;\n\tscanf(\"%lld\",&n);\n\tif (n%2==1) \n\t{\n\t\tn=(n+1)/2;\n\t\tprintf(\"%lld\\n\",n*2*(n+1));\n\t}\n\telse \n\t{\n\t\tn=n/2+1;\n\t\tprintf(\"%lld\\n\",n*n);\n\t}\n\treturn 0;\n}\n```\n\n## C. Row GCD\n\n详见 [最大公因数](https://www.inzamz.top/2020/12/19/Gcd) .\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/CF1459_R691.md","raw":"---\ntitle: Codeforces Round 691 (Div. 2)\ndate: 2020-12-19 23:10:11\ntags:\n\t- 模拟\n\t- 数论\ncategories:\n\t- ICPC Programming Contest\n---\n这次时间很舒服 , 下午五点 . 很快就写了签到题 , 本来第二题 20 分钟左右就出了 , 但是没看题 , 是单组数据的 , 结果拖了好久 . 不过想来居然是最好成绩 ? Rank 2500 , 所以低分段就是拼手速 .\n<!-- more -->\n\n\n---\n\n## A. Red-Blue Shuffle\n\n看谁的牌大的多呗 . \n\n```cpp\n#include<cstdio>\nint num[10000];\nint main() \n{\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile (t--)\n\t{\n\t\tint n,cr=0,cb=0;\n\t\tscanf(\"%d\",&n);\n\t\tfor (int i=1;i<=n;i++)\n\t\t{\n\t\t\tscanf(\"%1d\",&num[i]);\n\t\t}\n\t\tfor (int i=1;i<=n;i++)\n\t\t{\n\t\t\tscanf(\"%1d\",&num[0]);\n\t\t\tif (num[0]>num[i]) cb++;\n\t\t\telse if (num[0]<num[i]) cr++;\n\t\t}\n\t\tif (cr==cb) printf(\"EQUAL\\n\");\n\t\telse if (cr>cb) printf(\"RED\\n\");\n\t\telse if (cr<cb) printf(\"BLUE\\n\");\n\t}\n\treturn 0;\n}\n```\n\n## B. Move and Turn\n\n其实画一下图就会很明了了 . 发现奇数都是平方 , 偶数就是上一个奇数的四倍 , 但是有重叠部分 , 很巧的是重叠部分刚好是上一个偶数的位置 , 很巧 . 其实也可以简化一下 , 公式就出来了 .\n\n```cpp\n#include<cstdio>\ntypedef long long ll;\nint main() \n{\n\tll t,n;\n\tscanf(\"%lld\",&n);\n\tif (n%2==1) \n\t{\n\t\tn=(n+1)/2;\n\t\tprintf(\"%lld\\n\",n*2*(n+1));\n\t}\n\telse \n\t{\n\t\tn=n/2+1;\n\t\tprintf(\"%lld\\n\",n*n);\n\t}\n\treturn 0;\n}\n```\n\n## C. Row GCD\n\n详见 [最大公因数](https://www.inzamz.top/2020/12/19/Gcd) .\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/CF1459_R691","published":1,"updated":"2021-06-26T15:42:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujn001h63jn3atley7f","content":"<p>这次时间很舒服 , 下午五点 . 很快就写了签到题 , 本来第二题 20 分钟左右就出了 , 但是没看题 , 是单组数据的 , 结果拖了好久 . 不过想来居然是最好成绩 ? Rank 2500 , 所以低分段就是拼手速 .</p>\n<span id=\"more\"></span>\n\n\n<hr>\n<h2 id=\"A-Red-Blue-Shuffle\"><a href=\"#A-Red-Blue-Shuffle\" class=\"headerlink\" title=\"A. Red-Blue Shuffle\"></a>A. Red-Blue Shuffle</h2><p>看谁的牌大的多呗 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>cr<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cb<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> cb<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> cr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cr<span class=\"token operator\">==</span>cb<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EQUAL\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cr<span class=\"token operator\">></span>cb<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RED\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cr<span class=\"token operator\">&lt;</span>cb<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BLUE\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Move-and-Turn\"><a href=\"#B-Move-and-Turn\" class=\"headerlink\" title=\"B. Move and Turn\"></a>B. Move and Turn</h2><p>其实画一下图就会很明了了 . 发现奇数都是平方 , 偶数就是上一个奇数的四倍 , 但是有重叠部分 , 很巧的是重叠部分刚好是上一个偶数的位置 , 很巧 . 其实也可以简化一下 , 公式就出来了 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n\tll t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\tn<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\tn<span class=\"token operator\">=</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-Row-GCD\"><a href=\"#C-Row-GCD\" class=\"headerlink\" title=\"C. Row GCD\"></a>C. Row GCD</h2><p>详见 <a href=\"https://www.inzamz.top/2020/12/19/Gcd\">最大公因数</a> .</p>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>这次时间很舒服 , 下午五点 . 很快就写了签到题 , 本来第二题 20 分钟左右就出了 , 但是没看题 , 是单组数据的 , 结果拖了好久 . 不过想来居然是最好成绩 ? Rank 2500 , 所以低分段就是拼手速 .</p>","more":"<hr>\n<h2 id=\"A-Red-Blue-Shuffle\"><a href=\"#A-Red-Blue-Shuffle\" class=\"headerlink\" title=\"A. Red-Blue Shuffle\"></a>A. Red-Blue Shuffle</h2><p>看谁的牌大的多呗 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>cr<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cb<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> cb<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> cr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cr<span class=\"token operator\">==</span>cb<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EQUAL\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cr<span class=\"token operator\">></span>cb<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RED\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cr<span class=\"token operator\">&lt;</span>cb<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BLUE\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Move-and-Turn\"><a href=\"#B-Move-and-Turn\" class=\"headerlink\" title=\"B. Move and Turn\"></a>B. Move and Turn</h2><p>其实画一下图就会很明了了 . 发现奇数都是平方 , 偶数就是上一个奇数的四倍 , 但是有重叠部分 , 很巧的是重叠部分刚好是上一个偶数的位置 , 很巧 . 其实也可以简化一下 , 公式就出来了 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n\tll t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\tn<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\tn<span class=\"token operator\">=</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-Row-GCD\"><a href=\"#C-Row-GCD\" class=\"headerlink\" title=\"C. Row GCD\"></a>C. Row GCD</h2><p>详见 <a href=\"https://www.inzamz.top/2020/12/19/Gcd\">最大公因数</a> .</p>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"Codeforces Round 690 (Div. 3)","date":"2020-12-18T14:04:09.000Z","_content":"\n> 日常赛后水题 , 估摸着大致能写三四道 ? 惭愧 .\n\n<!-- more -->\n\n## A. Favorite Sequence\n\n数组正序逆序轮流输出一个数 .\n\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\nint num[500];\n\nint main()\n{\n\tint t,n;\n\tcin>>t;\n\twhile(t--)\n\t{\n\t\tcin>>n;\n\t\tfor (int i=1;i<=n;i++)\t\tscanf (\"%d\",&num[i]);\n\t\tint a=1,b=n;\n\t\twhile (a-1!=b){\n\t\t\tcout<<num[a++]<<' ';\n\t\t\tif (a-1==b) break;\n\t\t\tcout<<num[b--]<<' ';\n\t\t}\n\t\tputchar(10);\n\t}\n\treturn 0;\n}\n```\n\n\n\n## B. Last Year's Substring\n\n一串数 , 问能否删除连续的一段后只剩2020 . 就是判断首尾能不能组成2020 .\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\nint s[5],num[500];\nint main()\n{\n\ts[1]=s[3]=2;\ts[2]=s[4]=0;\n\tint t;\n\tscanf (\"%d\",&t);\n\twhile (t--)\n\t{\n\t\tmemset(num,0,sizeof(num));\n\t\tint n,cur=1;\n\t\tbool flag=false;\n\t\tscanf (\"%d\",&n);\n\t\tfor(int i=1;i<=n;i++)\t\tscanf(\"%1d\",&num[i]);\n\t\tfor (int i=1;i<=4;i++){\n\t\t\tif (num[cur]!=s[i]) break;\n\t\t\tcur++;\n\t\t\tif (i==4) flag=true;\n\t\t}\n\t\tif (flag==false) for(cur;cur<=4;cur++){\n\t\t\tif (s[cur]!=num[n-4+cur]) break;\n\t\t\tif (cur==4) flag=true;\n\t\t}\n\t\tif (flag) printf(\"YES\\n\");\t\telse printf(\"NO\\n\");\n\t}\n\treturn 0;\n}\n```\n\n\n\n## C. Unique Number\n\n构造一个满足要求的最小数 : 每一位数字不重复 . 从9到1填就行 . 超过45无解 .\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nint num[10];\nint main()\n{\n\tint t;\n\tcin>>t;\n\twhile (t--)\n\t{\n\t\tint n,top=1,cnt=9;\n\t\tscanf(\"%d\",&n);\n\t\tif (n>=46) {\tprintf(\"-1\\n\");\t\tcontinue;}\n\t\twhile (n>0){\n\t\t\tif (n<=cnt) {\tnum[top++]=n;\t\tbreak;}\n\t\t\telse {\tnum[top++]=cnt;\tn-=cnt;\tcnt--;}\n        }\n\t\tfor (int i=top-1;i>=1;i--) printf(\"%d\",num[i]);\n\t\tputchar(10);\n\t}\n\treturn 0;\n}\n```\n\n## D. Add to Neighbour and Remove\n\n### 题目大意\n\n想让我们通过最少操作使得整个数组数相等 . 操作就是把一个数加到相邻的数并删除这个数 .\n\n### 思路\n\n一直没有合适的思路 , 其实只能相邻加是关键 . 假设最后数组的值为$k=\\frac{\\sum_{i=1}^na_i}{n-ans}$则必定能从第一个数加到某个数后刚好是k , 同理之后都可以满足. 这样我们一一验证就好了 , 因为数据不大 , 枚举操作次数 , 算出k , 遍历数组 .\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nint num[3010];\nint main()\n{\n\tint t;\n\tcin>>t;\n\twhile (t--)\n\t{\n\t\tint n,ans=0,sum=0;\n\t\tbool flag=true;\n\t\tcin>>n;\n\t\tfor (int i=1;i<=n;i++) {\n\t\t\tcin>>num[i];\tsum+=num[i];\n\t\t\tif (num[i]!=num[1]) flag=false;\n\t\t}\n\t\tif (flag){\n\t\t\tprintf(\"0\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tfor (int i=1;i<n;i++)\n\t\t{\n\t\t\tif (i==n-1) {\tprintf(\"%d\\n\",n-1);\tbreak;}\n\t\t\tif (sum%(n-i)!=0) continue;\n\t\t\tint cnt=0,tar=sum/(n-i);\n            bool ok=true;\n\t\t\tfor (int j=1;j<=n;j++){\n\t\t\t\tcnt+=num[j];\n\t\t\t\tif (cnt==tar) cnt=0;\n\t\t\t\tif (cnt>tar) {\tok=false;\tbreak;}\n\t\t\t}\n\t\t\tif (ok) {\tprintf(\"%d\\n\",i);\tbreak;}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n## E. Close Tuples \n\n### 题目大意\n\n给一堆数 , 要求选 m 个数 , 这 m 个数极差小于 k .\n\n### Easy Version\n\n不需要取模 m k 固定 , 一定可以算出来的 . 所以这种Easy Version下次可以尝试 . \n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\n\ntypedef long long ll;\nconst int maxn=200010;\nll t,n,cnt[maxn],num[maxn];\n\nint main()\n{\n    scanf(\"%lld\",&t);\n    while (t--)\n    {\n        scanf(\"%lld\",&n);\n        memset(cnt,0,sizeof(ll)*(n+1));\n        for(int i=1;i<=n;i++) {\n            scanf(\"%lld\",&num[i]);\n            cnt[num[i]]++;\n        }\n        sort(num+1,num+1+n);\n        ll ans=0;\n        for (int i=1;i<=n;i++)\n        {\n\t\tans+=(cnt[i]*(cnt[i]-1)*(cnt[i]-2))/6;\n        }\n\tfor (int i=2;i<=n;i++)\n\t{\n\t\tans+=(cnt[i]*(cnt[i]-1))/2*(cnt[i-1]);\n\t\tans+=(cnt[i-1]*(cnt[i-1]-1))/2*cnt[i];\n\t}\n\tfor (int i=3;i<=n;i++)\n\t{\n\t\tans+=cnt[i]*cnt[i-1]*cnt[i-2];\n\t\tans+=cnt[i]*(cnt[i-2]*(cnt[i-2]-1))/2;\n\t\tans+=cnt[i]*(cnt[i]-1)/2*cnt[i-2];\n\t}\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```\n\n\n\n### Hard Version思路\n\n这是个排列组合题 , 问题是如何才能不炸longlong 因为组合数取模很不好处理 . 这里要用到数论的知识 , 详见 [费马小定理](https://www.inzamz.top/2020/12/19/InverseElement) . \n\n## F. The Treasure of The Segments\n\n### 题目大意\n\n问最少删除多少线段能使剩下的线段中 , 有一条线段与其他线段相交 . \n\n### 解题思路\n\n我想复杂了 , 就是暴力解法 , 我们遍历所有线段 , 看有多少线段不包含在里面就好了 .\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\nusing namespace std;\n\nconst int maxn=200010;\nint al[maxn],ar[maxn];\nvector<int>l,r;\n\nint main()\n{\n    int t; \n    scanf(\"%d\",&t);\n    while (t--)\n    {\n        int n,ans;\n        l.clear();\n        r.clear();\n        scanf(\"%d\",&n);\n        for(int i=1;i<=n;i++) {\n            scanf(\"%d %d\",&al[i],&ar[i]);\n            l.push_back(al[i]);\n            r.push_back(ar[i]);\n        }\n        ans=n-1;\n        sort(r.begin(),r.end());\n        sort(l.begin(),l.end());\n        for (int i=1;i<=n;i++)\n        {\n            int left,right;\n            left=lower_bound(r.begin(),r.end(),al[i])-r.begin();\n            right=n-(upper_bound(l.begin(),l.end(),ar[i])-l.begin());\n            if (right<0) right=0;\n            ans=min(ans,left+right);\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```\n\n <right>20201221 完</right>\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/CF1462_R690.md","raw":"---\ntitle: Codeforces Round 690 (Div. 3)\ndate: 2020-12-18 22:04:09\ntags:\n\t- 贪心\n\t- 模拟\ncategories:\n\t- ICPC Programming Contest\n---\n\n> 日常赛后水题 , 估摸着大致能写三四道 ? 惭愧 .\n\n<!-- more -->\n\n## A. Favorite Sequence\n\n数组正序逆序轮流输出一个数 .\n\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\nint num[500];\n\nint main()\n{\n\tint t,n;\n\tcin>>t;\n\twhile(t--)\n\t{\n\t\tcin>>n;\n\t\tfor (int i=1;i<=n;i++)\t\tscanf (\"%d\",&num[i]);\n\t\tint a=1,b=n;\n\t\twhile (a-1!=b){\n\t\t\tcout<<num[a++]<<' ';\n\t\t\tif (a-1==b) break;\n\t\t\tcout<<num[b--]<<' ';\n\t\t}\n\t\tputchar(10);\n\t}\n\treturn 0;\n}\n```\n\n\n\n## B. Last Year's Substring\n\n一串数 , 问能否删除连续的一段后只剩2020 . 就是判断首尾能不能组成2020 .\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\nint s[5],num[500];\nint main()\n{\n\ts[1]=s[3]=2;\ts[2]=s[4]=0;\n\tint t;\n\tscanf (\"%d\",&t);\n\twhile (t--)\n\t{\n\t\tmemset(num,0,sizeof(num));\n\t\tint n,cur=1;\n\t\tbool flag=false;\n\t\tscanf (\"%d\",&n);\n\t\tfor(int i=1;i<=n;i++)\t\tscanf(\"%1d\",&num[i]);\n\t\tfor (int i=1;i<=4;i++){\n\t\t\tif (num[cur]!=s[i]) break;\n\t\t\tcur++;\n\t\t\tif (i==4) flag=true;\n\t\t}\n\t\tif (flag==false) for(cur;cur<=4;cur++){\n\t\t\tif (s[cur]!=num[n-4+cur]) break;\n\t\t\tif (cur==4) flag=true;\n\t\t}\n\t\tif (flag) printf(\"YES\\n\");\t\telse printf(\"NO\\n\");\n\t}\n\treturn 0;\n}\n```\n\n\n\n## C. Unique Number\n\n构造一个满足要求的最小数 : 每一位数字不重复 . 从9到1填就行 . 超过45无解 .\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nint num[10];\nint main()\n{\n\tint t;\n\tcin>>t;\n\twhile (t--)\n\t{\n\t\tint n,top=1,cnt=9;\n\t\tscanf(\"%d\",&n);\n\t\tif (n>=46) {\tprintf(\"-1\\n\");\t\tcontinue;}\n\t\twhile (n>0){\n\t\t\tif (n<=cnt) {\tnum[top++]=n;\t\tbreak;}\n\t\t\telse {\tnum[top++]=cnt;\tn-=cnt;\tcnt--;}\n        }\n\t\tfor (int i=top-1;i>=1;i--) printf(\"%d\",num[i]);\n\t\tputchar(10);\n\t}\n\treturn 0;\n}\n```\n\n## D. Add to Neighbour and Remove\n\n### 题目大意\n\n想让我们通过最少操作使得整个数组数相等 . 操作就是把一个数加到相邻的数并删除这个数 .\n\n### 思路\n\n一直没有合适的思路 , 其实只能相邻加是关键 . 假设最后数组的值为$k=\\frac{\\sum_{i=1}^na_i}{n-ans}$则必定能从第一个数加到某个数后刚好是k , 同理之后都可以满足. 这样我们一一验证就好了 , 因为数据不大 , 枚举操作次数 , 算出k , 遍历数组 .\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nint num[3010];\nint main()\n{\n\tint t;\n\tcin>>t;\n\twhile (t--)\n\t{\n\t\tint n,ans=0,sum=0;\n\t\tbool flag=true;\n\t\tcin>>n;\n\t\tfor (int i=1;i<=n;i++) {\n\t\t\tcin>>num[i];\tsum+=num[i];\n\t\t\tif (num[i]!=num[1]) flag=false;\n\t\t}\n\t\tif (flag){\n\t\t\tprintf(\"0\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tfor (int i=1;i<n;i++)\n\t\t{\n\t\t\tif (i==n-1) {\tprintf(\"%d\\n\",n-1);\tbreak;}\n\t\t\tif (sum%(n-i)!=0) continue;\n\t\t\tint cnt=0,tar=sum/(n-i);\n            bool ok=true;\n\t\t\tfor (int j=1;j<=n;j++){\n\t\t\t\tcnt+=num[j];\n\t\t\t\tif (cnt==tar) cnt=0;\n\t\t\t\tif (cnt>tar) {\tok=false;\tbreak;}\n\t\t\t}\n\t\t\tif (ok) {\tprintf(\"%d\\n\",i);\tbreak;}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n## E. Close Tuples \n\n### 题目大意\n\n给一堆数 , 要求选 m 个数 , 这 m 个数极差小于 k .\n\n### Easy Version\n\n不需要取模 m k 固定 , 一定可以算出来的 . 所以这种Easy Version下次可以尝试 . \n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\n\ntypedef long long ll;\nconst int maxn=200010;\nll t,n,cnt[maxn],num[maxn];\n\nint main()\n{\n    scanf(\"%lld\",&t);\n    while (t--)\n    {\n        scanf(\"%lld\",&n);\n        memset(cnt,0,sizeof(ll)*(n+1));\n        for(int i=1;i<=n;i++) {\n            scanf(\"%lld\",&num[i]);\n            cnt[num[i]]++;\n        }\n        sort(num+1,num+1+n);\n        ll ans=0;\n        for (int i=1;i<=n;i++)\n        {\n\t\tans+=(cnt[i]*(cnt[i]-1)*(cnt[i]-2))/6;\n        }\n\tfor (int i=2;i<=n;i++)\n\t{\n\t\tans+=(cnt[i]*(cnt[i]-1))/2*(cnt[i-1]);\n\t\tans+=(cnt[i-1]*(cnt[i-1]-1))/2*cnt[i];\n\t}\n\tfor (int i=3;i<=n;i++)\n\t{\n\t\tans+=cnt[i]*cnt[i-1]*cnt[i-2];\n\t\tans+=cnt[i]*(cnt[i-2]*(cnt[i-2]-1))/2;\n\t\tans+=cnt[i]*(cnt[i]-1)/2*cnt[i-2];\n\t}\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```\n\n\n\n### Hard Version思路\n\n这是个排列组合题 , 问题是如何才能不炸longlong 因为组合数取模很不好处理 . 这里要用到数论的知识 , 详见 [费马小定理](https://www.inzamz.top/2020/12/19/InverseElement) . \n\n## F. The Treasure of The Segments\n\n### 题目大意\n\n问最少删除多少线段能使剩下的线段中 , 有一条线段与其他线段相交 . \n\n### 解题思路\n\n我想复杂了 , 就是暴力解法 , 我们遍历所有线段 , 看有多少线段不包含在里面就好了 .\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\nusing namespace std;\n\nconst int maxn=200010;\nint al[maxn],ar[maxn];\nvector<int>l,r;\n\nint main()\n{\n    int t; \n    scanf(\"%d\",&t);\n    while (t--)\n    {\n        int n,ans;\n        l.clear();\n        r.clear();\n        scanf(\"%d\",&n);\n        for(int i=1;i<=n;i++) {\n            scanf(\"%d %d\",&al[i],&ar[i]);\n            l.push_back(al[i]);\n            r.push_back(ar[i]);\n        }\n        ans=n-1;\n        sort(r.begin(),r.end());\n        sort(l.begin(),l.end());\n        for (int i=1;i<=n;i++)\n        {\n            int left,right;\n            left=lower_bound(r.begin(),r.end(),al[i])-r.begin();\n            right=n-(upper_bound(l.begin(),l.end(),ar[i])-l.begin());\n            if (right<0) right=0;\n            ans=min(ans,left+right);\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```\n\n <right>20201221 完</right>\n\n<!-- Q.E.D. -->","slug":"XCPC/CF1462_R690","published":1,"updated":"2021-06-26T15:36:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujo001l63jn4l595khw","content":"<blockquote>\n<p>日常赛后水题 , 估摸着大致能写三四道 ? 惭愧 .</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"A-Favorite-Sequence\"><a href=\"#A-Favorite-Sequence\" class=\"headerlink\" title=\"A. Favorite Sequence\"></a>A. Favorite Sequence</h2><p>数组正序逆序轮流输出一个数 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">!=</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token punctuation\">[</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">==</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token punctuation\">[</span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"B-Last-Year’s-Substring\"><a href=\"#B-Last-Year’s-Substring\" class=\"headerlink\" title=\"B. Last Year’s Substring\"></a>B. Last Year’s Substring</h2><p>一串数 , 问能否删除连续的一段后只剩2020 . 就是判断首尾能不能组成2020 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\ts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\ts<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>cur<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\tcur<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token operator\">==</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">;</span>cur<span class=\"token operator\">&lt;=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>cur<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>num<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">+</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YES\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"C-Unique-Number\"><a href=\"#C-Unique-Number\" class=\"headerlink\" title=\"C. Unique Number\"></a>C. Unique Number</h2><p>构造一个满足要求的最小数 : 每一位数字不重复 . 从9到1填就行 . 超过45无解 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>top<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cnt<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">>=</span><span class=\"token number\">46</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;=</span>cnt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\tnum<span class=\"token punctuation\">[</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\tnum<span class=\"token punctuation\">[</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>cnt<span class=\"token punctuation\">;</span>\tn<span class=\"token operator\">-=</span>cnt<span class=\"token punctuation\">;</span>\tcnt<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>top<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-Add-to-Neighbour-and-Remove\"><a href=\"#D-Add-to-Neighbour-and-Remove\" class=\"headerlink\" title=\"D. Add to Neighbour and Remove\"></a>D. Add to Neighbour and Remove</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>想让我们通过最少操作使得整个数组数相等 . 操作就是把一个数加到相邻的数并删除这个数 .</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>一直没有合适的思路 , 其实只能相邻加是关键 . 假设最后数组的值为$k=\\frac{\\sum_{i=1}^na_i}{n-ans}$则必定能从第一个数加到某个数后刚好是k , 同理之后都可以满足. 这样我们一一验证就好了 , 因为数据不大 , 枚举操作次数 , 算出k , 遍历数组 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">3010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tcin<span class=\"token operator\">>></span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\tsum<span class=\"token operator\">+=</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tar<span class=\"token operator\">=</span>sum<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">bool</span> ok<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tcnt<span class=\"token operator\">+=</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">==</span>tar<span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">></span>tar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\tok<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"E-Close-Tuples\"><a href=\"#E-Close-Tuples\" class=\"headerlink\" title=\"E. Close Tuples\"></a>E. Close Tuples</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给一堆数 , 要求选 m 个数 , 这 m 个数极差小于 k .</p>\n<h3 id=\"Easy-Version\"><a href=\"#Easy-Version\" class=\"headerlink\" title=\"Easy Version\"></a>Easy Version</h3><p>不需要取模 m k 固定 , 一定可以算出来的 . 所以这种Easy Version下次可以尝试 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">200010</span><span class=\"token punctuation\">;</span>\nll t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cnt<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ll ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n\t\tans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tans<span class=\"token operator\">+=</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tans<span class=\"token operator\">+=</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\tans<span class=\"token operator\">+=</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"Hard-Version思路\"><a href=\"#Hard-Version思路\" class=\"headerlink\" title=\"Hard Version思路\"></a>Hard Version思路</h3><p>这是个排列组合题 , 问题是如何才能不炸longlong 因为组合数取模很不好处理 . 这里要用到数论的知识 , 详见 <a href=\"https://www.inzamz.top/2020/12/19/InverseElement\">费马小定理</a> . </p>\n<h2 id=\"F-The-Treasure-of-The-Segments\"><a href=\"#F-The-Treasure-of-The-Segments\" class=\"headerlink\" title=\"F. The Treasure of The Segments\"></a>F. The Treasure of The Segments</h2><h3 id=\"题目大意-2\"><a href=\"#题目大意-2\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>问最少删除多少线段能使剩下的线段中 , 有一条线段与其他线段相交 . </p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>我想复杂了 , 就是暴力解法 , 我们遍历所有线段 , 看有多少线段不包含在里面就好了 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">200010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> al<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ar<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span> \n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span>\n        l<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>al<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            l<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>al<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            r<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>ar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        ans<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">;</span>\n            left<span class=\"token operator\">=</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>al<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            right<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> right<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            ans<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> <right>20201221 完</right></p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<blockquote>\n<p>日常赛后水题 , 估摸着大致能写三四道 ? 惭愧 .</p>\n</blockquote>","more":"<h2 id=\"A-Favorite-Sequence\"><a href=\"#A-Favorite-Sequence\" class=\"headerlink\" title=\"A. Favorite Sequence\"></a>A. Favorite Sequence</h2><p>数组正序逆序轮流输出一个数 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">!=</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token punctuation\">[</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">==</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>num<span class=\"token punctuation\">[</span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"B-Last-Year’s-Substring\"><a href=\"#B-Last-Year’s-Substring\" class=\"headerlink\" title=\"B. Last Year’s Substring\"></a>B. Last Year’s Substring</h2><p>一串数 , 问能否删除连续的一段后只剩2020 . 就是判断首尾能不能组成2020 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\ts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\ts<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>cur<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\tcur<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token operator\">==</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">;</span>cur<span class=\"token operator\">&lt;=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>cur<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>num<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">+</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YES\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"C-Unique-Number\"><a href=\"#C-Unique-Number\" class=\"headerlink\" title=\"C. Unique Number\"></a>C. Unique Number</h2><p>构造一个满足要求的最小数 : 每一位数字不重复 . 从9到1填就行 . 超过45无解 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>top<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cnt<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">>=</span><span class=\"token number\">46</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;=</span>cnt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\tnum<span class=\"token punctuation\">[</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\tnum<span class=\"token punctuation\">[</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>cnt<span class=\"token punctuation\">;</span>\tn<span class=\"token operator\">-=</span>cnt<span class=\"token punctuation\">;</span>\tcnt<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>top<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-Add-to-Neighbour-and-Remove\"><a href=\"#D-Add-to-Neighbour-and-Remove\" class=\"headerlink\" title=\"D. Add to Neighbour and Remove\"></a>D. Add to Neighbour and Remove</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>想让我们通过最少操作使得整个数组数相等 . 操作就是把一个数加到相邻的数并删除这个数 .</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>一直没有合适的思路 , 其实只能相邻加是关键 . 假设最后数组的值为$k=\\frac{\\sum_{i=1}^na_i}{n-ans}$则必定能从第一个数加到某个数后刚好是k , 同理之后都可以满足. 这样我们一一验证就好了 , 因为数据不大 , 枚举操作次数 , 算出k , 遍历数组 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">3010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tcin<span class=\"token operator\">>></span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\tsum<span class=\"token operator\">+=</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tar<span class=\"token operator\">=</span>sum<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">bool</span> ok<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tcnt<span class=\"token operator\">+=</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">==</span>tar<span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">></span>tar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\tok<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"E-Close-Tuples\"><a href=\"#E-Close-Tuples\" class=\"headerlink\" title=\"E. Close Tuples\"></a>E. Close Tuples</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给一堆数 , 要求选 m 个数 , 这 m 个数极差小于 k .</p>\n<h3 id=\"Easy-Version\"><a href=\"#Easy-Version\" class=\"headerlink\" title=\"Easy Version\"></a>Easy Version</h3><p>不需要取模 m k 固定 , 一定可以算出来的 . 所以这种Easy Version下次可以尝试 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">200010</span><span class=\"token punctuation\">;</span>\nll t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cnt<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ll ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n\t\tans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tans<span class=\"token operator\">+=</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tans<span class=\"token operator\">+=</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\tans<span class=\"token operator\">+=</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"Hard-Version思路\"><a href=\"#Hard-Version思路\" class=\"headerlink\" title=\"Hard Version思路\"></a>Hard Version思路</h3><p>这是个排列组合题 , 问题是如何才能不炸longlong 因为组合数取模很不好处理 . 这里要用到数论的知识 , 详见 <a href=\"https://www.inzamz.top/2020/12/19/InverseElement\">费马小定理</a> . </p>\n<h2 id=\"F-The-Treasure-of-The-Segments\"><a href=\"#F-The-Treasure-of-The-Segments\" class=\"headerlink\" title=\"F. The Treasure of The Segments\"></a>F. The Treasure of The Segments</h2><h3 id=\"题目大意-2\"><a href=\"#题目大意-2\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>问最少删除多少线段能使剩下的线段中 , 有一条线段与其他线段相交 . </p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>我想复杂了 , 就是暴力解法 , 我们遍历所有线段 , 看有多少线段不包含在里面就好了 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">200010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> al<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ar<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span> \n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span>\n        l<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        r<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>al<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            l<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>al<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            r<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>ar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        ans<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">;</span>\n            left<span class=\"token operator\">=</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>al<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            right<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> right<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            ans<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> <right>20201221 完</right></p>\n<!-- Q.E.D. -->"},{"title":"Educational Codeforces Round 100 (Rated for Div. 2)","date":"2020-12-18T12:52:29.000Z","updated":"2021-01-23T14:28:17.000Z","_content":"一直担心掉分 , 很久的只是观望不敢打cf . 今晚打算试试 . 然后大号忘记报名 , 最后小号做的 . B题是个水题 , 当时序列找对了 , 细节没处理好 .\n<!-- more -->\n\n## A. Dungeon\n签到成功 !\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nint num[10];\nint main()\n{\n\tint t;\n\tcin>>t;\n\twhile (t--)\n\t{\n\t\tint a,b,c,num;\n\t\tcin>>a>>b>>c;\n\t\tnum=a+b+c;\n\t\tif (num%9==0 && num/9<=a && num/9<=b && num/9<=c ) cout<<\"YES\";\n\t\telse cout<<\"NO\";\n\t\tputchar(10);\n\t}\n\treturn 0;\n}\n```\n\n## B. Find The Array\n\n一看就是一个构造数列 , 我想构造相同数 (最大最小和开方向下取整 , 平均数...) , 最后想到用 2 的幂次方 , 但是我的思路是选一个距离 a<sub>i</sub> 小的 , 但好像不行?  \n\n正解是根据条件二\n$$\n2\\sum_{i=1}^{n}\\left|a_i-b_i\\right| \\leq S\n$$\n不妨我们让 b<sub>i</sub> < a<sub>i</sub> , 则对单个 i 都有 \n$$\n2(a_i-b_i)\\leq a_i \\\\\na_i\\leq 2*b_i\n$$\n完成 . 其实时间不严格而且2最多到29次幂 , 暴力搜索就行了 . \n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<iostream>\nusing namespace std;\ntypedef long long ll;\nll num[10000],bin[100];\nint main()\n{\n\tint t;\n\tcin>>t;\n\tbin[0]=1;\n\tfor (int i=1;i<=30;i++) bin[i]=bin[i-1]*2;\n\twhile (t--)\n\t{\n\t\tint n,sum=0,flag;\n\t\tcin>>n;\n\t\tfor (int i=1;i<=n;i++) \n\t\t{\n\t\t\tcin>>num[i];\n\t\t}\n\t\tfor (int i=1;i<=n;i++)\n\t\t{ \n\t\t\tfor (int j=0;j<=29;j++)\n\t\t\t{\n\t\t\t\tif (bin[j]*2>=num[i]) {\n\t\t\t\t\tcout<<bin[j]<<' ';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tputchar(10);\n\t}\n\treturn 0;\n}\n```\n\n## C. Busy Robot\n\n~~这道题不是有手就行~~ \n\n<img src=\"https://img.inzamz.top/expression/shut-up.jpg\" alt=\"shut-up\" style=\"zoom:67%;\" />\n\n看懂题目由手就行 , 奈何英语太烂 , 我看不懂 . 最后大概就是说一个机器人 , 接受命令后会向目标移动 . 移动过程中下的命令会被忽略 . \n\n定义 **Successful Command** : 第 i 个命令对应时间为 t<sub>i</sub> , 目标为 x<sub>i</sub> , 如果在闭区间 [ t<sub>i</sub> , t<sub>i+1</sub> ] 内 , 机器人有经过或停留在 x<sub>i</sub> 就是 **Successful Command** .\n\n这样就是遍历每个命令且更新位置就好了 . 直接挂 long long , 有可能炸 int . 还有结构体的 lower_bound 记得构造 .\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <iostream>\nusing namespace std;\n\n#define maxn 200010\nconst long long inf= 1ll<<60;\ntypedef long long ll;\n\nstruct com\n{\n\tll tim,tar;\n\tcom(){}\n\tcom(int a,int b):tim(a),tar(b){}\n\tbool operator< (const com x) const {\n\t\treturn tim<x.tim;\n\t}\n};\n\nbool cmp(const com a,const com b)\n{\n\treturn a.tim<b.tim;\n}\nvector <com> s ;\n\nint main()\n{\n\tint T,n;\n\tscanf(\"%d\",&T);\n\twhile (T--)\n\t{\n\t\tll nowt=0,overt=0,ans=0,target=0,pos=0;\n\t\tbool dir=true;\n\t\tcom c;\n\t\ts.clear();\n\t\tscanf(\"%d\",&n);\n\t\tfor (int i=0;i<n;i++)\t{\n\t\t\tscanf(\"%lld %lld\",&c.tim,&c.tar);\n\t\t\ts.push_back(c);\n\t\t}\n\t\tfor (int i=0;i<n;i++)\n\t\t{\n\t\t\tll t1,t2,L,R;\n\t\t\tif (s[i].tim>=overt) \n\t\t\t{\n\t\t\t\tnowt=s[i].tim;\n\t\t\t\tpos=target;\n\t\t\t\ttarget=s[i].tar;\n\t\t\t\tif (pos-s[i].tar>0) dir=false;\n\t\t\t\telse dir=true;\n\t\t\t\tovert=nowt+abs(pos-s[i].tar);\n\t\t\t}\n\t\t\tt1=s[i].tim;\n\t\t\tif (i!=n-1) t2=s[i+1].tim;\n\t\t\telse t2=inf;\n                        if (dir) L=pos+(t1-nowt),R=pos+(t2-nowt);\n                        else L=pos-(t2-nowt),R=pos-(t1-nowt);\n                        if (R>target && dir) R=target;\n\t\t\tif (L>target && dir) L=target;\n\t\t\tif (R<target && !dir) R=target;\n\t\t\tif (L<target && !dir) L=target;\n                        if ( L<=s[i].tar && s[i].tar<=R ) ans++;\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n\n## D. Pairs\n\n给你 n 个数，在 1 到 2n 之间，接下来你要用 1 到 2n 之间的数组成 n 组数，其中 x 组选取最小值，剩余取最大值，然后组成上面给你的 n 个数。问这样满足条件的 x 的个数。\n\n官方的题解是用二分查找，找到 x 的两个范围，将给的数放在一个数组，剩余的数放在另一个数组。用贪心的方法，取最小值的数优先与另一个数组最大的数组合，这样能找到边界。相反，交换两个数组，用上面的方法得到（n-x）的范围。\n\n然后我 Debug 搞不出来，于是看到洛谷一个[大佬的题解](https://www.luogu.com.cn/blog/ShokuhouMisaki/solution-cf1463d)。解法确实很奇妙，但是我无法证明，估计我太菜了。\n\n还有因为 used 要标记 2n 的数，所以初始化要记得 2n 。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 2000010\n\nint num[maxn],used[maxn];\n\nint main()\n{\n\tint T,n;\n\tscanf(\"%d\",&T);\n\twhile (T--)\n\t{\n\t\tint mx=0,mn=0,sp=0;\n\t\tscanf (\"%d\",&n);\n\t\tmemset(used,0,(sizeof(int))*(n*2+1));\n\t\tfor (int i=1;i<=n;i++)\n\t\t{\n\t\t\tscanf(\"%d\",&num[i]);\n\t\t\tused[num[i]]=1;\n\t\t}\n\t\tfor (int i=1;i<=2*n;i++) \n\t\t{\n\t\t\tif (used[i]) sp++;\n\t\t\telse sp--;\n\t\t\tmn=min(mn,sp);\n\t\t\tmx=max(mx,sp);\n\t\t}\n\t\tprintf(\"%d\\n\",n-(mx-mn)+1);\n\t}\n\treturn 0;\n}\n```\n\n\n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/CF1463_EDU100.md","raw":"---\ntitle: Educational Codeforces Round 100 (Rated for Div. 2)\ndate: 2020-12-18 20:52:29\nupdated: 2021-01-23 22:28:17\ntags:\n\t- 二分查找\ncategories:\n\t- ICPC Programming Contest\n---\n一直担心掉分 , 很久的只是观望不敢打cf . 今晚打算试试 . 然后大号忘记报名 , 最后小号做的 . B题是个水题 , 当时序列找对了 , 细节没处理好 .\n<!-- more -->\n\n## A. Dungeon\n签到成功 !\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nint num[10];\nint main()\n{\n\tint t;\n\tcin>>t;\n\twhile (t--)\n\t{\n\t\tint a,b,c,num;\n\t\tcin>>a>>b>>c;\n\t\tnum=a+b+c;\n\t\tif (num%9==0 && num/9<=a && num/9<=b && num/9<=c ) cout<<\"YES\";\n\t\telse cout<<\"NO\";\n\t\tputchar(10);\n\t}\n\treturn 0;\n}\n```\n\n## B. Find The Array\n\n一看就是一个构造数列 , 我想构造相同数 (最大最小和开方向下取整 , 平均数...) , 最后想到用 2 的幂次方 , 但是我的思路是选一个距离 a<sub>i</sub> 小的 , 但好像不行?  \n\n正解是根据条件二\n$$\n2\\sum_{i=1}^{n}\\left|a_i-b_i\\right| \\leq S\n$$\n不妨我们让 b<sub>i</sub> < a<sub>i</sub> , 则对单个 i 都有 \n$$\n2(a_i-b_i)\\leq a_i \\\\\na_i\\leq 2*b_i\n$$\n完成 . 其实时间不严格而且2最多到29次幂 , 暴力搜索就行了 . \n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<iostream>\nusing namespace std;\ntypedef long long ll;\nll num[10000],bin[100];\nint main()\n{\n\tint t;\n\tcin>>t;\n\tbin[0]=1;\n\tfor (int i=1;i<=30;i++) bin[i]=bin[i-1]*2;\n\twhile (t--)\n\t{\n\t\tint n,sum=0,flag;\n\t\tcin>>n;\n\t\tfor (int i=1;i<=n;i++) \n\t\t{\n\t\t\tcin>>num[i];\n\t\t}\n\t\tfor (int i=1;i<=n;i++)\n\t\t{ \n\t\t\tfor (int j=0;j<=29;j++)\n\t\t\t{\n\t\t\t\tif (bin[j]*2>=num[i]) {\n\t\t\t\t\tcout<<bin[j]<<' ';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tputchar(10);\n\t}\n\treturn 0;\n}\n```\n\n## C. Busy Robot\n\n~~这道题不是有手就行~~ \n\n<img src=\"https://img.inzamz.top/expression/shut-up.jpg\" alt=\"shut-up\" style=\"zoom:67%;\" />\n\n看懂题目由手就行 , 奈何英语太烂 , 我看不懂 . 最后大概就是说一个机器人 , 接受命令后会向目标移动 . 移动过程中下的命令会被忽略 . \n\n定义 **Successful Command** : 第 i 个命令对应时间为 t<sub>i</sub> , 目标为 x<sub>i</sub> , 如果在闭区间 [ t<sub>i</sub> , t<sub>i+1</sub> ] 内 , 机器人有经过或停留在 x<sub>i</sub> 就是 **Successful Command** .\n\n这样就是遍历每个命令且更新位置就好了 . 直接挂 long long , 有可能炸 int . 还有结构体的 lower_bound 记得构造 .\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <iostream>\nusing namespace std;\n\n#define maxn 200010\nconst long long inf= 1ll<<60;\ntypedef long long ll;\n\nstruct com\n{\n\tll tim,tar;\n\tcom(){}\n\tcom(int a,int b):tim(a),tar(b){}\n\tbool operator< (const com x) const {\n\t\treturn tim<x.tim;\n\t}\n};\n\nbool cmp(const com a,const com b)\n{\n\treturn a.tim<b.tim;\n}\nvector <com> s ;\n\nint main()\n{\n\tint T,n;\n\tscanf(\"%d\",&T);\n\twhile (T--)\n\t{\n\t\tll nowt=0,overt=0,ans=0,target=0,pos=0;\n\t\tbool dir=true;\n\t\tcom c;\n\t\ts.clear();\n\t\tscanf(\"%d\",&n);\n\t\tfor (int i=0;i<n;i++)\t{\n\t\t\tscanf(\"%lld %lld\",&c.tim,&c.tar);\n\t\t\ts.push_back(c);\n\t\t}\n\t\tfor (int i=0;i<n;i++)\n\t\t{\n\t\t\tll t1,t2,L,R;\n\t\t\tif (s[i].tim>=overt) \n\t\t\t{\n\t\t\t\tnowt=s[i].tim;\n\t\t\t\tpos=target;\n\t\t\t\ttarget=s[i].tar;\n\t\t\t\tif (pos-s[i].tar>0) dir=false;\n\t\t\t\telse dir=true;\n\t\t\t\tovert=nowt+abs(pos-s[i].tar);\n\t\t\t}\n\t\t\tt1=s[i].tim;\n\t\t\tif (i!=n-1) t2=s[i+1].tim;\n\t\t\telse t2=inf;\n                        if (dir) L=pos+(t1-nowt),R=pos+(t2-nowt);\n                        else L=pos-(t2-nowt),R=pos-(t1-nowt);\n                        if (R>target && dir) R=target;\n\t\t\tif (L>target && dir) L=target;\n\t\t\tif (R<target && !dir) R=target;\n\t\t\tif (L<target && !dir) L=target;\n                        if ( L<=s[i].tar && s[i].tar<=R ) ans++;\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n\n## D. Pairs\n\n给你 n 个数，在 1 到 2n 之间，接下来你要用 1 到 2n 之间的数组成 n 组数，其中 x 组选取最小值，剩余取最大值，然后组成上面给你的 n 个数。问这样满足条件的 x 的个数。\n\n官方的题解是用二分查找，找到 x 的两个范围，将给的数放在一个数组，剩余的数放在另一个数组。用贪心的方法，取最小值的数优先与另一个数组最大的数组合，这样能找到边界。相反，交换两个数组，用上面的方法得到（n-x）的范围。\n\n然后我 Debug 搞不出来，于是看到洛谷一个[大佬的题解](https://www.luogu.com.cn/blog/ShokuhouMisaki/solution-cf1463d)。解法确实很奇妙，但是我无法证明，估计我太菜了。\n\n还有因为 used 要标记 2n 的数，所以初始化要记得 2n 。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 2000010\n\nint num[maxn],used[maxn];\n\nint main()\n{\n\tint T,n;\n\tscanf(\"%d\",&T);\n\twhile (T--)\n\t{\n\t\tint mx=0,mn=0,sp=0;\n\t\tscanf (\"%d\",&n);\n\t\tmemset(used,0,(sizeof(int))*(n*2+1));\n\t\tfor (int i=1;i<=n;i++)\n\t\t{\n\t\t\tscanf(\"%d\",&num[i]);\n\t\t\tused[num[i]]=1;\n\t\t}\n\t\tfor (int i=1;i<=2*n;i++) \n\t\t{\n\t\t\tif (used[i]) sp++;\n\t\t\telse sp--;\n\t\t\tmn=min(mn,sp);\n\t\t\tmx=max(mx,sp);\n\t\t}\n\t\tprintf(\"%d\\n\",n-(mx-mn)+1);\n\t}\n\treturn 0;\n}\n```\n\n\n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/CF1463_EDU100","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujp001n63jn0q6kbmu9","content":"<p>一直担心掉分 , 很久的只是观望不敢打cf . 今晚打算试试 . 然后大号忘记报名 , 最后小号做的 . B题是个水题 , 当时序列找对了 , 细节没处理好 .</p>\n<span id=\"more\"></span>\n\n<h2 id=\"A-Dungeon\"><a href=\"#A-Dungeon\" class=\"headerlink\" title=\"A. Dungeon\"></a>A. Dungeon</h2><p>签到成功 !</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span>\n\t\tnum<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">%</span><span class=\"token number\">9</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> num<span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token operator\">&lt;=</span>a <span class=\"token operator\">&amp;&amp;</span> num<span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token operator\">&lt;=</span>b <span class=\"token operator\">&amp;&amp;</span> num<span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token operator\">&lt;=</span>c <span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"NO\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Find-The-Array\"><a href=\"#B-Find-The-Array\" class=\"headerlink\" title=\"B. Find The Array\"></a>B. Find The Array</h2><p>一看就是一个构造数列 , 我想构造相同数 (最大最小和开方向下取整 , 平均数…) , 最后想到用 2 的幂次方 , 但是我的思路是选一个距离 a<sub>i</sub> 小的 , 但好像不行?  </p>\n<p>正解是根据条件二<br>$$<br>2\\sum_{i=1}^{n}\\left|a_i-b_i\\right| \\leq S<br>$$<br>不妨我们让 b<sub>i</sub> &lt; a<sub>i</sub> , 则对单个 i 都有<br>$$<br>2(a_i-b_i)\\leq a_i \\<br>a_i\\leq 2*b_i<br>$$<br>完成 . 其实时间不严格而且2最多到29次幂 , 暴力搜索就行了 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nll num<span class=\"token punctuation\">[</span><span class=\"token number\">10000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>bin<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\tbin<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> bin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>bin<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tcin<span class=\"token operator\">>></span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span> \n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span><span class=\"token number\">29</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">>=</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-Busy-Robot\"><a href=\"#C-Busy-Robot\" class=\"headerlink\" title=\"C. Busy Robot\"></a>C. Busy Robot</h2><p><del>这道题不是有手就行</del> </p>\n<img src=\"https://img.inzamz.top/expression/shut-up.jpg\" alt=\"shut-up\" style=\"zoom:67%;\" / loading=\"lazy\">\n\n<p>看懂题目由手就行 , 奈何英语太烂 , 我看不懂 . 最后大概就是说一个机器人 , 接受命令后会向目标移动 . 移动过程中下的命令会被忽略 . </p>\n<p>定义 <strong>Successful Command</strong> : 第 i 个命令对应时间为 t<sub>i</sub> , 目标为 x<sub>i</sub> , 如果在闭区间 [ t<sub>i</sub> , t<sub>i+1</sub> ] 内 , 机器人有经过或停留在 x<sub>i</sub> 就是 <strong>Successful Command</strong> .</p>\n<p>这样就是遍历每个命令且更新位置就好了 . 直接挂 long long , 有可能炸 int . 还有结构体的 lower_bound 记得构造 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">200010</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> inf<span class=\"token operator\">=</span> <span class=\"token number\">1ll</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">com</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll tim<span class=\"token punctuation\">,</span>tar<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">com</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">com</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">tim</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">tar</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> com x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> tim<span class=\"token operator\">&lt;</span>x<span class=\"token punctuation\">.</span>tim<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> com a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> com b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>tim<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span>tim<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nvector <span class=\"token operator\">&lt;</span>com<span class=\"token operator\">></span> s <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tll nowt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>overt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>target<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>pos<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> dir<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\tcom c<span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>tim<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tll t1<span class=\"token punctuation\">,</span>t2<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tim<span class=\"token operator\">>=</span>overt<span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tnowt<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tim<span class=\"token punctuation\">;</span>\n\t\t\t\tpos<span class=\"token operator\">=</span>target<span class=\"token punctuation\">;</span>\n\t\t\t\ttarget<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos<span class=\"token operator\">-</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tar<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> dir<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">else</span> dir<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tovert<span class=\"token operator\">=</span>nowt<span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">-</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tt1<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tim<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> t2<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tim<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> t2<span class=\"token operator\">=</span>inf<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span> L<span class=\"token operator\">=</span>pos<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>t1<span class=\"token operator\">-</span>nowt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>R<span class=\"token operator\">=</span>pos<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>t2<span class=\"token operator\">-</span>nowt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">else</span> L<span class=\"token operator\">=</span>pos<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>t2<span class=\"token operator\">-</span>nowt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>R<span class=\"token operator\">=</span>pos<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>t1<span class=\"token operator\">-</span>nowt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>R<span class=\"token operator\">></span>target <span class=\"token operator\">&amp;&amp;</span> dir<span class=\"token punctuation\">)</span> R<span class=\"token operator\">=</span>target<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">></span>target <span class=\"token operator\">&amp;&amp;</span> dir<span class=\"token punctuation\">)</span> L<span class=\"token operator\">=</span>target<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>R<span class=\"token operator\">&lt;</span>target <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>dir<span class=\"token punctuation\">)</span> R<span class=\"token operator\">=</span>target<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">&lt;</span>target <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>dir<span class=\"token punctuation\">)</span> L<span class=\"token operator\">=</span>target<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> L<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tar <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tar<span class=\"token operator\">&lt;=</span>R <span class=\"token punctuation\">)</span> ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-Pairs\"><a href=\"#D-Pairs\" class=\"headerlink\" title=\"D. Pairs\"></a>D. Pairs</h2><p>给你 n 个数，在 1 到 2n 之间，接下来你要用 1 到 2n 之间的数组成 n 组数，其中 x 组选取最小值，剩余取最大值，然后组成上面给你的 n 个数。问这样满足条件的 x 的个数。</p>\n<p>官方的题解是用二分查找，找到 x 的两个范围，将给的数放在一个数组，剩余的数放在另一个数组。用贪心的方法，取最小值的数优先与另一个数组最大的数组合，这样能找到边界。相反，交换两个数组，用上面的方法得到（n-x）的范围。</p>\n<p>然后我 Debug 搞不出来，于是看到洛谷一个<a href=\"https://www.luogu.com.cn/blog/ShokuhouMisaki/solution-cf1463d\">大佬的题解</a>。解法确实很奇妙，但是我无法证明，估计我太菜了。</p>\n<p>还有因为 used 要标记 2n 的数，所以初始化要记得 2n 。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">2000010</span></span></span>\n\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>used<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> mx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>mn<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>sp<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>used<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tused<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> sp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> sp<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\tmn<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">,</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmx<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>mx<span class=\"token operator\">-</span>mn<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>一直担心掉分 , 很久的只是观望不敢打cf . 今晚打算试试 . 然后大号忘记报名 , 最后小号做的 . B题是个水题 , 当时序列找对了 , 细节没处理好 .</p>","more":"<h2 id=\"A-Dungeon\"><a href=\"#A-Dungeon\" class=\"headerlink\" title=\"A. Dungeon\"></a>A. Dungeon</h2><p>签到成功 !</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span>\n\t\tnum<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">%</span><span class=\"token number\">9</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> num<span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token operator\">&lt;=</span>a <span class=\"token operator\">&amp;&amp;</span> num<span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token operator\">&lt;=</span>b <span class=\"token operator\">&amp;&amp;</span> num<span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token operator\">&lt;=</span>c <span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"NO\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Find-The-Array\"><a href=\"#B-Find-The-Array\" class=\"headerlink\" title=\"B. Find The Array\"></a>B. Find The Array</h2><p>一看就是一个构造数列 , 我想构造相同数 (最大最小和开方向下取整 , 平均数…) , 最后想到用 2 的幂次方 , 但是我的思路是选一个距离 a<sub>i</sub> 小的 , 但好像不行?  </p>\n<p>正解是根据条件二<br>$$<br>2\\sum_{i=1}^{n}\\left|a_i-b_i\\right| \\leq S<br>$$<br>不妨我们让 b<sub>i</sub> &lt; a<sub>i</sub> , 则对单个 i 都有<br>$$<br>2(a_i-b_i)\\leq a_i \\<br>a_i\\leq 2*b_i<br>$$<br>完成 . 其实时间不严格而且2最多到29次幂 , 暴力搜索就行了 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nll num<span class=\"token punctuation\">[</span><span class=\"token number\">10000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>bin<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n\tbin<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> bin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>bin<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">;</span>\n\t\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tcin<span class=\"token operator\">>></span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span> \n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span><span class=\"token number\">29</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">>=</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-Busy-Robot\"><a href=\"#C-Busy-Robot\" class=\"headerlink\" title=\"C. Busy Robot\"></a>C. Busy Robot</h2><p><del>这道题不是有手就行</del> </p>\n<img src=\"https://img.inzamz.top/expression/shut-up.jpg\" alt=\"shut-up\" style=\"zoom:67%;\" />\n\n<p>看懂题目由手就行 , 奈何英语太烂 , 我看不懂 . 最后大概就是说一个机器人 , 接受命令后会向目标移动 . 移动过程中下的命令会被忽略 . </p>\n<p>定义 <strong>Successful Command</strong> : 第 i 个命令对应时间为 t<sub>i</sub> , 目标为 x<sub>i</sub> , 如果在闭区间 [ t<sub>i</sub> , t<sub>i+1</sub> ] 内 , 机器人有经过或停留在 x<sub>i</sub> 就是 <strong>Successful Command</strong> .</p>\n<p>这样就是遍历每个命令且更新位置就好了 . 直接挂 long long , 有可能炸 int . 还有结构体的 lower_bound 记得构造 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">200010</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> inf<span class=\"token operator\">=</span> <span class=\"token number\">1ll</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">com</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll tim<span class=\"token punctuation\">,</span>tar<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">com</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">com</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">tim</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">tar</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> com x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> tim<span class=\"token operator\">&lt;</span>x<span class=\"token punctuation\">.</span>tim<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> com a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> com b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>tim<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span>tim<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nvector <span class=\"token operator\">&lt;</span>com<span class=\"token operator\">></span> s <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tll nowt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>overt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>target<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>pos<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> dir<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\tcom c<span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>tim<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tll t1<span class=\"token punctuation\">,</span>t2<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tim<span class=\"token operator\">>=</span>overt<span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tnowt<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tim<span class=\"token punctuation\">;</span>\n\t\t\t\tpos<span class=\"token operator\">=</span>target<span class=\"token punctuation\">;</span>\n\t\t\t\ttarget<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos<span class=\"token operator\">-</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tar<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> dir<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">else</span> dir<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tovert<span class=\"token operator\">=</span>nowt<span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">-</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tt1<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tim<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> t2<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tim<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> t2<span class=\"token operator\">=</span>inf<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span> L<span class=\"token operator\">=</span>pos<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>t1<span class=\"token operator\">-</span>nowt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>R<span class=\"token operator\">=</span>pos<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>t2<span class=\"token operator\">-</span>nowt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">else</span> L<span class=\"token operator\">=</span>pos<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>t2<span class=\"token operator\">-</span>nowt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>R<span class=\"token operator\">=</span>pos<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>t1<span class=\"token operator\">-</span>nowt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>R<span class=\"token operator\">></span>target <span class=\"token operator\">&amp;&amp;</span> dir<span class=\"token punctuation\">)</span> R<span class=\"token operator\">=</span>target<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">></span>target <span class=\"token operator\">&amp;&amp;</span> dir<span class=\"token punctuation\">)</span> L<span class=\"token operator\">=</span>target<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>R<span class=\"token operator\">&lt;</span>target <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>dir<span class=\"token punctuation\">)</span> R<span class=\"token operator\">=</span>target<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">&lt;</span>target <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>dir<span class=\"token punctuation\">)</span> L<span class=\"token operator\">=</span>target<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> L<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tar <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tar<span class=\"token operator\">&lt;=</span>R <span class=\"token punctuation\">)</span> ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-Pairs\"><a href=\"#D-Pairs\" class=\"headerlink\" title=\"D. Pairs\"></a>D. Pairs</h2><p>给你 n 个数，在 1 到 2n 之间，接下来你要用 1 到 2n 之间的数组成 n 组数，其中 x 组选取最小值，剩余取最大值，然后组成上面给你的 n 个数。问这样满足条件的 x 的个数。</p>\n<p>官方的题解是用二分查找，找到 x 的两个范围，将给的数放在一个数组，剩余的数放在另一个数组。用贪心的方法，取最小值的数优先与另一个数组最大的数组合，这样能找到边界。相反，交换两个数组，用上面的方法得到（n-x）的范围。</p>\n<p>然后我 Debug 搞不出来，于是看到洛谷一个<a href=\"https://www.luogu.com.cn/blog/ShokuhouMisaki/solution-cf1463d\">大佬的题解</a>。解法确实很奇妙，但是我无法证明，估计我太菜了。</p>\n<p>还有因为 used 要标记 2n 的数，所以初始化要记得 2n 。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">2000010</span></span></span>\n\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>used<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> mx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>mn<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>sp<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>used<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tused<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> sp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> sp<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\tmn<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">,</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmx<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>mx<span class=\"token operator\">-</span>mn<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"UESTC PreSummer Training","date":"2021-03-21T14:29:15.000Z","updated":"2021-03-22T15:22:25.000Z","_content":"\n> 这是去年的数据结构专题，拿来练练。\n\n<!-- more -->\n\n---\n\n## A - 红魔族首屈一指の恶魔使\n\n### 解题思路\n\n括号匹配，本身就是一个栈问题。判断栈顶和接下来入栈的括号对比，如果可以匹配就让栈顶出栈；否则入栈。最后直接输出栈内元素即为答案。时间复杂度 *O(N)* , 空间复杂度 *O(N)* .\n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e6 + 10;\n\nchar mstack[maxn];\nint cnt;\n\nint main()\n{\n    // ios::sync_with_stdio(false);\n    int T, n;\n    scanf(\"%d\",&T);\n    while (T--)\n    {\n        scanf(\"%d\",&n);\n        cnt = 0;\n        for (int i = 0; i < n; i++)\n        {\n            char ch;\n            scanf(\" %c\", &ch);\n            if (cnt && mstack[cnt - 1] == '(' && ch == ')')\n                cnt--;\n            else\n                mstack[cnt++] = ch;\n        }\n        printf(\"%d\\n\", cnt);\n    }\n    return 0;\n}\n```\n\n## B - 雪菜的新家\n\n> 别看白学家讨论起恋爱的内容都是那么熟练，通篇难懂的话，诸如OO小三，XX碧池，然而只需故意高声嚷到：“白学家，可曾有女朋友！”，他便涨红了脸，额上的青筋条条绽出，争辩道：“白学家的女友哪能叫女友，叫右姑娘……”\n>\n> 白色相簿什么的，已经无所谓了。因为已经不再有歌，值得去唱了。\n>\n> 传达不了的恋情，已经不需要了。因为已经不再有人，值得去爱了。\n\n### 解题思路\n\n首先 , 作为白学家 , 我坚定 `贱男春` 的观点 , 而且作为雪菜党 , 我觉得他不配 . \n\n其次 , 这是一道并查集,记得校内赛初赛有一道,我用 `set` 水过去 , 但好像有地方写错了 , 找不出 . 最近查了并查集 , 发现了原来直接用数组和路径压缩就好了 . \n\n### 重大BUG\n\n遇到了一个很大的问题 , 其实就是一个细节 , 就是当 2 3 相互包含时 , 没必要在意先后顺序 , 因为得到其中一个 , 该集合里的其他罐子就都可以解了 . 以及如果 `2`  `3` 相互包含 , `2` 的祖先已经指向为 `3` 了 , 到 `3` 时要先判断 `2` 的祖先是不是 `3` 否则就会出现环 , 在 `find` 函数中死循环 . \n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint fa[1000010];\nbool ap[1000010];\n\nint ifind(int x)\n{\n    return fa[x] == x ? x : (fa[x] = ifind(fa[x]));\n}\n\nvoid imerge(int x, int y)\n{\n    fa[ifind(x)] = ifind(y);\n}\n\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int n, ans = 0;\n    cin >> n;\n    for (int i = 1; i <= n; i++)\n        fa[i] = i;\n    for (int i = 1; i <= n; i++)\n    {\n        int a;\n        cin >> a;\n        if (ifind(a) != i) imerge(a, i);\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        if (ap[ifind(i)] == false){\n            ans++, ap[fa[i]] = 1;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n## C - 我，不是说了能力要平均值么\n\n### 解题思路\n\n这是一道数学题 , 需要推导 . \n\n- `x` : 表示平均值\n- `S ` : 表示前 i 项之和    \n\n$$\nx\\le k \\\\\nS_r-S_{l-1} \\le k*(r-l+1) \\\\\nS_r-k*r \\le S_{l-1} -k *(l-1)\n$$\n\n于是只需要找出 $S_i-k*i$ 的 逆序对即可 . 逆序对用归并排序统计交换次数即可 . 最后用辗转相除法约分 . 时间复杂度 *O(NlogN)* , 空间复杂度*O(N)* .\n\n###  代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 2e5 + 10;\nusing ll = long long;\n\nll s[maxn], s2[maxn];\n\nll mergesort(ll l, ll r)\n{\n    if (l == r)\n        return 0;\n    ll cnt = 0, mid = (l + r) >> 1, i = l, j = mid + 1, k = l;\n    cnt += mergesort(l, mid);\n    cnt += mergesort(mid + 1, r);\n    while (i <= mid && j <= r)\n    {\n        if (s[i] >= s[j])\n        {\n            cnt += (mid - i + 1);\n            s2[k++] = s[j++];\n        }\n        else\n            s2[k++] = s[i++];\n    }\n    while (i <= mid)\n        s2[k++] = s[i++];\n    while (j <= r)\n        s2[k++] = s[j++];\n    for (i = l; i <= r; i++)\n        s[i] = s2[i];\n    return cnt;\n}\nll gcd(ll x, ll y)\n{\n    return y == 0 ? x : gcd(y, x % y);\n}\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    ll n, k, sum = 0, ans, gcdnum;\n    cin >> n >> k;\n    for (ll i = 1; i <= n; i++)\n    {\n        cin >> s[i];\n        s[i] = s[i-1] +s[i] - k ;\n    }\n    ans = mergesort(0, n);\n    gcdnum = gcd(ans, (n * (n + 1)) / 2ll);\n    cout << ans / gcdnum << '/' << n * (n + 1) / 2ll / gcdnum << endl;\n    return 0;\n}\n```\n\n\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/DataStructure.md","raw":"---\ntitle: UESTC PreSummer Training\ndate: 2021-03-21 22:29:15\nupdated: 2021-03-22 23:22:25\ntags:\n\t- 数据结构\ncategories:\n\t- ICPC 数据结构\n---\n\n> 这是去年的数据结构专题，拿来练练。\n\n<!-- more -->\n\n---\n\n## A - 红魔族首屈一指の恶魔使\n\n### 解题思路\n\n括号匹配，本身就是一个栈问题。判断栈顶和接下来入栈的括号对比，如果可以匹配就让栈顶出栈；否则入栈。最后直接输出栈内元素即为答案。时间复杂度 *O(N)* , 空间复杂度 *O(N)* .\n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e6 + 10;\n\nchar mstack[maxn];\nint cnt;\n\nint main()\n{\n    // ios::sync_with_stdio(false);\n    int T, n;\n    scanf(\"%d\",&T);\n    while (T--)\n    {\n        scanf(\"%d\",&n);\n        cnt = 0;\n        for (int i = 0; i < n; i++)\n        {\n            char ch;\n            scanf(\" %c\", &ch);\n            if (cnt && mstack[cnt - 1] == '(' && ch == ')')\n                cnt--;\n            else\n                mstack[cnt++] = ch;\n        }\n        printf(\"%d\\n\", cnt);\n    }\n    return 0;\n}\n```\n\n## B - 雪菜的新家\n\n> 别看白学家讨论起恋爱的内容都是那么熟练，通篇难懂的话，诸如OO小三，XX碧池，然而只需故意高声嚷到：“白学家，可曾有女朋友！”，他便涨红了脸，额上的青筋条条绽出，争辩道：“白学家的女友哪能叫女友，叫右姑娘……”\n>\n> 白色相簿什么的，已经无所谓了。因为已经不再有歌，值得去唱了。\n>\n> 传达不了的恋情，已经不需要了。因为已经不再有人，值得去爱了。\n\n### 解题思路\n\n首先 , 作为白学家 , 我坚定 `贱男春` 的观点 , 而且作为雪菜党 , 我觉得他不配 . \n\n其次 , 这是一道并查集,记得校内赛初赛有一道,我用 `set` 水过去 , 但好像有地方写错了 , 找不出 . 最近查了并查集 , 发现了原来直接用数组和路径压缩就好了 . \n\n### 重大BUG\n\n遇到了一个很大的问题 , 其实就是一个细节 , 就是当 2 3 相互包含时 , 没必要在意先后顺序 , 因为得到其中一个 , 该集合里的其他罐子就都可以解了 . 以及如果 `2`  `3` 相互包含 , `2` 的祖先已经指向为 `3` 了 , 到 `3` 时要先判断 `2` 的祖先是不是 `3` 否则就会出现环 , 在 `find` 函数中死循环 . \n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint fa[1000010];\nbool ap[1000010];\n\nint ifind(int x)\n{\n    return fa[x] == x ? x : (fa[x] = ifind(fa[x]));\n}\n\nvoid imerge(int x, int y)\n{\n    fa[ifind(x)] = ifind(y);\n}\n\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int n, ans = 0;\n    cin >> n;\n    for (int i = 1; i <= n; i++)\n        fa[i] = i;\n    for (int i = 1; i <= n; i++)\n    {\n        int a;\n        cin >> a;\n        if (ifind(a) != i) imerge(a, i);\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        if (ap[ifind(i)] == false){\n            ans++, ap[fa[i]] = 1;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n## C - 我，不是说了能力要平均值么\n\n### 解题思路\n\n这是一道数学题 , 需要推导 . \n\n- `x` : 表示平均值\n- `S ` : 表示前 i 项之和    \n\n$$\nx\\le k \\\\\nS_r-S_{l-1} \\le k*(r-l+1) \\\\\nS_r-k*r \\le S_{l-1} -k *(l-1)\n$$\n\n于是只需要找出 $S_i-k*i$ 的 逆序对即可 . 逆序对用归并排序统计交换次数即可 . 最后用辗转相除法约分 . 时间复杂度 *O(NlogN)* , 空间复杂度*O(N)* .\n\n###  代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 2e5 + 10;\nusing ll = long long;\n\nll s[maxn], s2[maxn];\n\nll mergesort(ll l, ll r)\n{\n    if (l == r)\n        return 0;\n    ll cnt = 0, mid = (l + r) >> 1, i = l, j = mid + 1, k = l;\n    cnt += mergesort(l, mid);\n    cnt += mergesort(mid + 1, r);\n    while (i <= mid && j <= r)\n    {\n        if (s[i] >= s[j])\n        {\n            cnt += (mid - i + 1);\n            s2[k++] = s[j++];\n        }\n        else\n            s2[k++] = s[i++];\n    }\n    while (i <= mid)\n        s2[k++] = s[i++];\n    while (j <= r)\n        s2[k++] = s[j++];\n    for (i = l; i <= r; i++)\n        s[i] = s2[i];\n    return cnt;\n}\nll gcd(ll x, ll y)\n{\n    return y == 0 ? x : gcd(y, x % y);\n}\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    ll n, k, sum = 0, ans, gcdnum;\n    cin >> n >> k;\n    for (ll i = 1; i <= n; i++)\n    {\n        cin >> s[i];\n        s[i] = s[i-1] +s[i] - k ;\n    }\n    ans = mergesort(0, n);\n    gcdnum = gcd(ans, (n * (n + 1)) / 2ll);\n    cout << ans / gcdnum << '/' << n * (n + 1) / 2ll / gcdnum << endl;\n    return 0;\n}\n```\n\n\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/DataStructure","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujq001r63jngz5y7bc3","content":"<blockquote>\n<p>这是去年的数据结构专题，拿来练练。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"A-红魔族首屈一指の恶魔使\"><a href=\"#A-红魔族首屈一指の恶魔使\" class=\"headerlink\" title=\"A - 红魔族首屈一指の恶魔使\"></a>A - 红魔族首屈一指の恶魔使</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>括号匹配，本身就是一个栈问题。判断栈顶和接下来入栈的括号对比，如果可以匹配就让栈顶出栈；否则入栈。最后直接输出栈内元素即为答案。时间复杂度 <em>O(N)</em> , 空间复杂度 <em>O(N)</em> .</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">1e6</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span> mstack<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ios::sync_with_stdio(false);</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" %c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&amp;&amp;</span> mstack<span class=\"token punctuation\">[</span>cnt <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n                cnt<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                mstack<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-雪菜的新家\"><a href=\"#B-雪菜的新家\" class=\"headerlink\" title=\"B - 雪菜的新家\"></a>B - 雪菜的新家</h2><blockquote>\n<p>别看白学家讨论起恋爱的内容都是那么熟练，通篇难懂的话，诸如OO小三，XX碧池，然而只需故意高声嚷到：“白学家，可曾有女朋友！”，他便涨红了脸，额上的青筋条条绽出，争辩道：“白学家的女友哪能叫女友，叫右姑娘……”</p>\n<p>白色相簿什么的，已经无所谓了。因为已经不再有歌，值得去唱了。</p>\n<p>传达不了的恋情，已经不需要了。因为已经不再有人，值得去爱了。</p>\n</blockquote>\n<h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>首先 , 作为白学家 , 我坚定 <code>贱男春</code> 的观点 , 而且作为雪菜党 , 我觉得他不配 . </p>\n<p>其次 , 这是一道并查集,记得校内赛初赛有一道,我用 <code>set</code> 水过去 , 但好像有地方写错了 , 找不出 . 最近查了并查集 , 发现了原来直接用数组和路径压缩就好了 . </p>\n<h3 id=\"重大BUG\"><a href=\"#重大BUG\" class=\"headerlink\" title=\"重大BUG\"></a>重大BUG</h3><p>遇到了一个很大的问题 , 其实就是一个细节 , 就是当 2 3 相互包含时 , 没必要在意先后顺序 , 因为得到其中一个 , 该集合里的其他罐子就都可以解了 . 以及如果 <code>2</code>  <code>3</code> 相互包含 , <code>2</code> 的祖先已经指向为 <code>3</code> 了 , 到 <code>3</code> 时要先判断 <code>2</code> 的祖先是不是 <code>3</code> 否则就会出现环 , 在 <code>find</code> 函数中死循环 . </p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> fa<span class=\"token punctuation\">[</span><span class=\"token number\">1000010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> ap<span class=\"token punctuation\">[</span><span class=\"token number\">1000010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ifind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ifind</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">imerge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    fa<span class=\"token punctuation\">[</span><span class=\"token function\">ifind</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ifind</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        fa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ifind</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span> <span class=\"token function\">imerge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">[</span><span class=\"token function\">ifind</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            ans<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> ap<span class=\"token punctuation\">[</span>fa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-我，不是说了能力要平均值么\"><a href=\"#C-我，不是说了能力要平均值么\" class=\"headerlink\" title=\"C - 我，不是说了能力要平均值么\"></a>C - 我，不是说了能力要平均值么</h2><h3 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这是一道数学题 , 需要推导 . </p>\n<ul>\n<li><code>x</code> : 表示平均值</li>\n<li><code>S </code> : 表示前 i 项之和    </li>\n</ul>\n<p>$$<br>x\\le k \\<br>S_r-S_{l-1} \\le k*(r-l+1) \\<br>S_r-k*r \\le S_{l-1} -k *(l-1)<br>$$</p>\n<p>于是只需要找出 $S_i-k<em>i$ 的 逆序对即可 . 逆序对用归并排序统计交换次数即可 . 最后用辗转相除法约分 . 时间复杂度 <em>O(NlogN)</em> , 空间复杂度</em>O(N)* .</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">2e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n\nll s<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nll <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span>ll l<span class=\"token punctuation\">,</span> ll r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ll cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n    cnt <span class=\"token operator\">+=</span> <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cnt <span class=\"token operator\">+=</span> <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cnt <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s2<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span>\n            s2<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span>\n        s2<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span>\n        s2<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nll <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">,</span> ll y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> y <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">%</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ll n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">,</span> gcdnum<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> k <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    ans <span class=\"token operator\">=</span> <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gcdnum <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2ll</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">/</span> gcdnum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2ll</span> <span class=\"token operator\">/</span> gcdnum <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<blockquote>\n<p>这是去年的数据结构专题，拿来练练。</p>\n</blockquote>","more":"<hr>\n<h2 id=\"A-红魔族首屈一指の恶魔使\"><a href=\"#A-红魔族首屈一指の恶魔使\" class=\"headerlink\" title=\"A - 红魔族首屈一指の恶魔使\"></a>A - 红魔族首屈一指の恶魔使</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>括号匹配，本身就是一个栈问题。判断栈顶和接下来入栈的括号对比，如果可以匹配就让栈顶出栈；否则入栈。最后直接输出栈内元素即为答案。时间复杂度 <em>O(N)</em> , 空间复杂度 <em>O(N)</em> .</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">1e6</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span> mstack<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ios::sync_with_stdio(false);</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" %c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&amp;&amp;</span> mstack<span class=\"token punctuation\">[</span>cnt <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n                cnt<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                mstack<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-雪菜的新家\"><a href=\"#B-雪菜的新家\" class=\"headerlink\" title=\"B - 雪菜的新家\"></a>B - 雪菜的新家</h2><blockquote>\n<p>别看白学家讨论起恋爱的内容都是那么熟练，通篇难懂的话，诸如OO小三，XX碧池，然而只需故意高声嚷到：“白学家，可曾有女朋友！”，他便涨红了脸，额上的青筋条条绽出，争辩道：“白学家的女友哪能叫女友，叫右姑娘……”</p>\n<p>白色相簿什么的，已经无所谓了。因为已经不再有歌，值得去唱了。</p>\n<p>传达不了的恋情，已经不需要了。因为已经不再有人，值得去爱了。</p>\n</blockquote>\n<h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>首先 , 作为白学家 , 我坚定 <code>贱男春</code> 的观点 , 而且作为雪菜党 , 我觉得他不配 . </p>\n<p>其次 , 这是一道并查集,记得校内赛初赛有一道,我用 <code>set</code> 水过去 , 但好像有地方写错了 , 找不出 . 最近查了并查集 , 发现了原来直接用数组和路径压缩就好了 . </p>\n<h3 id=\"重大BUG\"><a href=\"#重大BUG\" class=\"headerlink\" title=\"重大BUG\"></a>重大BUG</h3><p>遇到了一个很大的问题 , 其实就是一个细节 , 就是当 2 3 相互包含时 , 没必要在意先后顺序 , 因为得到其中一个 , 该集合里的其他罐子就都可以解了 . 以及如果 <code>2</code>  <code>3</code> 相互包含 , <code>2</code> 的祖先已经指向为 <code>3</code> 了 , 到 <code>3</code> 时要先判断 <code>2</code> 的祖先是不是 <code>3</code> 否则就会出现环 , 在 <code>find</code> 函数中死循环 . </p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> fa<span class=\"token punctuation\">[</span><span class=\"token number\">1000010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> ap<span class=\"token punctuation\">[</span><span class=\"token number\">1000010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ifind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ifind</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">imerge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    fa<span class=\"token punctuation\">[</span><span class=\"token function\">ifind</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ifind</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        fa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ifind</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span> <span class=\"token function\">imerge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">[</span><span class=\"token function\">ifind</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            ans<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> ap<span class=\"token punctuation\">[</span>fa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-我，不是说了能力要平均值么\"><a href=\"#C-我，不是说了能力要平均值么\" class=\"headerlink\" title=\"C - 我，不是说了能力要平均值么\"></a>C - 我，不是说了能力要平均值么</h2><h3 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这是一道数学题 , 需要推导 . </p>\n<ul>\n<li><code>x</code> : 表示平均值</li>\n<li><code>S </code> : 表示前 i 项之和    </li>\n</ul>\n<p>$$<br>x\\le k \\<br>S_r-S_{l-1} \\le k*(r-l+1) \\<br>S_r-k*r \\le S_{l-1} -k *(l-1)<br>$$</p>\n<p>于是只需要找出 $S_i-k<em>i$ 的 逆序对即可 . 逆序对用归并排序统计交换次数即可 . 最后用辗转相除法约分 . 时间复杂度 <em>O(NlogN)</em> , 空间复杂度</em>O(N)* .</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">2e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n\nll s<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nll <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span>ll l<span class=\"token punctuation\">,</span> ll r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ll cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n    cnt <span class=\"token operator\">+=</span> <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cnt <span class=\"token operator\">+=</span> <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cnt <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s2<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span>\n            s2<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span>\n        s2<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span>\n        s2<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nll <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">,</span> ll y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> y <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">%</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ll n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">,</span> gcdnum<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> k <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    ans <span class=\"token operator\">=</span> <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gcdnum <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2ll</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">/</span> gcdnum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2ll</span> <span class=\"token operator\">/</span> gcdnum <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"动态规划合集","date":"2021-03-20T02:14:30.000Z","updated":"2021-04-27T15:07:58.000Z","_content":"\n> 在高中只学过简单的背包问题，会写简单的状态转移方程。就自以为差不多（实际上就是在逃避现实），而最近刷了 ABC190 后，写了一道状压DP，才发现是时候练一下了。选择题目很杂 , 有些是学校的题目 , 没有题面 . 毕竟也没有人会看的吧 . \n>\n> - `UPST2020` : UESTC PreSummer Training 2020\n\n<!-- more -->\n\n---\n\n## 未分类\n\n### UPST2020 F - 我是音乐小天才\n\n#### 解题思路\n\n最简单的回文串构造 , 就是反着写一次 . 要增加最少的字符 , 最好的方法就是利用好原字符里的回文字串 . 所以我们统计字符串和镜像字符串相同的字符 , 将相同的部分 (不必连续) 重叠 , 剩下的就是需要补充的字符了 . 时间复杂度$O(N^2)$, 空间复杂度$O(N^2)$.\n\n- dp<sub>i , j</sub> 表示字符串到第 i 个字符 , 镜像字符串到第 j 个字符时的最长公共字串 . 原字符串 `s1` , 镜像 `s2` \n- $dp_{i , j} = dp_{i-1 , j-1}+1 \\ \\ s1[i]==s2[j]$\n- $dp_{i , j} = max(dp_{i, j-1},dp_{i-1,j}) \\ \\ s1[i]!=s2[j]$\n\n#### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 5050;\nusing ll = long long;\n\nchar s1[maxn], s2[maxn];\nint dp[maxn][maxn];\n\nint main()\n{\n    // ios::sync_with_stdio(false);\n    // cin.tie(0)\n    int n;\n    scanf(\"%d\", &n);\n    scanf(\"%s\", s1 + 1);\n    for (int i = 1; i <= n; i++)\n        s2[n - i + 1] = s1[i];\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            if (s1[i] == s2[j])\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            else\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]);\n        }\n    }\n    printf(\"%d\",n-dp[n][n]);\n    return 0;\n}\n```\n\n## 背包DP\n\n> 背包问题是在给定有限空间下求物品最大价值的DP , DP通过占用 `i` 空间中前 `j` 件物品获得的最大值进行转移 . 大致有 01 背包以及多重背包问题 , 涉及 `二进制算法`  优化 . 本质区别是物品有多个还是一个 .\n\n### UPST2020 G - 君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”\n\n#### 解题思路\n\n这是一个多重背包问题 , 多重背包在 01背包 基础上加上一个 k 变量 , 循环一下 , 使用滚动数组 . 对于神奇物品就是循环枚举给予的空间 , 更新 dp 值 . 给他数据范围较水 , 所以直接可以过了 . **当然这道题最坑的是对于神奇物品 , 当分配空间为0 , 即不放入时 , 它的价值不为0 , 所以真TM神奇 . **时间复杂度$O(nC\\sum^n_{i=1}k_i)$, 空间复杂度$O(C+n+m)$.\n\n本题有加强版 , 就是下面的 R 题 .\n\n#### 代码\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\n\ntypedef long long ll;\n\n#define MAXC 1010\n\nll M[6][3],N[MAXC][3];\nll dp[MAXC];\n\nll GetMVal(ll node,ll v)\n{\n\treturn M[node][0]*v*v+M[node][1]*v+M[node][2];\n}\n\nint main()\n{\n\tll n,m,C;\n\tscanf (\"%lld %lld %lld\",&n,&m,&C);\n\tfor (ll i=1;i<=n;i++) scanf(\"%lld %lld %lld\",&N[i][0],&N[i][1],&N[i][2]);\n\tfor (ll i=1;i<=m;i++) scanf(\"%lld %lld %lld\",&M[i][0],&M[i][1],&M[i][2]);\n\tfor (ll i=1;i<=n;i++)\n\t\tfor (ll j=C;j>=N[i][0];j--)\n\t\t\tfor (ll k=1;k<=N[i][2];k++)\n\t\t\t{\n\t\t\t\tif (j-k*N[i][0]>=0) dp[j]=max(dp[j],dp[j-k*N[i][0]]+k*N[i][1]);\n\t\t\t}\n\tfor (int i=0;i<=C;i++)\n\tprintf(\"%lld\\n\",dp[i]);\n\tfor (ll i=1;i<=m;i++) \n\t\tfor (ll j=C;j>=0;j--)\n\t\t{\n\t\t\tfor (ll k=0;k<=j;k++)\n\t\t\t{\n\t\t\t\tdp[j]=max(dp[j],dp[j-k]+GetMVal(i,k));\n\t\t\t}\n\t\t}\n\tprintf(\"%lld\\n\",dp[C]);\n\treturn 0;\n}\n```\n\n### UPST2020 R -君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁” II\n\n#### 解题思路\n\n跟 G 题一样 , 但是这时候就需要优化速度了 . 原解法精确时间复杂度应该是$nC \\sum^{n}_{i=1}k_i$, nC 是背包问题的基础解 , 无法再次优化 . 于是我们考虑$\\sum^{n}_{i=1}k_i$. 我们不断考虑 k 的取值 , 其实是有重复的 . 我们只是想让 k 能取到所有值 , 找到最优解 , 那么能不能把它分成若干个小的值 , 让它们随意组合得到 k  , 这样的最优解就是答案了呢 .\n\n> 这部分我也是看了一段时间才想通的 , 讲的可能不好 . \n\n换句话说 , 我们不去考虑多重背包问题了 , 把它转化成 01背包 . 原理就是把 k 个相同物品分成若干个物品 , 使得任取一个 k 都能用这若干个物品 (取或者不取) 来表示. 很自然 , 分成若干个 , 不就是二进制算法吗 ? 于是把 k 个物品分成 1 2 4 8 ... 2<sup>n</sup> 个该物品捆绑而成的新物品 , 如果无法刚好分完 , 剩下部分单独捆绑作为一个新物品. 于是转化为 01背包问题 . 时间复杂度$O(nC\\sum^n_{i=1}log_2 k_i)$, 空间复杂度$O(C+n+m)$ .\n\n#### 代码\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\n\ntypedef long long ll;\n\n#define MAXC 10010\n\nll M[6][3],N[MAXC*8][3];\nll dp[MAXC];\n\ninline ll GetMVal(ll node,ll v)\n{\n\treturn M[node][0]*v*v+M[node][1]*v+M[node][2];\n}\n\nint main()\n{\n\tll n,m,C,cur;\n\tscanf (\"%lld %lld %lld\",&n,&m,&C);\n\tcur=n;\n\tfor (ll i=1;i<=n;i++) {\n\t\tscanf(\"%lld %lld %lld\",&N[i][0],&N[i][1],&N[i][2]);\n\t}\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tint cnt=1;\n\t\twhile(N[i][2]-cnt>0)\n\t\t{\n\t\t\tN[++cur][0]=N[i][0]*cnt;\n\t\t\tN[cur][1]=N[i][1]*cnt;\n\t\t\tN[i][2]-=cnt;\n\t\t\tcnt*=2;\n\t\t}\n\t\tN[i][0]*=N[i][2];\n\t\tN[i][1]*=N[i][2];\n\t}\n\tfor (ll i=1;i<=m;i++) scanf(\"%lld %lld %lld\",&M[i][0],&M[i][1],&M[i][2]);\n\tfor (ll i=1;i<=cur;i++)\n\t\tfor (ll j=C;j>=N[i][0];j--)\n\t\t\t\tdp[j]=max(dp[j],dp[j-N[i][0]]+N[i][1]);\n\tfor (ll i=1;i<=m;i++) \n\t\tfor (ll j=C;j>=0;j--)\n\t\t{\n\t\t\tfor (ll k=0;k<=j;k++)\n\t\t\t{\n\t\t\t\tdp[j]=max(dp[j],dp[j-k]+GetMVal(i,k));\n\t\t\t}\n\t\t}\n\tprintf(\"%lld\\n\",dp[C]);\n\treturn 0;\n}\n```\n\n#### 小插曲\n\n一定记得二进制优化时 , 把原本的记录数量的值减掉 . 我因为这个 `RE` , 因为是`long long`太大`MLE` , 最后把`long long`  改成 `int` , DEBUG了一下午.\n\n## 区间DP\n\n> 区间DP最主要特征就是问题解与区间范围有关 , 小区间可以合成大区间 , 通过枚举区间分割点得到大区间的解 .\n\n### NOI 1995 石子合并\n\n#### 解题思路\n\n我们定义 $f_{(i,j)}$ 是第 i 个到第 j 个石子合并所能得到的最大值 , 那么状态转移方程 : \n$$\nf_{(i,j)}=\\max_{k=i}^{j-1}(f_{(i,k)}+f_{(k+1,j)}+W_{(i,j)})\n$$\n其中$W_{(i,j)}$表示第 i 个石子到第 j 个石子的总重量 , 使用前缀和计算 . 需要最大最小 , 只需两个 f 数组和两句判断语句就好了 .\n\n我们需要解决环的问题 . 石子围成环状 , 如果我们枚举起点 , 整个时间复杂度达到了$O(N^4)$, 这是不能接受的 . 于是我们将整条链延长一倍 , 这样的链包含了所有环上的序列 , 也就是数量级降了一级 , 时间复杂度$O(N^3)$.\n\n#### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 220;\nconst int IINF = 1e9;\n\nusing ll = long long;\n\nint sum[maxn * 2], dpmax[maxn][maxn], dpmin[maxn][maxn];\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int n, ans;\n    cin >> n;\n    for (int i = 1; i <= 2 * n; ++i) {\n        if (i <= n) {\n            cin >> sum[i];\n            sum[i + n] = sum[i];\n        }\n        sum[i] += sum[i - 1];\n    }\n    for (int len = 1; len <= n; ++len) {\n        for (int i = 1; i <  2 * n; ++i) {\n            int j = i + len - 1;\n            if (len == 1) {\n                dpmax[i][j] = dpmin[i][j] = 0;\n                continue;\n            }\n            dpmax[i][j] = 0;\n            dpmin[i][j] = IINF;\n            for (int k = i; k < j && k <= 2 * n - 1; ++k) {\n                dpmax[i][j] = max(dpmax[i][j], dpmax[i][k] + dpmax[k + 1][j] + sum[j] - sum[i - 1]);\n                dpmin[i][j] = min(dpmin[i][j], dpmin[i][k] + dpmin[k + 1][j] + sum[j] - sum[i - 1]);\n            }\n        }\n    }\n    ans = dpmin[n][2 * n - 1];\n    for (int i = 1; i < n; ++i)\n        ans = min(ans, dpmin[i][i + n - 1]);\n    cout << ans << endl;\n    ans = dpmax[n][2 * n - 1];\n    for (int i = 1; i < n; ++i)\n        ans = max(ans, dpmax[i][i + n - 1]);\n    cout << ans << endl;\n    return 0;\n}\n```\n\n### NOIP2007 矩阵取数游戏\n\n#### 解题思路\n\n每一行都是相对独立的 , 那么只需要逐行计算即可 . 而且区间转移方面不需要枚举 k , 以为转移状态只有在队头取和队尾 . 记$f_{(i,j)}$为区间 `[i,j]` 时取的的最高得分 . 状态转移方程:\n$$\nf_{(i,j)}=\\max(f_{(i-1,j)}+n_{i-1}*2^k,f_{(i,j+1)}+n_{j+1}*2^k)\n$$\n\n#### 高精度\n\n本题可以使用 128位int 解决问题 , 不需要高精度 . 但是 C/C++ 没有办法读取 `__int128` 需要自行编写快读 . `__int128` 真的是个好东西 . \n\n#### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 110;\nusing ll = __int128;\n\nll num[maxn][maxn], ans = 0;\nll dp[maxn][maxn], base[maxn];\n\ninline void print(__int128 x)\n{\n    if (x < 0) {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n        print(x / 10);\n    putchar(x % 10 + '0');\n}\n\ninline __int128 read()\n{\n    __int128 x = 0, f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch > '9') {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9') {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x * f;\n}\n\nint main()\n{\n    base[0] = 1L;\n    for (int i = 1; i <= 100; ++i)\n        base[i] = base[i - 1] * 2;\n    ll n, m;\n    n = read();\n    m = read();\n    for (int i = 1; i <= n; ++i)\n        for (int j = 1; j <= m; ++j)\n            num[i][j] = read();\n    for (int k = 1; k <= n; ++k) {\n        for (int i = 1; i <= m; ++i) {//beg & end\n            for (int j = m; j >= i; --j)\n                dp[i][j] = max(dp[i - 1][j] + base[m - j + i - 1] * num[k][i - 1], dp[i][j + 1] + base[m - j + i - 1] * num[k][j + 1]);\n        }\n        ll rans = 0;\n        for (int i = 1; i <= m; ++i)\n            rans = max(rans, dp[i][i] + num[k][i] * base[m]);\n        ans += rans;\n    }\n    print(ans);\n    return 0;\n}\n```\n\n### IOI 2000 邮局\n\n#### 解题思路\n\n- $f_{(i,j)}$: 在前 `i` 个村庄中放置 `j` 个邮局所求值的最小值\n\n- $W_{(i,j)}$: 第 `i` 个村庄与第 `j` 个村庄间放一个邮局的所求值最小值\n\n状态转移方程 : \n$$\nf_{(i,j)} = f_{(k,j-1)}+W_{(k+1,i)}\n$$\n\n其实 W 是可以预处理的 , 根据数学知识 , 如果有奇数个村庄 , 邮局要在中位数处 , 偶数要在最中间两个村庄间的任意位置 , 其实统一一下就是首尾序号除以 2 向下取整 . 时间复杂度下降到$O(PV^2)$.\n\n这样的复杂度只能过60% , 至于100% , 需要四边形不等式优化 .\n\n#### 四边形优化\n\n> 参考资料:\n>\n> - [OI Wiki](https://oi-wiki.org/dp/opt/quadrangle/) : https://oi-wiki.org/dp/opt/quadrangle/\n> -  [mlystdcall](https://www.cnblogs.com/mlystdcall/) : https://www.cnblogs.com/mlystdcall/p/6525962.html\n\n第二篇文章中有说过一种躲开证明的方法 , 也可以自己动手证明 . 总之四边形不等式给出了一种方法 , 使得 k 的范围大大缩小了 , 于是又使时间复杂度下降了一个级别 , 变成$O(PV^2)$.\n\n具体有时间再补 , 主要是要自己搞懂不等式 . \n\n#### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define F(a,b,c) for(int (a)=(b);(a)<=(c);++(a))\n#define f(a,b,c) for(int (a)=(b);(a)>=(c);--(a))\n#define INF 0x3f3f3f3f\n\nconst int maxv = 3010;\nconst int maxp = 310;\nusing ll = long long;\n\nint x[maxv], dp[maxv][maxp], d[maxv][maxp], w[maxv][maxv];\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int V, P;\n    cin >> V >> P;\n    memset(dp, 0x3f, sizeof(dp));\n    F(i, 1, V)    cin >> x[i];\n    sort(x + 1, x + 1 + V);\n    F(l, 1, V) {\n        w[l][l] = 0;\n        F(r, l + 1, V) {\n            w[l][r] = w[l][r - 1] + x[r] - x[(l + r) >> 1];\n        }\n    }\n    dp[0][0] = 0;\n    F(j, 1, P) {\n        d[V + 1][j] = V;\n        f(i, V, 1) {\n            int mind, mindp = INF;\n            F(k, d[i][j - 1], d[i + 1][j]) {\n                if (dp[k][j - 1] + w[k + 1][i] < mindp) {\n                    mindp = dp[k][j - 1] + w[k + 1][i];\n                    mind = k;\n                }\n            }\n            dp[i][j] = mindp;\n            d[i][j] = mind;\n        }\n    }\n    cout << dp[V][P] << endl;\n    return 0;\n}\n```\n\n###  UPST2020 P  近战法师暴击好累\n\n#### 解题思路\n\n显然 , 可以合并 , 判断为区间DP . 但是合并后会出现新的单位 , 是处理的难点 . 我们使用一个数组表示如果能合并 , 这个区间的新值 . 然后就是简单的区间 DP 了 .\n\n#### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 505;\nusing ll = long long;\n\nint dp[maxn][maxn], a[maxn][maxn];\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int n;\n    cin >> n;\n    for (int i = 1; i <= n; ++i)\n        cin >> a[i][i];\n    memset(dp, 0x3f, sizeof(dp));\n    for (int len = 1; len <= n; ++len) {\n        for (int i = 1, j = i + len - 1; j <= n; ++i, ++j) {\n            dp[i][i] = 1;\n            for (int k = i; k < j; ++k) {\n                if (dp[i][k] == 1 && dp[k + 1][j] == 1 && a[i][k] == a[k + 1][j]) {\n                    a[i][j] = a[i][k] + 1;\n                    dp[i][j] = 1;\n                }\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j]);\n            }\n        }\n    }\n    cout << dp[1][n] << endl;\n    return 0;\n}\n```\n\n## 数位DP\n\n### \n\n解题思路\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/DynamicProgramming.md","raw":"---\ntitle: 动态规划合集\ndate: 2021-03-20 10:14:30\nupdated: 2021-04-27 23:07:58\ntags:\n\t- 动态规划\ncategories:\n\t- ICPC 动态规划\n---\n\n> 在高中只学过简单的背包问题，会写简单的状态转移方程。就自以为差不多（实际上就是在逃避现实），而最近刷了 ABC190 后，写了一道状压DP，才发现是时候练一下了。选择题目很杂 , 有些是学校的题目 , 没有题面 . 毕竟也没有人会看的吧 . \n>\n> - `UPST2020` : UESTC PreSummer Training 2020\n\n<!-- more -->\n\n---\n\n## 未分类\n\n### UPST2020 F - 我是音乐小天才\n\n#### 解题思路\n\n最简单的回文串构造 , 就是反着写一次 . 要增加最少的字符 , 最好的方法就是利用好原字符里的回文字串 . 所以我们统计字符串和镜像字符串相同的字符 , 将相同的部分 (不必连续) 重叠 , 剩下的就是需要补充的字符了 . 时间复杂度$O(N^2)$, 空间复杂度$O(N^2)$.\n\n- dp<sub>i , j</sub> 表示字符串到第 i 个字符 , 镜像字符串到第 j 个字符时的最长公共字串 . 原字符串 `s1` , 镜像 `s2` \n- $dp_{i , j} = dp_{i-1 , j-1}+1 \\ \\ s1[i]==s2[j]$\n- $dp_{i , j} = max(dp_{i, j-1},dp_{i-1,j}) \\ \\ s1[i]!=s2[j]$\n\n#### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 5050;\nusing ll = long long;\n\nchar s1[maxn], s2[maxn];\nint dp[maxn][maxn];\n\nint main()\n{\n    // ios::sync_with_stdio(false);\n    // cin.tie(0)\n    int n;\n    scanf(\"%d\", &n);\n    scanf(\"%s\", s1 + 1);\n    for (int i = 1; i <= n; i++)\n        s2[n - i + 1] = s1[i];\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            if (s1[i] == s2[j])\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            else\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]);\n        }\n    }\n    printf(\"%d\",n-dp[n][n]);\n    return 0;\n}\n```\n\n## 背包DP\n\n> 背包问题是在给定有限空间下求物品最大价值的DP , DP通过占用 `i` 空间中前 `j` 件物品获得的最大值进行转移 . 大致有 01 背包以及多重背包问题 , 涉及 `二进制算法`  优化 . 本质区别是物品有多个还是一个 .\n\n### UPST2020 G - 君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”\n\n#### 解题思路\n\n这是一个多重背包问题 , 多重背包在 01背包 基础上加上一个 k 变量 , 循环一下 , 使用滚动数组 . 对于神奇物品就是循环枚举给予的空间 , 更新 dp 值 . 给他数据范围较水 , 所以直接可以过了 . **当然这道题最坑的是对于神奇物品 , 当分配空间为0 , 即不放入时 , 它的价值不为0 , 所以真TM神奇 . **时间复杂度$O(nC\\sum^n_{i=1}k_i)$, 空间复杂度$O(C+n+m)$.\n\n本题有加强版 , 就是下面的 R 题 .\n\n#### 代码\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\n\ntypedef long long ll;\n\n#define MAXC 1010\n\nll M[6][3],N[MAXC][3];\nll dp[MAXC];\n\nll GetMVal(ll node,ll v)\n{\n\treturn M[node][0]*v*v+M[node][1]*v+M[node][2];\n}\n\nint main()\n{\n\tll n,m,C;\n\tscanf (\"%lld %lld %lld\",&n,&m,&C);\n\tfor (ll i=1;i<=n;i++) scanf(\"%lld %lld %lld\",&N[i][0],&N[i][1],&N[i][2]);\n\tfor (ll i=1;i<=m;i++) scanf(\"%lld %lld %lld\",&M[i][0],&M[i][1],&M[i][2]);\n\tfor (ll i=1;i<=n;i++)\n\t\tfor (ll j=C;j>=N[i][0];j--)\n\t\t\tfor (ll k=1;k<=N[i][2];k++)\n\t\t\t{\n\t\t\t\tif (j-k*N[i][0]>=0) dp[j]=max(dp[j],dp[j-k*N[i][0]]+k*N[i][1]);\n\t\t\t}\n\tfor (int i=0;i<=C;i++)\n\tprintf(\"%lld\\n\",dp[i]);\n\tfor (ll i=1;i<=m;i++) \n\t\tfor (ll j=C;j>=0;j--)\n\t\t{\n\t\t\tfor (ll k=0;k<=j;k++)\n\t\t\t{\n\t\t\t\tdp[j]=max(dp[j],dp[j-k]+GetMVal(i,k));\n\t\t\t}\n\t\t}\n\tprintf(\"%lld\\n\",dp[C]);\n\treturn 0;\n}\n```\n\n### UPST2020 R -君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁” II\n\n#### 解题思路\n\n跟 G 题一样 , 但是这时候就需要优化速度了 . 原解法精确时间复杂度应该是$nC \\sum^{n}_{i=1}k_i$, nC 是背包问题的基础解 , 无法再次优化 . 于是我们考虑$\\sum^{n}_{i=1}k_i$. 我们不断考虑 k 的取值 , 其实是有重复的 . 我们只是想让 k 能取到所有值 , 找到最优解 , 那么能不能把它分成若干个小的值 , 让它们随意组合得到 k  , 这样的最优解就是答案了呢 .\n\n> 这部分我也是看了一段时间才想通的 , 讲的可能不好 . \n\n换句话说 , 我们不去考虑多重背包问题了 , 把它转化成 01背包 . 原理就是把 k 个相同物品分成若干个物品 , 使得任取一个 k 都能用这若干个物品 (取或者不取) 来表示. 很自然 , 分成若干个 , 不就是二进制算法吗 ? 于是把 k 个物品分成 1 2 4 8 ... 2<sup>n</sup> 个该物品捆绑而成的新物品 , 如果无法刚好分完 , 剩下部分单独捆绑作为一个新物品. 于是转化为 01背包问题 . 时间复杂度$O(nC\\sum^n_{i=1}log_2 k_i)$, 空间复杂度$O(C+n+m)$ .\n\n#### 代码\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\n\ntypedef long long ll;\n\n#define MAXC 10010\n\nll M[6][3],N[MAXC*8][3];\nll dp[MAXC];\n\ninline ll GetMVal(ll node,ll v)\n{\n\treturn M[node][0]*v*v+M[node][1]*v+M[node][2];\n}\n\nint main()\n{\n\tll n,m,C,cur;\n\tscanf (\"%lld %lld %lld\",&n,&m,&C);\n\tcur=n;\n\tfor (ll i=1;i<=n;i++) {\n\t\tscanf(\"%lld %lld %lld\",&N[i][0],&N[i][1],&N[i][2]);\n\t}\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tint cnt=1;\n\t\twhile(N[i][2]-cnt>0)\n\t\t{\n\t\t\tN[++cur][0]=N[i][0]*cnt;\n\t\t\tN[cur][1]=N[i][1]*cnt;\n\t\t\tN[i][2]-=cnt;\n\t\t\tcnt*=2;\n\t\t}\n\t\tN[i][0]*=N[i][2];\n\t\tN[i][1]*=N[i][2];\n\t}\n\tfor (ll i=1;i<=m;i++) scanf(\"%lld %lld %lld\",&M[i][0],&M[i][1],&M[i][2]);\n\tfor (ll i=1;i<=cur;i++)\n\t\tfor (ll j=C;j>=N[i][0];j--)\n\t\t\t\tdp[j]=max(dp[j],dp[j-N[i][0]]+N[i][1]);\n\tfor (ll i=1;i<=m;i++) \n\t\tfor (ll j=C;j>=0;j--)\n\t\t{\n\t\t\tfor (ll k=0;k<=j;k++)\n\t\t\t{\n\t\t\t\tdp[j]=max(dp[j],dp[j-k]+GetMVal(i,k));\n\t\t\t}\n\t\t}\n\tprintf(\"%lld\\n\",dp[C]);\n\treturn 0;\n}\n```\n\n#### 小插曲\n\n一定记得二进制优化时 , 把原本的记录数量的值减掉 . 我因为这个 `RE` , 因为是`long long`太大`MLE` , 最后把`long long`  改成 `int` , DEBUG了一下午.\n\n## 区间DP\n\n> 区间DP最主要特征就是问题解与区间范围有关 , 小区间可以合成大区间 , 通过枚举区间分割点得到大区间的解 .\n\n### NOI 1995 石子合并\n\n#### 解题思路\n\n我们定义 $f_{(i,j)}$ 是第 i 个到第 j 个石子合并所能得到的最大值 , 那么状态转移方程 : \n$$\nf_{(i,j)}=\\max_{k=i}^{j-1}(f_{(i,k)}+f_{(k+1,j)}+W_{(i,j)})\n$$\n其中$W_{(i,j)}$表示第 i 个石子到第 j 个石子的总重量 , 使用前缀和计算 . 需要最大最小 , 只需两个 f 数组和两句判断语句就好了 .\n\n我们需要解决环的问题 . 石子围成环状 , 如果我们枚举起点 , 整个时间复杂度达到了$O(N^4)$, 这是不能接受的 . 于是我们将整条链延长一倍 , 这样的链包含了所有环上的序列 , 也就是数量级降了一级 , 时间复杂度$O(N^3)$.\n\n#### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 220;\nconst int IINF = 1e9;\n\nusing ll = long long;\n\nint sum[maxn * 2], dpmax[maxn][maxn], dpmin[maxn][maxn];\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int n, ans;\n    cin >> n;\n    for (int i = 1; i <= 2 * n; ++i) {\n        if (i <= n) {\n            cin >> sum[i];\n            sum[i + n] = sum[i];\n        }\n        sum[i] += sum[i - 1];\n    }\n    for (int len = 1; len <= n; ++len) {\n        for (int i = 1; i <  2 * n; ++i) {\n            int j = i + len - 1;\n            if (len == 1) {\n                dpmax[i][j] = dpmin[i][j] = 0;\n                continue;\n            }\n            dpmax[i][j] = 0;\n            dpmin[i][j] = IINF;\n            for (int k = i; k < j && k <= 2 * n - 1; ++k) {\n                dpmax[i][j] = max(dpmax[i][j], dpmax[i][k] + dpmax[k + 1][j] + sum[j] - sum[i - 1]);\n                dpmin[i][j] = min(dpmin[i][j], dpmin[i][k] + dpmin[k + 1][j] + sum[j] - sum[i - 1]);\n            }\n        }\n    }\n    ans = dpmin[n][2 * n - 1];\n    for (int i = 1; i < n; ++i)\n        ans = min(ans, dpmin[i][i + n - 1]);\n    cout << ans << endl;\n    ans = dpmax[n][2 * n - 1];\n    for (int i = 1; i < n; ++i)\n        ans = max(ans, dpmax[i][i + n - 1]);\n    cout << ans << endl;\n    return 0;\n}\n```\n\n### NOIP2007 矩阵取数游戏\n\n#### 解题思路\n\n每一行都是相对独立的 , 那么只需要逐行计算即可 . 而且区间转移方面不需要枚举 k , 以为转移状态只有在队头取和队尾 . 记$f_{(i,j)}$为区间 `[i,j]` 时取的的最高得分 . 状态转移方程:\n$$\nf_{(i,j)}=\\max(f_{(i-1,j)}+n_{i-1}*2^k,f_{(i,j+1)}+n_{j+1}*2^k)\n$$\n\n#### 高精度\n\n本题可以使用 128位int 解决问题 , 不需要高精度 . 但是 C/C++ 没有办法读取 `__int128` 需要自行编写快读 . `__int128` 真的是个好东西 . \n\n#### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 110;\nusing ll = __int128;\n\nll num[maxn][maxn], ans = 0;\nll dp[maxn][maxn], base[maxn];\n\ninline void print(__int128 x)\n{\n    if (x < 0) {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n        print(x / 10);\n    putchar(x % 10 + '0');\n}\n\ninline __int128 read()\n{\n    __int128 x = 0, f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch > '9') {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9') {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x * f;\n}\n\nint main()\n{\n    base[0] = 1L;\n    for (int i = 1; i <= 100; ++i)\n        base[i] = base[i - 1] * 2;\n    ll n, m;\n    n = read();\n    m = read();\n    for (int i = 1; i <= n; ++i)\n        for (int j = 1; j <= m; ++j)\n            num[i][j] = read();\n    for (int k = 1; k <= n; ++k) {\n        for (int i = 1; i <= m; ++i) {//beg & end\n            for (int j = m; j >= i; --j)\n                dp[i][j] = max(dp[i - 1][j] + base[m - j + i - 1] * num[k][i - 1], dp[i][j + 1] + base[m - j + i - 1] * num[k][j + 1]);\n        }\n        ll rans = 0;\n        for (int i = 1; i <= m; ++i)\n            rans = max(rans, dp[i][i] + num[k][i] * base[m]);\n        ans += rans;\n    }\n    print(ans);\n    return 0;\n}\n```\n\n### IOI 2000 邮局\n\n#### 解题思路\n\n- $f_{(i,j)}$: 在前 `i` 个村庄中放置 `j` 个邮局所求值的最小值\n\n- $W_{(i,j)}$: 第 `i` 个村庄与第 `j` 个村庄间放一个邮局的所求值最小值\n\n状态转移方程 : \n$$\nf_{(i,j)} = f_{(k,j-1)}+W_{(k+1,i)}\n$$\n\n其实 W 是可以预处理的 , 根据数学知识 , 如果有奇数个村庄 , 邮局要在中位数处 , 偶数要在最中间两个村庄间的任意位置 , 其实统一一下就是首尾序号除以 2 向下取整 . 时间复杂度下降到$O(PV^2)$.\n\n这样的复杂度只能过60% , 至于100% , 需要四边形不等式优化 .\n\n#### 四边形优化\n\n> 参考资料:\n>\n> - [OI Wiki](https://oi-wiki.org/dp/opt/quadrangle/) : https://oi-wiki.org/dp/opt/quadrangle/\n> -  [mlystdcall](https://www.cnblogs.com/mlystdcall/) : https://www.cnblogs.com/mlystdcall/p/6525962.html\n\n第二篇文章中有说过一种躲开证明的方法 , 也可以自己动手证明 . 总之四边形不等式给出了一种方法 , 使得 k 的范围大大缩小了 , 于是又使时间复杂度下降了一个级别 , 变成$O(PV^2)$.\n\n具体有时间再补 , 主要是要自己搞懂不等式 . \n\n#### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define F(a,b,c) for(int (a)=(b);(a)<=(c);++(a))\n#define f(a,b,c) for(int (a)=(b);(a)>=(c);--(a))\n#define INF 0x3f3f3f3f\n\nconst int maxv = 3010;\nconst int maxp = 310;\nusing ll = long long;\n\nint x[maxv], dp[maxv][maxp], d[maxv][maxp], w[maxv][maxv];\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int V, P;\n    cin >> V >> P;\n    memset(dp, 0x3f, sizeof(dp));\n    F(i, 1, V)    cin >> x[i];\n    sort(x + 1, x + 1 + V);\n    F(l, 1, V) {\n        w[l][l] = 0;\n        F(r, l + 1, V) {\n            w[l][r] = w[l][r - 1] + x[r] - x[(l + r) >> 1];\n        }\n    }\n    dp[0][0] = 0;\n    F(j, 1, P) {\n        d[V + 1][j] = V;\n        f(i, V, 1) {\n            int mind, mindp = INF;\n            F(k, d[i][j - 1], d[i + 1][j]) {\n                if (dp[k][j - 1] + w[k + 1][i] < mindp) {\n                    mindp = dp[k][j - 1] + w[k + 1][i];\n                    mind = k;\n                }\n            }\n            dp[i][j] = mindp;\n            d[i][j] = mind;\n        }\n    }\n    cout << dp[V][P] << endl;\n    return 0;\n}\n```\n\n###  UPST2020 P  近战法师暴击好累\n\n#### 解题思路\n\n显然 , 可以合并 , 判断为区间DP . 但是合并后会出现新的单位 , 是处理的难点 . 我们使用一个数组表示如果能合并 , 这个区间的新值 . 然后就是简单的区间 DP 了 .\n\n#### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 505;\nusing ll = long long;\n\nint dp[maxn][maxn], a[maxn][maxn];\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int n;\n    cin >> n;\n    for (int i = 1; i <= n; ++i)\n        cin >> a[i][i];\n    memset(dp, 0x3f, sizeof(dp));\n    for (int len = 1; len <= n; ++len) {\n        for (int i = 1, j = i + len - 1; j <= n; ++i, ++j) {\n            dp[i][i] = 1;\n            for (int k = i; k < j; ++k) {\n                if (dp[i][k] == 1 && dp[k + 1][j] == 1 && a[i][k] == a[k + 1][j]) {\n                    a[i][j] = a[i][k] + 1;\n                    dp[i][j] = 1;\n                }\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j]);\n            }\n        }\n    }\n    cout << dp[1][n] << endl;\n    return 0;\n}\n```\n\n## 数位DP\n\n### \n\n解题思路\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/DynamicProgramming","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujr001t63jn7can0wal","content":"<blockquote>\n<p>在高中只学过简单的背包问题，会写简单的状态转移方程。就自以为差不多（实际上就是在逃避现实），而最近刷了 ABC190 后，写了一道状压DP，才发现是时候练一下了。选择题目很杂 , 有些是学校的题目 , 没有题面 . 毕竟也没有人会看的吧 . </p>\n<ul>\n<li><code>UPST2020</code> : UESTC PreSummer Training 2020</li>\n</ul>\n</blockquote>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"未分类\"><a href=\"#未分类\" class=\"headerlink\" title=\"未分类\"></a>未分类</h2><h3 id=\"UPST2020-F-我是音乐小天才\"><a href=\"#UPST2020-F-我是音乐小天才\" class=\"headerlink\" title=\"UPST2020 F - 我是音乐小天才\"></a>UPST2020 F - 我是音乐小天才</h3><h4 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>最简单的回文串构造 , 就是反着写一次 . 要增加最少的字符 , 最好的方法就是利用好原字符里的回文字串 . 所以我们统计字符串和镜像字符串相同的字符 , 将相同的部分 (不必连续) 重叠 , 剩下的就是需要补充的字符了 . 时间复杂度$O(N^2)$, 空间复杂度$O(N^2)$.</p>\n<ul>\n<li>dp<sub>i , j</sub> 表示字符串到第 i 个字符 , 镜像字符串到第 j 个字符时的最长公共字串 . 原字符串 <code>s1</code> , 镜像 <code>s2</code> </li>\n<li>$dp_{i , j} = dp_{i-1 , j-1}+1 \\ \\ s1[i]==s2[j]$</li>\n<li>$dp_{i , j} = max(dp_{i, j-1},dp_{i-1,j}) \\ \\ s1[i]!=s2[j]$</li>\n</ul>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">5050</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span> s1<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ios::sync_with_stdio(false);</span>\n    <span class=\"token comment\">// cin.tie(0)</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> s1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        s2<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"背包DP\"><a href=\"#背包DP\" class=\"headerlink\" title=\"背包DP\"></a>背包DP</h2><blockquote>\n<p>背包问题是在给定有限空间下求物品最大价值的DP , DP通过占用 <code>i</code> 空间中前 <code>j</code> 件物品获得的最大值进行转移 . 大致有 01 背包以及多重背包问题 , 涉及 <code>二进制算法</code>  优化 . 本质区别是物品有多个还是一个 .</p>\n</blockquote>\n<h3 id=\"UPST2020-G-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”\"><a href=\"#UPST2020-G-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”\" class=\"headerlink\" title=\"UPST2020 G - 君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”\"></a>UPST2020 G - 君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”</h3><h4 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>这是一个多重背包问题 , 多重背包在 01背包 基础上加上一个 k 变量 , 循环一下 , 使用滚动数组 . 对于神奇物品就是循环枚举给予的空间 , 更新 dp 值 . 给他数据范围较水 , 所以直接可以过了 . **当然这道题最坑的是对于神奇物品 , 当分配空间为0 , 即不放入时 , 它的价值不为0 , 所以真TM神奇 . **时间复杂度$O(nC\\sum^n_{i=1}k_i)$, 空间复杂度$O(C+n+m)$.</p>\n<p>本题有加强版 , 就是下面的 R 题 .</p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXC</span> <span class=\"token expression\"><span class=\"token number\">1010</span></span></span>\n\nll M<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">[</span>MAXC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll dp<span class=\"token punctuation\">[</span>MAXC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nll <span class=\"token function\">GetMVal</span><span class=\"token punctuation\">(</span>ll node<span class=\"token punctuation\">,</span>ll v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> M<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token operator\">*</span>v<span class=\"token operator\">+</span>M<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token operator\">+</span>M<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll j<span class=\"token operator\">=</span>C<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll k<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span>k<span class=\"token operator\">*</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>k<span class=\"token operator\">*</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>k<span class=\"token operator\">*</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>C<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll j<span class=\"token operator\">=</span>C<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span>j<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tdp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token function\">GetMVal</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"UPST2020-R-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”-II\"><a href=\"#UPST2020-R-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”-II\" class=\"headerlink\" title=\"UPST2020 R -君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁” II\"></a>UPST2020 R -君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁” II</h3><h4 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>跟 G 题一样 , 但是这时候就需要优化速度了 . 原解法精确时间复杂度应该是$nC \\sum^{n}<em>{i=1}k_i$, nC 是背包问题的基础解 , 无法再次优化 . 于是我们考虑$\\sum^{n}</em>{i=1}k_i$. 我们不断考虑 k 的取值 , 其实是有重复的 . 我们只是想让 k 能取到所有值 , 找到最优解 , 那么能不能把它分成若干个小的值 , 让它们随意组合得到 k  , 这样的最优解就是答案了呢 .</p>\n<blockquote>\n<p>这部分我也是看了一段时间才想通的 , 讲的可能不好 . </p>\n</blockquote>\n<p>换句话说 , 我们不去考虑多重背包问题了 , 把它转化成 01背包 . 原理就是把 k 个相同物品分成若干个物品 , 使得任取一个 k 都能用这若干个物品 (取或者不取) 来表示. 很自然 , 分成若干个 , 不就是二进制算法吗 ? 于是把 k 个物品分成 1 2 4 8 … 2<sup>n</sup> 个该物品捆绑而成的新物品 , 如果无法刚好分完 , 剩下部分单独捆绑作为一个新物品. 于是转化为 01背包问题 . 时间复杂度$O(nC\\sum^n_{i=1}log_2 k_i)$, 空间复杂度$O(C+n+m)$ .</p>\n<h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXC</span> <span class=\"token expression\"><span class=\"token number\">10010</span></span></span>\n\nll M<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">[</span>MAXC<span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll dp<span class=\"token punctuation\">[</span>MAXC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> ll <span class=\"token function\">GetMVal</span><span class=\"token punctuation\">(</span>ll node<span class=\"token punctuation\">,</span>ll v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> M<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token operator\">*</span>v<span class=\"token operator\">+</span>M<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token operator\">+</span>M<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcur<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>cnt<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tN<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">;</span>\n\t\t\tN<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">;</span>\n\t\t\tN<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-=</span>cnt<span class=\"token punctuation\">;</span>\n\t\t\tcnt<span class=\"token operator\">*=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tN<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tN<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>cur<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll j<span class=\"token operator\">=</span>C<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t\t\tdp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll j<span class=\"token operator\">=</span>C<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span>j<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tdp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token function\">GetMVal</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"小插曲\"><a href=\"#小插曲\" class=\"headerlink\" title=\"小插曲\"></a>小插曲</h4><p>一定记得二进制优化时 , 把原本的记录数量的值减掉 . 我因为这个 <code>RE</code> , 因为是<code>long long</code>太大<code>MLE</code> , 最后把<code>long long</code>  改成 <code>int</code> , DEBUG了一下午.</p>\n<h2 id=\"区间DP\"><a href=\"#区间DP\" class=\"headerlink\" title=\"区间DP\"></a>区间DP</h2><blockquote>\n<p>区间DP最主要特征就是问题解与区间范围有关 , 小区间可以合成大区间 , 通过枚举区间分割点得到大区间的解 .</p>\n</blockquote>\n<h3 id=\"NOI-1995-石子合并\"><a href=\"#NOI-1995-石子合并\" class=\"headerlink\" title=\"NOI 1995 石子合并\"></a>NOI 1995 石子合并</h3><h4 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>我们定义 $f_{(i,j)}$ 是第 i 个到第 j 个石子合并所能得到的最大值 , 那么状态转移方程 :<br>$$<br>f_{(i,j)}=\\max_{k=i}^{j-1}(f_{(i,k)}+f_{(k+1,j)}+W_{(i,j)})<br>$$<br>其中$W_{(i,j)}$表示第 i 个石子到第 j 个石子的总重量 , 使用前缀和计算 . 需要最大最小 , 只需两个 f 数组和两句判断语句就好了 .</p>\n<p>我们需要解决环的问题 . 石子围成环状 , 如果我们枚举起点 , 整个时间复杂度达到了$O(N^4)$, 这是不能接受的 . 于是我们将整条链延长一倍 , 这样的链包含了所有环上的序列 , 也就是数量级降了一级 , 时间复杂度$O(N^3)$.</p>\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">220</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> IINF <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">[</span>maxn <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dpmax<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dpmin<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            cin <span class=\"token operator\">>></span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>  <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                dpmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dpmin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            dpmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            dpmin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IINF<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> j <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                dpmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dpmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dpmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dpmax<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                dpmin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dpmin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dpmin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dpmin<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    ans <span class=\"token operator\">=</span> dpmin<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> dpmin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    ans <span class=\"token operator\">=</span> dpmax<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> dpmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"NOIP2007-矩阵取数游戏\"><a href=\"#NOIP2007-矩阵取数游戏\" class=\"headerlink\" title=\"NOIP2007 矩阵取数游戏\"></a>NOIP2007 矩阵取数游戏</h3><h4 id=\"解题思路-4\"><a href=\"#解题思路-4\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>每一行都是相对独立的 , 那么只需要逐行计算即可 . 而且区间转移方面不需要枚举 k , 以为转移状态只有在队头取和队尾 . 记$f_{(i,j)}$为区间 <code>[i,j]</code> 时取的的最高得分 . 状态转移方程:<br>$$<br>f_{(i,j)}=\\max(f_{(i-1,j)}+n_{i-1}*2^k,f_{(i,j+1)}+n_{j+1}*2^k)<br>$$</p>\n<h4 id=\"高精度\"><a href=\"#高精度\" class=\"headerlink\" title=\"高精度\"></a>高精度</h4><p>本题可以使用 128位int 解决问题 , 不需要高精度 . 但是 C/C++ 没有办法读取 <code>__int128</code> 需要自行编写快读 . <code>__int128</code> 真的是个好东西 . </p>\n<h4 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">110</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> __int128<span class=\"token punctuation\">;</span>\n\nll num<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nll dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>__int128 x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">inline</span> __int128 <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    __int128 x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&lt;</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">></span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span>\n            f <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        x <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> ch <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n        ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    base<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        base<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> base<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    ll n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n            num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//beg &amp; end</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> base<span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> num<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> base<span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> num<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        ll rans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n            rans <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>rans<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> base<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">+=</span> rans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"IOI-2000-邮局\"><a href=\"#IOI-2000-邮局\" class=\"headerlink\" title=\"IOI 2000 邮局\"></a>IOI 2000 邮局</h3><h4 id=\"解题思路-5\"><a href=\"#解题思路-5\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><ul>\n<li><p>$f_{(i,j)}$: 在前 <code>i</code> 个村庄中放置 <code>j</code> 个邮局所求值的最小值</p>\n</li>\n<li><p>$W_{(i,j)}$: 第 <code>i</code> 个村庄与第 <code>j</code> 个村庄间放一个邮局的所求值最小值</p>\n</li>\n</ul>\n<p>状态转移方程 :<br>$$<br>f_{(i,j)} = f_{(k,j-1)}+W_{(k+1,i)}<br>$$</p>\n<p>其实 W 是可以预处理的 , 根据数学知识 , 如果有奇数个村庄 , 邮局要在中位数处 , 偶数要在最中间两个村庄间的任意位置 , 其实统一一下就是首尾序号除以 2 向下取整 . 时间复杂度下降到$O(PV^2)$.</p>\n<p>这样的复杂度只能过60% , 至于100% , 需要四边形不等式优化 .</p>\n<h4 id=\"四边形优化\"><a href=\"#四边形优化\" class=\"headerlink\" title=\"四边形优化\"></a>四边形优化</h4><blockquote>\n<p>参考资料:</p>\n<ul>\n<li><a href=\"https://oi-wiki.org/dp/opt/quadrangle/\">OI Wiki</a> : <a href=\"https://oi-wiki.org/dp/opt/quadrangle/\">https://oi-wiki.org/dp/opt/quadrangle/</a></li>\n<li> <a href=\"https://www.cnblogs.com/mlystdcall/\">mlystdcall</a> : <a href=\"https://www.cnblogs.com/mlystdcall/p/6525962.html\">https://www.cnblogs.com/mlystdcall/p/6525962.html</a></li>\n</ul>\n</blockquote>\n<p>第二篇文章中有说过一种躲开证明的方法 , 也可以自己动手证明 . 总之四边形不等式给出了一种方法 , 使得 k 的范围大大缩小了 , 于是又使时间复杂度下降了一个级别 , 变成$O(PV^2)$.</p>\n<p>具体有时间再补 , 主要是要自己搞懂不等式 . </p>\n<h4 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">F</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">f</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">0x3f3f3f3f</span></span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token number\">3010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxp <span class=\"token operator\">=</span> <span class=\"token number\">310</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">[</span>maxv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>maxv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">[</span>maxv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">[</span>maxv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> V <span class=\"token operator\">>></span> P<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span>    cin <span class=\"token operator\">>></span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        w<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            w<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        d<span class=\"token punctuation\">[</span>V <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> V<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> mind<span class=\"token punctuation\">,</span> mindp <span class=\"token operator\">=</span> INF<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> mindp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    mindp <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    mind <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mindp<span class=\"token punctuation\">;</span>\n            d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mind<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> dp<span class=\"token punctuation\">[</span>V<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"UPST2020-P-近战法师暴击好累\"><a href=\"#UPST2020-P-近战法师暴击好累\" class=\"headerlink\" title=\"UPST2020 P  近战法师暴击好累\"></a>UPST2020 P  近战法师暴击好累</h3><h4 id=\"解题思路-6\"><a href=\"#解题思路-6\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>显然 , 可以合并 , 判断为区间DP . 但是合并后会出现新的单位 , 是处理的难点 . 我们使用一个数组表示如果能合并 , 这个区间的新值 . 然后就是简单的区间 DP 了 .</p>\n<h4 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">505</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> dp<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"数位DP\"><a href=\"#数位DP\" class=\"headerlink\" title=\"数位DP\"></a>数位DP</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p>解题思路</p>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<blockquote>\n<p>在高中只学过简单的背包问题，会写简单的状态转移方程。就自以为差不多（实际上就是在逃避现实），而最近刷了 ABC190 后，写了一道状压DP，才发现是时候练一下了。选择题目很杂 , 有些是学校的题目 , 没有题面 . 毕竟也没有人会看的吧 . </p>\n<ul>\n<li><code>UPST2020</code> : UESTC PreSummer Training 2020</li>\n</ul>\n</blockquote>","more":"<hr>\n<h2 id=\"未分类\"><a href=\"#未分类\" class=\"headerlink\" title=\"未分类\"></a>未分类</h2><h3 id=\"UPST2020-F-我是音乐小天才\"><a href=\"#UPST2020-F-我是音乐小天才\" class=\"headerlink\" title=\"UPST2020 F - 我是音乐小天才\"></a>UPST2020 F - 我是音乐小天才</h3><h4 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>最简单的回文串构造 , 就是反着写一次 . 要增加最少的字符 , 最好的方法就是利用好原字符里的回文字串 . 所以我们统计字符串和镜像字符串相同的字符 , 将相同的部分 (不必连续) 重叠 , 剩下的就是需要补充的字符了 . 时间复杂度$O(N^2)$, 空间复杂度$O(N^2)$.</p>\n<ul>\n<li>dp<sub>i , j</sub> 表示字符串到第 i 个字符 , 镜像字符串到第 j 个字符时的最长公共字串 . 原字符串 <code>s1</code> , 镜像 <code>s2</code> </li>\n<li>$dp_{i , j} = dp_{i-1 , j-1}+1 \\ \\ s1[i]==s2[j]$</li>\n<li>$dp_{i , j} = max(dp_{i, j-1},dp_{i-1,j}) \\ \\ s1[i]!=s2[j]$</li>\n</ul>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">5050</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span> s1<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ios::sync_with_stdio(false);</span>\n    <span class=\"token comment\">// cin.tie(0)</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> s1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        s2<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"背包DP\"><a href=\"#背包DP\" class=\"headerlink\" title=\"背包DP\"></a>背包DP</h2><blockquote>\n<p>背包问题是在给定有限空间下求物品最大价值的DP , DP通过占用 <code>i</code> 空间中前 <code>j</code> 件物品获得的最大值进行转移 . 大致有 01 背包以及多重背包问题 , 涉及 <code>二进制算法</code>  优化 . 本质区别是物品有多个还是一个 .</p>\n</blockquote>\n<h3 id=\"UPST2020-G-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”\"><a href=\"#UPST2020-G-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”\" class=\"headerlink\" title=\"UPST2020 G - 君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”\"></a>UPST2020 G - 君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”</h3><h4 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>这是一个多重背包问题 , 多重背包在 01背包 基础上加上一个 k 变量 , 循环一下 , 使用滚动数组 . 对于神奇物品就是循环枚举给予的空间 , 更新 dp 值 . 给他数据范围较水 , 所以直接可以过了 . **当然这道题最坑的是对于神奇物品 , 当分配空间为0 , 即不放入时 , 它的价值不为0 , 所以真TM神奇 . **时间复杂度$O(nC\\sum^n_{i=1}k_i)$, 空间复杂度$O(C+n+m)$.</p>\n<p>本题有加强版 , 就是下面的 R 题 .</p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXC</span> <span class=\"token expression\"><span class=\"token number\">1010</span></span></span>\n\nll M<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">[</span>MAXC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll dp<span class=\"token punctuation\">[</span>MAXC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nll <span class=\"token function\">GetMVal</span><span class=\"token punctuation\">(</span>ll node<span class=\"token punctuation\">,</span>ll v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> M<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token operator\">*</span>v<span class=\"token operator\">+</span>M<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token operator\">+</span>M<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll j<span class=\"token operator\">=</span>C<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll k<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span>k<span class=\"token operator\">*</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>k<span class=\"token operator\">*</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>k<span class=\"token operator\">*</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>C<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll j<span class=\"token operator\">=</span>C<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span>j<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tdp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token function\">GetMVal</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"UPST2020-R-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”-II\"><a href=\"#UPST2020-R-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”-II\" class=\"headerlink\" title=\"UPST2020 R -君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁” II\"></a>UPST2020 R -君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁” II</h3><h4 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>跟 G 题一样 , 但是这时候就需要优化速度了 . 原解法精确时间复杂度应该是$nC \\sum^{n}<em>{i=1}k_i$, nC 是背包问题的基础解 , 无法再次优化 . 于是我们考虑$\\sum^{n}</em>{i=1}k_i$. 我们不断考虑 k 的取值 , 其实是有重复的 . 我们只是想让 k 能取到所有值 , 找到最优解 , 那么能不能把它分成若干个小的值 , 让它们随意组合得到 k  , 这样的最优解就是答案了呢 .</p>\n<blockquote>\n<p>这部分我也是看了一段时间才想通的 , 讲的可能不好 . </p>\n</blockquote>\n<p>换句话说 , 我们不去考虑多重背包问题了 , 把它转化成 01背包 . 原理就是把 k 个相同物品分成若干个物品 , 使得任取一个 k 都能用这若干个物品 (取或者不取) 来表示. 很自然 , 分成若干个 , 不就是二进制算法吗 ? 于是把 k 个物品分成 1 2 4 8 … 2<sup>n</sup> 个该物品捆绑而成的新物品 , 如果无法刚好分完 , 剩下部分单独捆绑作为一个新物品. 于是转化为 01背包问题 . 时间复杂度$O(nC\\sum^n_{i=1}log_2 k_i)$, 空间复杂度$O(C+n+m)$ .</p>\n<h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXC</span> <span class=\"token expression\"><span class=\"token number\">10010</span></span></span>\n\nll M<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">[</span>MAXC<span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll dp<span class=\"token punctuation\">[</span>MAXC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> ll <span class=\"token function\">GetMVal</span><span class=\"token punctuation\">(</span>ll node<span class=\"token punctuation\">,</span>ll v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> M<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token operator\">*</span>v<span class=\"token operator\">+</span>M<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token operator\">+</span>M<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcur<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>cnt<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tN<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">;</span>\n\t\t\tN<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">;</span>\n\t\t\tN<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-=</span>cnt<span class=\"token punctuation\">;</span>\n\t\t\tcnt<span class=\"token operator\">*=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tN<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tN<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>cur<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll j<span class=\"token operator\">=</span>C<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t\t\tdp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>N<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll j<span class=\"token operator\">=</span>C<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span>j<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tdp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token function\">GetMVal</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"小插曲\"><a href=\"#小插曲\" class=\"headerlink\" title=\"小插曲\"></a>小插曲</h4><p>一定记得二进制优化时 , 把原本的记录数量的值减掉 . 我因为这个 <code>RE</code> , 因为是<code>long long</code>太大<code>MLE</code> , 最后把<code>long long</code>  改成 <code>int</code> , DEBUG了一下午.</p>\n<h2 id=\"区间DP\"><a href=\"#区间DP\" class=\"headerlink\" title=\"区间DP\"></a>区间DP</h2><blockquote>\n<p>区间DP最主要特征就是问题解与区间范围有关 , 小区间可以合成大区间 , 通过枚举区间分割点得到大区间的解 .</p>\n</blockquote>\n<h3 id=\"NOI-1995-石子合并\"><a href=\"#NOI-1995-石子合并\" class=\"headerlink\" title=\"NOI 1995 石子合并\"></a>NOI 1995 石子合并</h3><h4 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>我们定义 $f_{(i,j)}$ 是第 i 个到第 j 个石子合并所能得到的最大值 , 那么状态转移方程 :<br>$$<br>f_{(i,j)}=\\max_{k=i}^{j-1}(f_{(i,k)}+f_{(k+1,j)}+W_{(i,j)})<br>$$<br>其中$W_{(i,j)}$表示第 i 个石子到第 j 个石子的总重量 , 使用前缀和计算 . 需要最大最小 , 只需两个 f 数组和两句判断语句就好了 .</p>\n<p>我们需要解决环的问题 . 石子围成环状 , 如果我们枚举起点 , 整个时间复杂度达到了$O(N^4)$, 这是不能接受的 . 于是我们将整条链延长一倍 , 这样的链包含了所有环上的序列 , 也就是数量级降了一级 , 时间复杂度$O(N^3)$.</p>\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">220</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> IINF <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">[</span>maxn <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dpmax<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dpmin<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            cin <span class=\"token operator\">>></span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>  <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                dpmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dpmin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            dpmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            dpmin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IINF<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> j <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                dpmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dpmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dpmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dpmax<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                dpmin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dpmin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dpmin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dpmin<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    ans <span class=\"token operator\">=</span> dpmin<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> dpmin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    ans <span class=\"token operator\">=</span> dpmax<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> dpmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"NOIP2007-矩阵取数游戏\"><a href=\"#NOIP2007-矩阵取数游戏\" class=\"headerlink\" title=\"NOIP2007 矩阵取数游戏\"></a>NOIP2007 矩阵取数游戏</h3><h4 id=\"解题思路-4\"><a href=\"#解题思路-4\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>每一行都是相对独立的 , 那么只需要逐行计算即可 . 而且区间转移方面不需要枚举 k , 以为转移状态只有在队头取和队尾 . 记$f_{(i,j)}$为区间 <code>[i,j]</code> 时取的的最高得分 . 状态转移方程:<br>$$<br>f_{(i,j)}=\\max(f_{(i-1,j)}+n_{i-1}*2^k,f_{(i,j+1)}+n_{j+1}*2^k)<br>$$</p>\n<h4 id=\"高精度\"><a href=\"#高精度\" class=\"headerlink\" title=\"高精度\"></a>高精度</h4><p>本题可以使用 128位int 解决问题 , 不需要高精度 . 但是 C/C++ 没有办法读取 <code>__int128</code> 需要自行编写快读 . <code>__int128</code> 真的是个好东西 . </p>\n<h4 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">110</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> __int128<span class=\"token punctuation\">;</span>\n\nll num<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nll dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>__int128 x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">inline</span> __int128 <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    __int128 x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&lt;</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">></span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span>\n            f <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        x <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> ch <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n        ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    base<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        base<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> base<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    ll n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n            num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//beg &amp; end</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> base<span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> num<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> base<span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> num<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        ll rans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n            rans <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>rans<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> base<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">+=</span> rans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"IOI-2000-邮局\"><a href=\"#IOI-2000-邮局\" class=\"headerlink\" title=\"IOI 2000 邮局\"></a>IOI 2000 邮局</h3><h4 id=\"解题思路-5\"><a href=\"#解题思路-5\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><ul>\n<li><p>$f_{(i,j)}$: 在前 <code>i</code> 个村庄中放置 <code>j</code> 个邮局所求值的最小值</p>\n</li>\n<li><p>$W_{(i,j)}$: 第 <code>i</code> 个村庄与第 <code>j</code> 个村庄间放一个邮局的所求值最小值</p>\n</li>\n</ul>\n<p>状态转移方程 :<br>$$<br>f_{(i,j)} = f_{(k,j-1)}+W_{(k+1,i)}<br>$$</p>\n<p>其实 W 是可以预处理的 , 根据数学知识 , 如果有奇数个村庄 , 邮局要在中位数处 , 偶数要在最中间两个村庄间的任意位置 , 其实统一一下就是首尾序号除以 2 向下取整 . 时间复杂度下降到$O(PV^2)$.</p>\n<p>这样的复杂度只能过60% , 至于100% , 需要四边形不等式优化 .</p>\n<h4 id=\"四边形优化\"><a href=\"#四边形优化\" class=\"headerlink\" title=\"四边形优化\"></a>四边形优化</h4><blockquote>\n<p>参考资料:</p>\n<ul>\n<li><a href=\"https://oi-wiki.org/dp/opt/quadrangle/\">OI Wiki</a> : <a href=\"https://oi-wiki.org/dp/opt/quadrangle/\">https://oi-wiki.org/dp/opt/quadrangle/</a></li>\n<li> <a href=\"https://www.cnblogs.com/mlystdcall/\">mlystdcall</a> : <a href=\"https://www.cnblogs.com/mlystdcall/p/6525962.html\">https://www.cnblogs.com/mlystdcall/p/6525962.html</a></li>\n</ul>\n</blockquote>\n<p>第二篇文章中有说过一种躲开证明的方法 , 也可以自己动手证明 . 总之四边形不等式给出了一种方法 , 使得 k 的范围大大缩小了 , 于是又使时间复杂度下降了一个级别 , 变成$O(PV^2)$.</p>\n<p>具体有时间再补 , 主要是要自己搞懂不等式 . </p>\n<h4 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">F</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">f</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">0x3f3f3f3f</span></span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token number\">3010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxp <span class=\"token operator\">=</span> <span class=\"token number\">310</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">[</span>maxv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>maxv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">[</span>maxv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">[</span>maxv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> V <span class=\"token operator\">>></span> P<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span>    cin <span class=\"token operator\">>></span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        w<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            w<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        d<span class=\"token punctuation\">[</span>V <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> V<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> mind<span class=\"token punctuation\">,</span> mindp <span class=\"token operator\">=</span> INF<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> mindp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    mindp <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    mind <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mindp<span class=\"token punctuation\">;</span>\n            d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mind<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> dp<span class=\"token punctuation\">[</span>V<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"UPST2020-P-近战法师暴击好累\"><a href=\"#UPST2020-P-近战法师暴击好累\" class=\"headerlink\" title=\"UPST2020 P  近战法师暴击好累\"></a>UPST2020 P  近战法师暴击好累</h3><h4 id=\"解题思路-6\"><a href=\"#解题思路-6\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>显然 , 可以合并 , 判断为区间DP . 但是合并后会出现新的单位 , 是处理的难点 . 我们使用一个数组表示如果能合并 , 这个区间的新值 . 然后就是简单的区间 DP 了 .</p>\n<h4 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">505</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x3f</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> dp<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"数位DP\"><a href=\"#数位DP\" class=\"headerlink\" title=\"数位DP\"></a>数位DP</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p>解题思路</p>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"Atcoder Education DP Contest","date":"2021-03-24T02:44:51.000Z","updated":"2021-04-28T13:44:51.000Z","_content":"\n> Atcoder上面的 DP 练习题 , 主要是能看到别人的代码 .\n\n<!-- more -->\n\n---\n\n## A - Frog 1\n\n### 解题思路\n\n斐波那契数列 . 记得加绝对值 .状态转移方程 : \n$$\nf_{i} = MAX (f_{i-1} + \\lvert h_i - h_{i-1} \\rvert \\ ,\\  f_{i-2} +\\lvert h_i - h_{i-2} \\rvert )\n$$\n\n### 代码\n\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\n\n#define maxn 100010\nlong long h[maxn],dp[maxn];\n\nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&h[i]);\n\t\tif (i==1) continue;\n\t\telse if (i==2) dp[i]=abs(h[2]-h[1]);\n\t\telse dp[i]=min(dp[i-1]+abs(h[i]-h[i-1]),dp[i-2]+abs(h[i]-h[i-2]));\t\n\t}\n\tprintf(\"%lld\\n\",dp[n]);\n\treturn 0;\n}\n```\n\n## B - Frog 2\n\n### 解题思路\n\n同 1 , 加上一个循环 k .状态转移方程 : \n$$\nf_{i} = MAX ^{k}_{j=1} ( f_{i-j} + \\lvert h_i - h_{i-j} \\rvert)\n$$\n\n### 代码\n\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\n\n#define maxn 100010\n#define INF 23333333333333\nlong long h[maxn],dp[maxn];\n\nint main()\n{\n\tint n,k;\n\tscanf(\"%d %d\",&n,&k);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&h[i]);\n\t\tif (i!=1) dp[i]=INF;\n\t\tfor (int j=1;j<=k && i-j>0;j++)\n\t\t\tdp[i]=min(dp[i-j]+abs(h[i]-h[i-j]),dp[i]);\t\n\t}\n\tprintf(\"%lld\\n\",dp[n]);\n\treturn 0;\n}\n```\n\n\n\n## C - Vacation\n\n### 解题思路\n\n- `dp[i][j]` : 第 i 天选择做 j 事件获得的最大值 . ( j = 1 做 a , 以此类推)\n\n状态转移方程 : \n$$\ndp_{i,j} = MAX ^{3}_{k = 1} ( dp_{i-1} + f(j)[i]) \\tag{k != j} \\\\\nf(x)=\\left\\{  \n             \\begin{array}{**lr**}  \n             a &x=1 \\\\  \n             b &x=2 \\\\\n             c &x=3 \\\\   \n             \\end{array}  \n\\right.\n$$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define MAXN 100010\n#define LINF 1e18\n#define IINF 2147483647\nusing ll=long long;\n\nll dp[MAXN][4];\nll a,b,c,n;\n\n\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin>>n;\n    for(int i=1;i<=n;i++) \n    {\n        cin>>a>>b>>c;\n        if (i==1) \n        {\n            dp[i][1]=a;\n            dp[i][2]=b;\n            dp[i][3]=c;\n        }\n        else \n        {\n            dp[i][1]=max(dp[i-1][2]+a,dp[i-1][3]+a);\n            dp[i][2]=max(dp[i-1][1]+b,dp[i-1][3]+b);\n            dp[i][3]=max(dp[i-1][1]+c,dp[i-1][2]+c);\n        }\n    }\n    cout<<max(dp[n][1],max(dp[n][2],dp[n][3]))<<endl;\n\treturn 0;\n}\n```\n\n## D - Knapsack 1\n\n### 解题思路\n\n01背包 问题 . 使用滚动数组优化 .\n\n- `dp[i]` 表示到上个物品选择完后 , 花费 i 个单位体积可获得的最大价值 . \n- `w` 当前物品占用体积\n- `v` 当前物品价值\n\n状态转移方程 : \n$$\ndp[i]=\\max (dp[i],dp[i-w]+v)\n$$\n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define MAXN 100010\n#define LINF 1e18\n#define IINF 2147483647\nusing ll=long long;\nll dp[MAXN],w[MAXN],v[MAXN];\n\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\tint N,W;\n    cin>>N>>W;\n    for (int i=1;i<=N;i++) cin>>w[i]>>v[i];\n    for (int i=1;i<=N;i++) \n    {\n        for (int j=W;j>=w[i];j--)\n        {\n            dp[j]=max(dp[j],dp[j-w[i]]+v[i]);\n        }\n    }\n    cout<<dp[W]<<endl;\n\treturn 0;\n}\n```\n\n## E - Knapsack 2\n\n### 解题思路\n\n是 D 的加强版 , 数据太大了 , 原来的办法空间复杂度$O(W)$会 MLE , 于是可以换种思路 . 因为 n 和 v 非常小 ,我们可以计算价值为 i 时占用的空间 . 最后找到满足花费少于 W 的 i 的最大值即可.\n\n- `dp[i]` 表示到上个物品选择完后 , 获得的 i 价值需要花费的最少空间 . \n- `w` 当前物品占用体积\n- `v` 当前物品价值\n\n状态转移方程 : \n$$\ndp[x]=\\left\\{  \n             \\begin{array}{**lr**}  \n             0 &x=0 \\\\  \n             \\infty &x\\neq0\n             \\end{array}  \n\\right.\\\\\ndp[i]=min(dp[i],dp[i-v]+w);\n$$\n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define MAXN 100010\n#define LINF 1e18\nusing ll = long long;\nll dp[MAXN], w, v;\n\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int N, W, ans=0;\n    cin >> N >> W;\n    for (int i = 0; i < MAXN; i++)\n        dp[i] = LINF;\n    dp[0] = 0;\n    for (int i = 1; i <= N; i++)\n    {\n        cin >> w >> v;\n        for (int j = i * 1000; j >= v; j--)\n        {\n            dp[j] = min(dp[j], dp[j - v] + w);\n        }\n    }\n    for (int i = 0; i < MAXN; i++)\n        if (dp[i] <= W)\n            ans = i;\n    cout << ans << endl;\n    return 0;\n}\n```\n\n\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/EducationDPContest.md","raw":"---\ntitle: Atcoder Education DP Contest\ndate: 2021-03-24 10:44:51\nupdated: 2021-04-28 21:44:51\ntags:\n\t- 动态规划\ncategories:\n\t- ICPC Programming Contest\n---\n\n> Atcoder上面的 DP 练习题 , 主要是能看到别人的代码 .\n\n<!-- more -->\n\n---\n\n## A - Frog 1\n\n### 解题思路\n\n斐波那契数列 . 记得加绝对值 .状态转移方程 : \n$$\nf_{i} = MAX (f_{i-1} + \\lvert h_i - h_{i-1} \\rvert \\ ,\\  f_{i-2} +\\lvert h_i - h_{i-2} \\rvert )\n$$\n\n### 代码\n\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\n\n#define maxn 100010\nlong long h[maxn],dp[maxn];\n\nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&h[i]);\n\t\tif (i==1) continue;\n\t\telse if (i==2) dp[i]=abs(h[2]-h[1]);\n\t\telse dp[i]=min(dp[i-1]+abs(h[i]-h[i-1]),dp[i-2]+abs(h[i]-h[i-2]));\t\n\t}\n\tprintf(\"%lld\\n\",dp[n]);\n\treturn 0;\n}\n```\n\n## B - Frog 2\n\n### 解题思路\n\n同 1 , 加上一个循环 k .状态转移方程 : \n$$\nf_{i} = MAX ^{k}_{j=1} ( f_{i-j} + \\lvert h_i - h_{i-j} \\rvert)\n$$\n\n### 代码\n\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\n\n#define maxn 100010\n#define INF 23333333333333\nlong long h[maxn],dp[maxn];\n\nint main()\n{\n\tint n,k;\n\tscanf(\"%d %d\",&n,&k);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&h[i]);\n\t\tif (i!=1) dp[i]=INF;\n\t\tfor (int j=1;j<=k && i-j>0;j++)\n\t\t\tdp[i]=min(dp[i-j]+abs(h[i]-h[i-j]),dp[i]);\t\n\t}\n\tprintf(\"%lld\\n\",dp[n]);\n\treturn 0;\n}\n```\n\n\n\n## C - Vacation\n\n### 解题思路\n\n- `dp[i][j]` : 第 i 天选择做 j 事件获得的最大值 . ( j = 1 做 a , 以此类推)\n\n状态转移方程 : \n$$\ndp_{i,j} = MAX ^{3}_{k = 1} ( dp_{i-1} + f(j)[i]) \\tag{k != j} \\\\\nf(x)=\\left\\{  \n             \\begin{array}{**lr**}  \n             a &x=1 \\\\  \n             b &x=2 \\\\\n             c &x=3 \\\\   \n             \\end{array}  \n\\right.\n$$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define MAXN 100010\n#define LINF 1e18\n#define IINF 2147483647\nusing ll=long long;\n\nll dp[MAXN][4];\nll a,b,c,n;\n\n\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin>>n;\n    for(int i=1;i<=n;i++) \n    {\n        cin>>a>>b>>c;\n        if (i==1) \n        {\n            dp[i][1]=a;\n            dp[i][2]=b;\n            dp[i][3]=c;\n        }\n        else \n        {\n            dp[i][1]=max(dp[i-1][2]+a,dp[i-1][3]+a);\n            dp[i][2]=max(dp[i-1][1]+b,dp[i-1][3]+b);\n            dp[i][3]=max(dp[i-1][1]+c,dp[i-1][2]+c);\n        }\n    }\n    cout<<max(dp[n][1],max(dp[n][2],dp[n][3]))<<endl;\n\treturn 0;\n}\n```\n\n## D - Knapsack 1\n\n### 解题思路\n\n01背包 问题 . 使用滚动数组优化 .\n\n- `dp[i]` 表示到上个物品选择完后 , 花费 i 个单位体积可获得的最大价值 . \n- `w` 当前物品占用体积\n- `v` 当前物品价值\n\n状态转移方程 : \n$$\ndp[i]=\\max (dp[i],dp[i-w]+v)\n$$\n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define MAXN 100010\n#define LINF 1e18\n#define IINF 2147483647\nusing ll=long long;\nll dp[MAXN],w[MAXN],v[MAXN];\n\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\tint N,W;\n    cin>>N>>W;\n    for (int i=1;i<=N;i++) cin>>w[i]>>v[i];\n    for (int i=1;i<=N;i++) \n    {\n        for (int j=W;j>=w[i];j--)\n        {\n            dp[j]=max(dp[j],dp[j-w[i]]+v[i]);\n        }\n    }\n    cout<<dp[W]<<endl;\n\treturn 0;\n}\n```\n\n## E - Knapsack 2\n\n### 解题思路\n\n是 D 的加强版 , 数据太大了 , 原来的办法空间复杂度$O(W)$会 MLE , 于是可以换种思路 . 因为 n 和 v 非常小 ,我们可以计算价值为 i 时占用的空间 . 最后找到满足花费少于 W 的 i 的最大值即可.\n\n- `dp[i]` 表示到上个物品选择完后 , 获得的 i 价值需要花费的最少空间 . \n- `w` 当前物品占用体积\n- `v` 当前物品价值\n\n状态转移方程 : \n$$\ndp[x]=\\left\\{  \n             \\begin{array}{**lr**}  \n             0 &x=0 \\\\  \n             \\infty &x\\neq0\n             \\end{array}  \n\\right.\\\\\ndp[i]=min(dp[i],dp[i-v]+w);\n$$\n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define MAXN 100010\n#define LINF 1e18\nusing ll = long long;\nll dp[MAXN], w, v;\n\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int N, W, ans=0;\n    cin >> N >> W;\n    for (int i = 0; i < MAXN; i++)\n        dp[i] = LINF;\n    dp[0] = 0;\n    for (int i = 1; i <= N; i++)\n    {\n        cin >> w >> v;\n        for (int j = i * 1000; j >= v; j--)\n        {\n            dp[j] = min(dp[j], dp[j - v] + w);\n        }\n    }\n    for (int i = 0; i < MAXN; i++)\n        if (dp[i] <= W)\n            ans = i;\n    cout << ans << endl;\n    return 0;\n}\n```\n\n\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/EducationDPContest","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujs001w63jna1g0boc8","content":"<blockquote>\n<p>Atcoder上面的 DP 练习题 , 主要是能看到别人的代码 .</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"A-Frog-1\"><a href=\"#A-Frog-1\" class=\"headerlink\" title=\"A - Frog 1\"></a>A - Frog 1</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>斐波那契数列 . 记得加绝对值 .状态转移方程 :<br>$$<br>f_{i} = MAX (f_{i-1} + \\lvert h_i - h_{i-1} \\rvert \\ ,\\  f_{i-2} +\\lvert h_i - h_{i-2} \\rvert )<br>$$</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">100010</span></span></span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> h<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>h<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>h<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>h<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Frog-2\"><a href=\"#B-Frog-2\" class=\"headerlink\" title=\"B - Frog 2\"></a>B - Frog 2</h2><h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>同 1 , 加上一个循环 k .状态转移方程 :<br>$$<br>f_{i} = MAX ^{k}<em>{j=1} ( f</em>{i-j} + \\lvert h_i - h_{i-j} \\rvert)<br>$$</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">100010</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">23333333333333</span></span></span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> h<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>INF<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>k <span class=\"token operator\">&amp;&amp;</span> i<span class=\"token operator\">-</span>j<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>h<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"C-Vacation\"><a href=\"#C-Vacation\" class=\"headerlink\" title=\"C - Vacation\"></a>C - Vacation</h2><h3 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ul>\n<li><code>dp[i][j]</code> : 第 i 天选择做 j 事件获得的最大值 . ( j = 1 做 a , 以此类推)</li>\n</ul>\n<p>状态转移方程 :<br>$$<br>dp_{i,j} = MAX ^{3}<em>{k = 1} ( dp</em>{i-1} + f(j)[i]) \\tag{k != j} \\<br>f(x)=\\left{<br>             \\begin{array}{<strong>lr</strong>}<br>             a &amp;x=1 \\<br>             b &amp;x=2 \\<br>             c &amp;x=3 \\<br>             \\end{array}<br>\\right.<br>$$</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXN</span> <span class=\"token expression\"><span class=\"token number\">100010</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LINF</span> <span class=\"token expression\"><span class=\"token number\">1e18</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IINF</span> <span class=\"token expression\"><span class=\"token number\">2147483647</span></span></span>\n<span class=\"token keyword\">using</span> ll<span class=\"token operator\">=</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n\nll dp<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#123;</span>\n        cin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> \n        <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>c<span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-Knapsack-1\"><a href=\"#D-Knapsack-1\" class=\"headerlink\" title=\"D - Knapsack 1\"></a>D - Knapsack 1</h2><h3 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>01背包 问题 . 使用滚动数组优化 .</p>\n<ul>\n<li><code>dp[i]</code> 表示到上个物品选择完后 , 花费 i 个单位体积可获得的最大价值 . </li>\n<li><code>w</code> 当前物品占用体积</li>\n<li><code>v</code> 当前物品价值</li>\n</ul>\n<p>状态转移方程 :<br>$$<br>dp[i]=\\max (dp[i],dp[i-w]+v)<br>$$</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXN</span> <span class=\"token expression\"><span class=\"token number\">100010</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LINF</span> <span class=\"token expression\"><span class=\"token number\">1e18</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IINF</span> <span class=\"token expression\"><span class=\"token number\">2147483647</span></span></span>\n<span class=\"token keyword\">using</span> ll<span class=\"token operator\">=</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\nll dp<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>W<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>N<span class=\"token operator\">>></span>W<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cin<span class=\"token operator\">>></span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>></span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>W<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>dp<span class=\"token punctuation\">[</span>W<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"E-Knapsack-2\"><a href=\"#E-Knapsack-2\" class=\"headerlink\" title=\"E - Knapsack 2\"></a>E - Knapsack 2</h2><h3 id=\"解题思路-4\"><a href=\"#解题思路-4\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>是 D 的加强版 , 数据太大了 , 原来的办法空间复杂度$O(W)$会 MLE , 于是可以换种思路 . 因为 n 和 v 非常小 ,我们可以计算价值为 i 时占用的空间 . 最后找到满足花费少于 W 的 i 的最大值即可.</p>\n<ul>\n<li><code>dp[i]</code> 表示到上个物品选择完后 , 获得的 i 价值需要花费的最少空间 . </li>\n<li><code>w</code> 当前物品占用体积</li>\n<li><code>v</code> 当前物品价值</li>\n</ul>\n<p>状态转移方程 :<br>$$<br>dp[x]=\\left{<br>             \\begin{array}{<strong>lr</strong>}<br>             0 &amp;x=0 \\<br>             \\infty &amp;x\\neq0<br>             \\end{array}<br>\\right.\\<br>dp[i]=min(dp[i],dp[i-v]+w);<br>$$</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXN</span> <span class=\"token expression\"><span class=\"token number\">100010</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LINF</span> <span class=\"token expression\"><span class=\"token number\">1e18</span></span></span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\nll dp<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> N <span class=\"token operator\">>></span> W<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAXN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> LINF<span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> w <span class=\"token operator\">>></span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> v<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> v<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAXN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> W<span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<blockquote>\n<p>Atcoder上面的 DP 练习题 , 主要是能看到别人的代码 .</p>\n</blockquote>","more":"<hr>\n<h2 id=\"A-Frog-1\"><a href=\"#A-Frog-1\" class=\"headerlink\" title=\"A - Frog 1\"></a>A - Frog 1</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>斐波那契数列 . 记得加绝对值 .状态转移方程 :<br>$$<br>f_{i} = MAX (f_{i-1} + \\lvert h_i - h_{i-1} \\rvert \\ ,\\  f_{i-2} +\\lvert h_i - h_{i-2} \\rvert )<br>$$</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">100010</span></span></span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> h<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>h<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>h<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>h<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Frog-2\"><a href=\"#B-Frog-2\" class=\"headerlink\" title=\"B - Frog 2\"></a>B - Frog 2</h2><h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>同 1 , 加上一个循环 k .状态转移方程 :<br>$$<br>f_{i} = MAX ^{k}<em>{j=1} ( f</em>{i-j} + \\lvert h_i - h_{i-j} \\rvert)<br>$$</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">100010</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">23333333333333</span></span></span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> h<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>INF<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>k <span class=\"token operator\">&amp;&amp;</span> i<span class=\"token operator\">-</span>j<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>h<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"C-Vacation\"><a href=\"#C-Vacation\" class=\"headerlink\" title=\"C - Vacation\"></a>C - Vacation</h2><h3 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ul>\n<li><code>dp[i][j]</code> : 第 i 天选择做 j 事件获得的最大值 . ( j = 1 做 a , 以此类推)</li>\n</ul>\n<p>状态转移方程 :<br>$$<br>dp_{i,j} = MAX ^{3}<em>{k = 1} ( dp</em>{i-1} + f(j)[i]) \\tag{k != j} \\<br>f(x)=\\left{<br>             \\begin{array}{<strong>lr</strong>}<br>             a &amp;x=1 \\<br>             b &amp;x=2 \\<br>             c &amp;x=3 \\<br>             \\end{array}<br>\\right.<br>$$</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXN</span> <span class=\"token expression\"><span class=\"token number\">100010</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LINF</span> <span class=\"token expression\"><span class=\"token number\">1e18</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IINF</span> <span class=\"token expression\"><span class=\"token number\">2147483647</span></span></span>\n<span class=\"token keyword\">using</span> ll<span class=\"token operator\">=</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n\nll dp<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#123;</span>\n        cin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token operator\">>></span>c<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> \n        <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>c<span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-Knapsack-1\"><a href=\"#D-Knapsack-1\" class=\"headerlink\" title=\"D - Knapsack 1\"></a>D - Knapsack 1</h2><h3 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>01背包 问题 . 使用滚动数组优化 .</p>\n<ul>\n<li><code>dp[i]</code> 表示到上个物品选择完后 , 花费 i 个单位体积可获得的最大价值 . </li>\n<li><code>w</code> 当前物品占用体积</li>\n<li><code>v</code> 当前物品价值</li>\n</ul>\n<p>状态转移方程 :<br>$$<br>dp[i]=\\max (dp[i],dp[i-w]+v)<br>$$</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXN</span> <span class=\"token expression\"><span class=\"token number\">100010</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LINF</span> <span class=\"token expression\"><span class=\"token number\">1e18</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IINF</span> <span class=\"token expression\"><span class=\"token number\">2147483647</span></span></span>\n<span class=\"token keyword\">using</span> ll<span class=\"token operator\">=</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\nll dp<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span>W<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>N<span class=\"token operator\">>></span>W<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cin<span class=\"token operator\">>></span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>></span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>W<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>dp<span class=\"token punctuation\">[</span>W<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"E-Knapsack-2\"><a href=\"#E-Knapsack-2\" class=\"headerlink\" title=\"E - Knapsack 2\"></a>E - Knapsack 2</h2><h3 id=\"解题思路-4\"><a href=\"#解题思路-4\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>是 D 的加强版 , 数据太大了 , 原来的办法空间复杂度$O(W)$会 MLE , 于是可以换种思路 . 因为 n 和 v 非常小 ,我们可以计算价值为 i 时占用的空间 . 最后找到满足花费少于 W 的 i 的最大值即可.</p>\n<ul>\n<li><code>dp[i]</code> 表示到上个物品选择完后 , 获得的 i 价值需要花费的最少空间 . </li>\n<li><code>w</code> 当前物品占用体积</li>\n<li><code>v</code> 当前物品价值</li>\n</ul>\n<p>状态转移方程 :<br>$$<br>dp[x]=\\left{<br>             \\begin{array}{<strong>lr</strong>}<br>             0 &amp;x=0 \\<br>             \\infty &amp;x\\neq0<br>             \\end{array}<br>\\right.\\<br>dp[i]=min(dp[i],dp[i-v]+w);<br>$$</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXN</span> <span class=\"token expression\"><span class=\"token number\">100010</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LINF</span> <span class=\"token expression\"><span class=\"token number\">1e18</span></span></span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\nll dp<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> N <span class=\"token operator\">>></span> W<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAXN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> LINF<span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> w <span class=\"token operator\">>></span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> v<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> v<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAXN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> W<span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"最大公约数","date":"2020-12-19T14:12:28.000Z","_content":"最大公约数问题不只是简单的抄模版，主要是灵活利用其中的思想。\n<!-- more -->\n\n---\n\n## 基本知识\n\n其实就是小学二年级学过的辗转相除法 , 就是说 gcd (a,b) = gcd(a,b-a) .\n\n> 假设 z 是 x y 的最大公因数 ，z 也是 y-x 的因子 . \n\n所以代码也很简单\n\n```cpp\nint gcd(int x,int y)\n{\n    return y==0?x:gcd(y,x%y);\n}\n```\n\n## 二进制算法\n\n使用二进制不断除去因子 2 ,在某些数据中速度快点 . \n\n```cpp\ninline int gcd(int x,int y)\n{\n    if (x==0) return y;\n    if (y==0) return x;\n    int i,j;\n    for(i=0;0==(x&1);++i) x>>=1;\n    for(j=0;0==(y&1);++j) y>>=1;\n    if (i>j) i=j;\n    while (1)\n    {\n        if (x<y) x^=y,y^=x,x^=y;//交换x y（逗号）\n        if ((x-=y)==0) return y<<i;//这里就是一个gcd\n        while (0==(x&1)) x>>=1;\n    }\n }\n```\n\n## 思想应用\n\n最重要的是对这个思想的应用 .\n\n### CF1459C Row GCD\n\n#### 题目大意\n\n给一组数 , 还有另外一个数 , 问你这组数每个数都加上另外给出的数后的最大公因数 . \n\n#### 解题思路\n\n首先一组数的gcd , 其实就是先找两个数求 gcd , 然后求最大公因数和下一个数的 gcd , 最后的所有数都求一遍就是了 . \n\n然后呢 , 就是用好 gcd(x,x-y) 的妙用 . 加的数是一样的 , 所以\n$$\ngcd(a_0+b,a_1+b,...,a_n+b)=gcd(a_0+b,a_1-a_0,...,a_n-a_0)\n$$\n 所以先预处理 $ gcd(a_0+b,a_1-a_0,...,a_n-a_0) $ , 之后就是 gcd 一次就好了 .\n\n```cpp\n#include<cstdio>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\nll a[200010];\ninline ll gcd(ll x,ll y){\n    return y>0?gcd(y,x%y):x;\n}\nint main() \n{\n\tint n,m;\n\tscanf(\"%d %d\",&n,&m);\n\tfor (int i=0;i<n;i++) scanf(\"%lld\",&a[i]);\n\tsort(a,a+n);\n\tll ans=a[1]-a[0];\n\tfor (int j=2;j<n;j++)\n\t{\n\t\tans=gcd(ans,a[j]-a[0]);\n\t}\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tll bn;\n\t\tscanf(\"%lld\",&bn);\n\t\tprintf(\"%lld \",gcd(ans,bn+a[0]));\n\t}\n\treturn 0;\n}\n```\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/Gcd.md","raw":"---\ntitle: 最大公约数\ndate: 2020-12-19 22:12:28\ntags:\n\t- GCD\ncategories:\n\t- ICPC 数学与计算几何\n---\n最大公约数问题不只是简单的抄模版，主要是灵活利用其中的思想。\n<!-- more -->\n\n---\n\n## 基本知识\n\n其实就是小学二年级学过的辗转相除法 , 就是说 gcd (a,b) = gcd(a,b-a) .\n\n> 假设 z 是 x y 的最大公因数 ，z 也是 y-x 的因子 . \n\n所以代码也很简单\n\n```cpp\nint gcd(int x,int y)\n{\n    return y==0?x:gcd(y,x%y);\n}\n```\n\n## 二进制算法\n\n使用二进制不断除去因子 2 ,在某些数据中速度快点 . \n\n```cpp\ninline int gcd(int x,int y)\n{\n    if (x==0) return y;\n    if (y==0) return x;\n    int i,j;\n    for(i=0;0==(x&1);++i) x>>=1;\n    for(j=0;0==(y&1);++j) y>>=1;\n    if (i>j) i=j;\n    while (1)\n    {\n        if (x<y) x^=y,y^=x,x^=y;//交换x y（逗号）\n        if ((x-=y)==0) return y<<i;//这里就是一个gcd\n        while (0==(x&1)) x>>=1;\n    }\n }\n```\n\n## 思想应用\n\n最重要的是对这个思想的应用 .\n\n### CF1459C Row GCD\n\n#### 题目大意\n\n给一组数 , 还有另外一个数 , 问你这组数每个数都加上另外给出的数后的最大公因数 . \n\n#### 解题思路\n\n首先一组数的gcd , 其实就是先找两个数求 gcd , 然后求最大公因数和下一个数的 gcd , 最后的所有数都求一遍就是了 . \n\n然后呢 , 就是用好 gcd(x,x-y) 的妙用 . 加的数是一样的 , 所以\n$$\ngcd(a_0+b,a_1+b,...,a_n+b)=gcd(a_0+b,a_1-a_0,...,a_n-a_0)\n$$\n 所以先预处理 $ gcd(a_0+b,a_1-a_0,...,a_n-a_0) $ , 之后就是 gcd 一次就好了 .\n\n```cpp\n#include<cstdio>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\nll a[200010];\ninline ll gcd(ll x,ll y){\n    return y>0?gcd(y,x%y):x;\n}\nint main() \n{\n\tint n,m;\n\tscanf(\"%d %d\",&n,&m);\n\tfor (int i=0;i<n;i++) scanf(\"%lld\",&a[i]);\n\tsort(a,a+n);\n\tll ans=a[1]-a[0];\n\tfor (int j=2;j<n;j++)\n\t{\n\t\tans=gcd(ans,a[j]-a[0]);\n\t}\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tll bn;\n\t\tscanf(\"%lld\",&bn);\n\t\tprintf(\"%lld \",gcd(ans,bn+a[0]));\n\t}\n\treturn 0;\n}\n```\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/Gcd","published":1,"updated":"2021-06-26T15:45:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujt002063jn4f7f9of5","content":"<p>最大公约数问题不只是简单的抄模版，主要是灵活利用其中的思想。</p>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h2><p>其实就是小学二年级学过的辗转相除法 , 就是说 gcd (a,b) = gcd(a,b-a) .</p>\n<blockquote>\n<p>假设 z 是 x y 的最大公因数 ，z 也是 y-x 的因子 . </p>\n</blockquote>\n<p>所以代码也很简单</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> y<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>x<span class=\"token operator\">%</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二进制算法\"><a href=\"#二进制算法\" class=\"headerlink\" title=\"二进制算法\"></a>二进制算法</h2><p>使用二进制不断除去因子 2 ,在某些数据中速度快点 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token number\">0</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> x<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token number\">0</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> y<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span>j<span class=\"token punctuation\">)</span> i<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span>y<span class=\"token punctuation\">)</span> x<span class=\"token operator\">^=</span>y<span class=\"token punctuation\">,</span>y<span class=\"token operator\">^=</span>x<span class=\"token punctuation\">,</span>x<span class=\"token operator\">^=</span>y<span class=\"token punctuation\">;</span><span class=\"token comment\">//交换x y（逗号）</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-=</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> y<span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">;</span><span class=\"token comment\">//这里就是一个gcd</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> x<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"思想应用\"><a href=\"#思想应用\" class=\"headerlink\" title=\"思想应用\"></a>思想应用</h2><p>最重要的是对这个思想的应用 .</p>\n<h3 id=\"CF1459C-Row-GCD\"><a href=\"#CF1459C-Row-GCD\" class=\"headerlink\" title=\"CF1459C Row GCD\"></a>CF1459C Row GCD</h3><h4 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h4><p>给一组数 , 还有另外一个数 , 问你这组数每个数都加上另外给出的数后的最大公因数 . </p>\n<h4 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>首先一组数的gcd , 其实就是先找两个数求 gcd , 然后求最大公因数和下一个数的 gcd , 最后的所有数都求一遍就是了 . </p>\n<p>然后呢 , 就是用好 gcd(x,x-y) 的妙用 . 加的数是一样的 , 所以<br>$$<br>gcd(a_0+b,a_1+b,…,a_n+b)=gcd(a_0+b,a_1-a_0,…,a_n-a_0)<br>$$<br> 所以先预处理 $ gcd(a_0+b,a_1-a_0,…,a_n-a_0) $ , 之后就是 gcd 一次就好了 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nll a<span class=\"token punctuation\">[</span><span class=\"token number\">200010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> ll <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">,</span>ll y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> y<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">?</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>x<span class=\"token operator\">%</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tll ans<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tans<span class=\"token operator\">=</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tll bn<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>bn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld \"</span><span class=\"token punctuation\">,</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>bn<span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>最大公约数问题不只是简单的抄模版，主要是灵活利用其中的思想。</p>","more":"<hr>\n<h2 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h2><p>其实就是小学二年级学过的辗转相除法 , 就是说 gcd (a,b) = gcd(a,b-a) .</p>\n<blockquote>\n<p>假设 z 是 x y 的最大公因数 ，z 也是 y-x 的因子 . </p>\n</blockquote>\n<p>所以代码也很简单</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> y<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>x<span class=\"token operator\">%</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二进制算法\"><a href=\"#二进制算法\" class=\"headerlink\" title=\"二进制算法\"></a>二进制算法</h2><p>使用二进制不断除去因子 2 ,在某些数据中速度快点 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token number\">0</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> x<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token number\">0</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> y<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span>j<span class=\"token punctuation\">)</span> i<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span>y<span class=\"token punctuation\">)</span> x<span class=\"token operator\">^=</span>y<span class=\"token punctuation\">,</span>y<span class=\"token operator\">^=</span>x<span class=\"token punctuation\">,</span>x<span class=\"token operator\">^=</span>y<span class=\"token punctuation\">;</span><span class=\"token comment\">//交换x y（逗号）</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-=</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> y<span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">;</span><span class=\"token comment\">//这里就是一个gcd</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> x<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"思想应用\"><a href=\"#思想应用\" class=\"headerlink\" title=\"思想应用\"></a>思想应用</h2><p>最重要的是对这个思想的应用 .</p>\n<h3 id=\"CF1459C-Row-GCD\"><a href=\"#CF1459C-Row-GCD\" class=\"headerlink\" title=\"CF1459C Row GCD\"></a>CF1459C Row GCD</h3><h4 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h4><p>给一组数 , 还有另外一个数 , 问你这组数每个数都加上另外给出的数后的最大公因数 . </p>\n<h4 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>首先一组数的gcd , 其实就是先找两个数求 gcd , 然后求最大公因数和下一个数的 gcd , 最后的所有数都求一遍就是了 . </p>\n<p>然后呢 , 就是用好 gcd(x,x-y) 的妙用 . 加的数是一样的 , 所以<br>$$<br>gcd(a_0+b,a_1+b,…,a_n+b)=gcd(a_0+b,a_1-a_0,…,a_n-a_0)<br>$$<br> 所以先预处理 $ gcd(a_0+b,a_1-a_0,…,a_n-a_0) $ , 之后就是 gcd 一次就好了 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nll a<span class=\"token punctuation\">[</span><span class=\"token number\">200010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> ll <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">,</span>ll y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> y<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">?</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>x<span class=\"token operator\">%</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tll ans<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tans<span class=\"token operator\">=</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tll bn<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>bn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld \"</span><span class=\"token punctuation\">,</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>bn<span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"Graphviz 的使用","date":"2020-11-02T14:50:29.000Z","_content":"这是一款不同于其他框图软件的绘图工具, 他能把你想的东西画成图像,支持多种图像格式. 功能强大, 但对第一次使用并不友好. 于是写一下, 方便自己查找.\n<!-- more -->\n# Graphviz\n本文参考 [Tacey Wong](https://home.cnblogs.com/u/taceywong/) 的 [博文](https://www.cnblogs.com/taceywong/p/5439574.html) .\n\n## 安装方式\n\n​\twindows 没试过, 登陆 [官网](www.graphviz.org/) 找一下吧. Linux 中, 我的 Ubuntu 20.04 LTS 已经预装过了.\n\n## 使用方式\n\n#### 生成命令\n\n​\t编写 dot 文件, 是一种描述图的文件, 然后在终端用命令\n\n```bash\ndot -Tpng sample.dot -o sample.png\n```\n\n dot 表示 dot 布局,  -Tpng 表示 png 图片格式, sample.dot 是脚本文件名, -o sample.png 表示生成的图片名称. \n\n#### 布局引擎\n\n-   dot ： 默认布局方式，主要用于有向图\n-   neato ： 主要用于无向图\n-   twopi ： 主要用于径向布局\n-   circo ： 圆环布局\n-   fdp ： 主要用于无向图\n-   sfdp ： 主要绘制较大的无向图\n-   patchwork ： 主要用于树哈希图（tree map）\n\n#### 图片格式\n\n-   pdf ：\n-   gif\n-   png ：\n-   jpeg ： 一种有损压缩图片格式\n-   bmp ： 一种位图格式\n-   svg ： 矢量图，一般用与Web，，可以用浏览器打开\n-   ps ： 矢量线图，多用于打印\n    更多的输出格式可以浏览[Graphviz输出格式](http://www.graphviz.org/content/output-formats)进行查看。\n\n#### 元素属性\n\n-   color : 边框线条颜色\n-   shape :形状\n-   fillcolor : 填充颜色\n-   fontcolor : 填充节点或集群的背景颜色\n\n#### 二叉树的画法\n\n​\t其实画挺麻烦的, 于是在网上 copy 了一下. ~~没有强迫症也是可以的,就是左右子树有点歪.~~ 方法是设置三个 node 中间的隐藏就好了.\n\n```Graphviz Dot\ngraph bin_tree {\n    node [shape=circle];\n \n    1 -- 2, 3;\n    2 -- 4;\n    // 隐藏中间节点的连线\n    2 -- m2 [weight=10 style=\"invis\"];\n    2 -- 5;\n \n//    3 -- 6;\n    // 隐藏中间节点的连线\n    3 -- m3 [weight=10 style=\"invis\"];\n//    3 -- 7;\n//    4 -- 8;\n    4 -- m4 [weight=10 style=\"invis\"]\n\t\t\n\t\t// 隐藏中间节点\n\t1 [label=\"5\"]\n\t2 [label=\"6\"]\n\t3 [label=\"4\"]\n\t4 [label=\"8\"]\n\t5 [label=\"2\"]\n    m2, m3 ,m4[label=\"\" style=\"invis\"]\n}\n```\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/Graphviz.md","raw":"---\ntitle: Graphviz 的使用\ndate: 2020-11-02 22:50:29\ncategories:\n\t- 各种好用的工具\ntags:\n\t- 绘图\n---\n这是一款不同于其他框图软件的绘图工具, 他能把你想的东西画成图像,支持多种图像格式. 功能强大, 但对第一次使用并不友好. 于是写一下, 方便自己查找.\n<!-- more -->\n# Graphviz\n本文参考 [Tacey Wong](https://home.cnblogs.com/u/taceywong/) 的 [博文](https://www.cnblogs.com/taceywong/p/5439574.html) .\n\n## 安装方式\n\n​\twindows 没试过, 登陆 [官网](www.graphviz.org/) 找一下吧. Linux 中, 我的 Ubuntu 20.04 LTS 已经预装过了.\n\n## 使用方式\n\n#### 生成命令\n\n​\t编写 dot 文件, 是一种描述图的文件, 然后在终端用命令\n\n```bash\ndot -Tpng sample.dot -o sample.png\n```\n\n dot 表示 dot 布局,  -Tpng 表示 png 图片格式, sample.dot 是脚本文件名, -o sample.png 表示生成的图片名称. \n\n#### 布局引擎\n\n-   dot ： 默认布局方式，主要用于有向图\n-   neato ： 主要用于无向图\n-   twopi ： 主要用于径向布局\n-   circo ： 圆环布局\n-   fdp ： 主要用于无向图\n-   sfdp ： 主要绘制较大的无向图\n-   patchwork ： 主要用于树哈希图（tree map）\n\n#### 图片格式\n\n-   pdf ：\n-   gif\n-   png ：\n-   jpeg ： 一种有损压缩图片格式\n-   bmp ： 一种位图格式\n-   svg ： 矢量图，一般用与Web，，可以用浏览器打开\n-   ps ： 矢量线图，多用于打印\n    更多的输出格式可以浏览[Graphviz输出格式](http://www.graphviz.org/content/output-formats)进行查看。\n\n#### 元素属性\n\n-   color : 边框线条颜色\n-   shape :形状\n-   fillcolor : 填充颜色\n-   fontcolor : 填充节点或集群的背景颜色\n\n#### 二叉树的画法\n\n​\t其实画挺麻烦的, 于是在网上 copy 了一下. ~~没有强迫症也是可以的,就是左右子树有点歪.~~ 方法是设置三个 node 中间的隐藏就好了.\n\n```Graphviz Dot\ngraph bin_tree {\n    node [shape=circle];\n \n    1 -- 2, 3;\n    2 -- 4;\n    // 隐藏中间节点的连线\n    2 -- m2 [weight=10 style=\"invis\"];\n    2 -- 5;\n \n//    3 -- 6;\n    // 隐藏中间节点的连线\n    3 -- m3 [weight=10 style=\"invis\"];\n//    3 -- 7;\n//    4 -- 8;\n    4 -- m4 [weight=10 style=\"invis\"]\n\t\t\n\t\t// 隐藏中间节点\n\t1 [label=\"5\"]\n\t2 [label=\"6\"]\n\t3 [label=\"4\"]\n\t4 [label=\"8\"]\n\t5 [label=\"2\"]\n    m2, m3 ,m4[label=\"\" style=\"invis\"]\n}\n```\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/Graphviz","published":1,"updated":"2021-06-26T15:37:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujv002363jn2m940bg8","content":"<p>这是一款不同于其他框图软件的绘图工具, 他能把你想的东西画成图像,支持多种图像格式. 功能强大, 但对第一次使用并不友好. 于是写一下, 方便自己查找.</p>\n<span id=\"more\"></span>\n<h1 id=\"Graphviz\"><a href=\"#Graphviz\" class=\"headerlink\" title=\"Graphviz\"></a>Graphviz</h1><p>本文参考 <a href=\"https://home.cnblogs.com/u/taceywong/\">Tacey Wong</a> 的 <a href=\"https://www.cnblogs.com/taceywong/p/5439574.html\">博文</a> .</p>\n<h2 id=\"安装方式\"><a href=\"#安装方式\" class=\"headerlink\" title=\"安装方式\"></a>安装方式</h2><p>​    windows 没试过, 登陆 <a href=\"www.graphviz.org/\">官网</a> 找一下吧. Linux 中, 我的 Ubuntu 20.04 LTS 已经预装过了.</p>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><h4 id=\"生成命令\"><a href=\"#生成命令\" class=\"headerlink\" title=\"生成命令\"></a>生成命令</h4><p>​    编写 dot 文件, 是一种描述图的文件, 然后在终端用命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dot -Tpng sample.dot -o sample.png<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> dot 表示 dot 布局,  -Tpng 表示 png 图片格式, sample.dot 是脚本文件名, -o sample.png 表示生成的图片名称. </p>\n<h4 id=\"布局引擎\"><a href=\"#布局引擎\" class=\"headerlink\" title=\"布局引擎\"></a>布局引擎</h4><ul>\n<li>  dot ： 默认布局方式，主要用于有向图</li>\n<li>  neato ： 主要用于无向图</li>\n<li>  twopi ： 主要用于径向布局</li>\n<li>  circo ： 圆环布局</li>\n<li>  fdp ： 主要用于无向图</li>\n<li>  sfdp ： 主要绘制较大的无向图</li>\n<li>  patchwork ： 主要用于树哈希图（tree map）</li>\n</ul>\n<h4 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h4><ul>\n<li>  pdf ：</li>\n<li>  gif</li>\n<li>  png ：</li>\n<li>  jpeg ： 一种有损压缩图片格式</li>\n<li>  bmp ： 一种位图格式</li>\n<li>  svg ： 矢量图，一般用与Web，，可以用浏览器打开</li>\n<li>ps ： 矢量线图，多用于打印<br>  更多的输出格式可以浏览<a href=\"http://www.graphviz.org/content/output-formats\">Graphviz输出格式</a>进行查看。</li>\n</ul>\n<h4 id=\"元素属性\"><a href=\"#元素属性\" class=\"headerlink\" title=\"元素属性\"></a>元素属性</h4><ul>\n<li>  color : 边框线条颜色</li>\n<li>  shape :形状</li>\n<li>  fillcolor : 填充颜色</li>\n<li>  fontcolor : 填充节点或集群的背景颜色</li>\n</ul>\n<h4 id=\"二叉树的画法\"><a href=\"#二叉树的画法\" class=\"headerlink\" title=\"二叉树的画法\"></a>二叉树的画法</h4><p>​    其实画挺麻烦的, 于是在网上 copy 了一下. <del>没有强迫症也是可以的,就是左右子树有点歪.</del> 方法是设置三个 node 中间的隐藏就好了.</p>\n<pre class=\"line-numbers language-Graphviz\" data-language=\"Graphviz\"><div class=\"caption\"><span>Dot</span></div><code class=\"language-Graphviz\">graph bin_tree &#123;\n    node [shape&#x3D;circle];\n \n    1 -- 2, 3;\n    2 -- 4;\n    &#x2F;&#x2F; 隐藏中间节点的连线\n    2 -- m2 [weight&#x3D;10 style&#x3D;&quot;invis&quot;];\n    2 -- 5;\n \n&#x2F;&#x2F;    3 -- 6;\n    &#x2F;&#x2F; 隐藏中间节点的连线\n    3 -- m3 [weight&#x3D;10 style&#x3D;&quot;invis&quot;];\n&#x2F;&#x2F;    3 -- 7;\n&#x2F;&#x2F;    4 -- 8;\n    4 -- m4 [weight&#x3D;10 style&#x3D;&quot;invis&quot;]\n\t\t\n\t\t&#x2F;&#x2F; 隐藏中间节点\n\t1 [label&#x3D;&quot;5&quot;]\n\t2 [label&#x3D;&quot;6&quot;]\n\t3 [label&#x3D;&quot;4&quot;]\n\t4 [label&#x3D;&quot;8&quot;]\n\t5 [label&#x3D;&quot;2&quot;]\n    m2, m3 ,m4[label&#x3D;&quot;&quot; style&#x3D;&quot;invis&quot;]\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>这是一款不同于其他框图软件的绘图工具, 他能把你想的东西画成图像,支持多种图像格式. 功能强大, 但对第一次使用并不友好. 于是写一下, 方便自己查找.</p>","more":"<h1 id=\"Graphviz\"><a href=\"#Graphviz\" class=\"headerlink\" title=\"Graphviz\"></a>Graphviz</h1><p>本文参考 <a href=\"https://home.cnblogs.com/u/taceywong/\">Tacey Wong</a> 的 <a href=\"https://www.cnblogs.com/taceywong/p/5439574.html\">博文</a> .</p>\n<h2 id=\"安装方式\"><a href=\"#安装方式\" class=\"headerlink\" title=\"安装方式\"></a>安装方式</h2><p>​    windows 没试过, 登陆 <a href=\"www.graphviz.org/\">官网</a> 找一下吧. Linux 中, 我的 Ubuntu 20.04 LTS 已经预装过了.</p>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><h4 id=\"生成命令\"><a href=\"#生成命令\" class=\"headerlink\" title=\"生成命令\"></a>生成命令</h4><p>​    编写 dot 文件, 是一种描述图的文件, 然后在终端用命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dot -Tpng sample.dot -o sample.png<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> dot 表示 dot 布局,  -Tpng 表示 png 图片格式, sample.dot 是脚本文件名, -o sample.png 表示生成的图片名称. </p>\n<h4 id=\"布局引擎\"><a href=\"#布局引擎\" class=\"headerlink\" title=\"布局引擎\"></a>布局引擎</h4><ul>\n<li>  dot ： 默认布局方式，主要用于有向图</li>\n<li>  neato ： 主要用于无向图</li>\n<li>  twopi ： 主要用于径向布局</li>\n<li>  circo ： 圆环布局</li>\n<li>  fdp ： 主要用于无向图</li>\n<li>  sfdp ： 主要绘制较大的无向图</li>\n<li>  patchwork ： 主要用于树哈希图（tree map）</li>\n</ul>\n<h4 id=\"图片格式\"><a href=\"#图片格式\" class=\"headerlink\" title=\"图片格式\"></a>图片格式</h4><ul>\n<li>  pdf ：</li>\n<li>  gif</li>\n<li>  png ：</li>\n<li>  jpeg ： 一种有损压缩图片格式</li>\n<li>  bmp ： 一种位图格式</li>\n<li>  svg ： 矢量图，一般用与Web，，可以用浏览器打开</li>\n<li>ps ： 矢量线图，多用于打印<br>  更多的输出格式可以浏览<a href=\"http://www.graphviz.org/content/output-formats\">Graphviz输出格式</a>进行查看。</li>\n</ul>\n<h4 id=\"元素属性\"><a href=\"#元素属性\" class=\"headerlink\" title=\"元素属性\"></a>元素属性</h4><ul>\n<li>  color : 边框线条颜色</li>\n<li>  shape :形状</li>\n<li>  fillcolor : 填充颜色</li>\n<li>  fontcolor : 填充节点或集群的背景颜色</li>\n</ul>\n<h4 id=\"二叉树的画法\"><a href=\"#二叉树的画法\" class=\"headerlink\" title=\"二叉树的画法\"></a>二叉树的画法</h4><p>​    其实画挺麻烦的, 于是在网上 copy 了一下. <del>没有强迫症也是可以的,就是左右子树有点歪.</del> 方法是设置三个 node 中间的隐藏就好了.</p>\n<pre class=\"line-numbers language-Graphviz\" data-language=\"Graphviz\"><div class=\"caption\"><span>Dot</span></div><code class=\"language-Graphviz\">graph bin_tree &#123;\n    node [shape&#x3D;circle];\n \n    1 -- 2, 3;\n    2 -- 4;\n    &#x2F;&#x2F; 隐藏中间节点的连线\n    2 -- m2 [weight&#x3D;10 style&#x3D;&quot;invis&quot;];\n    2 -- 5;\n \n&#x2F;&#x2F;    3 -- 6;\n    &#x2F;&#x2F; 隐藏中间节点的连线\n    3 -- m3 [weight&#x3D;10 style&#x3D;&quot;invis&quot;];\n&#x2F;&#x2F;    3 -- 7;\n&#x2F;&#x2F;    4 -- 8;\n    4 -- m4 [weight&#x3D;10 style&#x3D;&quot;invis&quot;]\n\t\t\n\t\t&#x2F;&#x2F; 隐藏中间节点\n\t1 [label&#x3D;&quot;5&quot;]\n\t2 [label&#x3D;&quot;6&quot;]\n\t3 [label&#x3D;&quot;4&quot;]\n\t4 [label&#x3D;&quot;8&quot;]\n\t5 [label&#x3D;&quot;2&quot;]\n    m2, m3 ,m4[label&#x3D;&quot;&quot; style&#x3D;&quot;invis&quot;]\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"区间调度问题","date":"2020-11-03T13:08:04.000Z","updated":"2021-06-26T15:24:04.000Z","_content":"关于区间调度的问题，因为上次一道简单的贪心不会，就打算学一下。\n<!-- more -->\n本文参考 https://blog.csdn.net/kiritow/article/details/52208488 \n\n## 最多区间调度\n\n​\t\t给若干区间, 问你在不相交情况下, 最多能安排几个区间?\n\n​\t\t这种题目在小学数学中见过, 但是毕竟是很少项, 推一下就知道答案了. 而这个问题是贪心算法秒杀的. 就是我们按区间结束大小排序, 优先选择先结束的区间. \n\n### 算法证明\n\n- 数学归纳法\n\n    记贪心算法选择的区间序号是 i<sub>k</sub> , 最优解的选择的区间序号是 j<sub>k</sub> , R ( x ) 表示序号为 x 区间的右边界\n\n    我们的算法选的是最先结束的, 于是有以下结论: \n\n    1. 当 k = 1 时 ,\n\n        <center> R ( i<sub>k</sub> ) <= R ( j<sub>k</sub> ) </center> \n\n    2. 当 k >1 时 , 假设 R ( i<sub>k-1</sub> ) <= R ( j<sub>k-1</sub> ) \n\n        <center> R ( j<sub>k-1</sub> ) <= R ( j<sub>k</sub> ) 且 R ( i<sub>k-1</sub> ) <= R ( j<sub>k-1</sub> ) </center>\n\n        所以 \n\n        <center> R ( i<sub>k-1</sub> ) <= R ( j<sub>k-1</sub> ) <= R ( j<sub>k</sub> ) </center>\n\n        意味着最优解选的区间贪心算法必定可以选到 , 而且一定满足\n\n        <center>  R ( i<sub>k</sub> ) <= R ( j<sub>k</sub> ) </center>\n\n    3. 综上, 对任意 k 有  R ( i<sub>k</sub> ) <= R ( j<sub>k</sub> ) .\n\n- 反证法\n\n    假设贪心算法不是最优解, 贪心算法解为k, 必定存在 j<sub>k+1</sub> 在 R ( j<sub>k</sub> ) 后开始, 所以 R ( i<sub>k</sub> ) <= R ( j<sub>k</sub> ) <= R ( j<sub>k+1</sub> ) , 然而这样 j<sub>k+1</sub> 就可以成为贪心算法第 k+1 个区间, 矛盾.\n\n### Code\n\n```cpp\nint findans()\n{\n\t\tfor (int i=0;i<n;i++)\n        {\n                scanf (\"%d %d\",&s[i].second,&s[i].first);\n            \t//因为pair先比较first,所以反着读入\n        }\n        sort(s,s+n);\n        int R=-1,ans=0;\n        for (int i=0;i<n;i++)\n        {\n                if(s[i].second>=R) R=s[i].first,ans++;\n        }\n        return ans;\n}\n```\n\n## 最长区间调度\n\n​\t\t一个简单的 DP 问题, f(x)表示时间为x时的最常区间, 状态转移方程\n\n<center> f ( End ) = max( ( f ( End - Length ) + ( Length ) ) , f ( End - 1) )</center>\n\n### Code\n```cpp\n//该代码没有实际背景,所以随便写了一个,也没有调试...简单dp就那样咯\npair <int,int>s[maxn];\nans[maxt];\nvoid findans()\n{\n        int i,n,top=0;\n        scanf (\"%d\",&n);\n        for(int i=0;i<n;i++)\n        {\n                scanf (\"%d %d\",&s[i].second,&s[i].first);\n        }\n        sort(s,s+n);\n        for (i=1;top<n;i++)\n        {\n                ans[i]=ans[i-1];\n                while (s[top].first==i)\n                {\n                        int length=s[i].first-s[i].second);\n                        ans[i]=max(ans[i],ans[i-length]+length;\n                        top++;\n                }\n        }\n        return ans[i-1];\n}\n```\n\n## 加权区间调度\n本质还是一个 dp 过程，就是算值时多加了一个权重。代码变化不大。\n\n### Code\n```cpp\npair <int,int>s[maxn];\nans[maxt];\nvoid findans()\n{\n        int i,n,top=0;\n        scanf (\"%d\",&n);\n        for(int i=0;i<n;i++)\n        {\n                scanf (\"%d %d\",&s[i].second,&s[i].first);\n                scanf (\"%d %d\",&weight[i]);\n        }\n        sort(s,s+n-1);\n        for (i=1;top<n;i++)\n        {\n                ans[i]=ans[i-1];\n                while (s[top].first==i)\n                {\n                        int length=s[i].first-s[i].second);\n                        ans[i]=max(ans[i],ans[i-length]+length*weight[i];\n                        top++;\n                }\n        }\n        return ans[i-1];\n}\n```\n## 最少区间调度\n我们要使用尽量少的区间覆盖指定的区间，可以按开始时间排序，从指定区间左端点开始，遍历所有包含这个左端点的区间，找到最大的右端点作为下一个左端点，这样就能解决问题了。\n### Code    \n```cpp\nconst int maxn=1e5+10\npair <int,int>s[maxn];\n\nint main()\n{\n\tint n,beg,end,cnt=0,N;\n\tscanf (\"%d %d\",&beg,&N);//指定覆盖区间\n\tscanf (\"%d\",&n);//n个待选区间\n\tF(i,0,n) scanf (\"%d %d\",&s[i].first,&s[i].second);\n\tsort(s,s+n-1);\n\twhile(beg<N)\n\t{\n\t\tfor (int i=0;i<n;i++)\n\t\t{\n\t\t\tif (s[i].first>beg) break;\n\t\t\tif (s[i].second<beg) continue;\n\t\t\tend=maxn(end,s[i].second);\n\t\t}\n\t\tif (beg==end) return -1;//无法覆盖，无解\n\t\tbeg=end;\n\t\tcnt++;\n\t}\n\tprintf(\"%d\\n\",cnt);\n\treturn 0;\n}\n```\n## 最大区间重叠\n\n## 机器调度\n\n\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/IntervalSchedulingProblem.md","raw":"---\ntitle: 区间调度问题\ndate: 2020-11-03 21:08:04\nupdated: 2021-06-26 23:24:04\ncategories:\n\t- ICPC 动态规划\ntags:\n\t- 贪心\n\t- 区间调度\n---\n关于区间调度的问题，因为上次一道简单的贪心不会，就打算学一下。\n<!-- more -->\n本文参考 https://blog.csdn.net/kiritow/article/details/52208488 \n\n## 最多区间调度\n\n​\t\t给若干区间, 问你在不相交情况下, 最多能安排几个区间?\n\n​\t\t这种题目在小学数学中见过, 但是毕竟是很少项, 推一下就知道答案了. 而这个问题是贪心算法秒杀的. 就是我们按区间结束大小排序, 优先选择先结束的区间. \n\n### 算法证明\n\n- 数学归纳法\n\n    记贪心算法选择的区间序号是 i<sub>k</sub> , 最优解的选择的区间序号是 j<sub>k</sub> , R ( x ) 表示序号为 x 区间的右边界\n\n    我们的算法选的是最先结束的, 于是有以下结论: \n\n    1. 当 k = 1 时 ,\n\n        <center> R ( i<sub>k</sub> ) <= R ( j<sub>k</sub> ) </center> \n\n    2. 当 k >1 时 , 假设 R ( i<sub>k-1</sub> ) <= R ( j<sub>k-1</sub> ) \n\n        <center> R ( j<sub>k-1</sub> ) <= R ( j<sub>k</sub> ) 且 R ( i<sub>k-1</sub> ) <= R ( j<sub>k-1</sub> ) </center>\n\n        所以 \n\n        <center> R ( i<sub>k-1</sub> ) <= R ( j<sub>k-1</sub> ) <= R ( j<sub>k</sub> ) </center>\n\n        意味着最优解选的区间贪心算法必定可以选到 , 而且一定满足\n\n        <center>  R ( i<sub>k</sub> ) <= R ( j<sub>k</sub> ) </center>\n\n    3. 综上, 对任意 k 有  R ( i<sub>k</sub> ) <= R ( j<sub>k</sub> ) .\n\n- 反证法\n\n    假设贪心算法不是最优解, 贪心算法解为k, 必定存在 j<sub>k+1</sub> 在 R ( j<sub>k</sub> ) 后开始, 所以 R ( i<sub>k</sub> ) <= R ( j<sub>k</sub> ) <= R ( j<sub>k+1</sub> ) , 然而这样 j<sub>k+1</sub> 就可以成为贪心算法第 k+1 个区间, 矛盾.\n\n### Code\n\n```cpp\nint findans()\n{\n\t\tfor (int i=0;i<n;i++)\n        {\n                scanf (\"%d %d\",&s[i].second,&s[i].first);\n            \t//因为pair先比较first,所以反着读入\n        }\n        sort(s,s+n);\n        int R=-1,ans=0;\n        for (int i=0;i<n;i++)\n        {\n                if(s[i].second>=R) R=s[i].first,ans++;\n        }\n        return ans;\n}\n```\n\n## 最长区间调度\n\n​\t\t一个简单的 DP 问题, f(x)表示时间为x时的最常区间, 状态转移方程\n\n<center> f ( End ) = max( ( f ( End - Length ) + ( Length ) ) , f ( End - 1) )</center>\n\n### Code\n```cpp\n//该代码没有实际背景,所以随便写了一个,也没有调试...简单dp就那样咯\npair <int,int>s[maxn];\nans[maxt];\nvoid findans()\n{\n        int i,n,top=0;\n        scanf (\"%d\",&n);\n        for(int i=0;i<n;i++)\n        {\n                scanf (\"%d %d\",&s[i].second,&s[i].first);\n        }\n        sort(s,s+n);\n        for (i=1;top<n;i++)\n        {\n                ans[i]=ans[i-1];\n                while (s[top].first==i)\n                {\n                        int length=s[i].first-s[i].second);\n                        ans[i]=max(ans[i],ans[i-length]+length;\n                        top++;\n                }\n        }\n        return ans[i-1];\n}\n```\n\n## 加权区间调度\n本质还是一个 dp 过程，就是算值时多加了一个权重。代码变化不大。\n\n### Code\n```cpp\npair <int,int>s[maxn];\nans[maxt];\nvoid findans()\n{\n        int i,n,top=0;\n        scanf (\"%d\",&n);\n        for(int i=0;i<n;i++)\n        {\n                scanf (\"%d %d\",&s[i].second,&s[i].first);\n                scanf (\"%d %d\",&weight[i]);\n        }\n        sort(s,s+n-1);\n        for (i=1;top<n;i++)\n        {\n                ans[i]=ans[i-1];\n                while (s[top].first==i)\n                {\n                        int length=s[i].first-s[i].second);\n                        ans[i]=max(ans[i],ans[i-length]+length*weight[i];\n                        top++;\n                }\n        }\n        return ans[i-1];\n}\n```\n## 最少区间调度\n我们要使用尽量少的区间覆盖指定的区间，可以按开始时间排序，从指定区间左端点开始，遍历所有包含这个左端点的区间，找到最大的右端点作为下一个左端点，这样就能解决问题了。\n### Code    \n```cpp\nconst int maxn=1e5+10\npair <int,int>s[maxn];\n\nint main()\n{\n\tint n,beg,end,cnt=0,N;\n\tscanf (\"%d %d\",&beg,&N);//指定覆盖区间\n\tscanf (\"%d\",&n);//n个待选区间\n\tF(i,0,n) scanf (\"%d %d\",&s[i].first,&s[i].second);\n\tsort(s,s+n-1);\n\twhile(beg<N)\n\t{\n\t\tfor (int i=0;i<n;i++)\n\t\t{\n\t\t\tif (s[i].first>beg) break;\n\t\t\tif (s[i].second<beg) continue;\n\t\t\tend=maxn(end,s[i].second);\n\t\t}\n\t\tif (beg==end) return -1;//无法覆盖，无解\n\t\tbeg=end;\n\t\tcnt++;\n\t}\n\tprintf(\"%d\\n\",cnt);\n\treturn 0;\n}\n```\n## 最大区间重叠\n\n## 机器调度\n\n\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/IntervalSchedulingProblem","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujw002663jnfdtkhsse","content":"<p>关于区间调度的问题，因为上次一道简单的贪心不会，就打算学一下。</p>\n<span id=\"more\"></span>\n<p>本文参考 <a href=\"https://blog.csdn.net/kiritow/article/details/52208488\">https://blog.csdn.net/kiritow/article/details/52208488</a> </p>\n<h2 id=\"最多区间调度\"><a href=\"#最多区间调度\" class=\"headerlink\" title=\"最多区间调度\"></a>最多区间调度</h2><p>​        给若干区间, 问你在不相交情况下, 最多能安排几个区间?</p>\n<p>​        这种题目在小学数学中见过, 但是毕竟是很少项, 推一下就知道答案了. 而这个问题是贪心算法秒杀的. 就是我们按区间结束大小排序, 优先选择先结束的区间. </p>\n<h3 id=\"算法证明\"><a href=\"#算法证明\" class=\"headerlink\" title=\"算法证明\"></a>算法证明</h3><ul>\n<li><p>数学归纳法</p>\n<p>  记贪心算法选择的区间序号是 i<sub>k</sub> , 最优解的选择的区间序号是 j<sub>k</sub> , R ( x ) 表示序号为 x 区间的右边界</p>\n<p>  我们的算法选的是最先结束的, 于是有以下结论: </p>\n<ol>\n<li><p>当 k = 1 时 ,</p>\n <center> R ( i<sub>k</sub> ) <= R ( j<sub>k</sub> ) </center> </li>\n<li><p>当 k &gt;1 时 , 假设 R ( i<sub>k-1</sub> ) &lt;= R ( j<sub>k-1</sub> ) </p>\n <center> R ( j<sub>k-1</sub> ) <= R ( j<sub>k</sub> ) 且 R ( i<sub>k-1</sub> ) <= R ( j<sub>k-1</sub> ) </center>\n\n<p> 所以 </p>\n <center> R ( i<sub>k-1</sub> ) <= R ( j<sub>k-1</sub> ) <= R ( j<sub>k</sub> ) </center>\n\n<p> 意味着最优解选的区间贪心算法必定可以选到 , 而且一定满足</p>\n <center>  R ( i<sub>k</sub> ) <= R ( j<sub>k</sub> ) </center></li>\n<li><p>综上, 对任意 k 有  R ( i<sub>k</sub> ) &lt;= R ( j<sub>k</sub> ) .</p>\n</li>\n</ol>\n</li>\n<li><p>反证法</p>\n<p>  假设贪心算法不是最优解, 贪心算法解为k, 必定存在 j<sub>k+1</sub> 在 R ( j<sub>k</sub> ) 后开始, 所以 R ( i<sub>k</sub> ) &lt;= R ( j<sub>k</sub> ) &lt;= R ( j<sub>k+1</sub> ) , 然而这样 j<sub>k+1</sub> 就可以成为贪心算法第 k+1 个区间, 矛盾.</p>\n</li>\n</ul>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">findans</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \t<span class=\"token comment\">//因为pair先比较first,所以反着读入</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> R<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token operator\">>=</span>R<span class=\"token punctuation\">)</span> R<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"最长区间调度\"><a href=\"#最长区间调度\" class=\"headerlink\" title=\"最长区间调度\"></a>最长区间调度</h2><p>​        一个简单的 DP 问题, f(x)表示时间为x时的最常区间, 状态转移方程</p>\n<center> f ( End ) = max( ( f ( End - Length ) + ( Length ) ) , f ( End - 1) )</center>\n\n<h3 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//该代码没有实际背景,所以随便写了一个,也没有调试...简单dp就那样咯</span>\npair <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nans<span class=\"token punctuation\">[</span>maxt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">findans</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>top<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>top<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token operator\">==</span>i<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token operator\">-</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>length<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>length<span class=\"token punctuation\">;</span>\n                        top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"加权区间调度\"><a href=\"#加权区间调度\" class=\"headerlink\" title=\"加权区间调度\"></a>加权区间调度</h2><p>本质还是一个 dp 过程，就是算值时多加了一个权重。代码变化不大。</p>\n<h3 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">pair <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nans<span class=\"token punctuation\">[</span>maxt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">findans</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>top<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>top<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token operator\">==</span>i<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token operator\">-</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>length<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>length<span class=\"token operator\">*</span>weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"最少区间调度\"><a href=\"#最少区间调度\" class=\"headerlink\" title=\"最少区间调度\"></a>最少区间调度</h2><p>我们要使用尽量少的区间覆盖指定的区间，可以按开始时间排序，从指定区间左端点开始，遍历所有包含这个左端点的区间，找到最大的右端点作为下一个左端点，这样就能解决问题了。</p>\n<h3 id=\"Code-3\"><a href=\"#Code-3\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span>\npair <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>beg<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span>cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>beg<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//指定覆盖区间</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//n个待选区间</span>\n\t<span class=\"token function\">F</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>beg<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token operator\">></span>beg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token operator\">&lt;</span>beg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\tend<span class=\"token operator\">=</span><span class=\"token function\">maxn</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beg<span class=\"token operator\">==</span>end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//无法覆盖，无解</span>\n\t\tbeg<span class=\"token operator\">=</span>end<span class=\"token punctuation\">;</span>\n\t\tcnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"最大区间重叠\"><a href=\"#最大区间重叠\" class=\"headerlink\" title=\"最大区间重叠\"></a>最大区间重叠</h2><h2 id=\"机器调度\"><a href=\"#机器调度\" class=\"headerlink\" title=\"机器调度\"></a>机器调度</h2><p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>关于区间调度的问题，因为上次一道简单的贪心不会，就打算学一下。</p>","more":"<p>本文参考 <a href=\"https://blog.csdn.net/kiritow/article/details/52208488\">https://blog.csdn.net/kiritow/article/details/52208488</a> </p>\n<h2 id=\"最多区间调度\"><a href=\"#最多区间调度\" class=\"headerlink\" title=\"最多区间调度\"></a>最多区间调度</h2><p>​        给若干区间, 问你在不相交情况下, 最多能安排几个区间?</p>\n<p>​        这种题目在小学数学中见过, 但是毕竟是很少项, 推一下就知道答案了. 而这个问题是贪心算法秒杀的. 就是我们按区间结束大小排序, 优先选择先结束的区间. </p>\n<h3 id=\"算法证明\"><a href=\"#算法证明\" class=\"headerlink\" title=\"算法证明\"></a>算法证明</h3><ul>\n<li><p>数学归纳法</p>\n<p>  记贪心算法选择的区间序号是 i<sub>k</sub> , 最优解的选择的区间序号是 j<sub>k</sub> , R ( x ) 表示序号为 x 区间的右边界</p>\n<p>  我们的算法选的是最先结束的, 于是有以下结论: </p>\n<ol>\n<li><p>当 k = 1 时 ,</p>\n <center> R ( i<sub>k</sub> ) <= R ( j<sub>k</sub> ) </center> </li>\n<li><p>当 k &gt;1 时 , 假设 R ( i<sub>k-1</sub> ) &lt;= R ( j<sub>k-1</sub> ) </p>\n <center> R ( j<sub>k-1</sub> ) <= R ( j<sub>k</sub> ) 且 R ( i<sub>k-1</sub> ) <= R ( j<sub>k-1</sub> ) </center>\n\n<p> 所以 </p>\n <center> R ( i<sub>k-1</sub> ) <= R ( j<sub>k-1</sub> ) <= R ( j<sub>k</sub> ) </center>\n\n<p> 意味着最优解选的区间贪心算法必定可以选到 , 而且一定满足</p>\n <center>  R ( i<sub>k</sub> ) <= R ( j<sub>k</sub> ) </center></li>\n<li><p>综上, 对任意 k 有  R ( i<sub>k</sub> ) &lt;= R ( j<sub>k</sub> ) .</p>\n</li>\n</ol>\n</li>\n<li><p>反证法</p>\n<p>  假设贪心算法不是最优解, 贪心算法解为k, 必定存在 j<sub>k+1</sub> 在 R ( j<sub>k</sub> ) 后开始, 所以 R ( i<sub>k</sub> ) &lt;= R ( j<sub>k</sub> ) &lt;= R ( j<sub>k+1</sub> ) , 然而这样 j<sub>k+1</sub> 就可以成为贪心算法第 k+1 个区间, 矛盾.</p>\n</li>\n</ul>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">findans</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \t<span class=\"token comment\">//因为pair先比较first,所以反着读入</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> R<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token operator\">>=</span>R<span class=\"token punctuation\">)</span> R<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"最长区间调度\"><a href=\"#最长区间调度\" class=\"headerlink\" title=\"最长区间调度\"></a>最长区间调度</h2><p>​        一个简单的 DP 问题, f(x)表示时间为x时的最常区间, 状态转移方程</p>\n<center> f ( End ) = max( ( f ( End - Length ) + ( Length ) ) , f ( End - 1) )</center>\n\n<h3 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//该代码没有实际背景,所以随便写了一个,也没有调试...简单dp就那样咯</span>\npair <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nans<span class=\"token punctuation\">[</span>maxt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">findans</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>top<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>top<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token operator\">==</span>i<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token operator\">-</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>length<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>length<span class=\"token punctuation\">;</span>\n                        top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"加权区间调度\"><a href=\"#加权区间调度\" class=\"headerlink\" title=\"加权区间调度\"></a>加权区间调度</h2><p>本质还是一个 dp 过程，就是算值时多加了一个权重。代码变化不大。</p>\n<h3 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">pair <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nans<span class=\"token punctuation\">[</span>maxt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">findans</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>top<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>top<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n                ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token operator\">==</span>i<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token operator\">-</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>length<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>length<span class=\"token operator\">*</span>weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"最少区间调度\"><a href=\"#最少区间调度\" class=\"headerlink\" title=\"最少区间调度\"></a>最少区间调度</h2><p>我们要使用尽量少的区间覆盖指定的区间，可以按开始时间排序，从指定区间左端点开始，遍历所有包含这个左端点的区间，找到最大的右端点作为下一个左端点，这样就能解决问题了。</p>\n<h3 id=\"Code-3\"><a href=\"#Code-3\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span>\npair <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>beg<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span>cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>beg<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//指定覆盖区间</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//n个待选区间</span>\n\t<span class=\"token function\">F</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>beg<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token operator\">></span>beg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token operator\">&lt;</span>beg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\tend<span class=\"token operator\">=</span><span class=\"token function\">maxn</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beg<span class=\"token operator\">==</span>end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//无法覆盖，无解</span>\n\t\tbeg<span class=\"token operator\">=</span>end<span class=\"token punctuation\">;</span>\n\t\tcnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"最大区间重叠\"><a href=\"#最大区间重叠\" class=\"headerlink\" title=\"最大区间重叠\"></a>最大区间重叠</h2><h2 id=\"机器调度\"><a href=\"#机器调度\" class=\"headerlink\" title=\"机器调度\"></a>机器调度</h2><p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"费马小定理与逆元","date":"2020-12-19T15:33:25.000Z","updated":"2021-01-29T13:59:52.000Z","_content":"数论大数据经常会出现取模运算 , 但是除法很难没法同余 , 所以这里要使用费马小定理 . \n<!-- more -->\n\n## 逆元\n\n就是如果$(a*x) \\equiv 1 \\pmod{p}$，则称$x$为 a 的逆元。 \n\n## 费马小定理\n\n证明先挖坑 , 以后证 . 之前费马提出时要求 a 是质数 , 其实不需要 .\n$$\na^p \\equiv a\\pmod{p} \\\\\na^{p-1} \\equiv 1 \\pmod{p}\\\\\n$$\n两种形式 , 下面是要求 a 不是 p 的倍数 . \n\n## 求逆元\n\n所以可以使用费马小定理求逆元 . \n$$\na^{p-2}*a \\equiv 1 \\pmod{p}\n$$\n所以$a^{p-2}$是逆元 . 这样可以试试对组合数取余了 . \n$$\n(a \\div b) \\% p \\equiv (a*inv(b)) \\% p \\equiv (a\\%p*inv(b)\\%p)\\%p\n$$\n\n\n## CF1462E2 Close Tuples\n\n其实就是一个组合数问题 , 问题是如何使用组合数 . \n\n### 组合数模板 & 题解\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\n\ntypedef long long ll;\nconst ll mod=1e9+7;\nconst int maxn=200010;\nll t,m,n,k,fac[maxn],inv[maxn],cnt[maxn],num[maxn];\nll qpow(ll x,ll y)\n{\n    ll res=1;\n    while (y)\n    {\n        if (y & 1ll) res=res*x%mod;\n        y>>=1;\n        x=x*x%mod;\n    }\n    return res;\n}\n\nll C(ll m,ll n)\n{\n    if ( n>m || n<0) return 0;\n    return (fac[m]*inv[n]%mod)*inv[m-n]%mod;\n}\n\nint main()\n{\n    fac[0]=inv[0]=1;\n    for (ll i=1;i<maxn;i++) fac[i]=fac[i-1]*i%mod;\n    for (ll i=1;i<maxn;i++) inv[i]=qpow(fac[i],mod-2);\n    scanf(\"%lld\",&t);\n    while (t--)\n    {\n        scanf(\"%lld%lld%lld\",&n,&m,&k);\n        memset(cnt,0,sizeof(ll)*(n+1));\n        for(int i=1;i<=n;i++) {\n            scanf(\"%lld\",&num[i]);\n            cnt[num[i]]++;\n        }\n        sort(num+1,num+1+n);\n        for(int i=1;i<=n;i++) cnt[i]+=cnt[i-1];\n        ll ans=0;\n        for (int i=n;i>0;i--)\n        {\n            if (num[i]>k) ans+=C(i-cnt[num[i]-k-1]-1,m-1),ans%=mod;\n            else ans+=C(i-1,m-1),ans%=mod;\n        }\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```\n\n\n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/InverseElement.md","raw":"---\ntitle: 费马小定理与逆元\ndate: 2020-12-19 23:33:25\nupdated: 2021-01-29 21:59:52\ntags:\n\t- 逆元\ncategories:\n\t- ICPC 数学与计算几何\n---\n数论大数据经常会出现取模运算 , 但是除法很难没法同余 , 所以这里要使用费马小定理 . \n<!-- more -->\n\n## 逆元\n\n就是如果$(a*x) \\equiv 1 \\pmod{p}$，则称$x$为 a 的逆元。 \n\n## 费马小定理\n\n证明先挖坑 , 以后证 . 之前费马提出时要求 a 是质数 , 其实不需要 .\n$$\na^p \\equiv a\\pmod{p} \\\\\na^{p-1} \\equiv 1 \\pmod{p}\\\\\n$$\n两种形式 , 下面是要求 a 不是 p 的倍数 . \n\n## 求逆元\n\n所以可以使用费马小定理求逆元 . \n$$\na^{p-2}*a \\equiv 1 \\pmod{p}\n$$\n所以$a^{p-2}$是逆元 . 这样可以试试对组合数取余了 . \n$$\n(a \\div b) \\% p \\equiv (a*inv(b)) \\% p \\equiv (a\\%p*inv(b)\\%p)\\%p\n$$\n\n\n## CF1462E2 Close Tuples\n\n其实就是一个组合数问题 , 问题是如何使用组合数 . \n\n### 组合数模板 & 题解\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\n\ntypedef long long ll;\nconst ll mod=1e9+7;\nconst int maxn=200010;\nll t,m,n,k,fac[maxn],inv[maxn],cnt[maxn],num[maxn];\nll qpow(ll x,ll y)\n{\n    ll res=1;\n    while (y)\n    {\n        if (y & 1ll) res=res*x%mod;\n        y>>=1;\n        x=x*x%mod;\n    }\n    return res;\n}\n\nll C(ll m,ll n)\n{\n    if ( n>m || n<0) return 0;\n    return (fac[m]*inv[n]%mod)*inv[m-n]%mod;\n}\n\nint main()\n{\n    fac[0]=inv[0]=1;\n    for (ll i=1;i<maxn;i++) fac[i]=fac[i-1]*i%mod;\n    for (ll i=1;i<maxn;i++) inv[i]=qpow(fac[i],mod-2);\n    scanf(\"%lld\",&t);\n    while (t--)\n    {\n        scanf(\"%lld%lld%lld\",&n,&m,&k);\n        memset(cnt,0,sizeof(ll)*(n+1));\n        for(int i=1;i<=n;i++) {\n            scanf(\"%lld\",&num[i]);\n            cnt[num[i]]++;\n        }\n        sort(num+1,num+1+n);\n        for(int i=1;i<=n;i++) cnt[i]+=cnt[i-1];\n        ll ans=0;\n        for (int i=n;i>0;i--)\n        {\n            if (num[i]>k) ans+=C(i-cnt[num[i]-k-1]-1,m-1),ans%=mod;\n            else ans+=C(i-1,m-1),ans%=mod;\n        }\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```\n\n\n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/InverseElement","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujx002963jn4kxh04gq","content":"<p>数论大数据经常会出现取模运算 , 但是除法很难没法同余 , 所以这里要使用费马小定理 . </p>\n<span id=\"more\"></span>\n\n<h2 id=\"逆元\"><a href=\"#逆元\" class=\"headerlink\" title=\"逆元\"></a>逆元</h2><p>就是如果$(a*x) \\equiv 1 \\pmod{p}$，则称$x$为 a 的逆元。 </p>\n<h2 id=\"费马小定理\"><a href=\"#费马小定理\" class=\"headerlink\" title=\"费马小定理\"></a>费马小定理</h2><p>证明先挖坑 , 以后证 . 之前费马提出时要求 a 是质数 , 其实不需要 .<br>$$<br>a^p \\equiv a\\pmod{p} \\<br>a^{p-1} \\equiv 1 \\pmod{p}\\<br>$$<br>两种形式 , 下面是要求 a 不是 p 的倍数 . </p>\n<h2 id=\"求逆元\"><a href=\"#求逆元\" class=\"headerlink\" title=\"求逆元\"></a>求逆元</h2><p>所以可以使用费马小定理求逆元 .<br>$$<br>a^{p-2}<em>a \\equiv 1 \\pmod{p}<br>$$<br>所以$a^{p-2}$是逆元 . 这样可以试试对组合数取余了 .<br>$$<br>(a \\div b) % p \\equiv (a</em>inv(b)) % p \\equiv (a%p*inv(b)%p)%p<br>$$</p>\n<h2 id=\"CF1462E2-Close-Tuples\"><a href=\"#CF1462E2-Close-Tuples\" class=\"headerlink\" title=\"CF1462E2 Close Tuples\"></a>CF1462E2 Close Tuples</h2><p>其实就是一个组合数问题 , 问题是如何使用组合数 . </p>\n<h3 id=\"组合数模板-amp-题解\"><a href=\"#组合数模板-amp-题解\" class=\"headerlink\" title=\"组合数模板 &amp; 题解\"></a>组合数模板 &amp; 题解</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ll mod<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">200010</span><span class=\"token punctuation\">;</span>\nll t<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>fac<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>inv<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">,</span>ll y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ll res<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&amp;</span> <span class=\"token number\">1ll</span><span class=\"token punctuation\">)</span> res<span class=\"token operator\">=</span>res<span class=\"token operator\">*</span>x<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n        y<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token operator\">=</span>x<span class=\"token operator\">*</span>x<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">C</span><span class=\"token punctuation\">(</span>ll m<span class=\"token punctuation\">,</span>ll n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> n<span class=\"token operator\">></span>m <span class=\"token operator\">||</span> n<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>fac<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>inv<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>inv<span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    fac<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>inv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>maxn<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> fac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fac<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>i<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>maxn<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> inv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span>fac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>mod<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cnt<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        ll ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>k<span class=\"token punctuation\">)</span> ans<span class=\"token operator\">+=</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>cnt<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ans<span class=\"token operator\">%=</span>mod<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> ans<span class=\"token operator\">+=</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ans<span class=\"token operator\">%=</span>mod<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>数论大数据经常会出现取模运算 , 但是除法很难没法同余 , 所以这里要使用费马小定理 . </p>","more":"<h2 id=\"逆元\"><a href=\"#逆元\" class=\"headerlink\" title=\"逆元\"></a>逆元</h2><p>就是如果$(a*x) \\equiv 1 \\pmod{p}$，则称$x$为 a 的逆元。 </p>\n<h2 id=\"费马小定理\"><a href=\"#费马小定理\" class=\"headerlink\" title=\"费马小定理\"></a>费马小定理</h2><p>证明先挖坑 , 以后证 . 之前费马提出时要求 a 是质数 , 其实不需要 .<br>$$<br>a^p \\equiv a\\pmod{p} \\<br>a^{p-1} \\equiv 1 \\pmod{p}\\<br>$$<br>两种形式 , 下面是要求 a 不是 p 的倍数 . </p>\n<h2 id=\"求逆元\"><a href=\"#求逆元\" class=\"headerlink\" title=\"求逆元\"></a>求逆元</h2><p>所以可以使用费马小定理求逆元 .<br>$$<br>a^{p-2}<em>a \\equiv 1 \\pmod{p}<br>$$<br>所以$a^{p-2}$是逆元 . 这样可以试试对组合数取余了 .<br>$$<br>(a \\div b) % p \\equiv (a</em>inv(b)) % p \\equiv (a%p*inv(b)%p)%p<br>$$</p>\n<h2 id=\"CF1462E2-Close-Tuples\"><a href=\"#CF1462E2-Close-Tuples\" class=\"headerlink\" title=\"CF1462E2 Close Tuples\"></a>CF1462E2 Close Tuples</h2><p>其实就是一个组合数问题 , 问题是如何使用组合数 . </p>\n<h3 id=\"组合数模板-amp-题解\"><a href=\"#组合数模板-amp-题解\" class=\"headerlink\" title=\"组合数模板 &amp; 题解\"></a>组合数模板 &amp; 题解</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ll mod<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">200010</span><span class=\"token punctuation\">;</span>\nll t<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>fac<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>inv<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">,</span>ll y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ll res<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&amp;</span> <span class=\"token number\">1ll</span><span class=\"token punctuation\">)</span> res<span class=\"token operator\">=</span>res<span class=\"token operator\">*</span>x<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n        y<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token operator\">=</span>x<span class=\"token operator\">*</span>x<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">C</span><span class=\"token punctuation\">(</span>ll m<span class=\"token punctuation\">,</span>ll n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> n<span class=\"token operator\">></span>m <span class=\"token operator\">||</span> n<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>fac<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>inv<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>inv<span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    fac<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>inv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>maxn<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> fac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fac<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>i<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>maxn<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> inv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span>fac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>mod<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cnt<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        ll ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>k<span class=\"token punctuation\">)</span> ans<span class=\"token operator\">+=</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>cnt<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ans<span class=\"token operator\">%=</span>mod<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> ans<span class=\"token operator\">+=</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ans<span class=\"token operator\">%=</span>mod<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"KMP Algorithm","date":"2020-11-25T23:35:26.000Z","_content":"第一次使用英文写，语病估计一堆，随便看看吧。\n<!-- more -->\n# Matching Principle\n\n​\t\tTo solve the string matching problem , you can use it.It's principle is for the matched parts of the string ,you don't need to match it again.\n\n​\t\tThe core of KMP is the array named 'next'.It's tell when the string do not match ,which character the string should match rather than match from the beginning. \n\n- If string is not matched at s2[k] currently and j≠-1 ,let the template string move (**matched characters** - **next[k]**) ( the same as j=next[k] ) , then continue matching .\n- If j==-1 just let i++ . \n- Else i++ , j++ .\n\nFor example :\n\n<center> string1: abaabab </center>\n<center> string2: abab </center>\n<center> next[]={-1,0,0,1} </center>\n\n\n\n<center>i=0 , j=0 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=1 , j=1 s1[i]=='b' , s2[j]=='b' <b>matched</b> i++ , j++ </center>\n<center>i=2 , j=2 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=3 , j=3 s1[i]=='a' , s2[j]=='b' <b>unmatched</b> j=next[j]=1 </center>\n<center>i=3 , j=1 s1[i]=='a' , s2[j]=='b' <b>unmatched</b> j=next[j]=0 </center>\n<center>i=3 , j=0 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=4 , j=1 s1[i]=='b' , s2[j]=='b' <b>matched</b> i++ , j++ </center>\n<center>i=5 , j=2 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=6 , j=3 s1[i]=='b' , s2[j]=='b' <b>matched</b> i++ , j++ </center>\n\n## Code\n\n```cpp\nvoid kmp()\n{\n\tint len1=strlen(str1);\n\tint len2=strlen(str2);\n\tint i=0,j=0;\n\tgetnextarr(str2);\n\twhile (i<len1)\n\t{\n\t\tif (str1[i]==str2[j]){\n\t\t    if (j!=len2-1) i++,j++;\n\t\t\telse {\n\t\t\t\tans[cnt++]=i-j+1;\n\t\t\t\tj=nexts[j];\n\t\t\t}\n\t\t}\n\t\telse if (nexts[j]==-1) i++;\n\t\telse j=nexts[j];\n\t}\n    //print the answer\n\tfor (int t=0;t<cnt;t++) printf(\"%d\\n\",ans[t]);\n\tfor (int t=0;t<len2;t++) {\n\t\t printf(\"%d \",nexts[t+1]);\n\t}\n\treturn ;\n}\n```\n\n\n\n# Get Next Array\n\n## Principle\n\n​\t\tConsider if next[k] is known , how to get next[k+1] .It is the same as let the s1==s2 , and use KMP Algorithm.\n\n​\t\tBecause next[k] means which characters should match if s1[k] isn't matched . \n\n- If s2[next[k]]==s2[k] , you will find **s2[next[k]-k] ~ s2[next[k]]** and **s2[0] ~ s2[k]** is the same strings .So when s2[k+1] isn't matched , just match s2[next[k]+1] .\n- If s2[next[k]] != s2[k] , we should find a shorter next[k] , just like s2[next[k]] isn't matched , you should match s2[ next[ next[ k ] ] ] till matched successfully or '-1' appears . \n\n## Code\n\n```cpp\nvoid getnextarr(char* str)\n{\n\t/*An example help code and understande\n\t\ta  b  b  a  a  b  a  b\n       -1  0  0  0  1  1  2  1\n\t*/\n\tint len=strlen(str);\n\tnexts[0]=-1,nexts[1]=0;\n\tfor (int i=2;i<=len;i++)\n\t{\n\t\tint k=i-1;\n\t\twhile (1){\n\t\t\tif (nexts[k]==-1 || str[i-1]==str[nexts[k]]) \n\t\t\t{\n\t\t\t\tnexts[i]=nexts[k]+1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse k=nexts[k];\n\t\t}\n\t}\n\treturn ;\n}\n```\n\n# More Efficient Algorithm\n\n## BM (Boyer-Moore) Algorithm\n\n### Principle\n\n​\t\tAt most *O( N )* .It has two laws . It matches from the back .\n\n- Bad character\n\n    We called the unmatched character *Bad character* . When the string is unmatched , the template string should move x position \n    $$\n    x1=pos_{badchar}-lastpos_{badchar}\n    $$\n    If badchar doesn't appear before , lastpos=-1 .  \n\n- Good suffix\n\n    We called the matching suffix *Good suffix* (e.g. *MPLE* matched , \"*MPLE , PLE , LE , E*\" is *Good suffix* ) . When the string is unmatched , the template string should move x position \n    $$\n    x2=pos_{goodsuf}-lastpos_{goodsuf}\n    $$\n     Choose x=max(x1,x2)  between he above laws . \n\n    ### Example\n\n    ![](https://p.130014.xyz/2020/11/27/BM001.png)\n    $$\n    x=max(6-0,0)=6\n    $$\n    ![](https://p.130014.xyz/2020/11/27/BM002.png)\n\n$$\nx=max(6-4,0)=2\n$$\n\n![](https://p.130014.xyz/2020/11/27/BM003.png)\n\nAbove all , x2 is always 0 . \n\n![](https://p.130014.xyz/2020/11/27/BM004.png)\n\n![](https://p.130014.xyz/2020/11/27/BM005.png)\n$$\nx=max(2-(-1),6-0)=6\n$$\n![](https://p.130014.xyz/2020/11/27/BM007.png)\n$$\nx=max(6-4,0)=2\n$$\n![](https://p.130014.xyz/2020/11/27/BM008.png)\nMatching !\n\n## Sunday Algorithm.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/Kmp.md","raw":"---\ntitle: KMP Algorithm\ndate: 2020-11-26 7:35:26\ncategories:\n\t- ICPC 字符串\ntags:\n\t- KMP\n\t- BM\n\t- Sunday\n---\n第一次使用英文写，语病估计一堆，随便看看吧。\n<!-- more -->\n# Matching Principle\n\n​\t\tTo solve the string matching problem , you can use it.It's principle is for the matched parts of the string ,you don't need to match it again.\n\n​\t\tThe core of KMP is the array named 'next'.It's tell when the string do not match ,which character the string should match rather than match from the beginning. \n\n- If string is not matched at s2[k] currently and j≠-1 ,let the template string move (**matched characters** - **next[k]**) ( the same as j=next[k] ) , then continue matching .\n- If j==-1 just let i++ . \n- Else i++ , j++ .\n\nFor example :\n\n<center> string1: abaabab </center>\n<center> string2: abab </center>\n<center> next[]={-1,0,0,1} </center>\n\n\n\n<center>i=0 , j=0 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=1 , j=1 s1[i]=='b' , s2[j]=='b' <b>matched</b> i++ , j++ </center>\n<center>i=2 , j=2 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=3 , j=3 s1[i]=='a' , s2[j]=='b' <b>unmatched</b> j=next[j]=1 </center>\n<center>i=3 , j=1 s1[i]=='a' , s2[j]=='b' <b>unmatched</b> j=next[j]=0 </center>\n<center>i=3 , j=0 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=4 , j=1 s1[i]=='b' , s2[j]=='b' <b>matched</b> i++ , j++ </center>\n<center>i=5 , j=2 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=6 , j=3 s1[i]=='b' , s2[j]=='b' <b>matched</b> i++ , j++ </center>\n\n## Code\n\n```cpp\nvoid kmp()\n{\n\tint len1=strlen(str1);\n\tint len2=strlen(str2);\n\tint i=0,j=0;\n\tgetnextarr(str2);\n\twhile (i<len1)\n\t{\n\t\tif (str1[i]==str2[j]){\n\t\t    if (j!=len2-1) i++,j++;\n\t\t\telse {\n\t\t\t\tans[cnt++]=i-j+1;\n\t\t\t\tj=nexts[j];\n\t\t\t}\n\t\t}\n\t\telse if (nexts[j]==-1) i++;\n\t\telse j=nexts[j];\n\t}\n    //print the answer\n\tfor (int t=0;t<cnt;t++) printf(\"%d\\n\",ans[t]);\n\tfor (int t=0;t<len2;t++) {\n\t\t printf(\"%d \",nexts[t+1]);\n\t}\n\treturn ;\n}\n```\n\n\n\n# Get Next Array\n\n## Principle\n\n​\t\tConsider if next[k] is known , how to get next[k+1] .It is the same as let the s1==s2 , and use KMP Algorithm.\n\n​\t\tBecause next[k] means which characters should match if s1[k] isn't matched . \n\n- If s2[next[k]]==s2[k] , you will find **s2[next[k]-k] ~ s2[next[k]]** and **s2[0] ~ s2[k]** is the same strings .So when s2[k+1] isn't matched , just match s2[next[k]+1] .\n- If s2[next[k]] != s2[k] , we should find a shorter next[k] , just like s2[next[k]] isn't matched , you should match s2[ next[ next[ k ] ] ] till matched successfully or '-1' appears . \n\n## Code\n\n```cpp\nvoid getnextarr(char* str)\n{\n\t/*An example help code and understande\n\t\ta  b  b  a  a  b  a  b\n       -1  0  0  0  1  1  2  1\n\t*/\n\tint len=strlen(str);\n\tnexts[0]=-1,nexts[1]=0;\n\tfor (int i=2;i<=len;i++)\n\t{\n\t\tint k=i-1;\n\t\twhile (1){\n\t\t\tif (nexts[k]==-1 || str[i-1]==str[nexts[k]]) \n\t\t\t{\n\t\t\t\tnexts[i]=nexts[k]+1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse k=nexts[k];\n\t\t}\n\t}\n\treturn ;\n}\n```\n\n# More Efficient Algorithm\n\n## BM (Boyer-Moore) Algorithm\n\n### Principle\n\n​\t\tAt most *O( N )* .It has two laws . It matches from the back .\n\n- Bad character\n\n    We called the unmatched character *Bad character* . When the string is unmatched , the template string should move x position \n    $$\n    x1=pos_{badchar}-lastpos_{badchar}\n    $$\n    If badchar doesn't appear before , lastpos=-1 .  \n\n- Good suffix\n\n    We called the matching suffix *Good suffix* (e.g. *MPLE* matched , \"*MPLE , PLE , LE , E*\" is *Good suffix* ) . When the string is unmatched , the template string should move x position \n    $$\n    x2=pos_{goodsuf}-lastpos_{goodsuf}\n    $$\n     Choose x=max(x1,x2)  between he above laws . \n\n    ### Example\n\n    ![](https://p.130014.xyz/2020/11/27/BM001.png)\n    $$\n    x=max(6-0,0)=6\n    $$\n    ![](https://p.130014.xyz/2020/11/27/BM002.png)\n\n$$\nx=max(6-4,0)=2\n$$\n\n![](https://p.130014.xyz/2020/11/27/BM003.png)\n\nAbove all , x2 is always 0 . \n\n![](https://p.130014.xyz/2020/11/27/BM004.png)\n\n![](https://p.130014.xyz/2020/11/27/BM005.png)\n$$\nx=max(2-(-1),6-0)=6\n$$\n![](https://p.130014.xyz/2020/11/27/BM007.png)\n$$\nx=max(6-4,0)=2\n$$\n![](https://p.130014.xyz/2020/11/27/BM008.png)\nMatching !\n\n## Sunday Algorithm.\n\n<!-- Q.E.D. -->","slug":"XCPC/Kmp","published":1,"updated":"2021-06-26T15:47:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9ujz002c63jn96k9gqhj","content":"<p>第一次使用英文写，语病估计一堆，随便看看吧。</p>\n<span id=\"more\"></span>\n<h1 id=\"Matching-Principle\"><a href=\"#Matching-Principle\" class=\"headerlink\" title=\"Matching Principle\"></a>Matching Principle</h1><p>​        To solve the string matching problem , you can use it.It’s principle is for the matched parts of the string ,you don’t need to match it again.</p>\n<p>​        The core of KMP is the array named ‘next’.It’s tell when the string do not match ,which character the string should match rather than match from the beginning. </p>\n<ul>\n<li>If string is not matched at s2[k] currently and j≠-1 ,let the template string move (<strong>matched characters</strong> - <strong>next[k]</strong>) ( the same as j=next[k] ) , then continue matching .</li>\n<li>If j==-1 just let i++ . </li>\n<li>Else i++ , j++ .</li>\n</ul>\n<p>For example :</p>\n<center> string1: abaabab </center>\n<center> string2: abab </center>\n<center> next[]={-1,0,0,1} </center>\n\n\n\n<center>i=0 , j=0 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=1 , j=1 s1[i]=='b' , s2[j]=='b' <b>matched</b> i++ , j++ </center>\n<center>i=2 , j=2 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=3 , j=3 s1[i]=='a' , s2[j]=='b' <b>unmatched</b> j=next[j]=1 </center>\n<center>i=3 , j=1 s1[i]=='a' , s2[j]=='b' <b>unmatched</b> j=next[j]=0 </center>\n<center>i=3 , j=0 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=4 , j=1 s1[i]=='b' , s2[j]=='b' <b>matched</b> i++ , j++ </center>\n<center>i=5 , j=2 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=6 , j=3 s1[i]=='b' , s2[j]=='b' <b>matched</b> i++ , j++ </center>\n\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">kmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> len1<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> len2<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">getnextarr</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>len1<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">!=</span>len2<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tans<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token operator\">-</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\tj<span class=\"token operator\">=</span>nexts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nexts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> j<span class=\"token operator\">=</span>nexts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//print the answer</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>t<span class=\"token operator\">&lt;</span>cnt<span class=\"token punctuation\">;</span>t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>t<span class=\"token operator\">&lt;</span>len2<span class=\"token punctuation\">;</span>t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>nexts<span class=\"token punctuation\">[</span>t<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"Get-Next-Array\"><a href=\"#Get-Next-Array\" class=\"headerlink\" title=\"Get Next Array\"></a>Get Next Array</h1><h2 id=\"Principle\"><a href=\"#Principle\" class=\"headerlink\" title=\"Principle\"></a>Principle</h2><p>​        Consider if next[k] is known , how to get next[k+1] .It is the same as let the s1==s2 , and use KMP Algorithm.</p>\n<p>​        Because next[k] means which characters should match if s1[k] isn’t matched . </p>\n<ul>\n<li>If s2[next[k]]==s2[k] , you will find <strong>s2[next[k]-k] ~ s2[next[k]]</strong> and <strong>s2[0] ~ s2[k]</strong> is the same strings .So when s2[k+1] isn’t matched , just match s2[next[k]+1] .</li>\n<li>If s2[next[k]] != s2[k] , we should find a shorter next[k] , just like s2[next[k]] isn’t matched , you should match s2[ next[ next[ k ] ] ] till matched successfully or ‘-1’ appears . </li>\n</ul>\n<h2 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">getnextarr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/*An example help code and understande\n\t\ta  b  b  a  a  b  a  b\n       -1  0  0  0  1  1  2  1\n\t*/</span>\n\t<span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnexts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>nexts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nexts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> str<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>nexts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tnexts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>nexts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> k<span class=\"token operator\">=</span>nexts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"More-Efficient-Algorithm\"><a href=\"#More-Efficient-Algorithm\" class=\"headerlink\" title=\"More Efficient Algorithm\"></a>More Efficient Algorithm</h1><h2 id=\"BM-Boyer-Moore-Algorithm\"><a href=\"#BM-Boyer-Moore-Algorithm\" class=\"headerlink\" title=\"BM (Boyer-Moore) Algorithm\"></a>BM (Boyer-Moore) Algorithm</h2><h3 id=\"Principle-1\"><a href=\"#Principle-1\" class=\"headerlink\" title=\"Principle\"></a>Principle</h3><p>​        At most <em>O( N )</em> .It has two laws . It matches from the back .</p>\n<ul>\n<li><p>Bad character</p>\n<p>  We called the unmatched character <em>Bad character</em> . When the string is unmatched , the template string should move x position<br>  $$<br>  x1=pos_{badchar}-lastpos_{badchar}<br>  $$<br>  If badchar doesn’t appear before , lastpos=-1 .  </p>\n</li>\n<li><p>Good suffix</p>\n<p>  We called the matching suffix <em>Good suffix</em> (e.g. <em>MPLE</em> matched , “<em>MPLE , PLE , LE , E</em>“ is <em>Good suffix</em> ) . When the string is unmatched , the template string should move x position<br>  $$<br>  x2=pos_{goodsuf}-lastpos_{goodsuf}<br>  $$<br>   Choose x=max(x1,x2)  between he above laws . </p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>  <img src=\"https://p.130014.xyz/2020/11/27/BM001.png\" loading=\"lazy\"><br>  $$<br>  x=max(6-0,0)=6<br>  $$<br>  <img src=\"https://p.130014.xyz/2020/11/27/BM002.png\" loading=\"lazy\"></p>\n</li>\n</ul>\n<p>$$<br>x=max(6-4,0)=2<br>$$</p>\n<p><img src=\"https://p.130014.xyz/2020/11/27/BM003.png\" loading=\"lazy\"></p>\n<p>Above all , x2 is always 0 . </p>\n<p><img src=\"https://p.130014.xyz/2020/11/27/BM004.png\" loading=\"lazy\"></p>\n<p><img src=\"https://p.130014.xyz/2020/11/27/BM005.png\" loading=\"lazy\"><br>$$<br>x=max(2-(-1),6-0)=6<br>$$<br><img src=\"https://p.130014.xyz/2020/11/27/BM007.png\" loading=\"lazy\"><br>$$<br>x=max(6-4,0)=2<br>$$<br><img src=\"https://p.130014.xyz/2020/11/27/BM008.png\" loading=\"lazy\"><br>Matching !</p>\n<h2 id=\"Sunday-Algorithm\"><a href=\"#Sunday-Algorithm\" class=\"headerlink\" title=\"Sunday Algorithm.\"></a>Sunday Algorithm.</h2><!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>第一次使用英文写，语病估计一堆，随便看看吧。</p>","more":"<h1 id=\"Matching-Principle\"><a href=\"#Matching-Principle\" class=\"headerlink\" title=\"Matching Principle\"></a>Matching Principle</h1><p>​        To solve the string matching problem , you can use it.It’s principle is for the matched parts of the string ,you don’t need to match it again.</p>\n<p>​        The core of KMP is the array named ‘next’.It’s tell when the string do not match ,which character the string should match rather than match from the beginning. </p>\n<ul>\n<li>If string is not matched at s2[k] currently and j≠-1 ,let the template string move (<strong>matched characters</strong> - <strong>next[k]</strong>) ( the same as j=next[k] ) , then continue matching .</li>\n<li>If j==-1 just let i++ . </li>\n<li>Else i++ , j++ .</li>\n</ul>\n<p>For example :</p>\n<center> string1: abaabab </center>\n<center> string2: abab </center>\n<center> next[]={-1,0,0,1} </center>\n\n\n\n<center>i=0 , j=0 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=1 , j=1 s1[i]=='b' , s2[j]=='b' <b>matched</b> i++ , j++ </center>\n<center>i=2 , j=2 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=3 , j=3 s1[i]=='a' , s2[j]=='b' <b>unmatched</b> j=next[j]=1 </center>\n<center>i=3 , j=1 s1[i]=='a' , s2[j]=='b' <b>unmatched</b> j=next[j]=0 </center>\n<center>i=3 , j=0 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=4 , j=1 s1[i]=='b' , s2[j]=='b' <b>matched</b> i++ , j++ </center>\n<center>i=5 , j=2 s1[i]=='a' , s2[j]=='a' <b>matched</b> i++ , j++ </center>\n<center>i=6 , j=3 s1[i]=='b' , s2[j]=='b' <b>matched</b> i++ , j++ </center>\n\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">kmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> len1<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> len2<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">getnextarr</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>len1<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">!=</span>len2<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tans<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token operator\">-</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\tj<span class=\"token operator\">=</span>nexts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nexts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> j<span class=\"token operator\">=</span>nexts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//print the answer</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>t<span class=\"token operator\">&lt;</span>cnt<span class=\"token punctuation\">;</span>t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>t<span class=\"token operator\">&lt;</span>len2<span class=\"token punctuation\">;</span>t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>nexts<span class=\"token punctuation\">[</span>t<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"Get-Next-Array\"><a href=\"#Get-Next-Array\" class=\"headerlink\" title=\"Get Next Array\"></a>Get Next Array</h1><h2 id=\"Principle\"><a href=\"#Principle\" class=\"headerlink\" title=\"Principle\"></a>Principle</h2><p>​        Consider if next[k] is known , how to get next[k+1] .It is the same as let the s1==s2 , and use KMP Algorithm.</p>\n<p>​        Because next[k] means which characters should match if s1[k] isn’t matched . </p>\n<ul>\n<li>If s2[next[k]]==s2[k] , you will find <strong>s2[next[k]-k] ~ s2[next[k]]</strong> and <strong>s2[0] ~ s2[k]</strong> is the same strings .So when s2[k+1] isn’t matched , just match s2[next[k]+1] .</li>\n<li>If s2[next[k]] != s2[k] , we should find a shorter next[k] , just like s2[next[k]] isn’t matched , you should match s2[ next[ next[ k ] ] ] till matched successfully or ‘-1’ appears . </li>\n</ul>\n<h2 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">getnextarr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/*An example help code and understande\n\t\ta  b  b  a  a  b  a  b\n       -1  0  0  0  1  1  2  1\n\t*/</span>\n\t<span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnexts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>nexts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nexts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> str<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>nexts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tnexts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>nexts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> k<span class=\"token operator\">=</span>nexts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"More-Efficient-Algorithm\"><a href=\"#More-Efficient-Algorithm\" class=\"headerlink\" title=\"More Efficient Algorithm\"></a>More Efficient Algorithm</h1><h2 id=\"BM-Boyer-Moore-Algorithm\"><a href=\"#BM-Boyer-Moore-Algorithm\" class=\"headerlink\" title=\"BM (Boyer-Moore) Algorithm\"></a>BM (Boyer-Moore) Algorithm</h2><h3 id=\"Principle-1\"><a href=\"#Principle-1\" class=\"headerlink\" title=\"Principle\"></a>Principle</h3><p>​        At most <em>O( N )</em> .It has two laws . It matches from the back .</p>\n<ul>\n<li><p>Bad character</p>\n<p>  We called the unmatched character <em>Bad character</em> . When the string is unmatched , the template string should move x position<br>  $$<br>  x1=pos_{badchar}-lastpos_{badchar}<br>  $$<br>  If badchar doesn’t appear before , lastpos=-1 .  </p>\n</li>\n<li><p>Good suffix</p>\n<p>  We called the matching suffix <em>Good suffix</em> (e.g. <em>MPLE</em> matched , “<em>MPLE , PLE , LE , E</em>“ is <em>Good suffix</em> ) . When the string is unmatched , the template string should move x position<br>  $$<br>  x2=pos_{goodsuf}-lastpos_{goodsuf}<br>  $$<br>   Choose x=max(x1,x2)  between he above laws . </p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>  <img src=\"https://p.130014.xyz/2020/11/27/BM001.png\"><br>  $$<br>  x=max(6-0,0)=6<br>  $$<br>  <img src=\"https://p.130014.xyz/2020/11/27/BM002.png\"></p>\n</li>\n</ul>\n<p>$$<br>x=max(6-4,0)=2<br>$$</p>\n<p><img src=\"https://p.130014.xyz/2020/11/27/BM003.png\"></p>\n<p>Above all , x2 is always 0 . </p>\n<p><img src=\"https://p.130014.xyz/2020/11/27/BM004.png\"></p>\n<p><img src=\"https://p.130014.xyz/2020/11/27/BM005.png\"><br>$$<br>x=max(2-(-1),6-0)=6<br>$$<br><img src=\"https://p.130014.xyz/2020/11/27/BM007.png\"><br>$$<br>x=max(6-4,0)=2<br>$$<br><img src=\"https://p.130014.xyz/2020/11/27/BM008.png\"><br>Matching !</p>\n<h2 id=\"Sunday-Algorithm\"><a href=\"#Sunday-Algorithm\" class=\"headerlink\" title=\"Sunday Algorithm.\"></a>Sunday Algorithm.</h2><!-- Q.E.D. -->"},{"title":"快速排序","date":"2020-10-29T14:36:23.000Z","_content":"初三暑假, 师兄师姐在上面讲排序, 我就知道睡觉. ~~(不愧是你)~~ 到后来, 又知道了 algorithm 里面的 sort 函数. 所以模版题也用 sort 水过了. 但是, 出来混迟早要还. 所以, 我来补课了. \n<!-- more -->\n## 快速排序基础\n\n第一次想排序算法, 我的想法是找第 i 小的元素放在 i 处, 这样就实现了. 这算法效率极低. ~~优点是时间复杂度稳定(bushi)~~ 时间复杂度是O(n<sup>2</sup>), 于是后来我们学了插入排序, 冒泡排序, 还有现在的快速排序.\n\n### 思路\n\n选一个基准数, 我们把比它大的数放在右边, 比它小的放在左边, 将它放在两组数中间, 对左右两组数重复上述过程即可(递归). 而且它把一组数分成两组数, 这其实是一种分治思想. \n\n### 代码实现\n\n本文 [图片来源](https://www.sohu.com/a/246785807_684445) 于网络, 可以看看, 感觉讲的不错. \n\n#### 挖坑法\n\n![001](https://p.130014.xyz/2020/10/29/001.png)\n\n先看懂方法， 再读代码。 先选一个数作为基准数, 为了方便选第一个, 现在基准值为 4 . 在 4 所在位置挖一个\"坑\".我们打算把比 4 小的数放在里面.\n\n![002](https://p.130014.xyz/2020/10/29/002.png)\n\n此时 right 从右边开始向左移动, 要找第一个比 4 小的数, 放入上面挖的\"坑\", 我们发现 1 满足了, 于是把 1 换到第一位. 1已经移动了,  1 原来的位置就变成坑了,  那么再找下一个数填\"坑\". 因为在右边, 所以我们要把左边比 4 大的数换到\"坑\"里. \n\n![003](https://p.130014.xyz/2020/10/29/003.png)\n\n注意, 这样处理后 left 左边都是比 4 小的, right 右边都是比 4 大的. 我们要在左边找比 4 大的数, 于是找到了7. 放到\"坑\"里. 以此类推.\n\n![004](https://p.130014.xyz/2020/10/29/004.png)\n\n![005](https://p.130014.xyz/2020/10/29/005.png)\n\n![006](https://p.130014.xyz/2020/10/29/006.png)\n![007](https://p.130014.xyz/2020/10/29/007.png)\n\n![008](https://p.130014.xyz/2020/10/29/008.png)\n\n最后, left 和 right 重合,把 4 放进去, 实现了比它大的数在右边, 比它小的在左边 ,它在两组数中间. 那么递归对左右作相同操作即可. \n\n#### 指针法\n\n有兴趣可以自行度娘, 核心思路不变.\n\n### Code\n\n代码仅供参考, 建议手打.\n\n[洛谷【模板】快速排序](https://www.luogu.com.cn/problem/P1177) \n\n可以提交看是否正确, 测试点#1, #2 AC 应该就是正确的了. 想要通过全部测试点需要优化提高效率. \n\n```cpp\nvoid Quicksort(int s[],int l,int r)\n{\n\tif (l<r) \n\t{\n\t\tint i=l,j=r,index=s[l];\n\t\twhile (i<j)\n\t\t{\n\t\t\t//to find the first number which is smaller than x\n\t\t\twhile ( i<j && s[j]>=index ) \tj--;\n\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\n\t\t\t////to find the first number which is larger than x\n\t\t\twhile ( i<j && s[i]<=index ) \ti++;\n\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t}\n\t\t//now i=j\n\t\ts[i]=index;\n        //recurse to sort the right subarray and left subarray\n\t\tQuicksort(s,l,i-1);\n\t\tQuicksort(s,i+1,r);\n\t}\n}\n```\n\n## 优化处理\n\n快速排序的不稳定性在于基准值的选取,选的好效率高, 不好的话时间复杂度会到 O(n<sup>2</sup>) . 因此可以进行优化. \n以下优化方法参考和引用于 [yuebaii的博文](https://blog.csdn.net/qq_19525389/article/details/81436838)。\n\n### 随机选取基准\n\n#### 思路\n\n我们随机选取一个数, 让它作为基准即可. 这在数组原本有一定顺序情况下很好用. 核心代码不变, 我们交换一下随机选取的数和数组的第一个数即可.\n\n#### Code\n\n此时提交到 [洛谷](https://www.luogu.com.cn/problem/P1177) 通过 4 个测试点, 还剩一个. \n\n```cpp\nvoid Quicksort_Rand(int s[],int l,int r)\n{\n\tif (l<r) \n\t{\n\t\tint x=rand_l2r(l,r);\n        //rand_l2r will return a random number between l and r\n        \n\t\tswap(s[x],s[l]);\n\t\tint i=l,j=r,index=s[l];\n\t\twhile (i<j)\n\t\t{\n\t\t\t//to find the first number which is smaller than x\n\t\t\twhile ( i<j && s[j]>=index ) \tj--;\n\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\n\t\t\t////to find the first number which is larger than x\n\t\t\twhile ( i<j && s[i]<=index ) \ti++;\n\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t}\n\t\t//now i=j\n\t\ts[i]=index;\n\t\tquicksort(s,l,i-1);\n\t\tquicksort(s,i+1,r);\n\t}\n}\n\n```\n\n\n\n#### 速度对比\n\n| 单位：ms | 随机数据 | 上升序列 | 下降序列 | 重复数据 |\n| :------: | :------: | :------: | :------: | :------: |\n| 固定基准 |   794    |  109935  |  105949  |  51280   |\n| 随机基准 |   946    |   575    |   601    |  25970   |\n\n就很看脸的，脸黑的话随机就emm……\n\n说明我的生成数据和测试方法。这里生成了1000组数据，每组数据10000个数。各个类型生成规则如下\n\n- 随机数据，就是 rand() 生成的，每组数据刷新一次随机种子。\n- 上升序列：1-10000\n- 下降序列：10000-1\n- 重复数据：随机数生成5个数，每个数重复2000次，连在一起。~~突然想到可以生成不连在一起的，但懒得写了。~~\n\n### 三数取中法\n\n#### 思路\n\n随机选取虽然有效, 但最坏情况（选到区间内最大或最小数）仍会发生, 于是我们能不能找个方法, 让我们不会取到最大（或最小）的数呢? 这就是三数取中法. 我们选取 l, r, 以及中间的数m, 选择中间的数, 就能使取的基准尽量合适. ( 注意尽量, 因为可以看到速度对比中最恶心的是重复数组 )\n\n因为自己沙壁，写错了，后面复制粘贴也没debug出来。惨\n\n####  Code\n\n```cpp\nvoid Quicksort_MoT (int s[],int l,int r)\n{\n    //Mediam of Three\n\tif (l<r) \n\t{\n\t   if (r-l>2)\n\t   {\n\t\t\tint x=( s[l] >= s[r] ) ? l : r ;\n\t\t\tx= ( s[x] <= s[(l+r)/2] ) ? x : (l+r)/2 ;\n\t\t\tswap(s[l],s[x]);\n\t\t}\n\t\t\n\t\tint i=l,j=r,index=s[l];\n\t\twhile (i<j)\n\t\t{\n\t\t\t//to find the first number which is smaller than x\n\t\t\twhile ( i<j && s[j]>=index ) \tj--;\n\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\n\t\t\t//to find the first number which is larger than x\n\t\t\twhile ( i<j && s[i]<=index ) \ti++;\n\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t}\n\t\t//now i=j\n\t\ts[i]=index;\n\t\tQuicksort_MoT(s,l,i-1);\n\t\tQuicksort_MoT(s,i+1,r);\n\t}\n}\n\n```\n#### 速度对比\n| 单位：ms | 随机数据 | 上升序列 | 下降序列 | 重复数据 |\n| :------: | :------: | :------: | :------: | :------: |\n| 固定基准 |   794    |  109935  |  105949  |  51280   |\n| 随机基准 |   946    |   575    |   601    |  25970   |\n| 三数取中 |   829    |  33900   |   277    |   286    |\n\n诚然，三数取中在随机数组上优化明显，然而对于降序反而是要低于随机取数的，而且面对重复数组仍然束手无策。洛谷提交后 #1～3 AC #4～5 TLE #4其实是降序重复混合数组。\n\n\n\n### 三数取中法+插排\n#### 思路\n在部分有序且较小的数组中，插入排序的效率要比快速排序高，我们不妨让数组小于某个值（5～20）时，采用插入排序代替快速排序。这里我们取10。\n#### Code\n\n```Cpp\n\nvoid Insertsort (int s[],int l,int r)\n{\n  for(int i=l+1;i<=r;i++)\n  {\n   \t\tint j=i-1,key=s[i];\n   \t\twhile (j>=l && s[j]>key)\n   \t\t{\n   \t\t  s[j+1]=s[j];\n   \t\t  j--;\n   \t\t}\n   \t\ts[j+1]=key;\n  }\n}\n\nvoid Quicksort_MoT_ISTSORT (int s[],int l,int r)\n{\n\tif (l<r) \n\t{\n\t  \tif(r-l+1<10) \n\t  \t{\n\t  \t  Insertsort(s,l,r);\n\t  \t}\n\t  \telse \n\t  \t{\n    \t\t//Mediam of Three\n\t\t   if (r-l>2)\n\t\t   {\n\t\t\t\tint x=(s[l]>=s[r])?l:r;\n\t\t\t\tx=(s[x]<=s[(l+r)/2])?x:(l+r)/2;\n\t\t\t\tswap(s[l],s[x]);\n\t\t\t}\n\t\t\t\n\t\t\tint i=l,j=r,index=s[l];\n\t\t\twhile (i<j)\n\t\t\t{\n\t\t\t\t//to find the first number which is smaller than x\n\t\t\t\twhile ( i<j && s[j]>=index ) j--;\n\t\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\t\n\t\t\t\t//to find the first number which is larger than x\n\t\t\t\twhile ( i<j && s[i]<=index ) i++;\n\t\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t\t}\n\t\t\t//now i=j\n\t\t\ts[i]=index;\n\t\t\tQuicksort_MoT_ISTSORT (s,l,i-1);\n\t\t\tQuicksort_MoT_ISTSORT (s,i+1,r);\n\t\t}\n\t}\n}\n```\n#### 速度对比\n\n|   单位：ms    | 随机数据 | 上升序列 | 下降序列 | 重复数据 |\n| :-----------: | :------: | :------: | :------: | :------: |\n|   固定基准    |   794    |  109935  |  105949  |  51280   |\n|   随机基准    |   946    |   575    |   601    |  25970   |\n|   三数取中    |   829    |   277    |   286    |  33900   |\n| 三数取中+插排 |   795    |   223    |   229    |  31670   |\n\n洛谷数据中包含了重复序列，所以这种方法#4 #5 还都过不了。\n\n### 三数取中法+插排+聚合重复元素\n\n#### 思路\n\n既然重复元素成为我们效率的最大障碍，那就想办法解决它。重复元素是和 index 基准值相同的，即位置就在基准值旁边，所以我们想办法让重复元素不参与后续排序。\n#### Fake Code\n\n```cpp\nvoid FQuicksort_MoT_ISTSORT_DEREP (int s[],int l,int r)\n{\n\tif (l<r) \n\t{\n\t  \tif(r-l+1<5) \n\t  \t{\n\t  \t  Insertsort(s,l,r);\n\t  \t}\n\t  \telse \n\t  \t{\n  \t\t\t//Mediam of Three\n\t\t   if (r-l>2)\n\t\t   {\n\t\t\t\tint x=(s[l]>=s[r])?l:r;\n\t\t\t\tx=(s[x]<=s[(l+r)/2])?x:(l+r)/2;\n\t\t\t\tswap(s[l],s[x]);\n\t\t\t}\n\t\t\t\n\t\t\tint i=l,j=r,index=s[l];\n\t\t\twhile (i<j)\n\t\t\t{\n\t\t\t\t//to find the first number which is smaller than x\n\t\t\t\twhile ( i<j && s[j]>=index ) j--;\n\t\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\t\n\t\t\t\t//to find the first number which is larger than x\n\t\t\t\twhile ( i<j && s[i]<=index ) i++;\n\t\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t\t}\n\t\t\t//now i=j\n\t\t\ts[i]=index;\n            //This is fake DEREP\n\t\t\twhile (i>=l && s[i]==index) i--;\n\t\t\twhile (j<=r && s[j]==index) j++;\n\t\t\tFQuicksort_MoT_ISTSORT_DEREP (s,l,i);\n\t\t\tFQuicksort_MoT_ISTSORT_DEREP (s,j,r);\n\t\t}\n\t}\n}\n```\n#### 问题\n上面是我自己理解的，问题在于只是在周围聚合，我们要的是对整个数组聚合。应该把所有与基准值相等的值聚合起来。然而就把洛谷的题AC过去了 (《 _《 ) \n#### True Code\n\n```cpp\nvoid Quicksort_MoT_ISTSORT_DEREP (int s[],int l,int r)\n{\n\tif (l<r) \n\t{\n\t  \tif(r-l+1<10) \n\t  \t{\n\t  \t\tInsertsort (s,l,r);\n\t  \t}\n\t  \telse \n\t  \t{\n  \t\t\t//Mediam of Three\n\t\t   if (r-l>2)\n\t\t   {\n\t\t\t\tint x=(s[l]>=s[r])?l:r;\n\t\t\t\tx=(s[x]<=s[(l+r)/2])?x:(l+r)/2;\n\t\t\t\tswap(s[l],s[x]);\n\t\t\t}\n\t\t\t\n\t\t\tint i=l,j=r,index=s[l];\n\t\t\twhile (i<j)\n\t\t\t{\n\t\t\t\t//to find the first number which is smaller than x\n\t\t\t\twhile ( i<j && s[j]>=index ) j--;\n\t\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\t\n\t\t\t\t//to find the first number which is larger than x\n\t\t\t\twhile ( i<j && s[i]<=index ) i++;\n\t\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t\t}\n\t\t\t//now i=j\n\t\t\ts[i]=index;\n\t\t\tfor (int p=i-1;p>l;p--) \n\t\t\t{\n\t\t\t\tif (s[p]==index) swap(s[--i],s[p]);\n\t\t\t}\n\t\t\tfor (int p=j+1;p<r;p++) \n\t\t\t{\n\t\t\t\tif (s[p]==index) swap(s[++j],s[p]);\n\t\t\t}\n\t\t\tQuicksort_MoT_ISTSORT_DEREP (s,l,i-1);\n\t\t\tQuicksort_MoT_ISTSORT_DEREP (s,j+1,r);\n\t\t}\n\t}\n}\n```\n\n#### 速度对比\n\n|     优化类型\\单位：ms      | 随机数据 | 上升序列 | 下降序列 | 重复数据 |\n| :------------------------: | :------: | :------: | :------: | :------: |\n|          固定基准          |   794    |  109935  |  105949  |  51280   |\n|          随机基准          |   946    |   575    |   601    |  25970   |\n|          三数取中          |   829    |   277    |   286    |  33900   |\n|       三数取中+插排        |   795    |   223    |   229    |  31670   |\n| 三数取中+插排+聚合重复元素 |   1029   |   408    |   429    |   132    |\n\n随机数上的速度其实并没有很快，关键这个优化牺牲了几乎可以忽略的速度，换来了重复元素多的情况下的高效，使在实际处理中算法效率更高。\n\n### 优化递归过程\n其实这个优化效果不大，可以看看我参考的[博文](https://blog.csdn.net/insistgogo/article/details/7785038)。\n#### 速度对比\n|     优化类型\\单位：ms      | 随机数据 | 上升序列 | 下降序列 | 重复数据 |\n| :------------------------: | :------: | :------: | :------: | :------: |\n|          固定基准          |   794    |  109935  |  105949  |  51280   |\n|          随机基准          |   946    |   575    |   601    |  25970   |\n|          三数取中          |   829    |   277    |   286    |  33900   |\n|       三数取中+插排        |   795    |   223    |   229    |  31670   |\n| 三数取中+插排+聚合重复元素 |   1029   |   408    |   429    |   132    |\n|            sort            |   1101   |   471    |   378    |   603    |\n\n## 总结\n一个优秀排序算法，不是针对于某种特定序列排序的，而应该对各种序列都要有较优的效率，如：STL中的 sort。在实际运用中，有时并不能知道数据的概况，那就要选一个全面高效的算法。\n### [洛谷 P1177 快速排序](https://www.luogu.com.cn/record/40798949) Solution\n\n```cpp\n#define AWSL <bits/stdc++.h>\n#define awei_sine using namespace std\n#define reg register\n#define F(i,b,n)  for(reg int i=(b);i<(n);i++)\n#define f(i,b,n)  for(reg int i=(b);i<=(n);i++)\n\n#include AWSL\nawei_sine;\n\nconst int maxn=1e5+10;\nint s[maxn];\n\nvoid Insertsort (int s[],int l,int r)\n{\n  for(int i=l+1;i<=r;i++)\n  {\n   \t\tint j=i-1,key=s[i];\n   \t\twhile (j>=l && s[j]>key)\n   \t\t{\n   \t\t  s[j+1]=s[j];\n   \t\t  j--;\n   \t\t}\n   \t\ts[j+1]=key;\n  }\n}\n\nvoid Quicksort_MoT_ISTSORT_DEREP (int s[],int l,int r)\n{\n\tif (l<r) \n\t{\n\t  \tif(r-l+1<10) \n\t  \t{\n\t  \t\tInsertsort (s,l,r);\n\t  \t}\n\t  \telse \n\t  \t{\n  \t\t\t//Mediam of Three\n\t\t   if (r-l>2)\n\t\t   {\n\t\t\t\tint x=(s[l]>=s[r])?l:r;\n\t\t\t\tx=(s[x]<=s[(l+r)/2])?x:(l+r)/2;\n\t\t\t\tswap(s[l],s[x]);\n\t\t\t}\n\t\t\t\n\t\t\tint i=l,j=r,index=s[l];\n\t\t\twhile (i<j)\n\t\t\t{\n\t\t\t\t//to find the first number which is smaller than x\n\t\t\t\twhile ( i<j && s[j]>=index ) j--;\n\t\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\t\n\t\t\t\t//to find the first number which is larger than x\n\t\t\t\twhile ( i<j && s[i]<=index ) i++;\n\t\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t\t}\n\t\t\t//now i=j\n\t\t\ts[i]=index;\n\t\t\tfor (int p=i-1;p>l;p--) \n\t\t\t{\n\t\t\t\tif (s[p]==index) swap(s[--i],s[p]);\n\t\t\t}\n\t\t\tfor (int p=j+1;p<r;p++) \n\t\t\t{\n\t\t\t\tif (s[p]==index) swap(s[++j],s[p]);\n\t\t\t}\n\t\t\tQuicksort_MoT_ISTSORT_DEREP (s,l,i-1);\n\t\t\tQuicksort_MoT_ISTSORT_DEREP (s,j+1,r);\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint n;\n\tscanf (\"%d\",&n);\n\tF(i,0,n) scanf (\"%d\",&s[i]);\n\tQuicksort_MoT_ISTSORT_DEREP (s,0,n-1);\n\tF(i,0,n) printf(\"%d \",s[i]); \n\treturn 0;\n}\n```\n\n终于，补课完成。<span class=\"heimu\" title=\"你知道的太多了\"> ~~当然有机会我会自己测试一下代码效率，因为我还是觉得我的插排哪个地方写丑了。~~</span>~~不知道要鸽多久（逃~~\n\n<div align=center>\n![](https://p.130014.xyz/2020/10/30/4BB59D37-8C77-4164-8D91-92976B8FFAEC.th.jpg)\n</div>\n\n我居然没有鸽，<span class=\"heimu\" title=\"你知道的太多了\"> 主要是最近水课多。</span>之前居然是三数取中法有个地方写反了.总之,正式结束了.\n\n\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/Quicksort.md","raw":"---\ntitle: 快速排序\ndate: 2020-10-29 22:36:23\ncategories:\n\t- ICPC 算法基础\ntags:\n\t- 分治\n\t- 排序\n---\n初三暑假, 师兄师姐在上面讲排序, 我就知道睡觉. ~~(不愧是你)~~ 到后来, 又知道了 algorithm 里面的 sort 函数. 所以模版题也用 sort 水过了. 但是, 出来混迟早要还. 所以, 我来补课了. \n<!-- more -->\n## 快速排序基础\n\n第一次想排序算法, 我的想法是找第 i 小的元素放在 i 处, 这样就实现了. 这算法效率极低. ~~优点是时间复杂度稳定(bushi)~~ 时间复杂度是O(n<sup>2</sup>), 于是后来我们学了插入排序, 冒泡排序, 还有现在的快速排序.\n\n### 思路\n\n选一个基准数, 我们把比它大的数放在右边, 比它小的放在左边, 将它放在两组数中间, 对左右两组数重复上述过程即可(递归). 而且它把一组数分成两组数, 这其实是一种分治思想. \n\n### 代码实现\n\n本文 [图片来源](https://www.sohu.com/a/246785807_684445) 于网络, 可以看看, 感觉讲的不错. \n\n#### 挖坑法\n\n![001](https://p.130014.xyz/2020/10/29/001.png)\n\n先看懂方法， 再读代码。 先选一个数作为基准数, 为了方便选第一个, 现在基准值为 4 . 在 4 所在位置挖一个\"坑\".我们打算把比 4 小的数放在里面.\n\n![002](https://p.130014.xyz/2020/10/29/002.png)\n\n此时 right 从右边开始向左移动, 要找第一个比 4 小的数, 放入上面挖的\"坑\", 我们发现 1 满足了, 于是把 1 换到第一位. 1已经移动了,  1 原来的位置就变成坑了,  那么再找下一个数填\"坑\". 因为在右边, 所以我们要把左边比 4 大的数换到\"坑\"里. \n\n![003](https://p.130014.xyz/2020/10/29/003.png)\n\n注意, 这样处理后 left 左边都是比 4 小的, right 右边都是比 4 大的. 我们要在左边找比 4 大的数, 于是找到了7. 放到\"坑\"里. 以此类推.\n\n![004](https://p.130014.xyz/2020/10/29/004.png)\n\n![005](https://p.130014.xyz/2020/10/29/005.png)\n\n![006](https://p.130014.xyz/2020/10/29/006.png)\n![007](https://p.130014.xyz/2020/10/29/007.png)\n\n![008](https://p.130014.xyz/2020/10/29/008.png)\n\n最后, left 和 right 重合,把 4 放进去, 实现了比它大的数在右边, 比它小的在左边 ,它在两组数中间. 那么递归对左右作相同操作即可. \n\n#### 指针法\n\n有兴趣可以自行度娘, 核心思路不变.\n\n### Code\n\n代码仅供参考, 建议手打.\n\n[洛谷【模板】快速排序](https://www.luogu.com.cn/problem/P1177) \n\n可以提交看是否正确, 测试点#1, #2 AC 应该就是正确的了. 想要通过全部测试点需要优化提高效率. \n\n```cpp\nvoid Quicksort(int s[],int l,int r)\n{\n\tif (l<r) \n\t{\n\t\tint i=l,j=r,index=s[l];\n\t\twhile (i<j)\n\t\t{\n\t\t\t//to find the first number which is smaller than x\n\t\t\twhile ( i<j && s[j]>=index ) \tj--;\n\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\n\t\t\t////to find the first number which is larger than x\n\t\t\twhile ( i<j && s[i]<=index ) \ti++;\n\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t}\n\t\t//now i=j\n\t\ts[i]=index;\n        //recurse to sort the right subarray and left subarray\n\t\tQuicksort(s,l,i-1);\n\t\tQuicksort(s,i+1,r);\n\t}\n}\n```\n\n## 优化处理\n\n快速排序的不稳定性在于基准值的选取,选的好效率高, 不好的话时间复杂度会到 O(n<sup>2</sup>) . 因此可以进行优化. \n以下优化方法参考和引用于 [yuebaii的博文](https://blog.csdn.net/qq_19525389/article/details/81436838)。\n\n### 随机选取基准\n\n#### 思路\n\n我们随机选取一个数, 让它作为基准即可. 这在数组原本有一定顺序情况下很好用. 核心代码不变, 我们交换一下随机选取的数和数组的第一个数即可.\n\n#### Code\n\n此时提交到 [洛谷](https://www.luogu.com.cn/problem/P1177) 通过 4 个测试点, 还剩一个. \n\n```cpp\nvoid Quicksort_Rand(int s[],int l,int r)\n{\n\tif (l<r) \n\t{\n\t\tint x=rand_l2r(l,r);\n        //rand_l2r will return a random number between l and r\n        \n\t\tswap(s[x],s[l]);\n\t\tint i=l,j=r,index=s[l];\n\t\twhile (i<j)\n\t\t{\n\t\t\t//to find the first number which is smaller than x\n\t\t\twhile ( i<j && s[j]>=index ) \tj--;\n\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\n\t\t\t////to find the first number which is larger than x\n\t\t\twhile ( i<j && s[i]<=index ) \ti++;\n\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t}\n\t\t//now i=j\n\t\ts[i]=index;\n\t\tquicksort(s,l,i-1);\n\t\tquicksort(s,i+1,r);\n\t}\n}\n\n```\n\n\n\n#### 速度对比\n\n| 单位：ms | 随机数据 | 上升序列 | 下降序列 | 重复数据 |\n| :------: | :------: | :------: | :------: | :------: |\n| 固定基准 |   794    |  109935  |  105949  |  51280   |\n| 随机基准 |   946    |   575    |   601    |  25970   |\n\n就很看脸的，脸黑的话随机就emm……\n\n说明我的生成数据和测试方法。这里生成了1000组数据，每组数据10000个数。各个类型生成规则如下\n\n- 随机数据，就是 rand() 生成的，每组数据刷新一次随机种子。\n- 上升序列：1-10000\n- 下降序列：10000-1\n- 重复数据：随机数生成5个数，每个数重复2000次，连在一起。~~突然想到可以生成不连在一起的，但懒得写了。~~\n\n### 三数取中法\n\n#### 思路\n\n随机选取虽然有效, 但最坏情况（选到区间内最大或最小数）仍会发生, 于是我们能不能找个方法, 让我们不会取到最大（或最小）的数呢? 这就是三数取中法. 我们选取 l, r, 以及中间的数m, 选择中间的数, 就能使取的基准尽量合适. ( 注意尽量, 因为可以看到速度对比中最恶心的是重复数组 )\n\n因为自己沙壁，写错了，后面复制粘贴也没debug出来。惨\n\n####  Code\n\n```cpp\nvoid Quicksort_MoT (int s[],int l,int r)\n{\n    //Mediam of Three\n\tif (l<r) \n\t{\n\t   if (r-l>2)\n\t   {\n\t\t\tint x=( s[l] >= s[r] ) ? l : r ;\n\t\t\tx= ( s[x] <= s[(l+r)/2] ) ? x : (l+r)/2 ;\n\t\t\tswap(s[l],s[x]);\n\t\t}\n\t\t\n\t\tint i=l,j=r,index=s[l];\n\t\twhile (i<j)\n\t\t{\n\t\t\t//to find the first number which is smaller than x\n\t\t\twhile ( i<j && s[j]>=index ) \tj--;\n\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\n\t\t\t//to find the first number which is larger than x\n\t\t\twhile ( i<j && s[i]<=index ) \ti++;\n\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t}\n\t\t//now i=j\n\t\ts[i]=index;\n\t\tQuicksort_MoT(s,l,i-1);\n\t\tQuicksort_MoT(s,i+1,r);\n\t}\n}\n\n```\n#### 速度对比\n| 单位：ms | 随机数据 | 上升序列 | 下降序列 | 重复数据 |\n| :------: | :------: | :------: | :------: | :------: |\n| 固定基准 |   794    |  109935  |  105949  |  51280   |\n| 随机基准 |   946    |   575    |   601    |  25970   |\n| 三数取中 |   829    |  33900   |   277    |   286    |\n\n诚然，三数取中在随机数组上优化明显，然而对于降序反而是要低于随机取数的，而且面对重复数组仍然束手无策。洛谷提交后 #1～3 AC #4～5 TLE #4其实是降序重复混合数组。\n\n\n\n### 三数取中法+插排\n#### 思路\n在部分有序且较小的数组中，插入排序的效率要比快速排序高，我们不妨让数组小于某个值（5～20）时，采用插入排序代替快速排序。这里我们取10。\n#### Code\n\n```Cpp\n\nvoid Insertsort (int s[],int l,int r)\n{\n  for(int i=l+1;i<=r;i++)\n  {\n   \t\tint j=i-1,key=s[i];\n   \t\twhile (j>=l && s[j]>key)\n   \t\t{\n   \t\t  s[j+1]=s[j];\n   \t\t  j--;\n   \t\t}\n   \t\ts[j+1]=key;\n  }\n}\n\nvoid Quicksort_MoT_ISTSORT (int s[],int l,int r)\n{\n\tif (l<r) \n\t{\n\t  \tif(r-l+1<10) \n\t  \t{\n\t  \t  Insertsort(s,l,r);\n\t  \t}\n\t  \telse \n\t  \t{\n    \t\t//Mediam of Three\n\t\t   if (r-l>2)\n\t\t   {\n\t\t\t\tint x=(s[l]>=s[r])?l:r;\n\t\t\t\tx=(s[x]<=s[(l+r)/2])?x:(l+r)/2;\n\t\t\t\tswap(s[l],s[x]);\n\t\t\t}\n\t\t\t\n\t\t\tint i=l,j=r,index=s[l];\n\t\t\twhile (i<j)\n\t\t\t{\n\t\t\t\t//to find the first number which is smaller than x\n\t\t\t\twhile ( i<j && s[j]>=index ) j--;\n\t\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\t\n\t\t\t\t//to find the first number which is larger than x\n\t\t\t\twhile ( i<j && s[i]<=index ) i++;\n\t\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t\t}\n\t\t\t//now i=j\n\t\t\ts[i]=index;\n\t\t\tQuicksort_MoT_ISTSORT (s,l,i-1);\n\t\t\tQuicksort_MoT_ISTSORT (s,i+1,r);\n\t\t}\n\t}\n}\n```\n#### 速度对比\n\n|   单位：ms    | 随机数据 | 上升序列 | 下降序列 | 重复数据 |\n| :-----------: | :------: | :------: | :------: | :------: |\n|   固定基准    |   794    |  109935  |  105949  |  51280   |\n|   随机基准    |   946    |   575    |   601    |  25970   |\n|   三数取中    |   829    |   277    |   286    |  33900   |\n| 三数取中+插排 |   795    |   223    |   229    |  31670   |\n\n洛谷数据中包含了重复序列，所以这种方法#4 #5 还都过不了。\n\n### 三数取中法+插排+聚合重复元素\n\n#### 思路\n\n既然重复元素成为我们效率的最大障碍，那就想办法解决它。重复元素是和 index 基准值相同的，即位置就在基准值旁边，所以我们想办法让重复元素不参与后续排序。\n#### Fake Code\n\n```cpp\nvoid FQuicksort_MoT_ISTSORT_DEREP (int s[],int l,int r)\n{\n\tif (l<r) \n\t{\n\t  \tif(r-l+1<5) \n\t  \t{\n\t  \t  Insertsort(s,l,r);\n\t  \t}\n\t  \telse \n\t  \t{\n  \t\t\t//Mediam of Three\n\t\t   if (r-l>2)\n\t\t   {\n\t\t\t\tint x=(s[l]>=s[r])?l:r;\n\t\t\t\tx=(s[x]<=s[(l+r)/2])?x:(l+r)/2;\n\t\t\t\tswap(s[l],s[x]);\n\t\t\t}\n\t\t\t\n\t\t\tint i=l,j=r,index=s[l];\n\t\t\twhile (i<j)\n\t\t\t{\n\t\t\t\t//to find the first number which is smaller than x\n\t\t\t\twhile ( i<j && s[j]>=index ) j--;\n\t\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\t\n\t\t\t\t//to find the first number which is larger than x\n\t\t\t\twhile ( i<j && s[i]<=index ) i++;\n\t\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t\t}\n\t\t\t//now i=j\n\t\t\ts[i]=index;\n            //This is fake DEREP\n\t\t\twhile (i>=l && s[i]==index) i--;\n\t\t\twhile (j<=r && s[j]==index) j++;\n\t\t\tFQuicksort_MoT_ISTSORT_DEREP (s,l,i);\n\t\t\tFQuicksort_MoT_ISTSORT_DEREP (s,j,r);\n\t\t}\n\t}\n}\n```\n#### 问题\n上面是我自己理解的，问题在于只是在周围聚合，我们要的是对整个数组聚合。应该把所有与基准值相等的值聚合起来。然而就把洛谷的题AC过去了 (《 _《 ) \n#### True Code\n\n```cpp\nvoid Quicksort_MoT_ISTSORT_DEREP (int s[],int l,int r)\n{\n\tif (l<r) \n\t{\n\t  \tif(r-l+1<10) \n\t  \t{\n\t  \t\tInsertsort (s,l,r);\n\t  \t}\n\t  \telse \n\t  \t{\n  \t\t\t//Mediam of Three\n\t\t   if (r-l>2)\n\t\t   {\n\t\t\t\tint x=(s[l]>=s[r])?l:r;\n\t\t\t\tx=(s[x]<=s[(l+r)/2])?x:(l+r)/2;\n\t\t\t\tswap(s[l],s[x]);\n\t\t\t}\n\t\t\t\n\t\t\tint i=l,j=r,index=s[l];\n\t\t\twhile (i<j)\n\t\t\t{\n\t\t\t\t//to find the first number which is smaller than x\n\t\t\t\twhile ( i<j && s[j]>=index ) j--;\n\t\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\t\n\t\t\t\t//to find the first number which is larger than x\n\t\t\t\twhile ( i<j && s[i]<=index ) i++;\n\t\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t\t}\n\t\t\t//now i=j\n\t\t\ts[i]=index;\n\t\t\tfor (int p=i-1;p>l;p--) \n\t\t\t{\n\t\t\t\tif (s[p]==index) swap(s[--i],s[p]);\n\t\t\t}\n\t\t\tfor (int p=j+1;p<r;p++) \n\t\t\t{\n\t\t\t\tif (s[p]==index) swap(s[++j],s[p]);\n\t\t\t}\n\t\t\tQuicksort_MoT_ISTSORT_DEREP (s,l,i-1);\n\t\t\tQuicksort_MoT_ISTSORT_DEREP (s,j+1,r);\n\t\t}\n\t}\n}\n```\n\n#### 速度对比\n\n|     优化类型\\单位：ms      | 随机数据 | 上升序列 | 下降序列 | 重复数据 |\n| :------------------------: | :------: | :------: | :------: | :------: |\n|          固定基准          |   794    |  109935  |  105949  |  51280   |\n|          随机基准          |   946    |   575    |   601    |  25970   |\n|          三数取中          |   829    |   277    |   286    |  33900   |\n|       三数取中+插排        |   795    |   223    |   229    |  31670   |\n| 三数取中+插排+聚合重复元素 |   1029   |   408    |   429    |   132    |\n\n随机数上的速度其实并没有很快，关键这个优化牺牲了几乎可以忽略的速度，换来了重复元素多的情况下的高效，使在实际处理中算法效率更高。\n\n### 优化递归过程\n其实这个优化效果不大，可以看看我参考的[博文](https://blog.csdn.net/insistgogo/article/details/7785038)。\n#### 速度对比\n|     优化类型\\单位：ms      | 随机数据 | 上升序列 | 下降序列 | 重复数据 |\n| :------------------------: | :------: | :------: | :------: | :------: |\n|          固定基准          |   794    |  109935  |  105949  |  51280   |\n|          随机基准          |   946    |   575    |   601    |  25970   |\n|          三数取中          |   829    |   277    |   286    |  33900   |\n|       三数取中+插排        |   795    |   223    |   229    |  31670   |\n| 三数取中+插排+聚合重复元素 |   1029   |   408    |   429    |   132    |\n|            sort            |   1101   |   471    |   378    |   603    |\n\n## 总结\n一个优秀排序算法，不是针对于某种特定序列排序的，而应该对各种序列都要有较优的效率，如：STL中的 sort。在实际运用中，有时并不能知道数据的概况，那就要选一个全面高效的算法。\n### [洛谷 P1177 快速排序](https://www.luogu.com.cn/record/40798949) Solution\n\n```cpp\n#define AWSL <bits/stdc++.h>\n#define awei_sine using namespace std\n#define reg register\n#define F(i,b,n)  for(reg int i=(b);i<(n);i++)\n#define f(i,b,n)  for(reg int i=(b);i<=(n);i++)\n\n#include AWSL\nawei_sine;\n\nconst int maxn=1e5+10;\nint s[maxn];\n\nvoid Insertsort (int s[],int l,int r)\n{\n  for(int i=l+1;i<=r;i++)\n  {\n   \t\tint j=i-1,key=s[i];\n   \t\twhile (j>=l && s[j]>key)\n   \t\t{\n   \t\t  s[j+1]=s[j];\n   \t\t  j--;\n   \t\t}\n   \t\ts[j+1]=key;\n  }\n}\n\nvoid Quicksort_MoT_ISTSORT_DEREP (int s[],int l,int r)\n{\n\tif (l<r) \n\t{\n\t  \tif(r-l+1<10) \n\t  \t{\n\t  \t\tInsertsort (s,l,r);\n\t  \t}\n\t  \telse \n\t  \t{\n  \t\t\t//Mediam of Three\n\t\t   if (r-l>2)\n\t\t   {\n\t\t\t\tint x=(s[l]>=s[r])?l:r;\n\t\t\t\tx=(s[x]<=s[(l+r)/2])?x:(l+r)/2;\n\t\t\t\tswap(s[l],s[x]);\n\t\t\t}\n\t\t\t\n\t\t\tint i=l,j=r,index=s[l];\n\t\t\twhile (i<j)\n\t\t\t{\n\t\t\t\t//to find the first number which is smaller than x\n\t\t\t\twhile ( i<j && s[j]>=index ) j--;\n\t\t\t\tif ( i<j && s[j]<index ) s[i++]=s[j];\n\t\t\t\t\n\t\t\t\t//to find the first number which is larger than x\n\t\t\t\twhile ( i<j && s[i]<=index ) i++;\n\t\t\t\tif ( i<j && s[i]>index ) s[j--]=s[i];\n\t\t\t}\n\t\t\t//now i=j\n\t\t\ts[i]=index;\n\t\t\tfor (int p=i-1;p>l;p--) \n\t\t\t{\n\t\t\t\tif (s[p]==index) swap(s[--i],s[p]);\n\t\t\t}\n\t\t\tfor (int p=j+1;p<r;p++) \n\t\t\t{\n\t\t\t\tif (s[p]==index) swap(s[++j],s[p]);\n\t\t\t}\n\t\t\tQuicksort_MoT_ISTSORT_DEREP (s,l,i-1);\n\t\t\tQuicksort_MoT_ISTSORT_DEREP (s,j+1,r);\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint n;\n\tscanf (\"%d\",&n);\n\tF(i,0,n) scanf (\"%d\",&s[i]);\n\tQuicksort_MoT_ISTSORT_DEREP (s,0,n-1);\n\tF(i,0,n) printf(\"%d \",s[i]); \n\treturn 0;\n}\n```\n\n终于，补课完成。<span class=\"heimu\" title=\"你知道的太多了\"> ~~当然有机会我会自己测试一下代码效率，因为我还是觉得我的插排哪个地方写丑了。~~</span>~~不知道要鸽多久（逃~~\n\n<div align=center>\n![](https://p.130014.xyz/2020/10/30/4BB59D37-8C77-4164-8D91-92976B8FFAEC.th.jpg)\n</div>\n\n我居然没有鸽，<span class=\"heimu\" title=\"你知道的太多了\"> 主要是最近水课多。</span>之前居然是三数取中法有个地方写反了.总之,正式结束了.\n\n\n\n<!-- Q.E.D. -->","slug":"XCPC/Quicksort","published":1,"updated":"2021-06-26T15:47:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uk0002f63jn9ots5q2c","content":"<p>初三暑假, 师兄师姐在上面讲排序, 我就知道睡觉. <del>(不愧是你)</del> 到后来, 又知道了 algorithm 里面的 sort 函数. 所以模版题也用 sort 水过了. 但是, 出来混迟早要还. 所以, 我来补课了. </p>\n<span id=\"more\"></span>\n<h2 id=\"快速排序基础\"><a href=\"#快速排序基础\" class=\"headerlink\" title=\"快速排序基础\"></a>快速排序基础</h2><p>第一次想排序算法, 我的想法是找第 i 小的元素放在 i 处, 这样就实现了. 这算法效率极低. <del>优点是时间复杂度稳定(bushi)</del> 时间复杂度是O(n<sup>2</sup>), 于是后来我们学了插入排序, 冒泡排序, 还有现在的快速排序.</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>选一个基准数, 我们把比它大的数放在右边, 比它小的放在左边, 将它放在两组数中间, 对左右两组数重复上述过程即可(递归). 而且它把一组数分成两组数, 这其实是一种分治思想. </p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>本文 <a href=\"https://www.sohu.com/a/246785807_684445\">图片来源</a> 于网络, 可以看看, 感觉讲的不错. </p>\n<h4 id=\"挖坑法\"><a href=\"#挖坑法\" class=\"headerlink\" title=\"挖坑法\"></a>挖坑法</h4><p><img src=\"https://p.130014.xyz/2020/10/29/001.png\" alt=\"001\" loading=\"lazy\"></p>\n<p>先看懂方法， 再读代码。 先选一个数作为基准数, 为了方便选第一个, 现在基准值为 4 . 在 4 所在位置挖一个”坑”.我们打算把比 4 小的数放在里面.</p>\n<p><img src=\"https://p.130014.xyz/2020/10/29/002.png\" alt=\"002\" loading=\"lazy\"></p>\n<p>此时 right 从右边开始向左移动, 要找第一个比 4 小的数, 放入上面挖的”坑”, 我们发现 1 满足了, 于是把 1 换到第一位. 1已经移动了,  1 原来的位置就变成坑了,  那么再找下一个数填”坑”. 因为在右边, 所以我们要把左边比 4 大的数换到”坑”里. </p>\n<p><img src=\"https://p.130014.xyz/2020/10/29/003.png\" alt=\"003\" loading=\"lazy\"></p>\n<p>注意, 这样处理后 left 左边都是比 4 小的, right 右边都是比 4 大的. 我们要在左边找比 4 大的数, 于是找到了7. 放到”坑”里. 以此类推.</p>\n<p><img src=\"https://p.130014.xyz/2020/10/29/004.png\" alt=\"004\" loading=\"lazy\"></p>\n<p><img src=\"https://p.130014.xyz/2020/10/29/005.png\" alt=\"005\" loading=\"lazy\"></p>\n<p><img src=\"https://p.130014.xyz/2020/10/29/006.png\" alt=\"006\" loading=\"lazy\"><br><img src=\"https://p.130014.xyz/2020/10/29/007.png\" alt=\"007\" loading=\"lazy\"></p>\n<p><img src=\"https://p.130014.xyz/2020/10/29/008.png\" alt=\"008\" loading=\"lazy\"></p>\n<p>最后, left 和 right 重合,把 4 放进去, 实现了比它大的数在右边, 比它小的在左边 ,它在两组数中间. 那么递归对左右作相同操作即可. </p>\n<h4 id=\"指针法\"><a href=\"#指针法\" class=\"headerlink\" title=\"指针法\"></a>指针法</h4><p>有兴趣可以自行度娘, 核心思路不变.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p>代码仅供参考, 建议手打.</p>\n<p><a href=\"https://www.luogu.com.cn/problem/P1177\">洛谷【模板】快速排序</a> </p>\n<p>可以提交看是否正确, 测试点#1, #2 AC 应该就是正确的了. 想要通过全部测试点需要优化提高效率. </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Quicksort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//to find the first number which is smaller than x</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>index <span class=\"token punctuation\">)</span> \tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">////to find the first number which is larger than x</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>index <span class=\"token punctuation\">)</span> \ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">//now i=j</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//recurse to sort the right subarray and left subarray</span>\n\t\t<span class=\"token function\">Quicksort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">Quicksort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"优化处理\"><a href=\"#优化处理\" class=\"headerlink\" title=\"优化处理\"></a>优化处理</h2><p>快速排序的不稳定性在于基准值的选取,选的好效率高, 不好的话时间复杂度会到 O(n<sup>2</sup>) . 因此可以进行优化.<br>以下优化方法参考和引用于 <a href=\"https://blog.csdn.net/qq_19525389/article/details/81436838\">yuebaii的博文</a>。</p>\n<h3 id=\"随机选取基准\"><a href=\"#随机选取基准\" class=\"headerlink\" title=\"随机选取基准\"></a>随机选取基准</h3><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>我们随机选取一个数, 让它作为基准即可. 这在数组原本有一定顺序情况下很好用. 核心代码不变, 我们交换一下随机选取的数和数组的第一个数即可.</p>\n<h4 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h4><p>此时提交到 <a href=\"https://www.luogu.com.cn/problem/P1177\">洛谷</a> 通过 4 个测试点, 还剩一个. </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Quicksort_Rand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token function\">rand_l2r</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//rand_l2r will return a random number between l and r</span>\n        \n\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//to find the first number which is smaller than x</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>index <span class=\"token punctuation\">)</span> \tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">////to find the first number which is larger than x</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>index <span class=\"token punctuation\">)</span> \ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">//now i=j</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"速度对比\"><a href=\"#速度对比\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><table>\n<thead>\n<tr>\n<th align=\"center\">单位：ms</th>\n<th align=\"center\">随机数据</th>\n<th align=\"center\">上升序列</th>\n<th align=\"center\">下降序列</th>\n<th align=\"center\">重复数据</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">固定基准</td>\n<td align=\"center\">794</td>\n<td align=\"center\">109935</td>\n<td align=\"center\">105949</td>\n<td align=\"center\">51280</td>\n</tr>\n<tr>\n<td align=\"center\">随机基准</td>\n<td align=\"center\">946</td>\n<td align=\"center\">575</td>\n<td align=\"center\">601</td>\n<td align=\"center\">25970</td>\n</tr>\n</tbody></table>\n<p>就很看脸的，脸黑的话随机就emm……</p>\n<p>说明我的生成数据和测试方法。这里生成了1000组数据，每组数据10000个数。各个类型生成规则如下</p>\n<ul>\n<li>随机数据，就是 rand() 生成的，每组数据刷新一次随机种子。</li>\n<li>上升序列：1-10000</li>\n<li>下降序列：10000-1</li>\n<li>重复数据：随机数生成5个数，每个数重复2000次，连在一起。<del>突然想到可以生成不连在一起的，但懒得写了。</del></li>\n</ul>\n<h3 id=\"三数取中法\"><a href=\"#三数取中法\" class=\"headerlink\" title=\"三数取中法\"></a>三数取中法</h3><h4 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>随机选取虽然有效, 但最坏情况（选到区间内最大或最小数）仍会发生, 于是我们能不能找个方法, 让我们不会取到最大（或最小）的数呢? 这就是三数取中法. 我们选取 l, r, 以及中间的数m, 选择中间的数, 就能使取的基准尽量合适. ( 注意尽量, 因为可以看到速度对比中最恶心的是重复数组 )</p>\n<p>因为自己沙壁，写错了，后面复制粘贴也没debug出来。惨</p>\n<h4 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Quicksort_MoT</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//Mediam of Three</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t   <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> l <span class=\"token operator\">:</span> r <span class=\"token punctuation\">;</span>\n\t\t\tx<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//to find the first number which is smaller than x</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>index <span class=\"token punctuation\">)</span> \tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//to find the first number which is larger than x</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>index <span class=\"token punctuation\">)</span> \ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">//now i=j</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">Quicksort_MoT</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">Quicksort_MoT</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"速度对比-1\"><a href=\"#速度对比-1\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><table>\n<thead>\n<tr>\n<th align=\"center\">单位：ms</th>\n<th align=\"center\">随机数据</th>\n<th align=\"center\">上升序列</th>\n<th align=\"center\">下降序列</th>\n<th align=\"center\">重复数据</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">固定基准</td>\n<td align=\"center\">794</td>\n<td align=\"center\">109935</td>\n<td align=\"center\">105949</td>\n<td align=\"center\">51280</td>\n</tr>\n<tr>\n<td align=\"center\">随机基准</td>\n<td align=\"center\">946</td>\n<td align=\"center\">575</td>\n<td align=\"center\">601</td>\n<td align=\"center\">25970</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中</td>\n<td align=\"center\">829</td>\n<td align=\"center\">33900</td>\n<td align=\"center\">277</td>\n<td align=\"center\">286</td>\n</tr>\n</tbody></table>\n<p>诚然，三数取中在随机数组上优化明显，然而对于降序反而是要低于随机取数的，而且面对重复数组仍然束手无策。洛谷提交后 #1～3 AC #4～5 TLE #4其实是降序重复混合数组。</p>\n<h3 id=\"三数取中法-插排\"><a href=\"#三数取中法-插排\" class=\"headerlink\" title=\"三数取中法+插排\"></a>三数取中法+插排</h3><h4 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>在部分有序且较小的数组中，插入排序的效率要比快速排序高，我们不妨让数组小于某个值（5～20）时，采用插入排序代替快速排序。这里我们取10。</p>\n<h4 id=\"Code-3\"><a href=\"#Code-3\" class=\"headerlink\" title=\"Code\"></a>Code</h4><pre class=\"line-numbers language-Cpp\" data-language=\"Cpp\"><code class=\"language-Cpp\">\nvoid Insertsort (int s[],int l,int r)\n&#123;\n  for(int i&#x3D;l+1;i&lt;&#x3D;r;i++)\n  &#123;\n   \t\tint j&#x3D;i-1,key&#x3D;s[i];\n   \t\twhile (j&gt;&#x3D;l &amp;&amp; s[j]&gt;key)\n   \t\t&#123;\n   \t\t  s[j+1]&#x3D;s[j];\n   \t\t  j--;\n   \t\t&#125;\n   \t\ts[j+1]&#x3D;key;\n  &#125;\n&#125;\n\nvoid Quicksort_MoT_ISTSORT (int s[],int l,int r)\n&#123;\n\tif (l&lt;r) \n\t&#123;\n\t  \tif(r-l+1&lt;10) \n\t  \t&#123;\n\t  \t  Insertsort(s,l,r);\n\t  \t&#125;\n\t  \telse \n\t  \t&#123;\n    \t\t&#x2F;&#x2F;Mediam of Three\n\t\t   if (r-l&gt;2)\n\t\t   &#123;\n\t\t\t\tint x&#x3D;(s[l]&gt;&#x3D;s[r])?l:r;\n\t\t\t\tx&#x3D;(s[x]&lt;&#x3D;s[(l+r)&#x2F;2])?x:(l+r)&#x2F;2;\n\t\t\t\tswap(s[l],s[x]);\n\t\t\t&#125;\n\t\t\t\n\t\t\tint i&#x3D;l,j&#x3D;r,index&#x3D;s[l];\n\t\t\twhile (i&lt;j)\n\t\t\t&#123;\n\t\t\t\t&#x2F;&#x2F;to find the first number which is smaller than x\n\t\t\t\twhile ( i&lt;j &amp;&amp; s[j]&gt;&#x3D;index ) j--;\n\t\t\t\tif ( i&lt;j &amp;&amp; s[j]&lt;index ) s[i++]&#x3D;s[j];\n\t\t\t\t\n\t\t\t\t&#x2F;&#x2F;to find the first number which is larger than x\n\t\t\t\twhile ( i&lt;j &amp;&amp; s[i]&lt;&#x3D;index ) i++;\n\t\t\t\tif ( i&lt;j &amp;&amp; s[i]&gt;index ) s[j--]&#x3D;s[i];\n\t\t\t&#125;\n\t\t\t&#x2F;&#x2F;now i&#x3D;j\n\t\t\ts[i]&#x3D;index;\n\t\t\tQuicksort_MoT_ISTSORT (s,l,i-1);\n\t\t\tQuicksort_MoT_ISTSORT (s,i+1,r);\n\t\t&#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"速度对比-2\"><a href=\"#速度对比-2\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><table>\n<thead>\n<tr>\n<th align=\"center\">单位：ms</th>\n<th align=\"center\">随机数据</th>\n<th align=\"center\">上升序列</th>\n<th align=\"center\">下降序列</th>\n<th align=\"center\">重复数据</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">固定基准</td>\n<td align=\"center\">794</td>\n<td align=\"center\">109935</td>\n<td align=\"center\">105949</td>\n<td align=\"center\">51280</td>\n</tr>\n<tr>\n<td align=\"center\">随机基准</td>\n<td align=\"center\">946</td>\n<td align=\"center\">575</td>\n<td align=\"center\">601</td>\n<td align=\"center\">25970</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中</td>\n<td align=\"center\">829</td>\n<td align=\"center\">277</td>\n<td align=\"center\">286</td>\n<td align=\"center\">33900</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中+插排</td>\n<td align=\"center\">795</td>\n<td align=\"center\">223</td>\n<td align=\"center\">229</td>\n<td align=\"center\">31670</td>\n</tr>\n</tbody></table>\n<p>洛谷数据中包含了重复序列，所以这种方法#4 #5 还都过不了。</p>\n<h3 id=\"三数取中法-插排-聚合重复元素\"><a href=\"#三数取中法-插排-聚合重复元素\" class=\"headerlink\" title=\"三数取中法+插排+聚合重复元素\"></a>三数取中法+插排+聚合重复元素</h3><h4 id=\"思路-4\"><a href=\"#思路-4\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>既然重复元素成为我们效率的最大障碍，那就想办法解决它。重复元素是和 index 基准值相同的，即位置就在基准值旁边，所以我们想办法让重复元素不参与后续排序。</p>\n<h4 id=\"Fake-Code\"><a href=\"#Fake-Code\" class=\"headerlink\" title=\"Fake Code\"></a>Fake Code</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">FQuicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t  \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> \n\t  \t<span class=\"token punctuation\">&#123;</span>\n\t  \t  <span class=\"token function\">Insertsort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  \t<span class=\"token punctuation\">&#125;</span>\n\t  \t<span class=\"token keyword\">else</span> \n\t  \t<span class=\"token punctuation\">&#123;</span>\n  \t\t\t<span class=\"token comment\">//Mediam of Three</span>\n\t\t   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t   <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>l<span class=\"token operator\">:</span>r<span class=\"token punctuation\">;</span>\n\t\t\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">//to find the first number which is smaller than x</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>index <span class=\"token punctuation\">)</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token comment\">//to find the first number which is larger than x</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>index <span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">//now i=j</span>\n\t\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//This is fake DEREP</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">>=</span>l <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>index<span class=\"token punctuation\">)</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span>r <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>index<span class=\"token punctuation\">)</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">FQuicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">FQuicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>上面是我自己理解的，问题在于只是在周围聚合，我们要的是对整个数组聚合。应该把所有与基准值相等的值聚合起来。然而就把洛谷的题AC过去了 (《 _《 ) </p>\n<h4 id=\"True-Code\"><a href=\"#True-Code\" class=\"headerlink\" title=\"True Code\"></a>True Code</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t  \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> \n\t  \t<span class=\"token punctuation\">&#123;</span>\n\t  \t\t<span class=\"token function\">Insertsort</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  \t<span class=\"token punctuation\">&#125;</span>\n\t  \t<span class=\"token keyword\">else</span> \n\t  \t<span class=\"token punctuation\">&#123;</span>\n  \t\t\t<span class=\"token comment\">//Mediam of Three</span>\n\t\t   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t   <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>l<span class=\"token operator\">:</span>r<span class=\"token punctuation\">;</span>\n\t\t\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">//to find the first number which is smaller than x</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>index <span class=\"token punctuation\">)</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token comment\">//to find the first number which is larger than x</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>index <span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">//now i=j</span>\n\t\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">></span>l<span class=\"token punctuation\">;</span>p<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>index<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>index<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"速度对比-3\"><a href=\"#速度对比-3\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><table>\n<thead>\n<tr>\n<th align=\"center\">优化类型\\单位：ms</th>\n<th align=\"center\">随机数据</th>\n<th align=\"center\">上升序列</th>\n<th align=\"center\">下降序列</th>\n<th align=\"center\">重复数据</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">固定基准</td>\n<td align=\"center\">794</td>\n<td align=\"center\">109935</td>\n<td align=\"center\">105949</td>\n<td align=\"center\">51280</td>\n</tr>\n<tr>\n<td align=\"center\">随机基准</td>\n<td align=\"center\">946</td>\n<td align=\"center\">575</td>\n<td align=\"center\">601</td>\n<td align=\"center\">25970</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中</td>\n<td align=\"center\">829</td>\n<td align=\"center\">277</td>\n<td align=\"center\">286</td>\n<td align=\"center\">33900</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中+插排</td>\n<td align=\"center\">795</td>\n<td align=\"center\">223</td>\n<td align=\"center\">229</td>\n<td align=\"center\">31670</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中+插排+聚合重复元素</td>\n<td align=\"center\">1029</td>\n<td align=\"center\">408</td>\n<td align=\"center\">429</td>\n<td align=\"center\">132</td>\n</tr>\n</tbody></table>\n<p>随机数上的速度其实并没有很快，关键这个优化牺牲了几乎可以忽略的速度，换来了重复元素多的情况下的高效，使在实际处理中算法效率更高。</p>\n<h3 id=\"优化递归过程\"><a href=\"#优化递归过程\" class=\"headerlink\" title=\"优化递归过程\"></a>优化递归过程</h3><p>其实这个优化效果不大，可以看看我参考的<a href=\"https://blog.csdn.net/insistgogo/article/details/7785038\">博文</a>。</p>\n<h4 id=\"速度对比-4\"><a href=\"#速度对比-4\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><table>\n<thead>\n<tr>\n<th align=\"center\">优化类型\\单位：ms</th>\n<th align=\"center\">随机数据</th>\n<th align=\"center\">上升序列</th>\n<th align=\"center\">下降序列</th>\n<th align=\"center\">重复数据</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">固定基准</td>\n<td align=\"center\">794</td>\n<td align=\"center\">109935</td>\n<td align=\"center\">105949</td>\n<td align=\"center\">51280</td>\n</tr>\n<tr>\n<td align=\"center\">随机基准</td>\n<td align=\"center\">946</td>\n<td align=\"center\">575</td>\n<td align=\"center\">601</td>\n<td align=\"center\">25970</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中</td>\n<td align=\"center\">829</td>\n<td align=\"center\">277</td>\n<td align=\"center\">286</td>\n<td align=\"center\">33900</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中+插排</td>\n<td align=\"center\">795</td>\n<td align=\"center\">223</td>\n<td align=\"center\">229</td>\n<td align=\"center\">31670</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中+插排+聚合重复元素</td>\n<td align=\"center\">1029</td>\n<td align=\"center\">408</td>\n<td align=\"center\">429</td>\n<td align=\"center\">132</td>\n</tr>\n<tr>\n<td align=\"center\">sort</td>\n<td align=\"center\">1101</td>\n<td align=\"center\">471</td>\n<td align=\"center\">378</td>\n<td align=\"center\">603</td>\n</tr>\n</tbody></table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>一个优秀排序算法，不是针对于某种特定序列排序的，而应该对各种序列都要有较优的效率，如：STL中的 sort。在实际运用中，有时并不能知道数据的概况，那就要选一个全面高效的算法。</p>\n<h3 id=\"洛谷-P1177-快速排序-Solution\"><a href=\"#洛谷-P1177-快速排序-Solution\" class=\"headerlink\" title=\"洛谷 P1177 快速排序 Solution\"></a><a href=\"https://www.luogu.com.cn/record/40798949\">洛谷 P1177 快速排序</a> Solution</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">AWSL</span> <span class=\"token expression\"><span class=\"token operator\">&lt;</span>bits<span class=\"token operator\">/</span>stdc<span class=\"token operator\">++</span><span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">awei_sine</span> <span class=\"token expression\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">reg</span> <span class=\"token expression\"><span class=\"token keyword\">register</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">F</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>reg <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">f</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>reg <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token expression\">AWSL</span></span>\nawei_sine<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Insertsort</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n   \t\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   \t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span>l <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>key<span class=\"token punctuation\">)</span>\n   \t\t<span class=\"token punctuation\">&#123;</span>\n   \t\t  s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   \t\t  j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n   \t\t<span class=\"token punctuation\">&#125;</span>\n   \t\ts<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t  \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> \n\t  \t<span class=\"token punctuation\">&#123;</span>\n\t  \t\t<span class=\"token function\">Insertsort</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  \t<span class=\"token punctuation\">&#125;</span>\n\t  \t<span class=\"token keyword\">else</span> \n\t  \t<span class=\"token punctuation\">&#123;</span>\n  \t\t\t<span class=\"token comment\">//Mediam of Three</span>\n\t\t   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t   <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>l<span class=\"token operator\">:</span>r<span class=\"token punctuation\">;</span>\n\t\t\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">//to find the first number which is smaller than x</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>index <span class=\"token punctuation\">)</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token comment\">//to find the first number which is larger than x</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>index <span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">//now i=j</span>\n\t\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">></span>l<span class=\"token punctuation\">;</span>p<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>index<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>index<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">F</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">F</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>终于，补课完成。<span class=\"heimu\" title=\"你知道的太多了\"> <del>当然有机会我会自己测试一下代码效率，因为我还是觉得我的插排哪个地方写丑了。</del></span><del>不知道要鸽多久（逃</del></p>\n<div align=center>\n![](https://p.130014.xyz/2020/10/30/4BB59D37-8C77-4164-8D91-92976B8FFAEC.th.jpg)\n</div>\n\n<p>我居然没有鸽，<span class=\"heimu\" title=\"你知道的太多了\"> 主要是最近水课多。</span>之前居然是三数取中法有个地方写反了.总之,正式结束了.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>初三暑假, 师兄师姐在上面讲排序, 我就知道睡觉. <del>(不愧是你)</del> 到后来, 又知道了 algorithm 里面的 sort 函数. 所以模版题也用 sort 水过了. 但是, 出来混迟早要还. 所以, 我来补课了. </p>","more":"<h2 id=\"快速排序基础\"><a href=\"#快速排序基础\" class=\"headerlink\" title=\"快速排序基础\"></a>快速排序基础</h2><p>第一次想排序算法, 我的想法是找第 i 小的元素放在 i 处, 这样就实现了. 这算法效率极低. <del>优点是时间复杂度稳定(bushi)</del> 时间复杂度是O(n<sup>2</sup>), 于是后来我们学了插入排序, 冒泡排序, 还有现在的快速排序.</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>选一个基准数, 我们把比它大的数放在右边, 比它小的放在左边, 将它放在两组数中间, 对左右两组数重复上述过程即可(递归). 而且它把一组数分成两组数, 这其实是一种分治思想. </p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>本文 <a href=\"https://www.sohu.com/a/246785807_684445\">图片来源</a> 于网络, 可以看看, 感觉讲的不错. </p>\n<h4 id=\"挖坑法\"><a href=\"#挖坑法\" class=\"headerlink\" title=\"挖坑法\"></a>挖坑法</h4><p><img src=\"https://p.130014.xyz/2020/10/29/001.png\" alt=\"001\"></p>\n<p>先看懂方法， 再读代码。 先选一个数作为基准数, 为了方便选第一个, 现在基准值为 4 . 在 4 所在位置挖一个”坑”.我们打算把比 4 小的数放在里面.</p>\n<p><img src=\"https://p.130014.xyz/2020/10/29/002.png\" alt=\"002\"></p>\n<p>此时 right 从右边开始向左移动, 要找第一个比 4 小的数, 放入上面挖的”坑”, 我们发现 1 满足了, 于是把 1 换到第一位. 1已经移动了,  1 原来的位置就变成坑了,  那么再找下一个数填”坑”. 因为在右边, 所以我们要把左边比 4 大的数换到”坑”里. </p>\n<p><img src=\"https://p.130014.xyz/2020/10/29/003.png\" alt=\"003\"></p>\n<p>注意, 这样处理后 left 左边都是比 4 小的, right 右边都是比 4 大的. 我们要在左边找比 4 大的数, 于是找到了7. 放到”坑”里. 以此类推.</p>\n<p><img src=\"https://p.130014.xyz/2020/10/29/004.png\" alt=\"004\"></p>\n<p><img src=\"https://p.130014.xyz/2020/10/29/005.png\" alt=\"005\"></p>\n<p><img src=\"https://p.130014.xyz/2020/10/29/006.png\" alt=\"006\"><br><img src=\"https://p.130014.xyz/2020/10/29/007.png\" alt=\"007\"></p>\n<p><img src=\"https://p.130014.xyz/2020/10/29/008.png\" alt=\"008\"></p>\n<p>最后, left 和 right 重合,把 4 放进去, 实现了比它大的数在右边, 比它小的在左边 ,它在两组数中间. 那么递归对左右作相同操作即可. </p>\n<h4 id=\"指针法\"><a href=\"#指针法\" class=\"headerlink\" title=\"指针法\"></a>指针法</h4><p>有兴趣可以自行度娘, 核心思路不变.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p>代码仅供参考, 建议手打.</p>\n<p><a href=\"https://www.luogu.com.cn/problem/P1177\">洛谷【模板】快速排序</a> </p>\n<p>可以提交看是否正确, 测试点#1, #2 AC 应该就是正确的了. 想要通过全部测试点需要优化提高效率. </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Quicksort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//to find the first number which is smaller than x</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>index <span class=\"token punctuation\">)</span> \tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">////to find the first number which is larger than x</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>index <span class=\"token punctuation\">)</span> \ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">//now i=j</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//recurse to sort the right subarray and left subarray</span>\n\t\t<span class=\"token function\">Quicksort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">Quicksort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"优化处理\"><a href=\"#优化处理\" class=\"headerlink\" title=\"优化处理\"></a>优化处理</h2><p>快速排序的不稳定性在于基准值的选取,选的好效率高, 不好的话时间复杂度会到 O(n<sup>2</sup>) . 因此可以进行优化.<br>以下优化方法参考和引用于 <a href=\"https://blog.csdn.net/qq_19525389/article/details/81436838\">yuebaii的博文</a>。</p>\n<h3 id=\"随机选取基准\"><a href=\"#随机选取基准\" class=\"headerlink\" title=\"随机选取基准\"></a>随机选取基准</h3><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>我们随机选取一个数, 让它作为基准即可. 这在数组原本有一定顺序情况下很好用. 核心代码不变, 我们交换一下随机选取的数和数组的第一个数即可.</p>\n<h4 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h4><p>此时提交到 <a href=\"https://www.luogu.com.cn/problem/P1177\">洛谷</a> 通过 4 个测试点, 还剩一个. </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Quicksort_Rand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token function\">rand_l2r</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//rand_l2r will return a random number between l and r</span>\n        \n\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//to find the first number which is smaller than x</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>index <span class=\"token punctuation\">)</span> \tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">////to find the first number which is larger than x</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>index <span class=\"token punctuation\">)</span> \ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">//now i=j</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"速度对比\"><a href=\"#速度对比\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><table>\n<thead>\n<tr>\n<th align=\"center\">单位：ms</th>\n<th align=\"center\">随机数据</th>\n<th align=\"center\">上升序列</th>\n<th align=\"center\">下降序列</th>\n<th align=\"center\">重复数据</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">固定基准</td>\n<td align=\"center\">794</td>\n<td align=\"center\">109935</td>\n<td align=\"center\">105949</td>\n<td align=\"center\">51280</td>\n</tr>\n<tr>\n<td align=\"center\">随机基准</td>\n<td align=\"center\">946</td>\n<td align=\"center\">575</td>\n<td align=\"center\">601</td>\n<td align=\"center\">25970</td>\n</tr>\n</tbody></table>\n<p>就很看脸的，脸黑的话随机就emm……</p>\n<p>说明我的生成数据和测试方法。这里生成了1000组数据，每组数据10000个数。各个类型生成规则如下</p>\n<ul>\n<li>随机数据，就是 rand() 生成的，每组数据刷新一次随机种子。</li>\n<li>上升序列：1-10000</li>\n<li>下降序列：10000-1</li>\n<li>重复数据：随机数生成5个数，每个数重复2000次，连在一起。<del>突然想到可以生成不连在一起的，但懒得写了。</del></li>\n</ul>\n<h3 id=\"三数取中法\"><a href=\"#三数取中法\" class=\"headerlink\" title=\"三数取中法\"></a>三数取中法</h3><h4 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>随机选取虽然有效, 但最坏情况（选到区间内最大或最小数）仍会发生, 于是我们能不能找个方法, 让我们不会取到最大（或最小）的数呢? 这就是三数取中法. 我们选取 l, r, 以及中间的数m, 选择中间的数, 就能使取的基准尽量合适. ( 注意尽量, 因为可以看到速度对比中最恶心的是重复数组 )</p>\n<p>因为自己沙壁，写错了，后面复制粘贴也没debug出来。惨</p>\n<h4 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Quicksort_MoT</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//Mediam of Three</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t   <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> l <span class=\"token operator\">:</span> r <span class=\"token punctuation\">;</span>\n\t\t\tx<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//to find the first number which is smaller than x</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>index <span class=\"token punctuation\">)</span> \tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//to find the first number which is larger than x</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>index <span class=\"token punctuation\">)</span> \ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">//now i=j</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">Quicksort_MoT</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">Quicksort_MoT</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"速度对比-1\"><a href=\"#速度对比-1\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><table>\n<thead>\n<tr>\n<th align=\"center\">单位：ms</th>\n<th align=\"center\">随机数据</th>\n<th align=\"center\">上升序列</th>\n<th align=\"center\">下降序列</th>\n<th align=\"center\">重复数据</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">固定基准</td>\n<td align=\"center\">794</td>\n<td align=\"center\">109935</td>\n<td align=\"center\">105949</td>\n<td align=\"center\">51280</td>\n</tr>\n<tr>\n<td align=\"center\">随机基准</td>\n<td align=\"center\">946</td>\n<td align=\"center\">575</td>\n<td align=\"center\">601</td>\n<td align=\"center\">25970</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中</td>\n<td align=\"center\">829</td>\n<td align=\"center\">33900</td>\n<td align=\"center\">277</td>\n<td align=\"center\">286</td>\n</tr>\n</tbody></table>\n<p>诚然，三数取中在随机数组上优化明显，然而对于降序反而是要低于随机取数的，而且面对重复数组仍然束手无策。洛谷提交后 #1～3 AC #4～5 TLE #4其实是降序重复混合数组。</p>\n<h3 id=\"三数取中法-插排\"><a href=\"#三数取中法-插排\" class=\"headerlink\" title=\"三数取中法+插排\"></a>三数取中法+插排</h3><h4 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>在部分有序且较小的数组中，插入排序的效率要比快速排序高，我们不妨让数组小于某个值（5～20）时，采用插入排序代替快速排序。这里我们取10。</p>\n<h4 id=\"Code-3\"><a href=\"#Code-3\" class=\"headerlink\" title=\"Code\"></a>Code</h4><pre class=\"line-numbers language-Cpp\" data-language=\"Cpp\"><code class=\"language-Cpp\">\nvoid Insertsort (int s[],int l,int r)\n&#123;\n  for(int i&#x3D;l+1;i&lt;&#x3D;r;i++)\n  &#123;\n   \t\tint j&#x3D;i-1,key&#x3D;s[i];\n   \t\twhile (j&gt;&#x3D;l &amp;&amp; s[j]&gt;key)\n   \t\t&#123;\n   \t\t  s[j+1]&#x3D;s[j];\n   \t\t  j--;\n   \t\t&#125;\n   \t\ts[j+1]&#x3D;key;\n  &#125;\n&#125;\n\nvoid Quicksort_MoT_ISTSORT (int s[],int l,int r)\n&#123;\n\tif (l&lt;r) \n\t&#123;\n\t  \tif(r-l+1&lt;10) \n\t  \t&#123;\n\t  \t  Insertsort(s,l,r);\n\t  \t&#125;\n\t  \telse \n\t  \t&#123;\n    \t\t&#x2F;&#x2F;Mediam of Three\n\t\t   if (r-l&gt;2)\n\t\t   &#123;\n\t\t\t\tint x&#x3D;(s[l]&gt;&#x3D;s[r])?l:r;\n\t\t\t\tx&#x3D;(s[x]&lt;&#x3D;s[(l+r)&#x2F;2])?x:(l+r)&#x2F;2;\n\t\t\t\tswap(s[l],s[x]);\n\t\t\t&#125;\n\t\t\t\n\t\t\tint i&#x3D;l,j&#x3D;r,index&#x3D;s[l];\n\t\t\twhile (i&lt;j)\n\t\t\t&#123;\n\t\t\t\t&#x2F;&#x2F;to find the first number which is smaller than x\n\t\t\t\twhile ( i&lt;j &amp;&amp; s[j]&gt;&#x3D;index ) j--;\n\t\t\t\tif ( i&lt;j &amp;&amp; s[j]&lt;index ) s[i++]&#x3D;s[j];\n\t\t\t\t\n\t\t\t\t&#x2F;&#x2F;to find the first number which is larger than x\n\t\t\t\twhile ( i&lt;j &amp;&amp; s[i]&lt;&#x3D;index ) i++;\n\t\t\t\tif ( i&lt;j &amp;&amp; s[i]&gt;index ) s[j--]&#x3D;s[i];\n\t\t\t&#125;\n\t\t\t&#x2F;&#x2F;now i&#x3D;j\n\t\t\ts[i]&#x3D;index;\n\t\t\tQuicksort_MoT_ISTSORT (s,l,i-1);\n\t\t\tQuicksort_MoT_ISTSORT (s,i+1,r);\n\t\t&#125;\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"速度对比-2\"><a href=\"#速度对比-2\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><table>\n<thead>\n<tr>\n<th align=\"center\">单位：ms</th>\n<th align=\"center\">随机数据</th>\n<th align=\"center\">上升序列</th>\n<th align=\"center\">下降序列</th>\n<th align=\"center\">重复数据</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">固定基准</td>\n<td align=\"center\">794</td>\n<td align=\"center\">109935</td>\n<td align=\"center\">105949</td>\n<td align=\"center\">51280</td>\n</tr>\n<tr>\n<td align=\"center\">随机基准</td>\n<td align=\"center\">946</td>\n<td align=\"center\">575</td>\n<td align=\"center\">601</td>\n<td align=\"center\">25970</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中</td>\n<td align=\"center\">829</td>\n<td align=\"center\">277</td>\n<td align=\"center\">286</td>\n<td align=\"center\">33900</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中+插排</td>\n<td align=\"center\">795</td>\n<td align=\"center\">223</td>\n<td align=\"center\">229</td>\n<td align=\"center\">31670</td>\n</tr>\n</tbody></table>\n<p>洛谷数据中包含了重复序列，所以这种方法#4 #5 还都过不了。</p>\n<h3 id=\"三数取中法-插排-聚合重复元素\"><a href=\"#三数取中法-插排-聚合重复元素\" class=\"headerlink\" title=\"三数取中法+插排+聚合重复元素\"></a>三数取中法+插排+聚合重复元素</h3><h4 id=\"思路-4\"><a href=\"#思路-4\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>既然重复元素成为我们效率的最大障碍，那就想办法解决它。重复元素是和 index 基准值相同的，即位置就在基准值旁边，所以我们想办法让重复元素不参与后续排序。</p>\n<h4 id=\"Fake-Code\"><a href=\"#Fake-Code\" class=\"headerlink\" title=\"Fake Code\"></a>Fake Code</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">FQuicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t  \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> \n\t  \t<span class=\"token punctuation\">&#123;</span>\n\t  \t  <span class=\"token function\">Insertsort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  \t<span class=\"token punctuation\">&#125;</span>\n\t  \t<span class=\"token keyword\">else</span> \n\t  \t<span class=\"token punctuation\">&#123;</span>\n  \t\t\t<span class=\"token comment\">//Mediam of Three</span>\n\t\t   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t   <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>l<span class=\"token operator\">:</span>r<span class=\"token punctuation\">;</span>\n\t\t\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">//to find the first number which is smaller than x</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>index <span class=\"token punctuation\">)</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token comment\">//to find the first number which is larger than x</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>index <span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">//now i=j</span>\n\t\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//This is fake DEREP</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">>=</span>l <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>index<span class=\"token punctuation\">)</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span>r <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>index<span class=\"token punctuation\">)</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">FQuicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">FQuicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>上面是我自己理解的，问题在于只是在周围聚合，我们要的是对整个数组聚合。应该把所有与基准值相等的值聚合起来。然而就把洛谷的题AC过去了 (《 _《 ) </p>\n<h4 id=\"True-Code\"><a href=\"#True-Code\" class=\"headerlink\" title=\"True Code\"></a>True Code</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t  \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> \n\t  \t<span class=\"token punctuation\">&#123;</span>\n\t  \t\t<span class=\"token function\">Insertsort</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  \t<span class=\"token punctuation\">&#125;</span>\n\t  \t<span class=\"token keyword\">else</span> \n\t  \t<span class=\"token punctuation\">&#123;</span>\n  \t\t\t<span class=\"token comment\">//Mediam of Three</span>\n\t\t   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t   <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>l<span class=\"token operator\">:</span>r<span class=\"token punctuation\">;</span>\n\t\t\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">//to find the first number which is smaller than x</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>index <span class=\"token punctuation\">)</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token comment\">//to find the first number which is larger than x</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>index <span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">//now i=j</span>\n\t\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">></span>l<span class=\"token punctuation\">;</span>p<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>index<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>index<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"速度对比-3\"><a href=\"#速度对比-3\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><table>\n<thead>\n<tr>\n<th align=\"center\">优化类型\\单位：ms</th>\n<th align=\"center\">随机数据</th>\n<th align=\"center\">上升序列</th>\n<th align=\"center\">下降序列</th>\n<th align=\"center\">重复数据</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">固定基准</td>\n<td align=\"center\">794</td>\n<td align=\"center\">109935</td>\n<td align=\"center\">105949</td>\n<td align=\"center\">51280</td>\n</tr>\n<tr>\n<td align=\"center\">随机基准</td>\n<td align=\"center\">946</td>\n<td align=\"center\">575</td>\n<td align=\"center\">601</td>\n<td align=\"center\">25970</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中</td>\n<td align=\"center\">829</td>\n<td align=\"center\">277</td>\n<td align=\"center\">286</td>\n<td align=\"center\">33900</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中+插排</td>\n<td align=\"center\">795</td>\n<td align=\"center\">223</td>\n<td align=\"center\">229</td>\n<td align=\"center\">31670</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中+插排+聚合重复元素</td>\n<td align=\"center\">1029</td>\n<td align=\"center\">408</td>\n<td align=\"center\">429</td>\n<td align=\"center\">132</td>\n</tr>\n</tbody></table>\n<p>随机数上的速度其实并没有很快，关键这个优化牺牲了几乎可以忽略的速度，换来了重复元素多的情况下的高效，使在实际处理中算法效率更高。</p>\n<h3 id=\"优化递归过程\"><a href=\"#优化递归过程\" class=\"headerlink\" title=\"优化递归过程\"></a>优化递归过程</h3><p>其实这个优化效果不大，可以看看我参考的<a href=\"https://blog.csdn.net/insistgogo/article/details/7785038\">博文</a>。</p>\n<h4 id=\"速度对比-4\"><a href=\"#速度对比-4\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><table>\n<thead>\n<tr>\n<th align=\"center\">优化类型\\单位：ms</th>\n<th align=\"center\">随机数据</th>\n<th align=\"center\">上升序列</th>\n<th align=\"center\">下降序列</th>\n<th align=\"center\">重复数据</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">固定基准</td>\n<td align=\"center\">794</td>\n<td align=\"center\">109935</td>\n<td align=\"center\">105949</td>\n<td align=\"center\">51280</td>\n</tr>\n<tr>\n<td align=\"center\">随机基准</td>\n<td align=\"center\">946</td>\n<td align=\"center\">575</td>\n<td align=\"center\">601</td>\n<td align=\"center\">25970</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中</td>\n<td align=\"center\">829</td>\n<td align=\"center\">277</td>\n<td align=\"center\">286</td>\n<td align=\"center\">33900</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中+插排</td>\n<td align=\"center\">795</td>\n<td align=\"center\">223</td>\n<td align=\"center\">229</td>\n<td align=\"center\">31670</td>\n</tr>\n<tr>\n<td align=\"center\">三数取中+插排+聚合重复元素</td>\n<td align=\"center\">1029</td>\n<td align=\"center\">408</td>\n<td align=\"center\">429</td>\n<td align=\"center\">132</td>\n</tr>\n<tr>\n<td align=\"center\">sort</td>\n<td align=\"center\">1101</td>\n<td align=\"center\">471</td>\n<td align=\"center\">378</td>\n<td align=\"center\">603</td>\n</tr>\n</tbody></table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>一个优秀排序算法，不是针对于某种特定序列排序的，而应该对各种序列都要有较优的效率，如：STL中的 sort。在实际运用中，有时并不能知道数据的概况，那就要选一个全面高效的算法。</p>\n<h3 id=\"洛谷-P1177-快速排序-Solution\"><a href=\"#洛谷-P1177-快速排序-Solution\" class=\"headerlink\" title=\"洛谷 P1177 快速排序 Solution\"></a><a href=\"https://www.luogu.com.cn/record/40798949\">洛谷 P1177 快速排序</a> Solution</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">AWSL</span> <span class=\"token expression\"><span class=\"token operator\">&lt;</span>bits<span class=\"token operator\">/</span>stdc<span class=\"token operator\">++</span><span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">awei_sine</span> <span class=\"token expression\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">reg</span> <span class=\"token expression\"><span class=\"token keyword\">register</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">F</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>reg <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">f</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>reg <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token expression\">AWSL</span></span>\nawei_sine<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Insertsort</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n   \t\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   \t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span>l <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>key<span class=\"token punctuation\">)</span>\n   \t\t<span class=\"token punctuation\">&#123;</span>\n   \t\t  s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   \t\t  j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n   \t\t<span class=\"token punctuation\">&#125;</span>\n   \t\ts<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t  \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> \n\t  \t<span class=\"token punctuation\">&#123;</span>\n\t  \t\t<span class=\"token function\">Insertsort</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  \t<span class=\"token punctuation\">&#125;</span>\n\t  \t<span class=\"token keyword\">else</span> \n\t  \t<span class=\"token punctuation\">&#123;</span>\n  \t\t\t<span class=\"token comment\">//Mediam of Three</span>\n\t\t   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t   <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>l<span class=\"token operator\">:</span>r<span class=\"token punctuation\">;</span>\n\t\t\t\tx<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>x<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">//to find the first number which is smaller than x</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>index <span class=\"token punctuation\">)</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token comment\">//to find the first number which is larger than x</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>index <span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>index <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">//now i=j</span>\n\t\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">></span>l<span class=\"token punctuation\">;</span>p<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>index<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>index<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">F</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Quicksort_MoT_ISTSORT_DEREP</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">F</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>终于，补课完成。<span class=\"heimu\" title=\"你知道的太多了\"> <del>当然有机会我会自己测试一下代码效率，因为我还是觉得我的插排哪个地方写丑了。</del></span><del>不知道要鸽多久（逃</del></p>\n<div align=center>\n![](https://p.130014.xyz/2020/10/30/4BB59D37-8C77-4164-8D91-92976B8FFAEC.th.jpg)\n</div>\n\n<p>我居然没有鸽，<span class=\"heimu\" title=\"你知道的太多了\"> 主要是最近水课多。</span>之前居然是三数取中法有个地方写反了.总之,正式结束了.</p>\n<!-- Q.E.D. -->"},{"title":"STL的学习笔记","date":"2020-12-21T09:11:56.000Z","updated":"2021-01-26T08:50:26.000Z","_content":"\nSTL是什么东西 , 我自己手打一个不行吗 ?\n\n<img src=\"https://img.inzamz.top/expression/zhen-xiang.gif\" alt=\"zhen-xiang\" div align=center/> \n\n手打模板是什么东西 , STL真香 , yyds . \n\n参考自百度百科.\n\n<!-- more -->\n\n## 数据结构\n\n### STL set\n\n因为 set 会保证容器内元素有序 , 有的题目数据水是可以卡过去的 . 但是 set 只支持单一值 , 即相同值集合只会出现一次 . 但是我们可以使用 multiset (可重集) 解决问题 .\n\n```cpp\n#include <set>\nusing namespace std;\nset<int>s;\ns.count();//某个值元素个数\ns.find();//返回查找指定值的迭代器,不存在返回 end() \ns.insert();//插入元素\ns.erase (val);//删除值为val的元素,返回值为成功删除的元素个数\ns.erase (pos);//删除迭代器pos指向的元素,返回迭代器指向的是set容器中删除元素之后的第一个元素\ns.erase (fir,las);//删除[fir,las)区间内的所有元素\ns.empty();//集合为空返回true\n```\n\n### STL vector\n\n向量 , 以前高中没学到线性代数 , 不知道为什么叫向量来着 . 主要是这个结构 ~~能屈能伸 能大能小 来去自如~~ \n\n<img src=\"https://img.inzamz.top/expression/i-am-lsp-too.jpg\" alt=\"i-am-lsp-too\" style=\"zoom:25%;\" />\n\n其实还能用 sort 排序 . vector 支持直接下标访问 . \n\n```cpp\n#include <vector>\nusing namespace std;\nvector<int>s;//构造一个空的向量\nvector<int>s(n);//构造一个长度为n的向量,初始值均为0\nvector<int>s(s1);//复制已有向量s1构造一个向量\ns.count();//某个值元素个数\ns.find();//返回查找指定值的迭代器,不存在返回 end() \ns.push_back();//在尾部插入元素\ns.erase (pos);//删除迭代器pos指向的元素,返回迭代器指向的是vector容器中删除元素之后的第一个元素\ns.erase (fir,las);//删除[fir,las)区间内的所有元素\ns.empty();//集合为空返回true\ns.pop_back();//删除最后一个数据\ns.size();//返回元素个数\n```\n\n### STL map\n\nmap就是一个映射，能够帮你建立特殊关系，由一个值映射到另一个值。\n\n```cpp\n#include <map>\nusing namespace std;\nmap<int,string>name;\n//插入数据，数组形式会覆盖，insert形式会返回false，无法覆盖\nname[1]=\"keyvalue\";//数组形式\nname.insert(pair<int,string>(1,\"value\"));//使用insert 插入 pair\nname.insert(map<int,string>::value_type(1,\"value\"));//使用insert 插入 value_type\n\nname.size();//获取map插入数据的数量\n\n//删除条目\niterator erase（iterator it);//通过一个条目对象删除\niterator erase（iterator first，iterator last）//删除一个范围\nsize_type erase(const Key&key);//通过关键字删除\n```\n\n\n\n## 好用的函数\n\n### lower_bound & upper_bound\n\n> 函数原型\n\n```cpp\nForwardIterator lower_bound (ForwardIterator first,ForwardIterator last,const T& val);\nForwardIterator lower_bound (ForwardIterator first,ForwardIterator last,const T& val,Compare comp);\n\nForwardIterator upper_bound (ForwardIterator first,ForwardIterator last,const T& val)\nForwardIterator upper_bound (ForwardIterator first,ForwardIterator last,const T& val,Compare comp);\n```\n\n两个函数很像的 , 前提要求数组有序 . lower_bound 就是返回在迭代器 first 与 last 之间第一个大于等于 val 的值的迭代器 . 支持 STL 中的数据结构 , 第一个原型使用底层的 < 运算符 , 第二个支持自定义 cmp 函数 . \n\n而 upper_bound 唯一的区别是要求严格大于 , 仅此而已 . \n\n### sort\n\n这里我只是想说记得第二个参数是结束位置的下一个指针 (或迭代器) . cmp定义的是小于符号 . \n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/STL.md","raw":"---\ntitle: STL的学习笔记\ndate: 2020-12-21 17:11:56\nupdated: 2021-01-26 16:50:26\ntags:\n\t- STL\ncategories:\n\t- ICPC 算法基础\n---\n\nSTL是什么东西 , 我自己手打一个不行吗 ?\n\n<img src=\"https://img.inzamz.top/expression/zhen-xiang.gif\" alt=\"zhen-xiang\" div align=center/> \n\n手打模板是什么东西 , STL真香 , yyds . \n\n参考自百度百科.\n\n<!-- more -->\n\n## 数据结构\n\n### STL set\n\n因为 set 会保证容器内元素有序 , 有的题目数据水是可以卡过去的 . 但是 set 只支持单一值 , 即相同值集合只会出现一次 . 但是我们可以使用 multiset (可重集) 解决问题 .\n\n```cpp\n#include <set>\nusing namespace std;\nset<int>s;\ns.count();//某个值元素个数\ns.find();//返回查找指定值的迭代器,不存在返回 end() \ns.insert();//插入元素\ns.erase (val);//删除值为val的元素,返回值为成功删除的元素个数\ns.erase (pos);//删除迭代器pos指向的元素,返回迭代器指向的是set容器中删除元素之后的第一个元素\ns.erase (fir,las);//删除[fir,las)区间内的所有元素\ns.empty();//集合为空返回true\n```\n\n### STL vector\n\n向量 , 以前高中没学到线性代数 , 不知道为什么叫向量来着 . 主要是这个结构 ~~能屈能伸 能大能小 来去自如~~ \n\n<img src=\"https://img.inzamz.top/expression/i-am-lsp-too.jpg\" alt=\"i-am-lsp-too\" style=\"zoom:25%;\" />\n\n其实还能用 sort 排序 . vector 支持直接下标访问 . \n\n```cpp\n#include <vector>\nusing namespace std;\nvector<int>s;//构造一个空的向量\nvector<int>s(n);//构造一个长度为n的向量,初始值均为0\nvector<int>s(s1);//复制已有向量s1构造一个向量\ns.count();//某个值元素个数\ns.find();//返回查找指定值的迭代器,不存在返回 end() \ns.push_back();//在尾部插入元素\ns.erase (pos);//删除迭代器pos指向的元素,返回迭代器指向的是vector容器中删除元素之后的第一个元素\ns.erase (fir,las);//删除[fir,las)区间内的所有元素\ns.empty();//集合为空返回true\ns.pop_back();//删除最后一个数据\ns.size();//返回元素个数\n```\n\n### STL map\n\nmap就是一个映射，能够帮你建立特殊关系，由一个值映射到另一个值。\n\n```cpp\n#include <map>\nusing namespace std;\nmap<int,string>name;\n//插入数据，数组形式会覆盖，insert形式会返回false，无法覆盖\nname[1]=\"keyvalue\";//数组形式\nname.insert(pair<int,string>(1,\"value\"));//使用insert 插入 pair\nname.insert(map<int,string>::value_type(1,\"value\"));//使用insert 插入 value_type\n\nname.size();//获取map插入数据的数量\n\n//删除条目\niterator erase（iterator it);//通过一个条目对象删除\niterator erase（iterator first，iterator last）//删除一个范围\nsize_type erase(const Key&key);//通过关键字删除\n```\n\n\n\n## 好用的函数\n\n### lower_bound & upper_bound\n\n> 函数原型\n\n```cpp\nForwardIterator lower_bound (ForwardIterator first,ForwardIterator last,const T& val);\nForwardIterator lower_bound (ForwardIterator first,ForwardIterator last,const T& val,Compare comp);\n\nForwardIterator upper_bound (ForwardIterator first,ForwardIterator last,const T& val)\nForwardIterator upper_bound (ForwardIterator first,ForwardIterator last,const T& val,Compare comp);\n```\n\n两个函数很像的 , 前提要求数组有序 . lower_bound 就是返回在迭代器 first 与 last 之间第一个大于等于 val 的值的迭代器 . 支持 STL 中的数据结构 , 第一个原型使用底层的 < 运算符 , 第二个支持自定义 cmp 函数 . \n\n而 upper_bound 唯一的区别是要求严格大于 , 仅此而已 . \n\n### sort\n\n这里我只是想说记得第二个参数是结束位置的下一个指针 (或迭代器) . cmp定义的是小于符号 . \n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/STL","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uk0002i63jndke46rxe","content":"<p>STL是什么东西 , 我自己手打一个不行吗 ?</p>\n<img src=\"https://img.inzamz.top/expression/zhen-xiang.gif\" alt=\"zhen-xiang\" div align=center/ loading=\"lazy\"> \n\n<p>手打模板是什么东西 , STL真香 , yyds . </p>\n<p>参考自百度百科.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"STL-set\"><a href=\"#STL-set\" class=\"headerlink\" title=\"STL set\"></a>STL set</h3><p>因为 set 会保证容器内元素有序 , 有的题目数据水是可以卡过去的 . 但是 set 只支持单一值 , 即相同值集合只会出现一次 . 但是我们可以使用 multiset (可重集) 解决问题 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//某个值元素个数</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回查找指定值的迭代器,不存在返回 end() </span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除值为val的元素,返回值为成功删除的元素个数</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span> <span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除迭代器pos指向的元素,返回迭代器指向的是set容器中删除元素之后的第一个元素</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span> <span class=\"token punctuation\">(</span>fir<span class=\"token punctuation\">,</span>las<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除[fir,las)区间内的所有元素</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//集合为空返回true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"STL-vector\"><a href=\"#STL-vector\" class=\"headerlink\" title=\"STL vector\"></a>STL vector</h3><p>向量 , 以前高中没学到线性代数 , 不知道为什么叫向量来着 . 主要是这个结构 <del>能屈能伸 能大能小 来去自如</del> </p>\n<img src=\"https://img.inzamz.top/expression/i-am-lsp-too.jpg\" alt=\"i-am-lsp-too\" style=\"zoom:25%;\" / loading=\"lazy\">\n\n<p>其实还能用 sort 排序 . vector 支持直接下标访问 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">;</span><span class=\"token comment\">//构造一个空的向量</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//构造一个长度为n的向量,初始值均为0</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//复制已有向量s1构造一个向量</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//某个值元素个数</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回查找指定值的迭代器,不存在返回 end() </span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在尾部插入元素</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span> <span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除迭代器pos指向的元素,返回迭代器指向的是vector容器中删除元素之后的第一个元素</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span> <span class=\"token punctuation\">(</span>fir<span class=\"token punctuation\">,</span>las<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除[fir,las)区间内的所有元素</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//集合为空返回true</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除最后一个数据</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回元素个数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"STL-map\"><a href=\"#STL-map\" class=\"headerlink\" title=\"STL map\"></a>STL map</h3><p>map就是一个映射，能够帮你建立特殊关系，由一个值映射到另一个值。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span>name<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//插入数据，数组形式会覆盖，insert形式会返回false，无法覆盖</span>\nname<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"keyvalue\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//数组形式</span>\nname<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">pair</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用insert 插入 pair</span>\nname<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用insert 插入 value_type</span>\n\nname<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取map插入数据的数量</span>\n\n<span class=\"token comment\">//删除条目</span>\niterator erase（iterator it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通过一个条目对象删除</span>\niterator erase（iterator first，iterator last）<span class=\"token comment\">//删除一个范围</span>\nsize_type <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Key<span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通过关键字删除</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"好用的函数\"><a href=\"#好用的函数\" class=\"headerlink\" title=\"好用的函数\"></a>好用的函数</h2><h3 id=\"lower-bound-amp-upper-bound\"><a href=\"#lower-bound-amp-upper-bound\" class=\"headerlink\" title=\"lower_bound &amp; upper_bound\"></a>lower_bound &amp; upper_bound</h3><blockquote>\n<p>函数原型</p>\n</blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ForwardIterator <span class=\"token function\">lower_bound</span> <span class=\"token punctuation\">(</span>ForwardIterator first<span class=\"token punctuation\">,</span>ForwardIterator last<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nForwardIterator <span class=\"token function\">lower_bound</span> <span class=\"token punctuation\">(</span>ForwardIterator first<span class=\"token punctuation\">,</span>ForwardIterator last<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">,</span>Compare comp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nForwardIterator <span class=\"token function\">upper_bound</span> <span class=\"token punctuation\">(</span>ForwardIterator first<span class=\"token punctuation\">,</span>ForwardIterator last<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">)</span>\nForwardIterator <span class=\"token function\">upper_bound</span> <span class=\"token punctuation\">(</span>ForwardIterator first<span class=\"token punctuation\">,</span>ForwardIterator last<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">,</span>Compare comp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>两个函数很像的 , 前提要求数组有序 . lower_bound 就是返回在迭代器 first 与 last 之间第一个大于等于 val 的值的迭代器 . 支持 STL 中的数据结构 , 第一个原型使用底层的 &lt; 运算符 , 第二个支持自定义 cmp 函数 . </p>\n<p>而 upper_bound 唯一的区别是要求严格大于 , 仅此而已 . </p>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><p>这里我只是想说记得第二个参数是结束位置的下一个指针 (或迭代器) . cmp定义的是小于符号 . </p>\n<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>STL是什么东西 , 我自己手打一个不行吗 ?</p>\n<img src=\"https://img.inzamz.top/expression/zhen-xiang.gif\" alt=\"zhen-xiang\" div align=center/> \n\n<p>手打模板是什么东西 , STL真香 , yyds . </p>\n<p>参考自百度百科.</p>","more":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"STL-set\"><a href=\"#STL-set\" class=\"headerlink\" title=\"STL set\"></a>STL set</h3><p>因为 set 会保证容器内元素有序 , 有的题目数据水是可以卡过去的 . 但是 set 只支持单一值 , 即相同值集合只会出现一次 . 但是我们可以使用 multiset (可重集) 解决问题 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//某个值元素个数</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回查找指定值的迭代器,不存在返回 end() </span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//插入元素</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除值为val的元素,返回值为成功删除的元素个数</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span> <span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除迭代器pos指向的元素,返回迭代器指向的是set容器中删除元素之后的第一个元素</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span> <span class=\"token punctuation\">(</span>fir<span class=\"token punctuation\">,</span>las<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除[fir,las)区间内的所有元素</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//集合为空返回true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"STL-vector\"><a href=\"#STL-vector\" class=\"headerlink\" title=\"STL vector\"></a>STL vector</h3><p>向量 , 以前高中没学到线性代数 , 不知道为什么叫向量来着 . 主要是这个结构 <del>能屈能伸 能大能小 来去自如</del> </p>\n<img src=\"https://img.inzamz.top/expression/i-am-lsp-too.jpg\" alt=\"i-am-lsp-too\" style=\"zoom:25%;\" />\n\n<p>其实还能用 sort 排序 . vector 支持直接下标访问 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">;</span><span class=\"token comment\">//构造一个空的向量</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//构造一个长度为n的向量,初始值均为0</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//复制已有向量s1构造一个向量</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//某个值元素个数</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回查找指定值的迭代器,不存在返回 end() </span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在尾部插入元素</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span> <span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除迭代器pos指向的元素,返回迭代器指向的是vector容器中删除元素之后的第一个元素</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span> <span class=\"token punctuation\">(</span>fir<span class=\"token punctuation\">,</span>las<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除[fir,las)区间内的所有元素</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//集合为空返回true</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除最后一个数据</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回元素个数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"STL-map\"><a href=\"#STL-map\" class=\"headerlink\" title=\"STL map\"></a>STL map</h3><p>map就是一个映射，能够帮你建立特殊关系，由一个值映射到另一个值。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span>name<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//插入数据，数组形式会覆盖，insert形式会返回false，无法覆盖</span>\nname<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"keyvalue\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//数组形式</span>\nname<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">pair</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用insert 插入 pair</span>\nname<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用insert 插入 value_type</span>\n\nname<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取map插入数据的数量</span>\n\n<span class=\"token comment\">//删除条目</span>\niterator erase（iterator it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通过一个条目对象删除</span>\niterator erase（iterator first，iterator last）<span class=\"token comment\">//删除一个范围</span>\nsize_type <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Key<span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//通过关键字删除</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"好用的函数\"><a href=\"#好用的函数\" class=\"headerlink\" title=\"好用的函数\"></a>好用的函数</h2><h3 id=\"lower-bound-amp-upper-bound\"><a href=\"#lower-bound-amp-upper-bound\" class=\"headerlink\" title=\"lower_bound &amp; upper_bound\"></a>lower_bound &amp; upper_bound</h3><blockquote>\n<p>函数原型</p>\n</blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ForwardIterator <span class=\"token function\">lower_bound</span> <span class=\"token punctuation\">(</span>ForwardIterator first<span class=\"token punctuation\">,</span>ForwardIterator last<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nForwardIterator <span class=\"token function\">lower_bound</span> <span class=\"token punctuation\">(</span>ForwardIterator first<span class=\"token punctuation\">,</span>ForwardIterator last<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">,</span>Compare comp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nForwardIterator <span class=\"token function\">upper_bound</span> <span class=\"token punctuation\">(</span>ForwardIterator first<span class=\"token punctuation\">,</span>ForwardIterator last<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">)</span>\nForwardIterator <span class=\"token function\">upper_bound</span> <span class=\"token punctuation\">(</span>ForwardIterator first<span class=\"token punctuation\">,</span>ForwardIterator last<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">,</span>Compare comp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>两个函数很像的 , 前提要求数组有序 . lower_bound 就是返回在迭代器 first 与 last 之间第一个大于等于 val 的值的迭代器 . 支持 STL 中的数据结构 , 第一个原型使用底层的 &lt; 运算符 , 第二个支持自定义 cmp 函数 . </p>\n<p>而 upper_bound 唯一的区别是要求严格大于 , 仅此而已 . </p>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><p>这里我只是想说记得第二个参数是结束位置的下一个指针 (或迭代器) . cmp定义的是小于符号 . </p>\n<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"线段树","date":"2020-12-15T08:13:39.000Z","_content":"其实昨天晚上写了一晚上 , 没有标记的线段树写好了 , 但是加上标记对储存的定义并不准确 , 导致最后没写完 . 然后最气的就是下午写了一个下午 , 死活找不到bug , 终于在折腾了4小时后 , 找到万恶之源 : define ! ! ! 对此我不由得感慨\n> # define需谨慎 , 括号别吝啬\n\n<!-- more -->\n\n线段树只是其中一种叫法而已 , 也叫区间树范围树 . 顾名思义 , 线段树可以解决区间上的问题 , 例如区间最值和区间求和 , 最重要的是支持动态修改 . 你可以对某个区间的值加上某个值 .\n\n# 基本学习\n\n主要是最基础的 , 线段树的精髓不止于此 .\n\n## 原理简述\n\n线段树将一个区间的信息储存在一个节点上 , 而该节点的两个子节点储存左半部分与右半部分的信息 . 信息就是区间和或最值 . 这样我们得到了一个二叉树 , 它每个节点都代表一段线段(区间) , 最底层就是每一个数据了 .\n\n<img src=\"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/article/segment-tree-01.png\" alt=\"segment-tree-01\" style=\"zoom: 80%;\" />\n\n这样我们询问的时候 , 遇到大的区间便不用访问子结点 , 直接读取便可以了 . 大大减少时间 , 而对区间的操作也是可以直接在区间上作标记 , 从而暂时不用修改子结点的值 . ( 因为有的区间修改后对后面的查询操作根本没有影响 , 没必要更新子结点的值 ). 下面以 [LuoguP3372](https://www.luogu.com.cn/problem/P3372) 为例 .\n\n## 建树 : Build\n\n怎么建立线段树呢 ? 我是用数组 , 其实你可以使用结构体 , 有时更直观 . 根据题目 , 这是求和题目 , 因此递归建树 , 在递归边界(叶子节点)直接赋值 , 回溯的时候更新父节点的值 .\n\n```cpp\n#define lo o*2//左儿子\n#define ro o*2+1//右儿子\nvoid build(ll o,ll L,ll R)\n{\n\tadd[o]=0;\n\tif (L==R) {\tsum[o]=num[L];\treturn ;}\n\tll M=(L+R)/2;\n\tbuild(lo,L,M);\n\tbuild(ro,M+1,R);\n\tsum[o]=sum[lo]+sum[ro];//相应改成max,min操作即可\n}\n```\n\n## 维护 : Update (未优化)\n\n> 对区间 ql , qr 上的数都加上 k .\n\n就是加上一个数 . 我们递归查找 , 如果区间完全在需要修改的区间中 , 我们就对它的整棵子树进行修改 .否则 , 递归找到符合条件的所有子区间 . 递归结束更新父节点值 . \n\n```cpp\nvoid addval(int o,int L,int R)\n{\n\tif (L==R) {\n\t\tsum[o]+=k;\n\t\treturn ;\n\t}\n\telse if (ql<=L && R<=qr) {\n\t\taddval(o*2,L,M);\n\t\taddval(o*2+1,M+1,R);\n\t\tsum[o]=sum[o*2]+sum[o*2+1];\n\t\treturn ;\n\t}\n\tif (M >= ql) {\n\t\taddval(o*2,L,M);\n\t}\n\tif (M < qr) {\n\t\taddval(o*2+1,M+1,R);\n\t}\n\tsum[o]=sum[o*2]+sum[o*2+1];\n}\n```\n\n## 查询 : Query\n\n> 询问区间 ql qr 间数的和 \n\n同理 , 判断区间是不是完全在询问区间中 , 否则递归在子区间中寻找 .\n\n```cpp\nll getsum(int o,int L,int R)\n{\n\tll ans=0;\n\tif ( ql<=L && R<=qr ) return sum[o];\n\tif ( M >= ql ) ans+=getsum(o*2,L,M);\n\tif ( M < qr ) ans+=getsum(o*2+1,M+1,R);\n\treturn ans;\n}\n```\n\n## 优化 : Pushdown()\n\n于是你觉得你会了 , 说这有什么难得 ,交上去后 :\n\n![TLE](https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/expression/TLE.gif)\n\n线段树的精髓一个在携带信息 , 另一个就是延迟标记 . 因为区间操作后不一定需要立刻递归更新子结点 . 因此我们用一个延迟标记 , 记录我的子树要加上这么多 , 但是我暂时不加 , 我只更新我这个区间的值 . 如果你需要整个区间 , 那直接使用就好了 , 只有当需要用到我的子结点时才把延迟标记更新到子节点 , 也就是接下来的 pushdown 操作.\n\n> 如果是使用整个区间 , 那么没必要更新子结点的值 , 直接读取该区间的值就好了\n>\n> 如果要使用这个区间的一部分 , 那就要求保证子结点的sum是准确的 , 在父节点记录的加法应该更新了 .\n\n因此sum记录的值不再是真实的值了 , 而是执行了自身和它的子树的延迟标记后的sum . 但是他没有执行父节点的延迟标记.\n\npushdown操作就是把父亲的延迟标记传给儿子 , 并且更新儿子节点的值 . 传过以后自然就可以归零了 . 当你要递归到子区间就要用 .\n\n```cpp\nvoid pushdown(ll o,ll L,ll R)\n{\n\tll M=(L+R)/2;\n        add[lo]+=add[o];\n        add[ro]+=add[o];\n        sum[lo]+=len(L,M)*add[o];\n        sum[ro]+=len(M+1,R)*add[o];\n        add[o]=0;\n}\n```\n\n现在更新值也不用遍历整棵树了 , 做好标记即可 . \n\n```cpp\nvoid addval(ll o,ll L,ll R)\n{\n\tif (ql<=L && R<=qr) {\n\t\tsum[o]+=k*len(L,R);\n\t\tadd[o]+=k;\n\t\treturn ;\n\t}\n\tpushdown(o,L,R);//你要递归子树,就要把pushdown父节点的值\n\tll M=(L+R)/2;\n\tif( M >= ql ) addval(lo,L,M);\n\tif ( qr > M ) addval(ro,M+1,R);\n\tsum[o]=sum[lo]+sum[ro];//结尾更新新的节点值\n}\n```\n\n求和也是进入子区间记得pushdown\n\n```cpp\nll getsum(ll o,ll L,ll R)\n{\n\tll res=0;\n\tif (ql<=L && R<=qr) {\n\t\treturn sum[o];\n\t}\n\tpushdown(o,L,R);\n\tll M=(L+R)/2;\n\tif ( M >= ql) res+=getsum(lo,L,M);\n\tif ( M < qr ) res+=getsum(ro,M+1,R);\n\treturn res;\n}\n```\n\n## 完整代码\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\n\ntypedef long long ll;\nll sum[400000],add[400000],num[100010],k,ans;\nll n,m,qr,ql;\n\n#define lo 2*o\n#define ro 2*o+1\n#define len(a,b) ((b)-(a)+1)\n\nvoid build(ll o,ll L,ll R)\n{\n\tadd[o]=0;\n\tif (L==R) {\tsum[o]=num[L];\treturn ;}\n\tll M=(L+R)/2;\n\tbuild(lo,L,M);\n\tbuild(ro,M+1,R);\n\tsum[o]=sum[lo]+sum[ro];\n}\n\nvoid pushdown(ll o,ll L,ll R)\n{\n\tll M=(L+R)/2;\n    add[lo]+=add[o];\n    add[ro]+=add[o];\n    sum[lo]+=len(L,M)*add[o];\n    sum[ro]+=len(M+1,R)*add[o];\n    add[o]=0;\n}\n\nll getsum(ll o,ll L,ll R)\n{\n\tll res=0;\n\tif (ql<=L && R<=qr) {\n\t\treturn sum[o];\n\t}\n\tpushdown(o,L,R);\n\tll M=(L+R)/2;\n\tif ( M >= ql) res+=getsum(lo,L,M);\n\tif ( M < qr ) res+=getsum(ro,M+1,R);\n\treturn res;\n}\n\nvoid addval(ll o,ll L,ll R)\n{\n\tif (ql<=L && R<=qr) {\n\t\tsum[o]+=k*len(L,R);\n\t\tadd[o]+=k;\n\t\treturn ;\n\t}\n\tpushdown(o,L,R);\n\tll M=(L+R)/2;\n\tif( M >= ql ) addval(lo,L,M);\n\tif ( qr > M ) addval(ro,M+1,R);\n\tsum[o]=sum[lo]+sum[ro];\n}\n\nint main()\n{\n\tscanf (\"%lld %lld\",&n,&m);\n\tfor (int i=1;i<=n;i++){\n\t\tscanf (\"%lld\",&num[i]);\n\t}\n\tbuild(1,1,n);\n\tfor (int i=1;i<=m;i++){\n\t\tll op;\n\t\tscanf (\"%lld %lld %lld\",&op,&ql,&qr);\n\t\tif (ql>qr) swap(ql,qr);\n        \n\t\tif (op==2){\n\t\t\tans=getsum(1,1,n);\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n        \n\t\tif (op==1) {\n\t\t\tscanf (\"%lld\",&k);\n\t\t\taddval(1,1,n);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n## 题外话 : Define引发的血案\n\n其实正解我是想到了的 , 但是由于我打算放弃改没有延迟标记的代码 , 直接重写 , 想着偷懒就来了点宏定义 , 然后就出问题了 . \n\n```cpp\n#define M (L+R)/2\n#define len(a,b) (b-a+1)\n```\n\n上面已经错了 . 考虑 $ len( M+1 , R ) $\n$$\n\\begin{aligned}\nlen(M+1,R)&=R-M+1+1=R-M+2 \\\\&\\not=R-(M+1)+1=R-M\n\\end{aligned}\n$$\n原因就是define只是单纯的文字替换 , 所以会有问题 . 解决方案就是多加括号 . \n\n![look-at-me](https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/expression/look-at-me.jpg)\n\n# 其他应用\n\n线段树的精髓是你给节点的附加信息 , 你可以给更复杂的信息 , 这样用处会更广泛 , ~~延迟标记也更难处理~~ . 这个挖个坑 , 以后再补 .\n\n## [LuoguP3373](https://www.luogu.com.cn/problem/P3373)\n\n### 解题思路\n\n因为多了乘法操作，延迟标记应该不太够，所以用两个。但是有个pushdown时运算的优先问题，是先乘后加，还是先加后乘。\n\n> 对于一个节点，我们同时储存了乘和加，但不知道乘法和加法的先后，所以每一次pushdown我们要保证按照我们规定的顺序最后得到的是正确的。\n>\n> - 先乘后加：我们要保证结果正确，当有一个数在加法延迟标记中，说明在乘法前有加上一个数，那我们只需要让加上的数乘以现在要乘的数就好了。\n> - 先加后乘：同理我们要加上一个数，发现之前乘过一个数了，你直接加到加法延迟标记上，后面会乘以一个数，就会导致结果错误。所以你要把加的数除以现在乘法延迟标记的数。出现除法会很难受，会有小数，所以是不好的。\n\n```cpp\n#include <cstdio>\n#include<iostream>\nusing namespace std;\n\n#define M ((l+r)/2)\n#define lo (o*2)\n#define ro (o*2+1)\n#define len(a,b) ((b)-(a)+1)\n\ntypedef long long ll;\nll m,n,p,x,y,k,op;\nll sum[400010],lazy1[400010],lazy2[400010],num[100010];\n\nvoid build(int o,int l,int r)\n{\n\tlazy1[o]=1;\n\tif (l==r) {\tsum[o]=num[l]%p;\treturn ;}\n\tbuild(lo,l,M);\n\tbuild(ro,M+1,r);\n\tsum[o]=(sum[lo]+sum[ro])%p;\n}\n\nvoid pushdown(int o,int l,int r)\n{\n\tlazy1[lo]*=lazy1[o];\tlazy1[lo]%=p;\n\tlazy1[ro]*=lazy1[o];\tlazy1[ro]%=p;\n\tlazy2[lo]=lazy2[lo]*lazy1[o]+lazy2[o];\tlazy2[lo]%=p;\n\tlazy2[ro]=lazy2[ro]*lazy1[o]+lazy2[o];\tlazy2[ro]%=p;\n\tsum[lo]=((sum[lo]*lazy1[o])+lazy2[o]*len(l,M))%p;\n\tsum[ro]=((sum[ro]*lazy1[o])+lazy2[o]*len(M+1,r))%p;\n\tlazy1[o]=1;\n\tlazy2[o]=0;\n}\n\nll getsum(int o,int l,int r)\n{\n\tll res=0;\n\tif (x<=l && r<=y) return sum[o]%p;\n\tpushdown(o,l,r);\n\tif ( M >= x) {\n\t\tres+=getsum(lo,l,M);\n\t\tres%=p;\n\t}\n\tif ( M < y) {\n\t\tres+=getsum(ro,M+1,r);\n\t\tres%=p;\n\t}\n\treturn res%p;\n}\n\nvoid addval(int o,int l,int r)\n{\n\tif (x<=l && r<=y) {\n\t\tsum[o]=(sum[o]+k*len(l,r))%p;\n\t\tlazy2[o]+=k;\tlazy2[o]%=p;\n\t\treturn ;\n\t}\n\tpushdown(o,l,r);\n\tif ( M >= x ) addval(lo,l,M);\n\tif ( M < y ) addval(ro,M+1,r);\n\tsum[o]=sum[lo]+sum[ro];\n\tsum[o]%=p;\n}\n\nvoid multival(int o,int l,int r)\n{\n\tif (x<=l && r<=y) {\n\t\tsum[o]=(sum[o]*k)%p;\n\t\tlazy1[o]*=k;lazy1[o]%=p;\n\t\tlazy2[o]*=k;lazy2[o]%=p;\n\t\treturn ;\n\t}\n\tpushdown(o,l,r);\n\tif ( M >= x) multival(lo,l,M);\n\tif ( M < y) multival(ro,M+1,r);\n\tsum[o]=sum[lo]+sum[ro];\n\tsum[o]%=p;\n}\n\nint main()\n{\n\tscanf (\"%lld%lld%lld\",&n,&m,&p);\n\tfor(int i=1;i<=n;i++) scanf (\"%lld\",&num[i]);\n\tbuild(1,1,n);\n\twhile (m--)\n\t{\n\t\tscanf (\"%lld%lld%lld\",&op,&x,&y);\n\t\tif (x>y) swap(x,y);\n\t\tif (op==1 || op==2) {\n\t\t\tscanf (\"%lld\",&k);\n\t\t\tif (op==1) multival(1,1,n);\n\t\t\telse addval(1,1,n);\n\t\t}\n\t\tif (op==3) printf(\"%lld\\n\",getsum(1,1,n));\n\t}\n\treturn 0;\n}\n```\n\n### 题外话：我又在什么地方犯傻\n\n> 这次是输入m，n搞反了，请求数和元素数量反了。所以只有m和n相等的数据过了。\n\nTo Be Continued.\n\n<!-- Q.E.D. -->\n\n","source":"_posts/XCPC/SegmentTree.md","raw":"---\ntitle: 线段树\ndate: 2020-12-15 16:13:39\ntags:\n\t- 线段树\ncategories:\n\t- ICPC 数据结构\n---\n其实昨天晚上写了一晚上 , 没有标记的线段树写好了 , 但是加上标记对储存的定义并不准确 , 导致最后没写完 . 然后最气的就是下午写了一个下午 , 死活找不到bug , 终于在折腾了4小时后 , 找到万恶之源 : define ! ! ! 对此我不由得感慨\n> # define需谨慎 , 括号别吝啬\n\n<!-- more -->\n\n线段树只是其中一种叫法而已 , 也叫区间树范围树 . 顾名思义 , 线段树可以解决区间上的问题 , 例如区间最值和区间求和 , 最重要的是支持动态修改 . 你可以对某个区间的值加上某个值 .\n\n# 基本学习\n\n主要是最基础的 , 线段树的精髓不止于此 .\n\n## 原理简述\n\n线段树将一个区间的信息储存在一个节点上 , 而该节点的两个子节点储存左半部分与右半部分的信息 . 信息就是区间和或最值 . 这样我们得到了一个二叉树 , 它每个节点都代表一段线段(区间) , 最底层就是每一个数据了 .\n\n<img src=\"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/article/segment-tree-01.png\" alt=\"segment-tree-01\" style=\"zoom: 80%;\" />\n\n这样我们询问的时候 , 遇到大的区间便不用访问子结点 , 直接读取便可以了 . 大大减少时间 , 而对区间的操作也是可以直接在区间上作标记 , 从而暂时不用修改子结点的值 . ( 因为有的区间修改后对后面的查询操作根本没有影响 , 没必要更新子结点的值 ). 下面以 [LuoguP3372](https://www.luogu.com.cn/problem/P3372) 为例 .\n\n## 建树 : Build\n\n怎么建立线段树呢 ? 我是用数组 , 其实你可以使用结构体 , 有时更直观 . 根据题目 , 这是求和题目 , 因此递归建树 , 在递归边界(叶子节点)直接赋值 , 回溯的时候更新父节点的值 .\n\n```cpp\n#define lo o*2//左儿子\n#define ro o*2+1//右儿子\nvoid build(ll o,ll L,ll R)\n{\n\tadd[o]=0;\n\tif (L==R) {\tsum[o]=num[L];\treturn ;}\n\tll M=(L+R)/2;\n\tbuild(lo,L,M);\n\tbuild(ro,M+1,R);\n\tsum[o]=sum[lo]+sum[ro];//相应改成max,min操作即可\n}\n```\n\n## 维护 : Update (未优化)\n\n> 对区间 ql , qr 上的数都加上 k .\n\n就是加上一个数 . 我们递归查找 , 如果区间完全在需要修改的区间中 , 我们就对它的整棵子树进行修改 .否则 , 递归找到符合条件的所有子区间 . 递归结束更新父节点值 . \n\n```cpp\nvoid addval(int o,int L,int R)\n{\n\tif (L==R) {\n\t\tsum[o]+=k;\n\t\treturn ;\n\t}\n\telse if (ql<=L && R<=qr) {\n\t\taddval(o*2,L,M);\n\t\taddval(o*2+1,M+1,R);\n\t\tsum[o]=sum[o*2]+sum[o*2+1];\n\t\treturn ;\n\t}\n\tif (M >= ql) {\n\t\taddval(o*2,L,M);\n\t}\n\tif (M < qr) {\n\t\taddval(o*2+1,M+1,R);\n\t}\n\tsum[o]=sum[o*2]+sum[o*2+1];\n}\n```\n\n## 查询 : Query\n\n> 询问区间 ql qr 间数的和 \n\n同理 , 判断区间是不是完全在询问区间中 , 否则递归在子区间中寻找 .\n\n```cpp\nll getsum(int o,int L,int R)\n{\n\tll ans=0;\n\tif ( ql<=L && R<=qr ) return sum[o];\n\tif ( M >= ql ) ans+=getsum(o*2,L,M);\n\tif ( M < qr ) ans+=getsum(o*2+1,M+1,R);\n\treturn ans;\n}\n```\n\n## 优化 : Pushdown()\n\n于是你觉得你会了 , 说这有什么难得 ,交上去后 :\n\n![TLE](https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/expression/TLE.gif)\n\n线段树的精髓一个在携带信息 , 另一个就是延迟标记 . 因为区间操作后不一定需要立刻递归更新子结点 . 因此我们用一个延迟标记 , 记录我的子树要加上这么多 , 但是我暂时不加 , 我只更新我这个区间的值 . 如果你需要整个区间 , 那直接使用就好了 , 只有当需要用到我的子结点时才把延迟标记更新到子节点 , 也就是接下来的 pushdown 操作.\n\n> 如果是使用整个区间 , 那么没必要更新子结点的值 , 直接读取该区间的值就好了\n>\n> 如果要使用这个区间的一部分 , 那就要求保证子结点的sum是准确的 , 在父节点记录的加法应该更新了 .\n\n因此sum记录的值不再是真实的值了 , 而是执行了自身和它的子树的延迟标记后的sum . 但是他没有执行父节点的延迟标记.\n\npushdown操作就是把父亲的延迟标记传给儿子 , 并且更新儿子节点的值 . 传过以后自然就可以归零了 . 当你要递归到子区间就要用 .\n\n```cpp\nvoid pushdown(ll o,ll L,ll R)\n{\n\tll M=(L+R)/2;\n        add[lo]+=add[o];\n        add[ro]+=add[o];\n        sum[lo]+=len(L,M)*add[o];\n        sum[ro]+=len(M+1,R)*add[o];\n        add[o]=0;\n}\n```\n\n现在更新值也不用遍历整棵树了 , 做好标记即可 . \n\n```cpp\nvoid addval(ll o,ll L,ll R)\n{\n\tif (ql<=L && R<=qr) {\n\t\tsum[o]+=k*len(L,R);\n\t\tadd[o]+=k;\n\t\treturn ;\n\t}\n\tpushdown(o,L,R);//你要递归子树,就要把pushdown父节点的值\n\tll M=(L+R)/2;\n\tif( M >= ql ) addval(lo,L,M);\n\tif ( qr > M ) addval(ro,M+1,R);\n\tsum[o]=sum[lo]+sum[ro];//结尾更新新的节点值\n}\n```\n\n求和也是进入子区间记得pushdown\n\n```cpp\nll getsum(ll o,ll L,ll R)\n{\n\tll res=0;\n\tif (ql<=L && R<=qr) {\n\t\treturn sum[o];\n\t}\n\tpushdown(o,L,R);\n\tll M=(L+R)/2;\n\tif ( M >= ql) res+=getsum(lo,L,M);\n\tif ( M < qr ) res+=getsum(ro,M+1,R);\n\treturn res;\n}\n```\n\n## 完整代码\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\n\ntypedef long long ll;\nll sum[400000],add[400000],num[100010],k,ans;\nll n,m,qr,ql;\n\n#define lo 2*o\n#define ro 2*o+1\n#define len(a,b) ((b)-(a)+1)\n\nvoid build(ll o,ll L,ll R)\n{\n\tadd[o]=0;\n\tif (L==R) {\tsum[o]=num[L];\treturn ;}\n\tll M=(L+R)/2;\n\tbuild(lo,L,M);\n\tbuild(ro,M+1,R);\n\tsum[o]=sum[lo]+sum[ro];\n}\n\nvoid pushdown(ll o,ll L,ll R)\n{\n\tll M=(L+R)/2;\n    add[lo]+=add[o];\n    add[ro]+=add[o];\n    sum[lo]+=len(L,M)*add[o];\n    sum[ro]+=len(M+1,R)*add[o];\n    add[o]=0;\n}\n\nll getsum(ll o,ll L,ll R)\n{\n\tll res=0;\n\tif (ql<=L && R<=qr) {\n\t\treturn sum[o];\n\t}\n\tpushdown(o,L,R);\n\tll M=(L+R)/2;\n\tif ( M >= ql) res+=getsum(lo,L,M);\n\tif ( M < qr ) res+=getsum(ro,M+1,R);\n\treturn res;\n}\n\nvoid addval(ll o,ll L,ll R)\n{\n\tif (ql<=L && R<=qr) {\n\t\tsum[o]+=k*len(L,R);\n\t\tadd[o]+=k;\n\t\treturn ;\n\t}\n\tpushdown(o,L,R);\n\tll M=(L+R)/2;\n\tif( M >= ql ) addval(lo,L,M);\n\tif ( qr > M ) addval(ro,M+1,R);\n\tsum[o]=sum[lo]+sum[ro];\n}\n\nint main()\n{\n\tscanf (\"%lld %lld\",&n,&m);\n\tfor (int i=1;i<=n;i++){\n\t\tscanf (\"%lld\",&num[i]);\n\t}\n\tbuild(1,1,n);\n\tfor (int i=1;i<=m;i++){\n\t\tll op;\n\t\tscanf (\"%lld %lld %lld\",&op,&ql,&qr);\n\t\tif (ql>qr) swap(ql,qr);\n        \n\t\tif (op==2){\n\t\t\tans=getsum(1,1,n);\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n        \n\t\tif (op==1) {\n\t\t\tscanf (\"%lld\",&k);\n\t\t\taddval(1,1,n);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n## 题外话 : Define引发的血案\n\n其实正解我是想到了的 , 但是由于我打算放弃改没有延迟标记的代码 , 直接重写 , 想着偷懒就来了点宏定义 , 然后就出问题了 . \n\n```cpp\n#define M (L+R)/2\n#define len(a,b) (b-a+1)\n```\n\n上面已经错了 . 考虑 $ len( M+1 , R ) $\n$$\n\\begin{aligned}\nlen(M+1,R)&=R-M+1+1=R-M+2 \\\\&\\not=R-(M+1)+1=R-M\n\\end{aligned}\n$$\n原因就是define只是单纯的文字替换 , 所以会有问题 . 解决方案就是多加括号 . \n\n![look-at-me](https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/expression/look-at-me.jpg)\n\n# 其他应用\n\n线段树的精髓是你给节点的附加信息 , 你可以给更复杂的信息 , 这样用处会更广泛 , ~~延迟标记也更难处理~~ . 这个挖个坑 , 以后再补 .\n\n## [LuoguP3373](https://www.luogu.com.cn/problem/P3373)\n\n### 解题思路\n\n因为多了乘法操作，延迟标记应该不太够，所以用两个。但是有个pushdown时运算的优先问题，是先乘后加，还是先加后乘。\n\n> 对于一个节点，我们同时储存了乘和加，但不知道乘法和加法的先后，所以每一次pushdown我们要保证按照我们规定的顺序最后得到的是正确的。\n>\n> - 先乘后加：我们要保证结果正确，当有一个数在加法延迟标记中，说明在乘法前有加上一个数，那我们只需要让加上的数乘以现在要乘的数就好了。\n> - 先加后乘：同理我们要加上一个数，发现之前乘过一个数了，你直接加到加法延迟标记上，后面会乘以一个数，就会导致结果错误。所以你要把加的数除以现在乘法延迟标记的数。出现除法会很难受，会有小数，所以是不好的。\n\n```cpp\n#include <cstdio>\n#include<iostream>\nusing namespace std;\n\n#define M ((l+r)/2)\n#define lo (o*2)\n#define ro (o*2+1)\n#define len(a,b) ((b)-(a)+1)\n\ntypedef long long ll;\nll m,n,p,x,y,k,op;\nll sum[400010],lazy1[400010],lazy2[400010],num[100010];\n\nvoid build(int o,int l,int r)\n{\n\tlazy1[o]=1;\n\tif (l==r) {\tsum[o]=num[l]%p;\treturn ;}\n\tbuild(lo,l,M);\n\tbuild(ro,M+1,r);\n\tsum[o]=(sum[lo]+sum[ro])%p;\n}\n\nvoid pushdown(int o,int l,int r)\n{\n\tlazy1[lo]*=lazy1[o];\tlazy1[lo]%=p;\n\tlazy1[ro]*=lazy1[o];\tlazy1[ro]%=p;\n\tlazy2[lo]=lazy2[lo]*lazy1[o]+lazy2[o];\tlazy2[lo]%=p;\n\tlazy2[ro]=lazy2[ro]*lazy1[o]+lazy2[o];\tlazy2[ro]%=p;\n\tsum[lo]=((sum[lo]*lazy1[o])+lazy2[o]*len(l,M))%p;\n\tsum[ro]=((sum[ro]*lazy1[o])+lazy2[o]*len(M+1,r))%p;\n\tlazy1[o]=1;\n\tlazy2[o]=0;\n}\n\nll getsum(int o,int l,int r)\n{\n\tll res=0;\n\tif (x<=l && r<=y) return sum[o]%p;\n\tpushdown(o,l,r);\n\tif ( M >= x) {\n\t\tres+=getsum(lo,l,M);\n\t\tres%=p;\n\t}\n\tif ( M < y) {\n\t\tres+=getsum(ro,M+1,r);\n\t\tres%=p;\n\t}\n\treturn res%p;\n}\n\nvoid addval(int o,int l,int r)\n{\n\tif (x<=l && r<=y) {\n\t\tsum[o]=(sum[o]+k*len(l,r))%p;\n\t\tlazy2[o]+=k;\tlazy2[o]%=p;\n\t\treturn ;\n\t}\n\tpushdown(o,l,r);\n\tif ( M >= x ) addval(lo,l,M);\n\tif ( M < y ) addval(ro,M+1,r);\n\tsum[o]=sum[lo]+sum[ro];\n\tsum[o]%=p;\n}\n\nvoid multival(int o,int l,int r)\n{\n\tif (x<=l && r<=y) {\n\t\tsum[o]=(sum[o]*k)%p;\n\t\tlazy1[o]*=k;lazy1[o]%=p;\n\t\tlazy2[o]*=k;lazy2[o]%=p;\n\t\treturn ;\n\t}\n\tpushdown(o,l,r);\n\tif ( M >= x) multival(lo,l,M);\n\tif ( M < y) multival(ro,M+1,r);\n\tsum[o]=sum[lo]+sum[ro];\n\tsum[o]%=p;\n}\n\nint main()\n{\n\tscanf (\"%lld%lld%lld\",&n,&m,&p);\n\tfor(int i=1;i<=n;i++) scanf (\"%lld\",&num[i]);\n\tbuild(1,1,n);\n\twhile (m--)\n\t{\n\t\tscanf (\"%lld%lld%lld\",&op,&x,&y);\n\t\tif (x>y) swap(x,y);\n\t\tif (op==1 || op==2) {\n\t\t\tscanf (\"%lld\",&k);\n\t\t\tif (op==1) multival(1,1,n);\n\t\t\telse addval(1,1,n);\n\t\t}\n\t\tif (op==3) printf(\"%lld\\n\",getsum(1,1,n));\n\t}\n\treturn 0;\n}\n```\n\n### 题外话：我又在什么地方犯傻\n\n> 这次是输入m，n搞反了，请求数和元素数量反了。所以只有m和n相等的数据过了。\n\nTo Be Continued.\n\n<!-- Q.E.D. -->\n\n","slug":"XCPC/SegmentTree","published":1,"updated":"2021-06-26T15:47:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uk1002m63jnh2obbpma","content":"<p>其实昨天晚上写了一晚上 , 没有标记的线段树写好了 , 但是加上标记对储存的定义并不准确 , 导致最后没写完 . 然后最气的就是下午写了一个下午 , 死活找不到bug , 终于在折腾了4小时后 , 找到万恶之源 : define ! ! ! 对此我不由得感慨</p>\n<blockquote>\n<h1 id=\"define需谨慎-括号别吝啬\"><a href=\"#define需谨慎-括号别吝啬\" class=\"headerlink\" title=\"define需谨慎 , 括号别吝啬\"></a>define需谨慎 , 括号别吝啬</h1></blockquote>\n<span id=\"more\"></span>\n\n<p>线段树只是其中一种叫法而已 , 也叫区间树范围树 . 顾名思义 , 线段树可以解决区间上的问题 , 例如区间最值和区间求和 , 最重要的是支持动态修改 . 你可以对某个区间的值加上某个值 .</p>\n<h1 id=\"基本学习\"><a href=\"#基本学习\" class=\"headerlink\" title=\"基本学习\"></a>基本学习</h1><p>主要是最基础的 , 线段树的精髓不止于此 .</p>\n<h2 id=\"原理简述\"><a href=\"#原理简述\" class=\"headerlink\" title=\"原理简述\"></a>原理简述</h2><p>线段树将一个区间的信息储存在一个节点上 , 而该节点的两个子节点储存左半部分与右半部分的信息 . 信息就是区间和或最值 . 这样我们得到了一个二叉树 , 它每个节点都代表一段线段(区间) , 最底层就是每一个数据了 .</p>\n<img src=\"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/article/segment-tree-01.png\" alt=\"segment-tree-01\" style=\"zoom: 80%;\" / loading=\"lazy\">\n\n<p>这样我们询问的时候 , 遇到大的区间便不用访问子结点 , 直接读取便可以了 . 大大减少时间 , 而对区间的操作也是可以直接在区间上作标记 , 从而暂时不用修改子结点的值 . ( 因为有的区间修改后对后面的查询操作根本没有影响 , 没必要更新子结点的值 ). 下面以 <a href=\"https://www.luogu.com.cn/problem/P3372\">LuoguP3372</a> 为例 .</p>\n<h2 id=\"建树-Build\"><a href=\"#建树-Build\" class=\"headerlink\" title=\"建树 : Build\"></a>建树 : Build</h2><p>怎么建立线段树呢 ? 我是用数组 , 其实你可以使用结构体 , 有时更直观 . 根据题目 , 这是求和题目 , 因此递归建树 , 在递归边界(叶子节点)直接赋值 , 回溯的时候更新父节点的值 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">lo</span> <span class=\"token expression\">o<span class=\"token operator\">*</span><span class=\"token number\">2</span></span><span class=\"token comment\">//左儿子</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ro</span> <span class=\"token expression\">o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span></span><span class=\"token comment\">//右儿子</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tadd<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">==</span>R<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>num<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//相应改成max,min操作即可</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"维护-Update-未优化\"><a href=\"#维护-Update-未优化\" class=\"headerlink\" title=\"维护 : Update (未优化)\"></a>维护 : Update (未优化)</h2><blockquote>\n<p>对区间 ql , qr 上的数都加上 k .</p>\n</blockquote>\n<p>就是加上一个数 . 我们递归查找 , 如果区间完全在需要修改的区间中 , 我们就对它的整棵子树进行修改 .否则 , 递归找到符合条件的所有子区间 . 递归结束更新父节点值 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">==</span>R<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>k<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql<span class=\"token operator\">&lt;=</span>L <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token operator\">&lt;=</span>qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>M <span class=\"token operator\">>=</span> ql<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>M <span class=\"token operator\">&lt;</span> qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"查询-Query\"><a href=\"#查询-Query\" class=\"headerlink\" title=\"查询 : Query\"></a>查询 : Query</h2><blockquote>\n<p>询问区间 ql qr 间数的和 </p>\n</blockquote>\n<p>同理 , 判断区间是不是完全在询问区间中 , 否则递归在子区间中寻找 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ll <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> ql<span class=\"token operator\">&lt;=</span>L <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token operator\">&lt;=</span>qr <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> ql <span class=\"token punctuation\">)</span> ans<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">&lt;</span> qr <span class=\"token punctuation\">)</span> ans<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"优化-Pushdown\"><a href=\"#优化-Pushdown\" class=\"headerlink\" title=\"优化 : Pushdown()\"></a>优化 : Pushdown()</h2><p>于是你觉得你会了 , 说这有什么难得 ,交上去后 :</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/expression/TLE.gif\" alt=\"TLE\" loading=\"lazy\"></p>\n<p>线段树的精髓一个在携带信息 , 另一个就是延迟标记 . 因为区间操作后不一定需要立刻递归更新子结点 . 因此我们用一个延迟标记 , 记录我的子树要加上这么多 , 但是我暂时不加 , 我只更新我这个区间的值 . 如果你需要整个区间 , 那直接使用就好了 , 只有当需要用到我的子结点时才把延迟标记更新到子节点 , 也就是接下来的 pushdown 操作.</p>\n<blockquote>\n<p>如果是使用整个区间 , 那么没必要更新子结点的值 , 直接读取该区间的值就好了</p>\n<p>如果要使用这个区间的一部分 , 那就要求保证子结点的sum是准确的 , 在父节点记录的加法应该更新了 .</p>\n</blockquote>\n<p>因此sum记录的值不再是真实的值了 , 而是执行了自身和它的子树的延迟标记后的sum . 但是他没有执行父节点的延迟标记.</p>\n<p>pushdown操作就是把父亲的延迟标记传给儿子 , 并且更新儿子节点的值 . 传过以后自然就可以归零了 . 当你要递归到子区间就要用 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        add<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        add<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在更新值也不用遍历整棵树了 , 做好标记即可 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql<span class=\"token operator\">&lt;=</span>L <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token operator\">&lt;=</span>qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>k<span class=\"token operator\">*</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tadd<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>k<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//你要递归子树,就要把pushdown父节点的值</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> ql <span class=\"token punctuation\">)</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> qr <span class=\"token operator\">></span> M <span class=\"token punctuation\">)</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//结尾更新新的节点值</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>求和也是进入子区间记得pushdown</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ll <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql<span class=\"token operator\">&lt;=</span>L <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token operator\">&lt;=</span>qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> ql<span class=\"token punctuation\">)</span> res<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">&lt;</span> qr <span class=\"token punctuation\">)</span> res<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nll sum<span class=\"token punctuation\">[</span><span class=\"token number\">400000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>add<span class=\"token punctuation\">[</span><span class=\"token number\">400000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">100010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span>\nll n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>qr<span class=\"token punctuation\">,</span>ql<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">lo</span> <span class=\"token expression\"><span class=\"token number\">2</span><span class=\"token operator\">*</span>o</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ro</span> <span class=\"token expression\"><span class=\"token number\">2</span><span class=\"token operator\">*</span>o<span class=\"token operator\">+</span><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">len</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tadd<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">==</span>R<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>num<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    add<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    add<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql<span class=\"token operator\">&lt;=</span>L <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token operator\">&lt;=</span>qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> ql<span class=\"token punctuation\">)</span> res<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">&lt;</span> qr <span class=\"token punctuation\">)</span> res<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql<span class=\"token operator\">&lt;=</span>L <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token operator\">&lt;=</span>qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>k<span class=\"token operator\">*</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tadd<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>k<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> ql <span class=\"token punctuation\">)</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> qr <span class=\"token operator\">></span> M <span class=\"token punctuation\">)</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tll op<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ql<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>qr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql<span class=\"token operator\">></span>qr<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>ql<span class=\"token punctuation\">,</span>qr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n        \n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">addval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"题外话-Define引发的血案\"><a href=\"#题外话-Define引发的血案\" class=\"headerlink\" title=\"题外话 : Define引发的血案\"></a>题外话 : Define引发的血案</h2><p>其实正解我是想到了的 , 但是由于我打算放弃改没有延迟标记的代码 , 直接重写 , 想着偷懒就来了点宏定义 , 然后就出问题了 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">M</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">len</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">-</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面已经错了 . 考虑 $ len( M+1 , R ) $<br>$$<br>\\begin{aligned}<br>len(M+1,R)&amp;=R-M+1+1=R-M+2 \\&amp;\\not=R-(M+1)+1=R-M<br>\\end{aligned}<br>$$<br>原因就是define只是单纯的文字替换 , 所以会有问题 . 解决方案就是多加括号 . </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/expression/look-at-me.jpg\" alt=\"look-at-me\" loading=\"lazy\"></p>\n<h1 id=\"其他应用\"><a href=\"#其他应用\" class=\"headerlink\" title=\"其他应用\"></a>其他应用</h1><p>线段树的精髓是你给节点的附加信息 , 你可以给更复杂的信息 , 这样用处会更广泛 , <del>延迟标记也更难处理</del> . 这个挖个坑 , 以后再补 .</p>\n<h2 id=\"LuoguP3373\"><a href=\"#LuoguP3373\" class=\"headerlink\" title=\"LuoguP3373\"></a><a href=\"https://www.luogu.com.cn/problem/P3373\">LuoguP3373</a></h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>因为多了乘法操作，延迟标记应该不太够，所以用两个。但是有个pushdown时运算的优先问题，是先乘后加，还是先加后乘。</p>\n<blockquote>\n<p>对于一个节点，我们同时储存了乘和加，但不知道乘法和加法的先后，所以每一次pushdown我们要保证按照我们规定的顺序最后得到的是正确的。</p>\n<ul>\n<li>先乘后加：我们要保证结果正确，当有一个数在加法延迟标记中，说明在乘法前有加上一个数，那我们只需要让加上的数乘以现在要乘的数就好了。</li>\n<li>先加后乘：同理我们要加上一个数，发现之前乘过一个数了，你直接加到加法延迟标记上，后面会乘以一个数，就会导致结果错误。所以你要把加的数除以现在乘法延迟标记的数。出现除法会很难受，会有小数，所以是不好的。</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">M</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">lo</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ro</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">len</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nll m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>op<span class=\"token punctuation\">;</span>\nll sum<span class=\"token punctuation\">[</span><span class=\"token number\">400010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>lazy1<span class=\"token punctuation\">[</span><span class=\"token number\">400010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>lazy2<span class=\"token punctuation\">[</span><span class=\"token number\">400010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">100010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tlazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>num<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tlazy1<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\tlazy1<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\tlazy1<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\tlazy1<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\tlazy2<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>lazy2<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>lazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\tlazy2<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\tlazy2<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>lazy2<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>lazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\tlazy2<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>lazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>lazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n\tlazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tlazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;=</span>l <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token operator\">&lt;=</span>y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tres<span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tres<span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;=</span>l <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token operator\">&lt;=</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>k<span class=\"token operator\">*</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n\t\tlazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>k<span class=\"token punctuation\">;</span>\tlazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> x <span class=\"token punctuation\">)</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">&lt;</span> y <span class=\"token punctuation\">)</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">multival</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;=</span>l <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token operator\">&lt;=</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n\t\tlazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>k<span class=\"token punctuation\">;</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\t\tlazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>k<span class=\"token punctuation\">;</span>lazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> x<span class=\"token punctuation\">)</span> <span class=\"token function\">multival</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">)</span> <span class=\"token function\">multival</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span>y<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> op<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">multival</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"题外话：我又在什么地方犯傻\"><a href=\"#题外话：我又在什么地方犯傻\" class=\"headerlink\" title=\"题外话：我又在什么地方犯傻\"></a>题外话：我又在什么地方犯傻</h3><blockquote>\n<p>这次是输入m，n搞反了，请求数和元素数量反了。所以只有m和n相等的数据过了。</p>\n</blockquote>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->\n\n","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>其实昨天晚上写了一晚上 , 没有标记的线段树写好了 , 但是加上标记对储存的定义并不准确 , 导致最后没写完 . 然后最气的就是下午写了一个下午 , 死活找不到bug , 终于在折腾了4小时后 , 找到万恶之源 : define ! ! ! 对此我不由得感慨</p>\n<blockquote>\n<h1 id=\"define需谨慎-括号别吝啬\"><a href=\"#define需谨慎-括号别吝啬\" class=\"headerlink\" title=\"define需谨慎 , 括号别吝啬\"></a>define需谨慎 , 括号别吝啬</h1></blockquote>","more":"<p>线段树只是其中一种叫法而已 , 也叫区间树范围树 . 顾名思义 , 线段树可以解决区间上的问题 , 例如区间最值和区间求和 , 最重要的是支持动态修改 . 你可以对某个区间的值加上某个值 .</p>\n<h1 id=\"基本学习\"><a href=\"#基本学习\" class=\"headerlink\" title=\"基本学习\"></a>基本学习</h1><p>主要是最基础的 , 线段树的精髓不止于此 .</p>\n<h2 id=\"原理简述\"><a href=\"#原理简述\" class=\"headerlink\" title=\"原理简述\"></a>原理简述</h2><p>线段树将一个区间的信息储存在一个节点上 , 而该节点的两个子节点储存左半部分与右半部分的信息 . 信息就是区间和或最值 . 这样我们得到了一个二叉树 , 它每个节点都代表一段线段(区间) , 最底层就是每一个数据了 .</p>\n<img src=\"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/article/segment-tree-01.png\" alt=\"segment-tree-01\" style=\"zoom: 80%;\" />\n\n<p>这样我们询问的时候 , 遇到大的区间便不用访问子结点 , 直接读取便可以了 . 大大减少时间 , 而对区间的操作也是可以直接在区间上作标记 , 从而暂时不用修改子结点的值 . ( 因为有的区间修改后对后面的查询操作根本没有影响 , 没必要更新子结点的值 ). 下面以 <a href=\"https://www.luogu.com.cn/problem/P3372\">LuoguP3372</a> 为例 .</p>\n<h2 id=\"建树-Build\"><a href=\"#建树-Build\" class=\"headerlink\" title=\"建树 : Build\"></a>建树 : Build</h2><p>怎么建立线段树呢 ? 我是用数组 , 其实你可以使用结构体 , 有时更直观 . 根据题目 , 这是求和题目 , 因此递归建树 , 在递归边界(叶子节点)直接赋值 , 回溯的时候更新父节点的值 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">lo</span> <span class=\"token expression\">o<span class=\"token operator\">*</span><span class=\"token number\">2</span></span><span class=\"token comment\">//左儿子</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ro</span> <span class=\"token expression\">o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span></span><span class=\"token comment\">//右儿子</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tadd<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">==</span>R<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>num<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//相应改成max,min操作即可</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"维护-Update-未优化\"><a href=\"#维护-Update-未优化\" class=\"headerlink\" title=\"维护 : Update (未优化)\"></a>维护 : Update (未优化)</h2><blockquote>\n<p>对区间 ql , qr 上的数都加上 k .</p>\n</blockquote>\n<p>就是加上一个数 . 我们递归查找 , 如果区间完全在需要修改的区间中 , 我们就对它的整棵子树进行修改 .否则 , 递归找到符合条件的所有子区间 . 递归结束更新父节点值 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">==</span>R<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>k<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql<span class=\"token operator\">&lt;=</span>L <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token operator\">&lt;=</span>qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>M <span class=\"token operator\">>=</span> ql<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>M <span class=\"token operator\">&lt;</span> qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"查询-Query\"><a href=\"#查询-Query\" class=\"headerlink\" title=\"查询 : Query\"></a>查询 : Query</h2><blockquote>\n<p>询问区间 ql qr 间数的和 </p>\n</blockquote>\n<p>同理 , 判断区间是不是完全在询问区间中 , 否则递归在子区间中寻找 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ll <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> ql<span class=\"token operator\">&lt;=</span>L <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token operator\">&lt;=</span>qr <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> ql <span class=\"token punctuation\">)</span> ans<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">&lt;</span> qr <span class=\"token punctuation\">)</span> ans<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"优化-Pushdown\"><a href=\"#优化-Pushdown\" class=\"headerlink\" title=\"优化 : Pushdown()\"></a>优化 : Pushdown()</h2><p>于是你觉得你会了 , 说这有什么难得 ,交上去后 :</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/expression/TLE.gif\" alt=\"TLE\"></p>\n<p>线段树的精髓一个在携带信息 , 另一个就是延迟标记 . 因为区间操作后不一定需要立刻递归更新子结点 . 因此我们用一个延迟标记 , 记录我的子树要加上这么多 , 但是我暂时不加 , 我只更新我这个区间的值 . 如果你需要整个区间 , 那直接使用就好了 , 只有当需要用到我的子结点时才把延迟标记更新到子节点 , 也就是接下来的 pushdown 操作.</p>\n<blockquote>\n<p>如果是使用整个区间 , 那么没必要更新子结点的值 , 直接读取该区间的值就好了</p>\n<p>如果要使用这个区间的一部分 , 那就要求保证子结点的sum是准确的 , 在父节点记录的加法应该更新了 .</p>\n</blockquote>\n<p>因此sum记录的值不再是真实的值了 , 而是执行了自身和它的子树的延迟标记后的sum . 但是他没有执行父节点的延迟标记.</p>\n<p>pushdown操作就是把父亲的延迟标记传给儿子 , 并且更新儿子节点的值 . 传过以后自然就可以归零了 . 当你要递归到子区间就要用 .</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        add<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        add<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在更新值也不用遍历整棵树了 , 做好标记即可 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql<span class=\"token operator\">&lt;=</span>L <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token operator\">&lt;=</span>qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>k<span class=\"token operator\">*</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tadd<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>k<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//你要递归子树,就要把pushdown父节点的值</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> ql <span class=\"token punctuation\">)</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> qr <span class=\"token operator\">></span> M <span class=\"token punctuation\">)</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//结尾更新新的节点值</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>求和也是进入子区间记得pushdown</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ll <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql<span class=\"token operator\">&lt;=</span>L <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token operator\">&lt;=</span>qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> ql<span class=\"token punctuation\">)</span> res<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">&lt;</span> qr <span class=\"token punctuation\">)</span> res<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nll sum<span class=\"token punctuation\">[</span><span class=\"token number\">400000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>add<span class=\"token punctuation\">[</span><span class=\"token number\">400000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">100010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span>\nll n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>qr<span class=\"token punctuation\">,</span>ql<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">lo</span> <span class=\"token expression\"><span class=\"token number\">2</span><span class=\"token operator\">*</span>o</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ro</span> <span class=\"token expression\"><span class=\"token number\">2</span><span class=\"token operator\">*</span>o<span class=\"token operator\">+</span><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">len</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tadd<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">==</span>R<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>num<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    add<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    add<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    add<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql<span class=\"token operator\">&lt;=</span>L <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token operator\">&lt;=</span>qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> ql<span class=\"token punctuation\">)</span> res<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">&lt;</span> qr <span class=\"token punctuation\">)</span> res<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span>ll L<span class=\"token punctuation\">,</span>ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql<span class=\"token operator\">&lt;=</span>L <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token operator\">&lt;=</span>qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>k<span class=\"token operator\">*</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tadd<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>k<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tll M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> ql <span class=\"token punctuation\">)</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> qr <span class=\"token operator\">></span> M <span class=\"token punctuation\">)</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tll op<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld %lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ql<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>qr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql<span class=\"token operator\">></span>qr<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>ql<span class=\"token punctuation\">,</span>qr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n        \n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">addval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"题外话-Define引发的血案\"><a href=\"#题外话-Define引发的血案\" class=\"headerlink\" title=\"题外话 : Define引发的血案\"></a>题外话 : Define引发的血案</h2><p>其实正解我是想到了的 , 但是由于我打算放弃改没有延迟标记的代码 , 直接重写 , 想着偷懒就来了点宏定义 , 然后就出问题了 . </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">M</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">len</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">-</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面已经错了 . 考虑 $ len( M+1 , R ) $<br>$$<br>\\begin{aligned}<br>len(M+1,R)&amp;=R-M+1+1=R-M+2 \\&amp;\\not=R-(M+1)+1=R-M<br>\\end{aligned}<br>$$<br>原因就是define只是单纯的文字替换 , 所以会有问题 . 解决方案就是多加括号 . </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/expression/look-at-me.jpg\" alt=\"look-at-me\"></p>\n<h1 id=\"其他应用\"><a href=\"#其他应用\" class=\"headerlink\" title=\"其他应用\"></a>其他应用</h1><p>线段树的精髓是你给节点的附加信息 , 你可以给更复杂的信息 , 这样用处会更广泛 , <del>延迟标记也更难处理</del> . 这个挖个坑 , 以后再补 .</p>\n<h2 id=\"LuoguP3373\"><a href=\"#LuoguP3373\" class=\"headerlink\" title=\"LuoguP3373\"></a><a href=\"https://www.luogu.com.cn/problem/P3373\">LuoguP3373</a></h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>因为多了乘法操作，延迟标记应该不太够，所以用两个。但是有个pushdown时运算的优先问题，是先乘后加，还是先加后乘。</p>\n<blockquote>\n<p>对于一个节点，我们同时储存了乘和加，但不知道乘法和加法的先后，所以每一次pushdown我们要保证按照我们规定的顺序最后得到的是正确的。</p>\n<ul>\n<li>先乘后加：我们要保证结果正确，当有一个数在加法延迟标记中，说明在乘法前有加上一个数，那我们只需要让加上的数乘以现在要乘的数就好了。</li>\n<li>先加后乘：同理我们要加上一个数，发现之前乘过一个数了，你直接加到加法延迟标记上，后面会乘以一个数，就会导致结果错误。所以你要把加的数除以现在乘法延迟标记的数。出现除法会很难受，会有小数，所以是不好的。</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">M</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">lo</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ro</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>o<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">len</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\nll m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>op<span class=\"token punctuation\">;</span>\nll sum<span class=\"token punctuation\">[</span><span class=\"token number\">400010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>lazy1<span class=\"token punctuation\">[</span><span class=\"token number\">400010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>lazy2<span class=\"token punctuation\">[</span><span class=\"token number\">400010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">100010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tlazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>num<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tlazy1<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\tlazy1<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\tlazy1<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\tlazy1<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\tlazy2<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>lazy2<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>lazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\tlazy2<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\tlazy2<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>lazy2<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>lazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\tlazy2<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>lazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>lazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n\tlazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tlazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;=</span>l <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token operator\">&lt;=</span>y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tres<span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">+=</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tres<span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;=</span>l <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token operator\">&lt;=</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>k<span class=\"token operator\">*</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n\t\tlazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>k<span class=\"token punctuation\">;</span>\tlazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> x <span class=\"token punctuation\">)</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">&lt;</span> y <span class=\"token punctuation\">)</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">multival</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;=</span>l <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token operator\">&lt;=</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">;</span>\n\t\tlazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>k<span class=\"token punctuation\">;</span>lazy1<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\t\tlazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">*=</span>k<span class=\"token punctuation\">;</span>lazy2<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">>=</span> x<span class=\"token punctuation\">)</span> <span class=\"token function\">multival</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> M <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">)</span> <span class=\"token function\">multival</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sum<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>sum<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tsum<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token operator\">%=</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>op<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span>y<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> op<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">multival</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"题外话：我又在什么地方犯傻\"><a href=\"#题外话：我又在什么地方犯傻\" class=\"headerlink\" title=\"题外话：我又在什么地方犯傻\"></a>题外话：我又在什么地方犯傻</h3><blockquote>\n<p>这次是输入m，n搞反了，请求数和元素数量反了。所以只有m和n相等的数据过了。</p>\n</blockquote>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"排序算法","date":"2020-10-31T15:22:18.000Z","_content":"补完排序算法的课后, 自然地就会想到其他算法了, 所以我搞了归并排序, Shell 排序, 以及堆排序. \n<!-- more -->\n\n## 插入排序\n\n### 核心思想\n\n插入排序是将元素与排序好的元素一一比对, 找到元素应该在的位置, 将其插入. 就像打扑克牌是顺牌一样.\n\n### Code \n\n```cpp\nvoid Insertsort (int s[],int l,int r)\n{\n\tfor(int i=l+1;i<=r;i++)\n\t{\n   \t\tint j=i-1,key=s[i];\n   \t\twhile (j>=l && s[j]>key)\n   \t\t{\n   \t\t\ts[j+1]=s[j];\n   \t\t\tj--;\n   \t\t}\n   \t\ts[j+1]=key;\n\t}\n}\n```\n\n### 优化一：二分插入排序\n\n其实找元素的位置可以不用从后往前, 可以二分查找, 然后再移动数组.这样可以加快速度, 数据小时不明显.\n\n```cpp\nint BinarySearchPos(int s[],int l,int r,int key)\n{\n\tint i=l,j=r,mid;\n\twhile (i<=j)\n\t{\n\t\tmid=(i+j)/2;\n\t\tif (key==s[mid]) \n\t\t{\n\t\t\t//return the biggest subscript of value 'key'\n\t\t\twhile (key==s[mid+1]) mid++;\n\t\t\treturn mid;\n\t\t}\n\t\telse if (s[mid]>key) j=mid-1;\n\t\telse i=mid+1;\n\t}\n\treturn i;\n } \n \nvoid BinarySort (int s[],int l,int r)\n{\n\tfor(int i=l+1;i<=r;i++)\n\t{\n\t\tint pos=BinarySearchPos(s,l,i-1,s[i]);\n\t\tint j=i,key=s[i];\n\t\twhile (j>pos)\n\t\t{\n\t\t\ts[j]=s[j-1];\n\t\t\tj--;\n\t\t}\n\t\ts[j]=key;\n\t}\n}\n\n```\n\n### 优化二：Shell 排序\n\nShell 排序，又称缩小增量排序。出自 D.L.Shell ，因此得名。它的核心思想先取增量 d<sub>1</sub> ,将间隔为 d<sub>1</sub> 的数分为一组, 总共 d<sub>1</sub> 组. 对各组插入排序, 然后缩小增量, 重复此过程, 最后增量为1时, 最后一次插入排序.\n\n该算法优点在于它能让数组尽可能先有序, 使插入排序的效率更高.\n\nShell 排序很依赖增量的选法, 一开始 D.L.Shell 直接取 n/2 , 然而会导致有些情况, 奇数位置和偶数位置直到1时才比较, 效率不高.所以其他大佬们提出了各种方法, 有人提出都要用奇数, 有人提出.要用互质的数等等……此处我们采用 Knuth 算法 ,他建议在 n<1000 时使用. \n\n```cpp\nvoid KnuthShellSort(int* s,int length)\n{\n\tint h;\n\tfor (h=1;h<=length/9;h=h*3+1);\n\tfor (;h>0;h=h/3)\n\t{\n\t\tfor (int i=h;i<length;i++)\n\t\t{\n\t\t\tint key=s[i],j=i;\n\t\t\tfor ( j=i-h ; j>=0 && s[j]>key ; j-=h ) s[j+h]=s[j];\n\t\t\ts[j+h]=key;\n\t\t}\n\t}\n}\n```\n\n### 速度对比\n\n使用 1000 组 10000 个随机数. 同一套数据. \n\n| 单位: ms | 插入排序 | 二分插入排序 | Shell Knuth | 快速排序 |\n| :------: | :------: | :----------: | :---------: | :------: |\n|   时间   |  50157   |    40869     |    6079     |   5841   |\n\n\n\n## 归并排序\n\n### 核心思想\n\n归并排序也是一种分治思想, 它把数组平分为小数组, 分别让子数组有序, 然后合并两个子区间. 两个有序的子数组排序比较简单, 让两个光标分别指向子数组开头, 比较光标指向的数, 把小的数放在新数组前面并移动光标. 当有一个数组到达边界是, 另外一个数组的只需依次全部放进新数组即可.(因为之后的数都大于前面数组的最大值) 而递归平分数组的边界刚好是只有一个元素, 必然有序. 所以问题就解决了. \n\n### Code\n\n```cpp\nvoid MergeArray(int* s,int l,int r,int* temp)\n{\n\tint i=l,m=(l+r)/2,j=m+1,k=l;\n\twhile ( i<=m && j<=r )\n\t{\n\t\tif (s[i]<=s[j]) temp[k]=s[i++];\n\t\telse temp[k]=s[j++];\n\t\tk++;\n\t}\n\twhile (i<=m) temp[k]=s[i++],k++;\n\twhile (j<=r) temp[k]=s[j++],k++;\n\ti=l;\n\twhile (i<=r)\n\t{\n\t\ts[i]=temp[i];\n\t\ti++;\n\t}\n}\n\nvoid Mergesort(int* s,int l, int r,int* temp)\n{\n\tif (r<=l) return ;\n\tint m=(l+r)/2;\n\tMergesort(s,l,m,temp);\n\tMergesort(s,m+1,r,temp);\n\tMergeArray(s,l,r,temp);\n}\n\n```\n\n### 复杂度分析\n\n归并排序的时间复杂度是 O(n*logn) , 比较稳定, 理论上速度优于快速排序, 因为快速排序效率取决于基准数的选取. 那实际情况呢, 我测试了一下. 1000 组 10000 个随机数的数据.\n\n| 单位: ms | 归并排序 | Shell Knuth | 快速排序 |\n| :------: | :------: | :---------: | :------: |\n|   时间   |   5900   |    6079     |   5841   |\n\n然而发现并没有很大的速度差距. 原因是归并排序需要在数组间转来转去, 这个并没有算入时间复杂度, 这是个常数, 但这个常数大到不可忽略. 而且你需要一个临时数组(可以共用), 空间复杂度应该是 O(N).\n\n其实有可以实现 O(1) 的代码,但代码复杂度会变高. 有时间再研究, 毕竟<span class=\"heimu\">期中考迫近,作业写不完</span>\n\n## 堆排序\n\n### 原理\n利用堆这一结构进行排序，堆是一种数据结构，结构保证节点值大于其子树的所有值。利用堆来排序，先要构造一个堆，然后将堆顶元素与最后一个节点交换，最后一个节点已经为最大值，不参与接下来堆的构造。再维护一下堆，直到整个数组排序完成。\n\n因为一开始整个数组都是无序的，所以要对非叶子节点都进行构造堆，从下往上，从右往左。如果父节点和子节点发生交换，那么新的子节点也要和孙节点再次比较，因为换下来的数比原来的子节点小，那么需要再次比较。当然，循环到这个数比子节点大时就可以停止了。\n\n交换堆顶和最后一个元素后，其实根节点的左右子树都是一个堆，所以，只需要对堆顶(刚换上来的数)构造堆即可。\n\n### 演示\n举个例子：\n找到第一个非叶子节点，图中是6.\n![](https://p.130014.xyz/2020/11/03/7724107A-AAFF-4FB2-A07D-305831F0B238.png)\n和两个叶子节点比较后发现，8比6大，于是交换。\n\n![](https://p.130014.xyz/2020/11/03/F9341DE5-25A5-47E8-8218-10C552046FCD.png)\n\n下一个节点是5，5<8,交换。\n\n![](https://p.130014.xyz/2020/11/03/EED43B5F-C82D-4B96-BF3B-AC05E304388E.png)\n\n此处因为8和5交换，对5新的位置要再次进行节点维护，6>5,交换。\n\n![](https://p.130014.xyz/2020/11/03/sort001.png)\n\n接下来把8换到最后一个节点，5换到堆顶，维护堆。\n\n![](https://p.130014.xyz/2020/11/03/sort002.png)\n\n6>5 ，交换。\n\n![](https://p.130014.xyz/2020/11/03/sort003.png)\n\n堆维护完毕，6与2交换。\n\n![](https://p.130014.xyz/2020/11/03/sort004.png)\n\n5>2，5和2交换。\n\n![](https://p.130014.xyz/2020/11/03/sort005.png)\n\n堆生成完毕。5和4交换。\n\n![](https://p.130014.xyz/2020/11/03/sort006.png)\n\n交换完还是满足堆的定义，于是交换2和4，排序完成。\n\n![](https://p.130014.xyz/2020/11/03/sort007.png)\n\n### Code\n```cpp\nvoid IfyMaxHeap(int* s,int start,int end)\n{\n    int dad=start,son=dad*2+1;\n    while (son<=end)\n  \t{\n  \t     if (s[son+1]>s[son] && son+1<=end) son++;\n  \t     if (s[dad]>=s[son]) return ;\n  \t     std::swap(s[son],s[dad]);\n  \t     dad=son;\n  \t     son=dad*2+1;\n  \t}\n}\n\nvoid HeapSort(int* s,int len)\n{\n    for (int i=len/2-1;i>=0;i--)\n  \t{\n  \t     IfyMaxHeap(s,i,len-1);\n  \t}\n  \t\n  \tfor (int i=len-1;i>0;i--)\n  \t{\n  \t     std::swap(s[i],s[0]);\n  \t     IfyMaxHeap(s,0,i-1);\n  \t}\n}\n```\n### 复杂度分析\n时间复杂度O(nlogn) 。第一次构造堆nlogn，第二次到第n次，每次logn，最终和近似 2nlogn，是nlogn级别的。\n### 反思优化\n\n问题来了，好像慢了点？就是常数大的问题，quicksort甚至跑出了10s以内的好成绩，那为什么呢。原因就在我们总是把最小数换到堆顶，这样会比较很多次，要不我们把它存到另一个数组，然后把左右节点大的换到堆顶进行维护。\n\n```cpp\nvoid IfyMaxHeap(int* s,int start,int end)\n{\n    int dad=start,son=dad*2+1;\n    while (son<=end)\n        {\n             if (s[son+1]>s[son] && son+1<=end) son++;\n             if (s[dad]>=s[son]) return ;\n             std::swap(s[son],s[dad]);\n             dad=son;\n             son=dad*2+1;\n        }\n}\n\nvoid IfyMaxHeapAdd(int* s,int start,int end)\n{\n    int dad=start,son=dad*2+1;\n    while (son<=end)\n        {\n             if (s[son+1]>s[son] && son+1<=end) son++;\n             s[dad]=s[son];\n             s[son]=-1000000;\n             dad=son;\n             son=dad*2+1;\n        }\n}\n\nvoid HeapSortAdd(int* s,int len,int* temp)\n{\n    for (int i=len/2-1;i>=0;i--)\n        {\n             IfyMaxHeap(s,i,len-1);\n        }\n\n        for (int i=len;i>0;i--)\n        {\n             temp[i-1]=s[0];\n             IfyMaxHeapAdd(s,0,len-1);\n        }\n}\n```\n\n### 速度对比\n\n使用 10000 组10000个随机数。（运行环境有别于上面的测试环境）\n\n| 单位: ms | HeapSort  | HeapSortAdd | MergeSort | Shell Knuth | Quicksort |\n| :------: | :-------: | :---------: | :-------: | :---------: | :-------: |\n|   时间   | 22146.036 |  12042.721  | 12320.506 |  11911.036  | 11750.599 |\n\n​\t发现常数下来了. <span class=\"heimu\">煞笔我居然因为一个小错误写了一下午.</span>\n\n\n\n## 总结\n\n​\t排序算法基本就结束了, 而公认的最高效的还是快速排序, 其他或多或少都有些缺点. 如果允许还是尽量使用 STL 里的 sort , 毕竟结构体的排序...","source":"_posts/XCPC/SortAlgorithm.md","raw":"---\ntitle: 排序算法\ndate: 2020-10-31 23:22:18\ncategories:\n\t- ICPC 算法基础\ntags:\n\t- 分治\n\t- 排序\n---\n补完排序算法的课后, 自然地就会想到其他算法了, 所以我搞了归并排序, Shell 排序, 以及堆排序. \n<!-- more -->\n\n## 插入排序\n\n### 核心思想\n\n插入排序是将元素与排序好的元素一一比对, 找到元素应该在的位置, 将其插入. 就像打扑克牌是顺牌一样.\n\n### Code \n\n```cpp\nvoid Insertsort (int s[],int l,int r)\n{\n\tfor(int i=l+1;i<=r;i++)\n\t{\n   \t\tint j=i-1,key=s[i];\n   \t\twhile (j>=l && s[j]>key)\n   \t\t{\n   \t\t\ts[j+1]=s[j];\n   \t\t\tj--;\n   \t\t}\n   \t\ts[j+1]=key;\n\t}\n}\n```\n\n### 优化一：二分插入排序\n\n其实找元素的位置可以不用从后往前, 可以二分查找, 然后再移动数组.这样可以加快速度, 数据小时不明显.\n\n```cpp\nint BinarySearchPos(int s[],int l,int r,int key)\n{\n\tint i=l,j=r,mid;\n\twhile (i<=j)\n\t{\n\t\tmid=(i+j)/2;\n\t\tif (key==s[mid]) \n\t\t{\n\t\t\t//return the biggest subscript of value 'key'\n\t\t\twhile (key==s[mid+1]) mid++;\n\t\t\treturn mid;\n\t\t}\n\t\telse if (s[mid]>key) j=mid-1;\n\t\telse i=mid+1;\n\t}\n\treturn i;\n } \n \nvoid BinarySort (int s[],int l,int r)\n{\n\tfor(int i=l+1;i<=r;i++)\n\t{\n\t\tint pos=BinarySearchPos(s,l,i-1,s[i]);\n\t\tint j=i,key=s[i];\n\t\twhile (j>pos)\n\t\t{\n\t\t\ts[j]=s[j-1];\n\t\t\tj--;\n\t\t}\n\t\ts[j]=key;\n\t}\n}\n\n```\n\n### 优化二：Shell 排序\n\nShell 排序，又称缩小增量排序。出自 D.L.Shell ，因此得名。它的核心思想先取增量 d<sub>1</sub> ,将间隔为 d<sub>1</sub> 的数分为一组, 总共 d<sub>1</sub> 组. 对各组插入排序, 然后缩小增量, 重复此过程, 最后增量为1时, 最后一次插入排序.\n\n该算法优点在于它能让数组尽可能先有序, 使插入排序的效率更高.\n\nShell 排序很依赖增量的选法, 一开始 D.L.Shell 直接取 n/2 , 然而会导致有些情况, 奇数位置和偶数位置直到1时才比较, 效率不高.所以其他大佬们提出了各种方法, 有人提出都要用奇数, 有人提出.要用互质的数等等……此处我们采用 Knuth 算法 ,他建议在 n<1000 时使用. \n\n```cpp\nvoid KnuthShellSort(int* s,int length)\n{\n\tint h;\n\tfor (h=1;h<=length/9;h=h*3+1);\n\tfor (;h>0;h=h/3)\n\t{\n\t\tfor (int i=h;i<length;i++)\n\t\t{\n\t\t\tint key=s[i],j=i;\n\t\t\tfor ( j=i-h ; j>=0 && s[j]>key ; j-=h ) s[j+h]=s[j];\n\t\t\ts[j+h]=key;\n\t\t}\n\t}\n}\n```\n\n### 速度对比\n\n使用 1000 组 10000 个随机数. 同一套数据. \n\n| 单位: ms | 插入排序 | 二分插入排序 | Shell Knuth | 快速排序 |\n| :------: | :------: | :----------: | :---------: | :------: |\n|   时间   |  50157   |    40869     |    6079     |   5841   |\n\n\n\n## 归并排序\n\n### 核心思想\n\n归并排序也是一种分治思想, 它把数组平分为小数组, 分别让子数组有序, 然后合并两个子区间. 两个有序的子数组排序比较简单, 让两个光标分别指向子数组开头, 比较光标指向的数, 把小的数放在新数组前面并移动光标. 当有一个数组到达边界是, 另外一个数组的只需依次全部放进新数组即可.(因为之后的数都大于前面数组的最大值) 而递归平分数组的边界刚好是只有一个元素, 必然有序. 所以问题就解决了. \n\n### Code\n\n```cpp\nvoid MergeArray(int* s,int l,int r,int* temp)\n{\n\tint i=l,m=(l+r)/2,j=m+1,k=l;\n\twhile ( i<=m && j<=r )\n\t{\n\t\tif (s[i]<=s[j]) temp[k]=s[i++];\n\t\telse temp[k]=s[j++];\n\t\tk++;\n\t}\n\twhile (i<=m) temp[k]=s[i++],k++;\n\twhile (j<=r) temp[k]=s[j++],k++;\n\ti=l;\n\twhile (i<=r)\n\t{\n\t\ts[i]=temp[i];\n\t\ti++;\n\t}\n}\n\nvoid Mergesort(int* s,int l, int r,int* temp)\n{\n\tif (r<=l) return ;\n\tint m=(l+r)/2;\n\tMergesort(s,l,m,temp);\n\tMergesort(s,m+1,r,temp);\n\tMergeArray(s,l,r,temp);\n}\n\n```\n\n### 复杂度分析\n\n归并排序的时间复杂度是 O(n*logn) , 比较稳定, 理论上速度优于快速排序, 因为快速排序效率取决于基准数的选取. 那实际情况呢, 我测试了一下. 1000 组 10000 个随机数的数据.\n\n| 单位: ms | 归并排序 | Shell Knuth | 快速排序 |\n| :------: | :------: | :---------: | :------: |\n|   时间   |   5900   |    6079     |   5841   |\n\n然而发现并没有很大的速度差距. 原因是归并排序需要在数组间转来转去, 这个并没有算入时间复杂度, 这是个常数, 但这个常数大到不可忽略. 而且你需要一个临时数组(可以共用), 空间复杂度应该是 O(N).\n\n其实有可以实现 O(1) 的代码,但代码复杂度会变高. 有时间再研究, 毕竟<span class=\"heimu\">期中考迫近,作业写不完</span>\n\n## 堆排序\n\n### 原理\n利用堆这一结构进行排序，堆是一种数据结构，结构保证节点值大于其子树的所有值。利用堆来排序，先要构造一个堆，然后将堆顶元素与最后一个节点交换，最后一个节点已经为最大值，不参与接下来堆的构造。再维护一下堆，直到整个数组排序完成。\n\n因为一开始整个数组都是无序的，所以要对非叶子节点都进行构造堆，从下往上，从右往左。如果父节点和子节点发生交换，那么新的子节点也要和孙节点再次比较，因为换下来的数比原来的子节点小，那么需要再次比较。当然，循环到这个数比子节点大时就可以停止了。\n\n交换堆顶和最后一个元素后，其实根节点的左右子树都是一个堆，所以，只需要对堆顶(刚换上来的数)构造堆即可。\n\n### 演示\n举个例子：\n找到第一个非叶子节点，图中是6.\n![](https://p.130014.xyz/2020/11/03/7724107A-AAFF-4FB2-A07D-305831F0B238.png)\n和两个叶子节点比较后发现，8比6大，于是交换。\n\n![](https://p.130014.xyz/2020/11/03/F9341DE5-25A5-47E8-8218-10C552046FCD.png)\n\n下一个节点是5，5<8,交换。\n\n![](https://p.130014.xyz/2020/11/03/EED43B5F-C82D-4B96-BF3B-AC05E304388E.png)\n\n此处因为8和5交换，对5新的位置要再次进行节点维护，6>5,交换。\n\n![](https://p.130014.xyz/2020/11/03/sort001.png)\n\n接下来把8换到最后一个节点，5换到堆顶，维护堆。\n\n![](https://p.130014.xyz/2020/11/03/sort002.png)\n\n6>5 ，交换。\n\n![](https://p.130014.xyz/2020/11/03/sort003.png)\n\n堆维护完毕，6与2交换。\n\n![](https://p.130014.xyz/2020/11/03/sort004.png)\n\n5>2，5和2交换。\n\n![](https://p.130014.xyz/2020/11/03/sort005.png)\n\n堆生成完毕。5和4交换。\n\n![](https://p.130014.xyz/2020/11/03/sort006.png)\n\n交换完还是满足堆的定义，于是交换2和4，排序完成。\n\n![](https://p.130014.xyz/2020/11/03/sort007.png)\n\n### Code\n```cpp\nvoid IfyMaxHeap(int* s,int start,int end)\n{\n    int dad=start,son=dad*2+1;\n    while (son<=end)\n  \t{\n  \t     if (s[son+1]>s[son] && son+1<=end) son++;\n  \t     if (s[dad]>=s[son]) return ;\n  \t     std::swap(s[son],s[dad]);\n  \t     dad=son;\n  \t     son=dad*2+1;\n  \t}\n}\n\nvoid HeapSort(int* s,int len)\n{\n    for (int i=len/2-1;i>=0;i--)\n  \t{\n  \t     IfyMaxHeap(s,i,len-1);\n  \t}\n  \t\n  \tfor (int i=len-1;i>0;i--)\n  \t{\n  \t     std::swap(s[i],s[0]);\n  \t     IfyMaxHeap(s,0,i-1);\n  \t}\n}\n```\n### 复杂度分析\n时间复杂度O(nlogn) 。第一次构造堆nlogn，第二次到第n次，每次logn，最终和近似 2nlogn，是nlogn级别的。\n### 反思优化\n\n问题来了，好像慢了点？就是常数大的问题，quicksort甚至跑出了10s以内的好成绩，那为什么呢。原因就在我们总是把最小数换到堆顶，这样会比较很多次，要不我们把它存到另一个数组，然后把左右节点大的换到堆顶进行维护。\n\n```cpp\nvoid IfyMaxHeap(int* s,int start,int end)\n{\n    int dad=start,son=dad*2+1;\n    while (son<=end)\n        {\n             if (s[son+1]>s[son] && son+1<=end) son++;\n             if (s[dad]>=s[son]) return ;\n             std::swap(s[son],s[dad]);\n             dad=son;\n             son=dad*2+1;\n        }\n}\n\nvoid IfyMaxHeapAdd(int* s,int start,int end)\n{\n    int dad=start,son=dad*2+1;\n    while (son<=end)\n        {\n             if (s[son+1]>s[son] && son+1<=end) son++;\n             s[dad]=s[son];\n             s[son]=-1000000;\n             dad=son;\n             son=dad*2+1;\n        }\n}\n\nvoid HeapSortAdd(int* s,int len,int* temp)\n{\n    for (int i=len/2-1;i>=0;i--)\n        {\n             IfyMaxHeap(s,i,len-1);\n        }\n\n        for (int i=len;i>0;i--)\n        {\n             temp[i-1]=s[0];\n             IfyMaxHeapAdd(s,0,len-1);\n        }\n}\n```\n\n### 速度对比\n\n使用 10000 组10000个随机数。（运行环境有别于上面的测试环境）\n\n| 单位: ms | HeapSort  | HeapSortAdd | MergeSort | Shell Knuth | Quicksort |\n| :------: | :-------: | :---------: | :-------: | :---------: | :-------: |\n|   时间   | 22146.036 |  12042.721  | 12320.506 |  11911.036  | 11750.599 |\n\n​\t发现常数下来了. <span class=\"heimu\">煞笔我居然因为一个小错误写了一下午.</span>\n\n\n\n## 总结\n\n​\t排序算法基本就结束了, 而公认的最高效的还是快速排序, 其他或多或少都有些缺点. 如果允许还是尽量使用 STL 里的 sort , 毕竟结构体的排序...","slug":"XCPC/SortAlgorithm","published":1,"updated":"2021-06-26T15:47:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uk2002o63jneg66d25a","content":"<p>补完排序算法的课后, 自然地就会想到其他算法了, 所以我搞了归并排序, Shell 排序, 以及堆排序. </p>\n<span id=\"more\"></span>\n\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>插入排序是将元素与排序好的元素一一比对, 找到元素应该在的位置, 将其插入. 就像打扑克牌是顺牌一样.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Insertsort</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n   \t\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   \t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span>l <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>key<span class=\"token punctuation\">)</span>\n   \t\t<span class=\"token punctuation\">&#123;</span>\n   \t\t\ts<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   \t\t\tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n   \t\t<span class=\"token punctuation\">&#125;</span>\n   \t\ts<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"优化一：二分插入排序\"><a href=\"#优化一：二分插入排序\" class=\"headerlink\" title=\"优化一：二分插入排序\"></a>优化一：二分插入排序</h3><p>其实找元素的位置可以不用从后往前, 可以二分查找, 然后再移动数组.这样可以加快速度, 数据小时不明显.</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">BinarySearchPos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>j<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tmid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">==</span>s<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//return the biggest subscript of value 'key'</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">==</span>s<span class=\"token punctuation\">[</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> mid<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>key<span class=\"token punctuation\">)</span> j<span class=\"token operator\">=</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> i<span class=\"token operator\">=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> \n \n<span class=\"token keyword\">void</span> <span class=\"token function\">BinarySort</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> pos<span class=\"token operator\">=</span><span class=\"token function\">BinarySearchPos</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">></span>pos<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"优化二：Shell-排序\"><a href=\"#优化二：Shell-排序\" class=\"headerlink\" title=\"优化二：Shell 排序\"></a>优化二：Shell 排序</h3><p>Shell 排序，又称缩小增量排序。出自 D.L.Shell ，因此得名。它的核心思想先取增量 d<sub>1</sub> ,将间隔为 d<sub>1</sub> 的数分为一组, 总共 d<sub>1</sub> 组. 对各组插入排序, 然后缩小增量, 重复此过程, 最后增量为1时, 最后一次插入排序.</p>\n<p>该算法优点在于它能让数组尽可能先有序, 使插入排序的效率更高.</p>\n<p>Shell 排序很依赖增量的选法, 一开始 D.L.Shell 直接取 n/2 , 然而会导致有些情况, 奇数位置和偶数位置直到1时才比较, 效率不高.所以其他大佬们提出了各种方法, 有人提出都要用奇数, 有人提出.要用互质的数等等……此处我们采用 Knuth 算法 ,他建议在 n&lt;1000 时使用. </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">KnuthShellSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>h<span class=\"token operator\">&lt;=</span>length<span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>h<span class=\"token operator\">=</span>h<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>h<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>h<span class=\"token operator\">=</span>h<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>h<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">int</span> key<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span>h <span class=\"token punctuation\">;</span> j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>key <span class=\"token punctuation\">;</span> j<span class=\"token operator\">-=</span>h <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>h<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\ts<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>h<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"速度对比\"><a href=\"#速度对比\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h3><p>使用 1000 组 10000 个随机数. 同一套数据. </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">单位: ms</th>\n<th align=\"center\">插入排序</th>\n<th align=\"center\">二分插入排序</th>\n<th align=\"center\">Shell Knuth</th>\n<th align=\"center\">快速排序</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">时间</td>\n<td align=\"center\">50157</td>\n<td align=\"center\">40869</td>\n<td align=\"center\">6079</td>\n<td align=\"center\">5841</td>\n</tr>\n</tbody></table>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><h3 id=\"核心思想-1\"><a href=\"#核心思想-1\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>归并排序也是一种分治思想, 它把数组平分为小数组, 分别让子数组有序, 然后合并两个子区间. 两个有序的子数组排序比较简单, 让两个光标分别指向子数组开头, 比较光标指向的数, 把小的数放在新数组前面并移动光标. 当有一个数组到达边界是, 另外一个数组的只需依次全部放进新数组即可.(因为之后的数都大于前面数组的最大值) 而递归平分数组的边界刚好是只有一个元素, 必然有序. 所以问题就解决了. </p>\n<h3 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">MergeArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> temp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>m<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;=</span>m <span class=\"token operator\">&amp;&amp;</span> j<span class=\"token operator\">&lt;=</span>r <span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> temp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> temp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tk<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">)</span> temp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span> temp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\ti<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Mergesort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> temp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;=</span>l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Mergesort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Mergesort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MergeArray</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>归并排序的时间复杂度是 O(n*logn) , 比较稳定, 理论上速度优于快速排序, 因为快速排序效率取决于基准数的选取. 那实际情况呢, 我测试了一下. 1000 组 10000 个随机数的数据.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">单位: ms</th>\n<th align=\"center\">归并排序</th>\n<th align=\"center\">Shell Knuth</th>\n<th align=\"center\">快速排序</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">时间</td>\n<td align=\"center\">5900</td>\n<td align=\"center\">6079</td>\n<td align=\"center\">5841</td>\n</tr>\n</tbody></table>\n<p>然而发现并没有很大的速度差距. 原因是归并排序需要在数组间转来转去, 这个并没有算入时间复杂度, 这是个常数, 但这个常数大到不可忽略. 而且你需要一个临时数组(可以共用), 空间复杂度应该是 O(N).</p>\n<p>其实有可以实现 O(1) 的代码,但代码复杂度会变高. 有时间再研究, 毕竟<span class=\"heimu\">期中考迫近,作业写不完</span></p>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>利用堆这一结构进行排序，堆是一种数据结构，结构保证节点值大于其子树的所有值。利用堆来排序，先要构造一个堆，然后将堆顶元素与最后一个节点交换，最后一个节点已经为最大值，不参与接下来堆的构造。再维护一下堆，直到整个数组排序完成。</p>\n<p>因为一开始整个数组都是无序的，所以要对非叶子节点都进行构造堆，从下往上，从右往左。如果父节点和子节点发生交换，那么新的子节点也要和孙节点再次比较，因为换下来的数比原来的子节点小，那么需要再次比较。当然，循环到这个数比子节点大时就可以停止了。</p>\n<p>交换堆顶和最后一个元素后，其实根节点的左右子树都是一个堆，所以，只需要对堆顶(刚换上来的数)构造堆即可。</p>\n<h3 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h3><p>举个例子：<br>找到第一个非叶子节点，图中是6.<br><img src=\"https://p.130014.xyz/2020/11/03/7724107A-AAFF-4FB2-A07D-305831F0B238.png\" loading=\"lazy\"><br>和两个叶子节点比较后发现，8比6大，于是交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/F9341DE5-25A5-47E8-8218-10C552046FCD.png\" loading=\"lazy\"></p>\n<p>下一个节点是5，5&lt;8,交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/EED43B5F-C82D-4B96-BF3B-AC05E304388E.png\" loading=\"lazy\"></p>\n<p>此处因为8和5交换，对5新的位置要再次进行节点维护，6&gt;5,交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort001.png\" loading=\"lazy\"></p>\n<p>接下来把8换到最后一个节点，5换到堆顶，维护堆。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort002.png\" loading=\"lazy\"></p>\n<p>6&gt;5 ，交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort003.png\" loading=\"lazy\"></p>\n<p>堆维护完毕，6与2交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort004.png\" loading=\"lazy\"></p>\n<p>5&gt;2，5和2交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort005.png\" loading=\"lazy\"></p>\n<p>堆生成完毕。5和4交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort006.png\" loading=\"lazy\"></p>\n<p>交换完还是满足堆的定义，于是交换2和4，排序完成。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort007.png\" loading=\"lazy\"></p>\n<h3 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">IfyMaxHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> dad<span class=\"token operator\">=</span>start<span class=\"token punctuation\">,</span>son<span class=\"token operator\">=</span>dad<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>son<span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">&#123;</span>\n  \t     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>son<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> son<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">)</span> son<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  \t     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>dad<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n  \t     std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>dad<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t     dad<span class=\"token operator\">=</span>son<span class=\"token punctuation\">;</span>\n  \t     son<span class=\"token operator\">=</span>dad<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>len<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">&#123;</span>\n  \t     <span class=\"token function\">IfyMaxHeap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token punctuation\">&#125;</span>\n  \t\n  \t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">&#123;</span>\n  \t     std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t     <span class=\"token function\">IfyMaxHeap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"复杂度分析-1\"><a href=\"#复杂度分析-1\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>时间复杂度O(nlogn) 。第一次构造堆nlogn，第二次到第n次，每次logn，最终和近似 2nlogn，是nlogn级别的。</p>\n<h3 id=\"反思优化\"><a href=\"#反思优化\" class=\"headerlink\" title=\"反思优化\"></a>反思优化</h3><p>问题来了，好像慢了点？就是常数大的问题，quicksort甚至跑出了10s以内的好成绩，那为什么呢。原因就在我们总是把最小数换到堆顶，这样会比较很多次，要不我们把它存到另一个数组，然后把左右节点大的换到堆顶进行维护。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">IfyMaxHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> dad<span class=\"token operator\">=</span>start<span class=\"token punctuation\">,</span>son<span class=\"token operator\">=</span>dad<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>son<span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>son<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> son<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">)</span> son<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>dad<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n             std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>dad<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             dad<span class=\"token operator\">=</span>son<span class=\"token punctuation\">;</span>\n             son<span class=\"token operator\">=</span>dad<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">IfyMaxHeapAdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> dad<span class=\"token operator\">=</span>start<span class=\"token punctuation\">,</span>son<span class=\"token operator\">=</span>dad<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>son<span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>son<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> son<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">)</span> son<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n             s<span class=\"token punctuation\">[</span>dad<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n             dad<span class=\"token operator\">=</span>son<span class=\"token punctuation\">;</span>\n             son<span class=\"token operator\">=</span>dad<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapSortAdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> temp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>len<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token function\">IfyMaxHeap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n             temp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             <span class=\"token function\">IfyMaxHeapAdd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"速度对比-1\"><a href=\"#速度对比-1\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h3><p>使用 10000 组10000个随机数。（运行环境有别于上面的测试环境）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">单位: ms</th>\n<th align=\"center\">HeapSort</th>\n<th align=\"center\">HeapSortAdd</th>\n<th align=\"center\">MergeSort</th>\n<th align=\"center\">Shell Knuth</th>\n<th align=\"center\">Quicksort</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">时间</td>\n<td align=\"center\">22146.036</td>\n<td align=\"center\">12042.721</td>\n<td align=\"center\">12320.506</td>\n<td align=\"center\">11911.036</td>\n<td align=\"center\">11750.599</td>\n</tr>\n</tbody></table>\n<p>​    发现常数下来了. <span class=\"heimu\">煞笔我居然因为一个小错误写了一下午.</span></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    排序算法基本就结束了, 而公认的最高效的还是快速排序, 其他或多或少都有些缺点. 如果允许还是尽量使用 STL 里的 sort , 毕竟结构体的排序…</p>\n","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>补完排序算法的课后, 自然地就会想到其他算法了, 所以我搞了归并排序, Shell 排序, 以及堆排序. </p>","more":"<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>插入排序是将元素与排序好的元素一一比对, 找到元素应该在的位置, 将其插入. 就像打扑克牌是顺牌一样.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Insertsort</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n   \t\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   \t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span>l <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>key<span class=\"token punctuation\">)</span>\n   \t\t<span class=\"token punctuation\">&#123;</span>\n   \t\t\ts<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   \t\t\tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n   \t\t<span class=\"token punctuation\">&#125;</span>\n   \t\ts<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"优化一：二分插入排序\"><a href=\"#优化一：二分插入排序\" class=\"headerlink\" title=\"优化一：二分插入排序\"></a>优化一：二分插入排序</h3><p>其实找元素的位置可以不用从后往前, 可以二分查找, 然后再移动数组.这样可以加快速度, 数据小时不明显.</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">BinarySearchPos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>j<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tmid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">==</span>s<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//return the biggest subscript of value 'key'</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">==</span>s<span class=\"token punctuation\">[</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> mid<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>key<span class=\"token punctuation\">)</span> j<span class=\"token operator\">=</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> i<span class=\"token operator\">=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> \n \n<span class=\"token keyword\">void</span> <span class=\"token function\">BinarySort</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> pos<span class=\"token operator\">=</span><span class=\"token function\">BinarySearchPos</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">></span>pos<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"优化二：Shell-排序\"><a href=\"#优化二：Shell-排序\" class=\"headerlink\" title=\"优化二：Shell 排序\"></a>优化二：Shell 排序</h3><p>Shell 排序，又称缩小增量排序。出自 D.L.Shell ，因此得名。它的核心思想先取增量 d<sub>1</sub> ,将间隔为 d<sub>1</sub> 的数分为一组, 总共 d<sub>1</sub> 组. 对各组插入排序, 然后缩小增量, 重复此过程, 最后增量为1时, 最后一次插入排序.</p>\n<p>该算法优点在于它能让数组尽可能先有序, 使插入排序的效率更高.</p>\n<p>Shell 排序很依赖增量的选法, 一开始 D.L.Shell 直接取 n/2 , 然而会导致有些情况, 奇数位置和偶数位置直到1时才比较, 效率不高.所以其他大佬们提出了各种方法, 有人提出都要用奇数, 有人提出.要用互质的数等等……此处我们采用 Knuth 算法 ,他建议在 n&lt;1000 时使用. </p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">KnuthShellSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>h<span class=\"token operator\">&lt;=</span>length<span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>h<span class=\"token operator\">=</span>h<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>h<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>h<span class=\"token operator\">=</span>h<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>h<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">int</span> key<span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span>h <span class=\"token punctuation\">;</span> j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>key <span class=\"token punctuation\">;</span> j<span class=\"token operator\">-=</span>h <span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>h<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\ts<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>h<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"速度对比\"><a href=\"#速度对比\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h3><p>使用 1000 组 10000 个随机数. 同一套数据. </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">单位: ms</th>\n<th align=\"center\">插入排序</th>\n<th align=\"center\">二分插入排序</th>\n<th align=\"center\">Shell Knuth</th>\n<th align=\"center\">快速排序</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">时间</td>\n<td align=\"center\">50157</td>\n<td align=\"center\">40869</td>\n<td align=\"center\">6079</td>\n<td align=\"center\">5841</td>\n</tr>\n</tbody></table>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><h3 id=\"核心思想-1\"><a href=\"#核心思想-1\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>归并排序也是一种分治思想, 它把数组平分为小数组, 分别让子数组有序, 然后合并两个子区间. 两个有序的子数组排序比较简单, 让两个光标分别指向子数组开头, 比较光标指向的数, 把小的数放在新数组前面并移动光标. 当有一个数组到达边界是, 另外一个数组的只需依次全部放进新数组即可.(因为之后的数都大于前面数组的最大值) 而递归平分数组的边界刚好是只有一个元素, 必然有序. 所以问题就解决了. </p>\n<h3 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">MergeArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> temp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">,</span>m<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;=</span>m <span class=\"token operator\">&amp;&amp;</span> j<span class=\"token operator\">&lt;=</span>r <span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> temp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> temp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tk<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">)</span> temp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span> temp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\ti<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Mergesort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> temp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;=</span>l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Mergesort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">Mergesort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">MergeArray</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>归并排序的时间复杂度是 O(n*logn) , 比较稳定, 理论上速度优于快速排序, 因为快速排序效率取决于基准数的选取. 那实际情况呢, 我测试了一下. 1000 组 10000 个随机数的数据.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">单位: ms</th>\n<th align=\"center\">归并排序</th>\n<th align=\"center\">Shell Knuth</th>\n<th align=\"center\">快速排序</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">时间</td>\n<td align=\"center\">5900</td>\n<td align=\"center\">6079</td>\n<td align=\"center\">5841</td>\n</tr>\n</tbody></table>\n<p>然而发现并没有很大的速度差距. 原因是归并排序需要在数组间转来转去, 这个并没有算入时间复杂度, 这是个常数, 但这个常数大到不可忽略. 而且你需要一个临时数组(可以共用), 空间复杂度应该是 O(N).</p>\n<p>其实有可以实现 O(1) 的代码,但代码复杂度会变高. 有时间再研究, 毕竟<span class=\"heimu\">期中考迫近,作业写不完</span></p>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>利用堆这一结构进行排序，堆是一种数据结构，结构保证节点值大于其子树的所有值。利用堆来排序，先要构造一个堆，然后将堆顶元素与最后一个节点交换，最后一个节点已经为最大值，不参与接下来堆的构造。再维护一下堆，直到整个数组排序完成。</p>\n<p>因为一开始整个数组都是无序的，所以要对非叶子节点都进行构造堆，从下往上，从右往左。如果父节点和子节点发生交换，那么新的子节点也要和孙节点再次比较，因为换下来的数比原来的子节点小，那么需要再次比较。当然，循环到这个数比子节点大时就可以停止了。</p>\n<p>交换堆顶和最后一个元素后，其实根节点的左右子树都是一个堆，所以，只需要对堆顶(刚换上来的数)构造堆即可。</p>\n<h3 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h3><p>举个例子：<br>找到第一个非叶子节点，图中是6.<br><img src=\"https://p.130014.xyz/2020/11/03/7724107A-AAFF-4FB2-A07D-305831F0B238.png\"><br>和两个叶子节点比较后发现，8比6大，于是交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/F9341DE5-25A5-47E8-8218-10C552046FCD.png\"></p>\n<p>下一个节点是5，5&lt;8,交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/EED43B5F-C82D-4B96-BF3B-AC05E304388E.png\"></p>\n<p>此处因为8和5交换，对5新的位置要再次进行节点维护，6&gt;5,交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort001.png\"></p>\n<p>接下来把8换到最后一个节点，5换到堆顶，维护堆。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort002.png\"></p>\n<p>6&gt;5 ，交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort003.png\"></p>\n<p>堆维护完毕，6与2交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort004.png\"></p>\n<p>5&gt;2，5和2交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort005.png\"></p>\n<p>堆生成完毕。5和4交换。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort006.png\"></p>\n<p>交换完还是满足堆的定义，于是交换2和4，排序完成。</p>\n<p><img src=\"https://p.130014.xyz/2020/11/03/sort007.png\"></p>\n<h3 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">IfyMaxHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> dad<span class=\"token operator\">=</span>start<span class=\"token punctuation\">,</span>son<span class=\"token operator\">=</span>dad<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>son<span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">&#123;</span>\n  \t     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>son<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> son<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">)</span> son<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  \t     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>dad<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n  \t     std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>dad<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t     dad<span class=\"token operator\">=</span>son<span class=\"token punctuation\">;</span>\n  \t     son<span class=\"token operator\">=</span>dad<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>len<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">&#123;</span>\n  \t     <span class=\"token function\">IfyMaxHeap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token punctuation\">&#125;</span>\n  \t\n  \t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">&#123;</span>\n  \t     std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t     <span class=\"token function\">IfyMaxHeap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"复杂度分析-1\"><a href=\"#复杂度分析-1\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>时间复杂度O(nlogn) 。第一次构造堆nlogn，第二次到第n次，每次logn，最终和近似 2nlogn，是nlogn级别的。</p>\n<h3 id=\"反思优化\"><a href=\"#反思优化\" class=\"headerlink\" title=\"反思优化\"></a>反思优化</h3><p>问题来了，好像慢了点？就是常数大的问题，quicksort甚至跑出了10s以内的好成绩，那为什么呢。原因就在我们总是把最小数换到堆顶，这样会比较很多次，要不我们把它存到另一个数组，然后把左右节点大的换到堆顶进行维护。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">IfyMaxHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> dad<span class=\"token operator\">=</span>start<span class=\"token punctuation\">,</span>son<span class=\"token operator\">=</span>dad<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>son<span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>son<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> son<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">)</span> son<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>dad<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n             std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>dad<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             dad<span class=\"token operator\">=</span>son<span class=\"token punctuation\">;</span>\n             son<span class=\"token operator\">=</span>dad<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">IfyMaxHeapAdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> dad<span class=\"token operator\">=</span>start<span class=\"token punctuation\">,</span>son<span class=\"token operator\">=</span>dad<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>son<span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>son<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> son<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">)</span> son<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n             s<span class=\"token punctuation\">[</span>dad<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             s<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n             dad<span class=\"token operator\">=</span>son<span class=\"token punctuation\">;</span>\n             son<span class=\"token operator\">=</span>dad<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapSortAdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> temp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>len<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token function\">IfyMaxHeap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n             temp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n             <span class=\"token function\">IfyMaxHeapAdd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"速度对比-1\"><a href=\"#速度对比-1\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h3><p>使用 10000 组10000个随机数。（运行环境有别于上面的测试环境）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">单位: ms</th>\n<th align=\"center\">HeapSort</th>\n<th align=\"center\">HeapSortAdd</th>\n<th align=\"center\">MergeSort</th>\n<th align=\"center\">Shell Knuth</th>\n<th align=\"center\">Quicksort</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">时间</td>\n<td align=\"center\">22146.036</td>\n<td align=\"center\">12042.721</td>\n<td align=\"center\">12320.506</td>\n<td align=\"center\">11911.036</td>\n<td align=\"center\">11750.599</td>\n</tr>\n</tbody></table>\n<p>​    发现常数下来了. <span class=\"heimu\">煞笔我居然因为一个小错误写了一下午.</span></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    排序算法基本就结束了, 而公认的最高效的还是快速排序, 其他或多或少都有些缺点. 如果允许还是尽量使用 STL 里的 sort , 毕竟结构体的排序…</p>"},{"title":"ST表","date":"2020-11-30T01:33:52.000Z","update":"2021-01-24T03:54:22.000Z","_content":"ST(SparseTable)表是解决多次询问区间最值的算法 ,支持静态查询区间最值 , 预处理只需要$O(NlogN)$ , 可以实现$$O(1)$$查找. 但是它不支持在线修改 . ST 表还能解决其他具有类似性质的问题 .\n\n<!-- more -->\n\n## 预处理\n\n事实上 s \\[i][j] 表示 从i开始 2<sup>j</sup> 个元素的最小(大)值 .那么很显然 , 有递推公式 \n$$\ns[i][j]=min(s[i][j-1],s[i+2^{j-1}][j-1])\\\\\n若j=1时 , s[i][0]=num[i]\n$$\n\n## 查询\n\n首先先说明一个定理:\n$$\n2^{Log(a)}>a/2 \\\\\nLog(a)=\\lfloor log_2(a) \\rfloor\n$$\n例如 : Log(4)=2 , Log(5)=2 , Log(6)=2 , Log(7)=2 , Log(8)=3 (定理证明略)\n\n所以一个长度为 len 的区间 [x,y] 必定会被 两个区间长度为 2<sup>Log(a)</sup> 的区间包含 , 而这两个区间都是经过预处理的 .\n\n## 例题[HDU3183](http://acm.hdu.edu.cn/showproblem.php?pid=3183) \n\n### 题目大意\n\n就是给一个数 , 问你去掉m位数后的最小值 .\n\n### 解题思路\n\n我一开始是想着能不能试着去掉最大数 , 然后有个问题一直无法解决就是前导零 .所以我们换个思路 , 要最小不就是找比较小的数放在前面吗 ? 注意选过的数之前的就不能选了, 因为我们按数位从前往后选的 . 我们还有个选择区间 , 不然最后数字不够就不行了. 区间最小值的下标就可以用 ST 表 , 但本题直接用循环也是能过的.\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\nint len,m;\nchar s[1010];\nint bin[20],Log[1010];\nint ST[1010][20];\n\nint Min(int a,int b)\n{\n\treturn s[a]<=s[b]?a:b;\n}\n\nvoid getST()\n{\n\tlen=strlen(s);\n\tmemset(ST,0,sizeof(ST));\n\tfor (int j=0;j<=11;j++){\n\t\tfor (int i=0;i+bin[j]-1<len;i++){\n\t\t\tif (j==0) ST[i][j]=i;\n\t\t\telse ST[i][j]=Min(ST[i][j-1],ST[i+bin[j-1]][j-1]);\n\t\t}\n\t}\n}\n\nint STsearch(int x,int y)\n{\n\tif (x==y) return x;\n\tint t=Log[y-x+1];\n\treturn Min(ST[x][t],ST[y-bin[t]+1][t]);\n}\n\nint main()\n{\n\tLog[0]=-1;\n\tfor (int i=1,cnt=0;cnt<=12;cnt++,i<<=1) bin[cnt]=i;\n\tfor (int i=1;i<1010;i++) Log[i]=Log[i/2]+1;\n\twhile (scanf(\"%s %d\",s,&m)!=EOF)\n\t{\n\t\tbool flag=true;\n\t\tint l=0,r=m;\n\t\tgetST();\n\t\tif (m>=len) {\n\t\t\tputchar('0');\n\t\t\tputchar('\\n');\n\t\t\tcontinue;\n\t\t}\n\t\tfor (int i=1;i<=len-m;i++){\n\t\t\tl=STsearch(l,r);\n\t\t\tif (flag && s[l]!='0') flag=false;\n\t\t\tif (!flag) putchar(s[l]);\n\t\t\tr++;\n\t\t\tl++;\n\t\t}\n\t\tif (flag) putchar('0');\n\t\tputchar(10);\n\t\tmemset(s,0,sizeof(s));//debug 1 hours\n\t}\n\treturn 0;\n}\n```\n\n### 例题AtcoderABC189_C\n\n维护区间最小值，但是需要注意一点，就是此题区间是双闭区间。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=1e5+10;\n//#define debug 0\nint st[maxn][30];\nint a[maxn],bin[35],lg[maxn]; \n\nvoid getst(int n)\n{\n\tbin[0]=1;lg[0]=-1;\n\tfor (int i=1;i<=16;i++) \n\t\tbin[i]=2*bin[i-1];\n\tfor (int i=1;i<=1e5;i++) \n\t\tlg[i]=lg[i/2]+1;\n\tfor (int j=0;j<=16;j++)\n\t\tfor (int i=0;i+bin[j]-1<n;i++)\n\t\t{\n\t\t\tif (j==0) st[i][j]=a[i];\n\t\t\telse \n\t\t\t{\n\t\t\t\tst[i][j]=min(st[i][j-1],st[i+bin[j-1]][j-1]); \n\t\t\t\t#ifdef debug\n\t\t\t\tprintf(\"%d %d: %d %d final %d\\n\",i,j,st[i][j-1],st[i+bin[j-1]][j-1],st[i][j]);\n\t\t\t\t#endif \n\t\t\t}\n\t\t}\n}\n\nint stsearch(int l,int r)\n{\n\tif (l==r) return a[l];\n\tint t=lg[r-l+1];\n\treturn min(st[l][t],st[r-bin[t]+1][t]);\n}\n\nint main(){\n\tint n,ans=0;\n\tscanf(\"%d\",&n);\n\tfor (int i=0;i<n;i++) scanf(\"%d\",&a[i]);\n\tgetst(n);\n\tfor (int i=0;i<n;i++)\n\t{\n\t\tfor (int j=i;j<n;j++)\n\t\t{\n\t\t\tans=max(ans,(j-i+1)*stsearch(i,j));\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n","source":"_posts/XCPC/SparseTable.md","raw":"---\ntitle: ST表\ndate: 2020-11-30 9:33:52\nupdate: 2021-01-24 11:54:22\ncategories:\n\t- ICPC 数据结构\ntags:\n\t- ST表\n---\nST(SparseTable)表是解决多次询问区间最值的算法 ,支持静态查询区间最值 , 预处理只需要$O(NlogN)$ , 可以实现$$O(1)$$查找. 但是它不支持在线修改 . ST 表还能解决其他具有类似性质的问题 .\n\n<!-- more -->\n\n## 预处理\n\n事实上 s \\[i][j] 表示 从i开始 2<sup>j</sup> 个元素的最小(大)值 .那么很显然 , 有递推公式 \n$$\ns[i][j]=min(s[i][j-1],s[i+2^{j-1}][j-1])\\\\\n若j=1时 , s[i][0]=num[i]\n$$\n\n## 查询\n\n首先先说明一个定理:\n$$\n2^{Log(a)}>a/2 \\\\\nLog(a)=\\lfloor log_2(a) \\rfloor\n$$\n例如 : Log(4)=2 , Log(5)=2 , Log(6)=2 , Log(7)=2 , Log(8)=3 (定理证明略)\n\n所以一个长度为 len 的区间 [x,y] 必定会被 两个区间长度为 2<sup>Log(a)</sup> 的区间包含 , 而这两个区间都是经过预处理的 .\n\n## 例题[HDU3183](http://acm.hdu.edu.cn/showproblem.php?pid=3183) \n\n### 题目大意\n\n就是给一个数 , 问你去掉m位数后的最小值 .\n\n### 解题思路\n\n我一开始是想着能不能试着去掉最大数 , 然后有个问题一直无法解决就是前导零 .所以我们换个思路 , 要最小不就是找比较小的数放在前面吗 ? 注意选过的数之前的就不能选了, 因为我们按数位从前往后选的 . 我们还有个选择区间 , 不然最后数字不够就不行了. 区间最小值的下标就可以用 ST 表 , 但本题直接用循环也是能过的.\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\nint len,m;\nchar s[1010];\nint bin[20],Log[1010];\nint ST[1010][20];\n\nint Min(int a,int b)\n{\n\treturn s[a]<=s[b]?a:b;\n}\n\nvoid getST()\n{\n\tlen=strlen(s);\n\tmemset(ST,0,sizeof(ST));\n\tfor (int j=0;j<=11;j++){\n\t\tfor (int i=0;i+bin[j]-1<len;i++){\n\t\t\tif (j==0) ST[i][j]=i;\n\t\t\telse ST[i][j]=Min(ST[i][j-1],ST[i+bin[j-1]][j-1]);\n\t\t}\n\t}\n}\n\nint STsearch(int x,int y)\n{\n\tif (x==y) return x;\n\tint t=Log[y-x+1];\n\treturn Min(ST[x][t],ST[y-bin[t]+1][t]);\n}\n\nint main()\n{\n\tLog[0]=-1;\n\tfor (int i=1,cnt=0;cnt<=12;cnt++,i<<=1) bin[cnt]=i;\n\tfor (int i=1;i<1010;i++) Log[i]=Log[i/2]+1;\n\twhile (scanf(\"%s %d\",s,&m)!=EOF)\n\t{\n\t\tbool flag=true;\n\t\tint l=0,r=m;\n\t\tgetST();\n\t\tif (m>=len) {\n\t\t\tputchar('0');\n\t\t\tputchar('\\n');\n\t\t\tcontinue;\n\t\t}\n\t\tfor (int i=1;i<=len-m;i++){\n\t\t\tl=STsearch(l,r);\n\t\t\tif (flag && s[l]!='0') flag=false;\n\t\t\tif (!flag) putchar(s[l]);\n\t\t\tr++;\n\t\t\tl++;\n\t\t}\n\t\tif (flag) putchar('0');\n\t\tputchar(10);\n\t\tmemset(s,0,sizeof(s));//debug 1 hours\n\t}\n\treturn 0;\n}\n```\n\n### 例题AtcoderABC189_C\n\n维护区间最小值，但是需要注意一点，就是此题区间是双闭区间。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=1e5+10;\n//#define debug 0\nint st[maxn][30];\nint a[maxn],bin[35],lg[maxn]; \n\nvoid getst(int n)\n{\n\tbin[0]=1;lg[0]=-1;\n\tfor (int i=1;i<=16;i++) \n\t\tbin[i]=2*bin[i-1];\n\tfor (int i=1;i<=1e5;i++) \n\t\tlg[i]=lg[i/2]+1;\n\tfor (int j=0;j<=16;j++)\n\t\tfor (int i=0;i+bin[j]-1<n;i++)\n\t\t{\n\t\t\tif (j==0) st[i][j]=a[i];\n\t\t\telse \n\t\t\t{\n\t\t\t\tst[i][j]=min(st[i][j-1],st[i+bin[j-1]][j-1]); \n\t\t\t\t#ifdef debug\n\t\t\t\tprintf(\"%d %d: %d %d final %d\\n\",i,j,st[i][j-1],st[i+bin[j-1]][j-1],st[i][j]);\n\t\t\t\t#endif \n\t\t\t}\n\t\t}\n}\n\nint stsearch(int l,int r)\n{\n\tif (l==r) return a[l];\n\tint t=lg[r-l+1];\n\treturn min(st[l][t],st[r-bin[t]+1][t]);\n}\n\nint main(){\n\tint n,ans=0;\n\tscanf(\"%d\",&n);\n\tfor (int i=0;i<n;i++) scanf(\"%d\",&a[i]);\n\tgetst(n);\n\tfor (int i=0;i<n;i++)\n\t{\n\t\tfor (int j=i;j<n;j++)\n\t\t{\n\t\t\tans=max(ans,(j-i+1)*stsearch(i,j));\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n","slug":"XCPC/SparseTable","published":1,"updated":"2021-06-26T15:48:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uk3002t63jn4d8jdnha","content":"<p>ST(SparseTable)表是解决多次询问区间最值的算法 ,支持静态查询区间最值 , 预处理只需要$O(NlogN)$ , 可以实现$$O(1)$$查找. 但是它不支持在线修改 . ST 表还能解决其他具有类似性质的问题 .</p>\n<span id=\"more\"></span>\n\n<h2 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h2><p>事实上 s [i][j] 表示 从i开始 2<sup>j</sup> 个元素的最小(大)值 .那么很显然 , 有递推公式<br>$$<br>s[i][j]=min(s[i][j-1],s[i+2^{j-1}][j-1])\\<br>若j=1时 , s[i][0]=num[i]<br>$$</p>\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><p>首先先说明一个定理:<br>$$<br>2^{Log(a)}&gt;a/2 \\<br>Log(a)=\\lfloor log_2(a) \\rfloor<br>$$<br>例如 : Log(4)=2 , Log(5)=2 , Log(6)=2 , Log(7)=2 , Log(8)=3 (定理证明略)</p>\n<p>所以一个长度为 len 的区间 [x,y] 必定会被 两个区间长度为 2<sup>Log(a)</sup> 的区间包含 , 而这两个区间都是经过预处理的 .</p>\n<h2 id=\"例题HDU3183\"><a href=\"#例题HDU3183\" class=\"headerlink\" title=\"例题HDU3183\"></a>例题<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=3183\">HDU3183</a></h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>就是给一个数 , 问你去掉m位数后的最小值 .</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>我一开始是想着能不能试着去掉最大数 , 然后有个问题一直无法解决就是前导零 .所以我们换个思路 , 要最小不就是找比较小的数放在前面吗 ? 注意选过的数之前的就不能选了, 因为我们按数位从前往后选的 . 我们还有个选择区间 , 不然最后数字不够就不行了. 区间最小值的下标就可以用 ST 表 , 但本题直接用循环也是能过的.</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> len<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> bin<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>Log<span class=\"token punctuation\">[</span><span class=\"token number\">1010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ST<span class=\"token punctuation\">[</span><span class=\"token number\">1010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">getST</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tlen<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ST<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> ST<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">Min</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ST<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">STsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span>y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span>Log<span class=\"token punctuation\">[</span>y<span class=\"token operator\">-</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Min</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ST<span class=\"token punctuation\">[</span>y<span class=\"token operator\">-</span>bin<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tLog<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>cnt<span class=\"token operator\">&lt;=</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">&lt;&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> bin<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1010</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> Log<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Log<span class=\"token punctuation\">[</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> l<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>r<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">getST</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token operator\">>=</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>len<span class=\"token operator\">-</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tl<span class=\"token operator\">=</span><span class=\"token function\">STsearch</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tl<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//debug 1 hours</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"例题AtcoderABC189-C\"><a href=\"#例题AtcoderABC189-C\" class=\"headerlink\" title=\"例题AtcoderABC189_C\"></a>例题AtcoderABC189_C</h3><p>维护区间最小值，但是需要注意一点，就是此题区间是双闭区间。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//#define debug 0</span>\n<span class=\"token keyword\">int</span> st<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>bin<span class=\"token punctuation\">[</span><span class=\"token number\">35</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>lg<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">void</span> <span class=\"token function\">getst</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tbin<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>lg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\tbin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>bin<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">1e5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\tlg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>lg<span class=\"token punctuation\">[</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\t\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">debug</span></span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d: %d %d final %d\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> </span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">stsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span>r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span>lg<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span>bin<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">getst</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">stsearch</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>ST(SparseTable)表是解决多次询问区间最值的算法 ,支持静态查询区间最值 , 预处理只需要$O(NlogN)$ , 可以实现$$O(1)$$查找. 但是它不支持在线修改 . ST 表还能解决其他具有类似性质的问题 .</p>","more":"<h2 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h2><p>事实上 s [i][j] 表示 从i开始 2<sup>j</sup> 个元素的最小(大)值 .那么很显然 , 有递推公式<br>$$<br>s[i][j]=min(s[i][j-1],s[i+2^{j-1}][j-1])\\<br>若j=1时 , s[i][0]=num[i]<br>$$</p>\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><p>首先先说明一个定理:<br>$$<br>2^{Log(a)}&gt;a/2 \\<br>Log(a)=\\lfloor log_2(a) \\rfloor<br>$$<br>例如 : Log(4)=2 , Log(5)=2 , Log(6)=2 , Log(7)=2 , Log(8)=3 (定理证明略)</p>\n<p>所以一个长度为 len 的区间 [x,y] 必定会被 两个区间长度为 2<sup>Log(a)</sup> 的区间包含 , 而这两个区间都是经过预处理的 .</p>\n<h2 id=\"例题HDU3183\"><a href=\"#例题HDU3183\" class=\"headerlink\" title=\"例题HDU3183\"></a>例题<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=3183\">HDU3183</a></h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>就是给一个数 , 问你去掉m位数后的最小值 .</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>我一开始是想着能不能试着去掉最大数 , 然后有个问题一直无法解决就是前导零 .所以我们换个思路 , 要最小不就是找比较小的数放在前面吗 ? 注意选过的数之前的就不能选了, 因为我们按数位从前往后选的 . 我们还有个选择区间 , 不然最后数字不够就不行了. 区间最小值的下标就可以用 ST 表 , 但本题直接用循环也是能过的.</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> len<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> bin<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>Log<span class=\"token punctuation\">[</span><span class=\"token number\">1010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ST<span class=\"token punctuation\">[</span><span class=\"token number\">1010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">getST</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tlen<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ST<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> ST<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">Min</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ST<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">STsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span>y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span>Log<span class=\"token punctuation\">[</span>y<span class=\"token operator\">-</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Min</span><span class=\"token punctuation\">(</span>ST<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ST<span class=\"token punctuation\">[</span>y<span class=\"token operator\">-</span>bin<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tLog<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>cnt<span class=\"token operator\">&lt;=</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">&lt;&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> bin<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1010</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> Log<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Log<span class=\"token punctuation\">[</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> l<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>r<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">getST</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token operator\">>=</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>len<span class=\"token operator\">-</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tl<span class=\"token operator\">=</span><span class=\"token function\">STsearch</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tl<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//debug 1 hours</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"例题AtcoderABC189-C\"><a href=\"#例题AtcoderABC189-C\" class=\"headerlink\" title=\"例题AtcoderABC189_C\"></a>例题AtcoderABC189_C</h3><p>维护区间最小值，但是需要注意一点，就是此题区间是双闭区间。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> inf<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//#define debug 0</span>\n<span class=\"token keyword\">int</span> st<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>bin<span class=\"token punctuation\">[</span><span class=\"token number\">35</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>lg<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">void</span> <span class=\"token function\">getst</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tbin<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>lg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\tbin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>bin<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">1e5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\tlg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>lg<span class=\"token punctuation\">[</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\t\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">debug</span></span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d: %d %d final %d\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>bin<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> </span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">stsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span>r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span>lg<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span>bin<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">getst</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">stsearch</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"UEST-CPC(未完成)","date":"2020-12-08T07:43:01.000Z","_content":"\n> 初赛\n\n​\t早上状态还行 , A了几道 .中午吃饭又丢饭卡又丢键盘 , 烦 . 下午就 A 了一道 , 晚上两道题都没 Debug 出来 , 很难受 . 总算是进了决赛 . 排名太后了吧 . \n\n> 决赛\n\n​\t记错了日期 , 前一天才发现的 . 然后那天本来打算补作业加准备四级 , 晚上去看看学校的冬日祭 . 全没戏 . 完全没准备 , 作业还没写完 . 要跑到清水河校区 , 晚上还要赶回来四级模拟 . 模板也没去打印 , 听天由命了我 . 然后最后只做了签到题 ...\n\n​    居然有个三等奖 ~~(安慰奖)~~ .\n\n<!-- more -->\n\n---\n\n# 初赛\n\n​\t初赛题目也找不到了,我也懒得去翻了 . 确实题目会水一点 , 早上写的对拍都挺好写 , 所以debug也简单. 其实初赛状态比决赛好 , 然后队伍分工本来就有问题 , 但因为状态好 , 结果上看不出什么 .还有因为google翻译插件 , 没有翻译问题 , 这在决赛成了致命伤.\n\n# 决赛\n\n## 赛前\n\n约了LY大佬 , 在清水河校区踢桃了一下 , 然后报道后下载了IDE , 吃了午饭.\n\n那这里就不得不提 UESTC 的人下人 ——沙河人了。大部分沙河人指软件工程本科生，他们交着比其他人高的学费，住在~~破旧的~~老校区。~~事实上当时还是沙河卖地补足资金的，成都一环路，emmm~~这边真的是什么都好，除了交通不是很方便，但是校内已经能提供大部分你想要的了。\n\n## 比赛开始？\n\n因为有很多的选手还没来，比赛推迟了15min，于是回校时间又危险了。因为回去刚好会碰到高峰期。\n\n## 题目\n\n### Problem A\n\n\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/UEST-CPC.md","raw":"---\ntitle: UEST-CPC(未完成)\ndate: 2020-12-8 15:43:01\ntags:\n  - BST\n  - string\n  - 堆\ncategories:\n  - ICPC Programming Contest\n---\n\n> 初赛\n\n​\t早上状态还行 , A了几道 .中午吃饭又丢饭卡又丢键盘 , 烦 . 下午就 A 了一道 , 晚上两道题都没 Debug 出来 , 很难受 . 总算是进了决赛 . 排名太后了吧 . \n\n> 决赛\n\n​\t记错了日期 , 前一天才发现的 . 然后那天本来打算补作业加准备四级 , 晚上去看看学校的冬日祭 . 全没戏 . 完全没准备 , 作业还没写完 . 要跑到清水河校区 , 晚上还要赶回来四级模拟 . 模板也没去打印 , 听天由命了我 . 然后最后只做了签到题 ...\n\n​    居然有个三等奖 ~~(安慰奖)~~ .\n\n<!-- more -->\n\n---\n\n# 初赛\n\n​\t初赛题目也找不到了,我也懒得去翻了 . 确实题目会水一点 , 早上写的对拍都挺好写 , 所以debug也简单. 其实初赛状态比决赛好 , 然后队伍分工本来就有问题 , 但因为状态好 , 结果上看不出什么 .还有因为google翻译插件 , 没有翻译问题 , 这在决赛成了致命伤.\n\n# 决赛\n\n## 赛前\n\n约了LY大佬 , 在清水河校区踢桃了一下 , 然后报道后下载了IDE , 吃了午饭.\n\n那这里就不得不提 UESTC 的人下人 ——沙河人了。大部分沙河人指软件工程本科生，他们交着比其他人高的学费，住在~~破旧的~~老校区。~~事实上当时还是沙河卖地补足资金的，成都一环路，emmm~~这边真的是什么都好，除了交通不是很方便，但是校内已经能提供大部分你想要的了。\n\n## 比赛开始？\n\n因为有很多的选手还没来，比赛推迟了15min，于是回校时间又危险了。因为回去刚好会碰到高峰期。\n\n## 题目\n\n### Problem A\n\n\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/UEST-CPC","published":1,"updated":"2021-06-26T15:35:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uk4002u63jne29metvk","content":"<blockquote>\n<p>初赛</p>\n</blockquote>\n<p>​    早上状态还行 , A了几道 .中午吃饭又丢饭卡又丢键盘 , 烦 . 下午就 A 了一道 , 晚上两道题都没 Debug 出来 , 很难受 . 总算是进了决赛 . 排名太后了吧 . </p>\n<blockquote>\n<p>决赛</p>\n</blockquote>\n<p>​    记错了日期 , 前一天才发现的 . 然后那天本来打算补作业加准备四级 , 晚上去看看学校的冬日祭 . 全没戏 . 完全没准备 , 作业还没写完 . 要跑到清水河校区 , 晚上还要赶回来四级模拟 . 模板也没去打印 , 听天由命了我 . 然后最后只做了签到题 …</p>\n<p>​    居然有个三等奖 <del>(安慰奖)</del> .</p>\n<span id=\"more\"></span>\n\n<hr>\n<h1 id=\"初赛\"><a href=\"#初赛\" class=\"headerlink\" title=\"初赛\"></a>初赛</h1><p>​    初赛题目也找不到了,我也懒得去翻了 . 确实题目会水一点 , 早上写的对拍都挺好写 , 所以debug也简单. 其实初赛状态比决赛好 , 然后队伍分工本来就有问题 , 但因为状态好 , 结果上看不出什么 .还有因为google翻译插件 , 没有翻译问题 , 这在决赛成了致命伤.</p>\n<h1 id=\"决赛\"><a href=\"#决赛\" class=\"headerlink\" title=\"决赛\"></a>决赛</h1><h2 id=\"赛前\"><a href=\"#赛前\" class=\"headerlink\" title=\"赛前\"></a>赛前</h2><p>约了LY大佬 , 在清水河校区踢桃了一下 , 然后报道后下载了IDE , 吃了午饭.</p>\n<p>那这里就不得不提 UESTC 的人下人 ——沙河人了。大部分沙河人指软件工程本科生，他们交着比其他人高的学费，住在<del>破旧的</del>老校区。<del>事实上当时还是沙河卖地补足资金的，成都一环路，emmm</del>这边真的是什么都好，除了交通不是很方便，但是校内已经能提供大部分你想要的了。</p>\n<h2 id=\"比赛开始？\"><a href=\"#比赛开始？\" class=\"headerlink\" title=\"比赛开始？\"></a>比赛开始？</h2><p>因为有很多的选手还没来，比赛推迟了15min，于是回校时间又危险了。因为回去刚好会碰到高峰期。</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"Problem-A\"><a href=\"#Problem-A\" class=\"headerlink\" title=\"Problem A\"></a>Problem A</h3><p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<blockquote>\n<p>初赛</p>\n</blockquote>\n<p>​    早上状态还行 , A了几道 .中午吃饭又丢饭卡又丢键盘 , 烦 . 下午就 A 了一道 , 晚上两道题都没 Debug 出来 , 很难受 . 总算是进了决赛 . 排名太后了吧 . </p>\n<blockquote>\n<p>决赛</p>\n</blockquote>\n<p>​    记错了日期 , 前一天才发现的 . 然后那天本来打算补作业加准备四级 , 晚上去看看学校的冬日祭 . 全没戏 . 完全没准备 , 作业还没写完 . 要跑到清水河校区 , 晚上还要赶回来四级模拟 . 模板也没去打印 , 听天由命了我 . 然后最后只做了签到题 …</p>\n<p>​    居然有个三等奖 <del>(安慰奖)</del> .</p>","more":"<hr>\n<h1 id=\"初赛\"><a href=\"#初赛\" class=\"headerlink\" title=\"初赛\"></a>初赛</h1><p>​    初赛题目也找不到了,我也懒得去翻了 . 确实题目会水一点 , 早上写的对拍都挺好写 , 所以debug也简单. 其实初赛状态比决赛好 , 然后队伍分工本来就有问题 , 但因为状态好 , 结果上看不出什么 .还有因为google翻译插件 , 没有翻译问题 , 这在决赛成了致命伤.</p>\n<h1 id=\"决赛\"><a href=\"#决赛\" class=\"headerlink\" title=\"决赛\"></a>决赛</h1><h2 id=\"赛前\"><a href=\"#赛前\" class=\"headerlink\" title=\"赛前\"></a>赛前</h2><p>约了LY大佬 , 在清水河校区踢桃了一下 , 然后报道后下载了IDE , 吃了午饭.</p>\n<p>那这里就不得不提 UESTC 的人下人 ——沙河人了。大部分沙河人指软件工程本科生，他们交着比其他人高的学费，住在<del>破旧的</del>老校区。<del>事实上当时还是沙河卖地补足资金的，成都一环路，emmm</del>这边真的是什么都好，除了交通不是很方便，但是校内已经能提供大部分你想要的了。</p>\n<h2 id=\"比赛开始？\"><a href=\"#比赛开始？\" class=\"headerlink\" title=\"比赛开始？\"></a>比赛开始？</h2><p>因为有很多的选手还没来，比赛推迟了15min，于是回校时间又危险了。因为回去刚好会碰到高峰期。</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"Problem-A\"><a href=\"#Problem-A\" class=\"headerlink\" title=\"Problem A\"></a>Problem A</h3><p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"2021 UESTC ICPC Training for Data Structures","date":"2021-05-11T06:50:01.000Z","updated":"2021-05-21T02:59:01.000Z","_content":"\n> 板子题并没有给出详细的讲解 , 讲了大致思路 , 以及对于某些细节上的处理 . 代码也是把板子部分去了 , 留下需要改的部分 . \n\n<!-- more -->\n\n## A - 大佬集中营\n\n### 解题思路\n\n区间问题，先想到的是主席树。但是挂题意了，有可能多个学渣选大佬，所以 k 并不是区间长度。区间长度的话就是另外一道题了，是主席树的板题 [[POI2014]KUR-Couriers](https://www.luogu.com.cn/problem/P3567) 。所以问题复杂了，但是顺着刚才的思路，我们发现众数数量不超过一半时，答案就是 `1` .那如果超过一半呢 , 我们考虑这样的分组 . 第一组众数数量$2*k+1$非众数$2*k$, 这是优解 , 很好利用了向上取整多出的一个数 . 如果还有一组数$2*l+1$和$2*l$的话 , 加一下$2*(k+l+1)$个众数以及$2*(k+l)$个非众数 . 我们发现是可合并的 , 所以分组最少就取最大的一组 , 让剩余的众数每一个作为一组就好了 . \n\n- `tot` : 区间长度\n- `x` : 区间内众数个数\n- `ans` : 最终分的组数\n\n$$\nAns=x-[(tot-x)+1]+1=2*x-tot\n$$\n\n主席树维护一下区间内数字个数 , 叶子节点的最大值就是众数个数 . 而且子树的所有数字个数如果小于区间长度的一半 , 那就可以跳过该子树 , 用于剪枝 . \n\n### 复杂度分析\n\n时间复杂度方面建树是$O(N)$, 主席树每次操作$O(logN)$ , N 个版本$O(NlogN)$ , 每次查询$O(logN)$, Q和N同阶 , 最终时间复杂度\n$$\nO=O(N)+O(NlogN)+O(NlogN)=O(NlogN)\n$$\n\n### 关键代码\n\n```cpp\nvoid query(int x, int y, int l, int r)\n{\n    if (l == r) {\n        if (Tree[y].val - Tree[x].val > ans)\n            ans = Tree[y].val - Tree[x].val;\n        return ;\n    }\n    int mid = (l + r) >> 1;\n    if (Tree[Tree[y].ls].val - Tree[Tree[x].ls].val > all / 2)\n        query(Tree[x].ls, Tree[y].ls, l, mid );\n    if (Tree[Tree[y].rs].val - Tree[Tree[x].rs].val > all / 2)\n        query(Tree[x].rs, Tree[y].rs, mid + 1, r);\n}\nint update(int pre, int l, int r)\n{\n    int now = tot++;\n    Tree[now].ls = Tree[pre].ls;\n    Tree[now].rs = Tree[pre].rs;\n    Tree[now].val = Tree[pre].val;\n    if (l == r ) {\n        ++Tree[now].val;\n        return now;\n    }\n    int mid = (l + r) >> 1;\n    if (mid >= kth)\n        Tree[now].ls = update(Tree[now].ls, l, mid);\n    else\n        Tree[now].rs = update(Tree[now].rs, mid + 1, r);\n    Tree[now].val = Tree[Tree[now].ls].val + Tree[Tree[now].rs].val;\n    return now;\n}\n```\n\n## B - 土豆的树\n\n### 解题思路\n\n这道题是在 L 之后写的 , 于是思路很清晰 , 很像树链剖分 , 用到了 dfs 序 . 颜色就是用状态压缩 , 使用 `longlong` 表示染色状态 , 位运算使用异或判断颜色是否相同 , 同或用于染色 . 子树在dfs序上是连续的 , 于是可以用线段树维护颜色树 . 注意土豆的\"树\"可能是森林 , 一切都是这么令人惬意 , 结果我挂了题意 . 在讲座前一晚问了 ljj 大佬思路 , 发现一模一样 , 让我检查一下染色部分 , 容易写炸 . 讲座后思考了取模方法 , 发现原来是颜色序号差不超过 50 , 一直当成颜色不超过 50 种 , 这连 `map` 都没必要了 , 直接取模 51 不就好了 . 是 51 ,因为 0 和 50 号颜色可以同时存在 . 但是还是一直挂 , 最后乱改了好久 , 把所有数组开 `longlong` 就过了 , 原来是 lazy 标记的颜色没有用 `longlong` . 交了 28 发 , 麻了 .\n\n### 关键代码\n\n```cpp\nint cmpcol(ll a, ll b)\n{\n    int cnt = 0;\n    a ^= b;\n    while (a) {\n        if (a & 1ll)    ++cnt;\n        a >>= 1;\n    }\n    return cnt;\n}\nvoid pushdown(int root, int l, int r)\n{\n    sum[lson] = 1;\n    sum[rson] = 1;\n    color[lson] = mark[root];\n    color[rson] = mark[root];\n    mark[lson] = mark[root];\n    mark[rson] = mark[root];\n    mark[root] = 0;\n    return ;\n}\nvoid update(int root, int l, int r, int astart, int aend, ll k)\n{\n    if (astart <= l && r <= aend) {\n        mark[root] = k;\n        sum[root] = 1;\n        color[root] = k;\n    }\n    else {\n        if (mark[root])\n            pushdown(root, l, r);\n        if (astart <= mid && k ^ color[lson])\n            update(lson, l, mid, astart, aend, k);\n        if (aend > mid && k ^ color[rson])\n            update(rson, mid + 1, r, astart, aend, k);\n        color[root] = color[lson] | color[rson];\n        sum[root] = sum[rson] + cmpcol(color[root], color[rson]) ;\n    }\n}\ninline int qsum(int root, int l, int r, int fl, int fr, ll &col)\n{\n    int ans = 0;\n    if (fl <= l && r <= fr) {\n        ans = cmpcol(col, color[root] | col);\n        col = col | color[root];\n        return ans;\n    }\n    else {\n        if (mark[root])\n            pushdown(root, l, r);\n        if (fl <= mid && col ^ color[lson])\n            ans += qsum(lson, l, mid, fl, fr, col);\n        if (fr > mid && col ^ color[rson])\n            ans += qsum(rson, mid + 1, r, fl, fr, col);\n    }\n    return ans;\n}\nvoid dfs1(int x, int f)\n{\n    id[x] = ++cur;\n    for (int i = first[x]; i; i = inext[i]) {\n        if (to[i] == f)\n            continue;\n        dfs1(to[i], x);\n    }\n    tails[id[x]] = cur;\n}\n```\n\n## D - 三仙归洞\n\n### 解题思路\n\n一看就是要用链式结构来写 , 再看数据范围 , 就是要$O(N)$时间复杂度 . 一开始想用第 N 个链表节点表示第 N 个位置的碗 , 但是每次操作都要找到球 , 所以我们直接让第 N 个链表节点表示 N 个小球的信息 , 再加上头尾节点 , 用于输出 . \n\n对于操作四 , 我们用一个 `flag` 标记就好了 , 反向后左右边颠倒 . 还有一个点就是节点相邻执行操作三 , 注意一下细节 , 我懒得改就直接加了特判 . \n\n### 关键代码\n\n```cpp\nvoid move_to_l(int x, int y, bool flag)\n{\n    if (flag) {\n        move_to_r(x, y, !flag);\n        return ;\n    }\n    s[x].l->r = s[x].r;\n    s[x].r->l = s[x].l;\n    s[x].l = s[y].l;\n    s[x].r = &s[y];\n    s[y].l->r = &s[x];\n    s[y].l = &s[x];\n}\nvoid swap_xy(int x, int y)\n{\n    node *xl = s[x].l, *xr = s[x].r;\n    if (xr == &s[y]) {//交换相邻元素\n        s[x].l->r=&s[y];\n        s[y].r->l=&s[x];\n        s[x].r = s[y].r;\n        s[y].l = s[x].l;\n        s[x].l = &s[y];\n        s[y].r = &s[x];\n        return ;\n    }\n    if (xl == &s[y]) {\n        s[x].r->l=&s[y];\n        s[y].l->r=&s[x];\n        s[y].r = s[x].r;\n        s[x].l = s[y].l;\n        s[y].l = &s[x];\n        s[x].r = &s[y];\n        return ;\n    }\n    s[x].l->r = &s[y];\n    s[x].r->l = &s[y];\n    s[x].l = s[y].l;\n    s[x].r = s[y].r;\n    s[y].l->r = &s[x];\n    s[y].r->l = &s[x];\n    s[y].l = xl;\n    s[y].r = xr;\n}\n```\n\n---\n\n## E - 众人拾柴火焰高\n\n### 解题思路\n\n二分答案法，每次我们枚举答案，然后验证是否成立。再使用差分记录火堆的影响。我是使用一个队列，队列里面放的是某个火焰失去效果的时间点，每次判断队列首与当前时间是否匹配，匹配就减去一个火堆的加成。从头开始，某个村庄温度过低就放一个火堆刚好边缘影响了当前村庄。\n\n### 复杂度分析\n\n二分答案需要$O(logN)$次验证，每次验证是$O(N)$，最终时间复杂度是$O(NlogN)$.\n\n### 代码\n\n```cpp\nwhile (l + 1 < r)\n{\n    int mid = (l + r) >> 1;\n    int cntm = m, cur = 1, delta = 0;\n    bool flag = true;\n    while (flag) {\n        if (cur > n)    break;\n        while (!q.empty() && q.front() == cur) {\n            delta -= k;\n            q.pop();\n        }\n        while (num[cur] + delta < mid) {\n            if (cntm) {\n                --cntm;\tdelta += k;\n                q.push(cur + 2 * x + 1);\n            }\n            else {\n                flag = false;break;\n            }\n        }\n        ++cur;\n    }\n    if (flag)    l = mid;\n    else    r = mid;\n    while (!q.empty())    q.pop();\n}\n```\n\n## F - 我，不是说了能力要平均值么 · 改三\n\n### 解题思路\n\n首先 , 因为取模与逆元 , 我们可以忽略约分操作 (对比改一) . [逆元的前置知识](https://www.inzamz.top/2020/InverseElement/)在这 , 简单来说除以 K mod M 换成乘$K^{M-2}$取 mod M .\n\n### 代码\n\n```cpp\nfor (int i = 1; i <= n; ++i)\n{\n    int len = 1;\n    cin >> a;\n    while (!mx.empty() && mx.top().val >= a) {\n        len += mx.top().len;\n        mxsum -= (mx.top().len * mx.top().val);\n        mxsum = (mxsum + mod) % mod;\n        mx.pop();\n    }\n    mx.push(node(len, a));\n    mxsum += (len * a);\n    mxsum = (mxsum + mod) % mod;\n    len = 1;\n    while (!mn.empty() && mn.top().val <= a) {\n        len += mn.top().len;\n        mnsum -= (mn.top().len * mn.top().val);\n        mnsum = (mnsum + mod) % mod;\n        mn.pop();\n    }\n    mn.push(node(len, a));\n    mnsum += (len * a);\n    mnsum = (mnsum + mod) % mod;\n    ans = (ans + mxsum + mnsum) % mod;\n}\n```\n\n## G - 魔空「小行星带」\n\n### 解题思路\n\n学了K-D树后 , 可以很轻松构造出一棵树来维护他 , 但是要维护什么数据呢 , 这是解题的关键 . 然后发呆了一个晚上GHI都是细节处理不了 , 躺在床上想通了 . 先储存初始状态的和 , 对于取模操作我们再维护一个最大值和最小值 , 每次询问先对时间取模 , 然后找到在范围内的子树时 . \n\n- 如果最大值加上时间不需要取模 , 说明不用取模 .\n- 如果最小值加上时间还要取模 , 那么全部都要取模 , 减一下 .\n\n什么 ? 会混在一起 , 那继续找 ? 于是 TLE 了 . 后来看一眼数据 , c 居然才10 , 那我直接每个节点开个数组就好了 , 这样记录所有子节点各个初始值的数量 . 当区间完全包含在查询区间里 , 直接循环一遍求和就好了 . \n\n### 关键代码\n\n```cpp\nint query(int x)\n{\n    int res = 0;\n    if (!x || xr < L[x] || R[x] < xl || yr < D[x] || U[x] < yl)\n        return 0;\n    if (xl <= L[x] && R[x] <= xr && yl <= D[x] && U[x] <= yr ) {\n        for (int i = 0; i <= c; ++i)    res += (cnt[x][i] * ((i + t) % c));\n        return res;\n    }\n    if (xl <= s[x].x && s[x].x <= xr && yl <= s[x].y && s[x].y <= yr )\n        res = res + (s[x].v + t) % c;\n    return res + query(ls[x]) + query(rs[x]);\n}\nvoid maintain(int x)\n{\n    siz[x] = siz[ls[x]] + siz[rs[x]] + 1;\n    sum[x] = sum[ls[x]] + sum[rs[x]] + s[x].v;\n    for (int i = 0; i <= c; ++i)    cnt[x][i] = 0;\n    cnt[x][s[x].v] = 1;\n    L[x] = R[x] = s[x].x;\n    U[x] = D[x] = s[x].y;\n    if (ls[x]) {\n        L[x] = min(L[x], L[ls[x]]);R[x] = max(R[x], R[ls[x]]);\n        D[x] = min(D[x], D[ls[x]]);U[x] = max(U[x], U[ls[x]]);\n        for (int i = 0; i <= c; ++i)    cnt[x][i] += cnt[ls[x]][i];\n    }\n    if (rs[x]) {\n        L[x] = min(L[x], L[rs[x]]);R[x] = max(R[x], R[rs[x]]);\n        D[x] = min(D[x], D[rs[x]]);U[x] = max(U[x], U[rs[x]]);\n        for (int i = 0; i <= c; ++i)    cnt[x][i] += cnt[rs[x]][i];\n    }\n}\n```\n\n## I - 种田Ⅰ\n\n### 解题思路\n\n扫描线算法 , 每次统计覆盖长度,乘以到下一条线段的高度差 . 当然这道题要解决的是偶数次覆盖的问题 , 倒过来就是解决奇数次覆盖问题 . 使用了两个标记 , 一个是原本扫描线的标记 , 另一个是奇数次覆盖的的标记 , 这个标记只要每一次异或一下就好了 , 因为覆盖奇数次线段就没有了 , 偶数次覆盖就变成奇数次了 . 每次覆盖更新奇数段长度就好了 . 不知道题解说的反转一下是不是这个意思 . \n\n### 关键代码\n\n```cpp\nvoid do_odd(ll o, ll L, ll R)\n{\n    ll all = num[R + 1] - num[L];\n    tree[o].sum2 = (all - tree[o].sum2);\n}\nvoid pushup(ll o, ll L, ll R)\n{\n    if (tree[o].lazy)\n        tree[o].sum1 = num[R + 1] - num[L];\n    else\n        tree[o].sum1 = tree[lo].sum1 + tree[ro].sum1;\n}\nvoid pushdown(ll o, ll L, ll R)\n{\n    if (tree[o].lazy2) {\n        ll mid = (L + R) >> 1;\n        do_odd(lo, L, mid);\n        do_odd(ro, mid + 1, R);\n        tree[lo].lazy2 ^= 1;\n        tree[ro].lazy2 ^= 1;\n        tree[o].lazy2 = 0;\n    }\n}\nvoid addval(ll o, ll L, ll R)\n{\n    if (num[R + 1] <= ql || num[L] >= qr)\n        return ;\n    if (ql <= num[L] && num[R + 1] <= qr) {\n        tree[o].lazy += k;\n        do_odd(o, L, R);\n        tree[o].lazy2 ^= 1;\n        pushup(o, L, R);\n        return ;\n    }\n    pushdown(o, L, R);\n    ll M = (L + R) / 2;\n    addval(lo, L, M);\n    addval(ro, M + 1, R);\n    pushup(o, L, R);\n    tree[o].sum2 = tree[lo].sum2 + tree[ro].sum2;\n}\n```\n\n## J - 马老师的餐厅\n\n### 解题思路\n\n我们要想菜尽量多 , 就要让比较多的先使用 , 于是我们令每次取前三多的原材料做一道菜 . 注意做完后原材料不一定是前三多了 , 需要排序 . 原数组本就有序 , 于是用优先队列 . 重复上述过程 .\n\n### 关键代码\n\n```cpp\nwhile (q.size() >= 3)\n{\n    int a1, a2, a3;\n    ++ans;\n    a1 = q.top();\n    q.pop();\n    a2 = q.top();\n    q.pop();\n    a3 = q.top();\n    q.pop();\n    if (a1 - 1)\n        q.push(a1 - 1);\n    if (a2 - 1)\n        q.push(a2 - 1);\n    if (a3 - 1)\n        q.push(a3 - 1);\n}\n```\n\n## K - Yousa的鸟蛋\n\n### 解题思路\n\n第一次拿到题我尝试着写了个矩形树，结果时间复杂度报表，后来才想到了树状数组。类似于一维树状数组的差分思想，我们分析和与元素之间的关系。\n$$\n    sum_{i,j}=sum_{i-1,j}+sum_{i,j-1}-sum_{i-1,j-1}+a{i,j}\n    a_{i,j}=a_{i-1,j}+a_{i,j-1}-a_{i-1,j-1}+d{i,j}\n$$\n于是我们给出差分数组的公式\n$$\nd_{i,j}=a_{i,j}-a{i-1,j}-a_{i,j-1}+a_{i-1,j-1}\n$$\n接下来我们考虑的是区间和与差分数组的关系:\n$$\n\\begin{aligned}\n    sum_{x,y} &=\\sum_{i=1}^{x}\\sum_{j=1}^{y} a_{i,j} \\\\\n    &=\\sum_{i=1}^{x}\\sum_{j=1}^{y}\\sum_{k=1}^{i}\\sum_{l=1}^{j}d_{k,l}\\\\\n    &=\\sum_{i=1}^{x}\\sum_{j=1}^{y} (x+1)(y+1)d_{i,j}-(y+1)id_{i,j}-(x+1)jd_{i,j}+ijd_{i,j}\n\\end{aligned}\n$$\n于是我们维护四个数组，然后反过来按照公式求和就好了。\n\n### 复杂度分析\n\n时间复杂度每次查询和修改，每一个维度上树状数组操作都是$O(logN)$，于是二维树状数组就是$O(log^2N)$。空间复杂度$O(N^2)$。\n\n### 关键代码\n\n```cpp\nvoid addval(int x,int y,int k)\n{\n    v[0]=k;v[1]=k*x;v[2]=k*y;v[3]=k*x*y;\n    for (int i=x;i<=n;i+=lowbit(i))\n        for(int j=y;j<=m;j+=lowbit(j))\n        {\n            tarray[i][j][0]+=v[0];\n            tarray[i][j][1]+=v[1];\n            tarray[i][j][2]+=v[2];\n            tarray[i][j][3]+=v[3];\n        }\n}\n\nvoid add(int x1,int y1,int x2,int y2,ll k)\n{\n    addval(x1,y1,k);\n    addval(x2+1,y2+1,k);\n    addval(x1,y2+1,-k);\n    addval(x2+1,y1,-k);\n}\n\nll sum(int x,int y)\n{\n    v[0]=v[1]=v[2]=v[3]=0;\n    for(int i=x;i>0;i-=lowbit(i))\n        for(int j=y;j>0;j-=lowbit(j))\n        {\n            v[0]+=tarray[i][j][0];\n            v[1]+=tarray[i][j][1];\n            v[2]+=tarray[i][j][2];\n            v[3]+=tarray[i][j][3];\n        }\n    return (x+1)*(y+1)*v[0]-(y+1)*v[1]-(x+1)*v[2]+v[3];\n}\n\nll getsum(int x1,int y1,int x2,int y2)\n{\n    return sum(x2,y2)-sum(x1-1,y2)-sum(x2,y1-1)+sum(x1-1,y1-1);\n}\n```\n\n## L - 芜湖塔台请求起飞\n\n### 解题思路\n\n树链剖分板子题。树链剖分的的思想就是把某些树上的问题转化成链上的问题，使用线段树等结构来维护他，利用等就是dfs序。树上路径不需要遍历一整棵树，所以我们把树分成了若干条链~~（B是个阉割版的，有点像）~~。发现任意两个点总会汇集到一起某一个根结点，每次找路径的时候，所以每次我们不断从链尾跳到链头，根据节点深度决定哪个点跳，直到两个结点在同一条链上。\n链的分法就不多赘述了，找子树大小大的方向使链延伸。\n\n### 代码\n\n```cpp\nvoid dfs1(int x, int f, int d)\n{\n    fa[x] = f;\n    siz[x] = 1;\n    dep[x] = d;\n    int maxson = -1;\n    for (int i = first[x]; i; i = inext[i]) {\n        if (to[i] == f)\n            continue;\n        dfs1(to[i], x, d + 1);\n        siz[x] += siz[to[i]];\n        if (siz[to[i]] > maxson)\n            maxson = siz[to[i]], son[x] = to[i];\n    }\n}\nvoid dfs2(int x, int topf)\n{\n    id[x] = ++cur;\n    top[x] = topf;\n    w2[cur] = w1[x];\n    if (!son[x])\n        return ;\n    dfs2(son[x], topf);\n    for (int i = first[x]; i; i = inext[i]) {\n        if (to[i] != fa[x] && to[i] != son[x])\n            dfs2(to[i], to[i]);\n    }\n}\nint lss(int beg, int end)\n{\n    int ans = 0;\n    while (top[beg] != top[end]) {\n        if (dep[top[beg]] < dep[top[end]])\n            swap(beg, end);\n        ans +=sum(1, 1, n, id[top[beg]], id[beg]);\n        beg = fa[top[beg]];\n    }\n    if (dep[beg] > dep[end])\n        swap(beg, end);\n    ans += sum(1, 1, n, id[beg], id[end]);\n    return ans ;\n}\nint imax(int beg, int end)\n{\n    int ans = -inf;\n    while (top[beg] != top[end]) {\n        if (dep[top[beg]] < dep[top[end]])\n            swap(beg, end);\n        ans = max(ans, query(1, 1, n, id[top[beg]], id[beg]));\n        beg = fa[top[beg]];\n    }\n    if (dep[beg] > dep[end])\n        swap(beg, end);\n    ans = max(ans, query(1, 1, n, id[beg], id[end]));\n    return ans ;\n}\n```\n\n## M - 采集物资\n\n### 解题思路\n\n解决区间第k小问题，可以使用平衡树。但是其中有一个问题，就是有多个区域，而且还要合并，这就涉及到了启发式合并了。~~说白了就是暴力，还以为多神奇~~.\n\n题解说的是Splay，但是我的Splay真的写的稀烂，调了好久调不好，所以我直接掏出SBT。合并的时候找到小的一棵树，DFS一下整棵树，每个结点都插入要合并的树上。这里要注意，并查集的合并方向要和启发式合并相同。\n\n### 关键代码\n\n```cpp\nvoid dfs(int &rt, int &_to)\n{\n    if (!rt) return ;\n    f[id[rt]] = id[_to];\n    insert(_to, datas[rt], id[rt]);\n    if (son[rt][0])\n        dfs(son[rt][0], _to);\n    if (son[rt][1])\n        dfs(son[rt][1], _to);\n}\nvoid Merge(int &a, int &b)\n{\n    if (siz[a] > siz[b])\n        swap(a, b);\n    dfs(a, b);\n    a = b;\n}\n/*main\nint &p = root[ifind(a)];\nint &q = root[ifind(b)];\nif (p != q)\n    Merge(p, q);\n*/\n```\n\n## N - 土豆的序列\n\n### 解题思路\n\n平衡树板子题。接上题，因为专题初就手打了一遍SBT，所以SBT很熟。二叉平衡树就是遵循左子树小于根结点小于右子树的一棵树，然而因为插入顺序未知，如果选定某个结点作为根固定，很容易使树退化，甚至变成链表，对复杂度影响很大。于是有各种方式来平衡它，通过旋转使树尽量不退化。\n\nSplay遵循查找频率高的节点保持在离根近的地方，每次操作后都将结点旋转到根，而SBT(Size-Balanced-Tree)通过记录子树大小旋转实现平衡。\n\n基本的左旋右旋操作就是在保证树的性质不变的情况下把结点变为根结点的操作。\n\n### 关键代码\n\n```cpp\nvoid rotate(int &rt, int k)\n{\n    int nrt = son[rt][!k]; //new root\n    son[rt][!k] = son[nrt][k];\n    son[nrt][k] = rt;\n    siz[nrt] = siz[rt];\n    siz[rt] = siz[son[rt][0]] + siz[son[rt][1]] + 1;\n    rt = nrt;\n}\n\nvoid maintain(int &rt, bool k)\n{\n    if (siz[son[son[rt][k]][k]] > siz[son[rt][!k]])\n        rotate(son[rt][k], !k);\n    else if (siz[son[son[rt][k]][!k]] > siz[son[rt][!k]])\n        rotate(son[rt][k], k), rotate(rt, !k);\n    else\n        return ;\n    maintain(son[rt][0], 0);\n    maintain(son[rt][1], 1);\n    maintain(rt, 0);\n    maintain(rt, 1);\n}\n\nvoid insert(int &rt, int val)\n{\n    if (rt == 0) {\n        rt = ++tails;\n        datas[rt] = val;\n        son[rt][0] = son[rt][1] = 0;\n        siz[rt] = 1;\n        return ;\n    }\n    ++siz[rt];\n    if (val <= datas[rt])\n        insert(son[rt][0], val);\n    else\n        insert(son[rt][1], val);\n    maintain(rt, datas[rt] > val);\n}\n\nvoid del(int &rt, int val)\n{\n    if (datas[rt] != val) {\n        del(son[rt][datas[rt] < val], val);\n        siz[rt] = siz[son[rt][0]] + siz[son[rt][1]] + 1;\n        return ;\n    }\n    --siz[rt];\n    if (son[rt][0] == 0)\n        rt = son[rt][1];\n    else if (son[rt][1] == 0)\n        rt = son[rt][0];\n    else {\n        int p = son[rt][1];\n        while (son[p][0] != 0)\n            p = son[p][0];\n        datas[rt] = datas[p];\n        del(son[rt][1], datas[p]);\n    }\n}\n\nint pre (int val)\n{\n    int cur = sbt, ans = 0;\n    while (cur != 0) {\n        if (datas[cur] < val)\n            ans = cur, cur = son[cur][1];\n        else\n            cur = son[cur][0];\n    }\n    return datas[ans];\n}\n\nint nxt (int val)\n{\n    int cur = sbt, ans = 0;\n    while (cur != 0) {\n        if (datas[cur] > val)\n            ans = cur, cur = son[cur][0];\n        else\n            cur = son[cur][1];\n    }\n    return datas[ans];\n}\n\nint xth(int x)\n{\n    int cur = sbt;\n    while (siz[son[cur][0]] + 1 != x) {\n        if (siz[son[cur][0]] + 1 < x)\n            x -= (siz[son[cur][0]] + 1), cur = son[cur][1];\n        else\n            cur = son[cur][0];\n    }\n    return datas[cur];\n}\n\nint ranks(int val)\n{\n    int cur = sbt, ans = 0;\n    while (cur != 0) {\n        if (datas[cur] < val)\n            ans += (siz[son[cur][0]] + 1), cur = son[cur][1];\n        else\n            cur = son[cur][0];\n    }\n    return ans;\n}\n```\n\n## O - 土豆的集合\n\n### 解题思路\n\n主席树板题，一开始我想试着用栈模拟回退操作，结果调了好久最后TLE。后来学了一下主席树后，发现把主席树用在并查集上就能解决问题。但是此时不能路径压缩，因为路径压缩丢失了信息，导致后面回溯操作会出问题。\n\n集合合并时，我们不断递归到子结点，因为我们没走过的部分是没有任何改变的，所以直接重复利用，直将将沿途的链更新。\n因为主席树结点需要不断更新，所以不满足$2*o$和$2*o+1$的性质，需要单独记录左右孩子编号。\n\n### 关键代码\n\n```cpp\ninline int find(int root, int x)\n{\n    node now = Tree[root];\n    if (now.l == now.r)\n        return now.fa;\n    int mid = (now.l + now.r) >> 1;\n    if (x <= mid)\n        return find(now.ls,x);\n    else\n        return find(now.rs,x);\n}\n\ninline int getfa(int root, int x)\n{\n    int fa = find(root, x);\n    if (fa == x)\n        return x;\n    else\n        return getfa(root, fa);\n}\n\ninline int update(const int pre, int loc, int val)\n{\n    int now = tot++;\n    copy(now, pre);\n    if (Tree[now].l == Tree[now].r ) {\n        Tree[now].fa = val;\n        return now;\n    }\n    int mid = (Tree[now].l + Tree[now].r) >> 1;\n    if (loc <= mid)\n        Tree[now].ls = update(Tree[now].ls,loc,val);\n    else\n        Tree[now].rs = update(Tree[now].rs,loc,val);\n    return now;\n}\n```\n\n## T - 羽毛球赛\n\n### 解题思路\n\n回滚莫队算法，因为完全没接触过，所以从头开始学。先学了普通莫队算法，感觉很神奇，居然排了个序就能这么舒服的暴力。我看的是SPOJ3267Query，题目问的是某个区间内出现的数字总数，就是左右指针跑来跑去移动一下找结果嘛。\n\n然后就是回滚莫队了，问题就出在删除上，因为我们删除的时候已经丢失了上一次信息，所以要重新跑一遍获得？这样复杂度还不如直接暴力。回滚莫队思路是不删除，因为左端点同一块的询问，右端点都是递增的，于是我们处理右端点是不需要删除的，至于左端点部分，我们直接暴力解决就好了，因为分块过，保证每次左端点暴力不会超过$O(\\sqrt{N})$并且N个左端点，总时间复杂度还是$O(NlogN)$。\n\n回到T题，问题是如何保存数据能在$O(1)$内更新答案呢。我一开始保存的是每个数字目前最右的位置，但是这会导致右端点出现这个数时无法更新答案；改为最左边的又发现左端点暴力处理的时候也有问题，索性直接存了两个数，而且只存下一个块的位置，左端点所在的块信息只对每个左端点有效，不必保存。\n\n### 关键代码\n\n```cpp\nfor (int k = 0; k <= blockn; ++k)\n{\n    int l = ranger[k] + 1, r = ranger[k];\n    memset(cnt, 0, sizeof(cnt));\n    ll temp = 0, now = 0;\n    for (; block[q[i].l] == k; ++i) {\n        int ql = q[i].l, qr = q[i].r;\n        if (block[q[i].l] == block[q[i].r]) {\n            temp = 0;\n            for (int j = ql; j <= qr; ++j)\n                cnt2[id[j]] = 0;\n            for (int j = ql; j <= qr; ++j) {\n                if (!cnt2[id[j]])\n                    cnt2[id[j]] = j;\n                else\n                    temp = max(temp, 1ll * abs(j - cnt2[id[j]]));\n            }\n            ans[q[i].id] = temp;\n            continue;\n        }\n        while (r < qr) {\n            if (!cnt[id[++r]][0])\n                cnt[id[r]][1] = cnt[id[r]][0] = r;\n            else {\n                cnt[id[r]][1] = r;\n                now = max(now, 1ll * abs(r - cnt[id[r]][0]));\n            }\n        }\n        temp = now;\n        while (ql < l) {\n            if (!cnt[id[--l]][1])\n                cnt[id[l]][1] = l;\n            else\n                temp = max(temp, 1ll * abs(l - cnt[id[l]][1]));\n        }\n        ans[q[i].id] = temp;\n        while (l < ranger[k] + 1) {\n            if (cnt[id[l]][1] < ranger[k] + 1)\n                cnt[id[l]][1] = 0;\n            ++l;\n        }\n    }\n}\n```\n\n## V -  打怪兽\n\n### 解题思路\n\n离线RMQ , 直接上 ST 表 , 线段树也是可以的 , 但 ST 表还是香的 . [前置知识在这](https://www.inzamz.top/2020/SparseTable/) . \n\n### 代码\n\n```cpp\nvoid getst(int n)\n{\n    bin[0] = 1;\n    lg[0] = -1;\n    for (int i = 1; i <= 18; i++)\n        bin[i] = 2 * bin[i - 1];\n    for (int i = 1; i <= 1e5 + 10; i++)\n        lg[i] = lg[i / 2] + 1;\n    for (int j = 0; j <= 18; j++)\n        for (int i = 0; i + bin[j] - 1 <= n; i++) {\n            if (j == 0)\n                st[i][j] = a[i];\n            else {\n                st[i][j] = max(st[i][j - 1], st[i + bin[j - 1]][j - 1]);\n            }\n        }\n}\n\nint stsearch(int l, int r)\n{\n    if (l == r)\n        return a[l];\n    int t = lg[r - l + 1];\n    return max(st[l][t], st[r - bin[t] + 1][t]);\n}\n```\n\n## Y - 孩子与玩具\n\n### 解题思路\n\n放出 tag 后 , 发现是并查集 ? 我是直接贪心写的 ...  其实本质跟并查集就是一样的 . \n\n我们要让孩子开心的尽可能多 , 就是尽量让孩子尽可能只拿到一个玩具 , 当然第一个小朋友是不可避免要拿两个的 , 那就让出现次数最多的玩具先拿掉 . 于是我们不断把还没拿的玩具中出现最多的放进队列 , 然后把想要这个玩具的孩子枚举一遍 , 选给他们另一个想要的玩具 .\n\n### 关键代码\n\n```cpp\nq.push(imax);\nwhile (!q.empty())\n{\n    int cur = q.front();\n    q.pop();\n    for (int i = 0; i < s[cur].size(); ++i) {\n        if (!flag[s[cur][i].val] && !child[s[cur][i].ids]) {\n            --ans;\n            flag[s[cur][i].val] = child[s[cur][i].ids] = 1;\n            q.push(s[cur][i].val);\n        }\n    }\n}\ncout << ans << endl;\n```\n\n\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/UPST2021DS.md","raw":"---\ntitle: 2021 UESTC ICPC Training for Data Structures\ncategories:\n  - ICPC 数据结构\ntags:\n  - 线段树\n  - 主席树\n  - 链表\n  - 单调栈/队列\n  - 并查集\n  - ST表\n  - 树状数组\n  - 树链剖分\n  - 二叉平衡树\n  - 莫队算法\n  - 二分答案\n  - K-D树\n  - 扫描线\ndate: 2021-05-11 14:50:01\nupdated: 2021-05-21 10:59:01\n---\n\n> 板子题并没有给出详细的讲解 , 讲了大致思路 , 以及对于某些细节上的处理 . 代码也是把板子部分去了 , 留下需要改的部分 . \n\n<!-- more -->\n\n## A - 大佬集中营\n\n### 解题思路\n\n区间问题，先想到的是主席树。但是挂题意了，有可能多个学渣选大佬，所以 k 并不是区间长度。区间长度的话就是另外一道题了，是主席树的板题 [[POI2014]KUR-Couriers](https://www.luogu.com.cn/problem/P3567) 。所以问题复杂了，但是顺着刚才的思路，我们发现众数数量不超过一半时，答案就是 `1` .那如果超过一半呢 , 我们考虑这样的分组 . 第一组众数数量$2*k+1$非众数$2*k$, 这是优解 , 很好利用了向上取整多出的一个数 . 如果还有一组数$2*l+1$和$2*l$的话 , 加一下$2*(k+l+1)$个众数以及$2*(k+l)$个非众数 . 我们发现是可合并的 , 所以分组最少就取最大的一组 , 让剩余的众数每一个作为一组就好了 . \n\n- `tot` : 区间长度\n- `x` : 区间内众数个数\n- `ans` : 最终分的组数\n\n$$\nAns=x-[(tot-x)+1]+1=2*x-tot\n$$\n\n主席树维护一下区间内数字个数 , 叶子节点的最大值就是众数个数 . 而且子树的所有数字个数如果小于区间长度的一半 , 那就可以跳过该子树 , 用于剪枝 . \n\n### 复杂度分析\n\n时间复杂度方面建树是$O(N)$, 主席树每次操作$O(logN)$ , N 个版本$O(NlogN)$ , 每次查询$O(logN)$, Q和N同阶 , 最终时间复杂度\n$$\nO=O(N)+O(NlogN)+O(NlogN)=O(NlogN)\n$$\n\n### 关键代码\n\n```cpp\nvoid query(int x, int y, int l, int r)\n{\n    if (l == r) {\n        if (Tree[y].val - Tree[x].val > ans)\n            ans = Tree[y].val - Tree[x].val;\n        return ;\n    }\n    int mid = (l + r) >> 1;\n    if (Tree[Tree[y].ls].val - Tree[Tree[x].ls].val > all / 2)\n        query(Tree[x].ls, Tree[y].ls, l, mid );\n    if (Tree[Tree[y].rs].val - Tree[Tree[x].rs].val > all / 2)\n        query(Tree[x].rs, Tree[y].rs, mid + 1, r);\n}\nint update(int pre, int l, int r)\n{\n    int now = tot++;\n    Tree[now].ls = Tree[pre].ls;\n    Tree[now].rs = Tree[pre].rs;\n    Tree[now].val = Tree[pre].val;\n    if (l == r ) {\n        ++Tree[now].val;\n        return now;\n    }\n    int mid = (l + r) >> 1;\n    if (mid >= kth)\n        Tree[now].ls = update(Tree[now].ls, l, mid);\n    else\n        Tree[now].rs = update(Tree[now].rs, mid + 1, r);\n    Tree[now].val = Tree[Tree[now].ls].val + Tree[Tree[now].rs].val;\n    return now;\n}\n```\n\n## B - 土豆的树\n\n### 解题思路\n\n这道题是在 L 之后写的 , 于是思路很清晰 , 很像树链剖分 , 用到了 dfs 序 . 颜色就是用状态压缩 , 使用 `longlong` 表示染色状态 , 位运算使用异或判断颜色是否相同 , 同或用于染色 . 子树在dfs序上是连续的 , 于是可以用线段树维护颜色树 . 注意土豆的\"树\"可能是森林 , 一切都是这么令人惬意 , 结果我挂了题意 . 在讲座前一晚问了 ljj 大佬思路 , 发现一模一样 , 让我检查一下染色部分 , 容易写炸 . 讲座后思考了取模方法 , 发现原来是颜色序号差不超过 50 , 一直当成颜色不超过 50 种 , 这连 `map` 都没必要了 , 直接取模 51 不就好了 . 是 51 ,因为 0 和 50 号颜色可以同时存在 . 但是还是一直挂 , 最后乱改了好久 , 把所有数组开 `longlong` 就过了 , 原来是 lazy 标记的颜色没有用 `longlong` . 交了 28 发 , 麻了 .\n\n### 关键代码\n\n```cpp\nint cmpcol(ll a, ll b)\n{\n    int cnt = 0;\n    a ^= b;\n    while (a) {\n        if (a & 1ll)    ++cnt;\n        a >>= 1;\n    }\n    return cnt;\n}\nvoid pushdown(int root, int l, int r)\n{\n    sum[lson] = 1;\n    sum[rson] = 1;\n    color[lson] = mark[root];\n    color[rson] = mark[root];\n    mark[lson] = mark[root];\n    mark[rson] = mark[root];\n    mark[root] = 0;\n    return ;\n}\nvoid update(int root, int l, int r, int astart, int aend, ll k)\n{\n    if (astart <= l && r <= aend) {\n        mark[root] = k;\n        sum[root] = 1;\n        color[root] = k;\n    }\n    else {\n        if (mark[root])\n            pushdown(root, l, r);\n        if (astart <= mid && k ^ color[lson])\n            update(lson, l, mid, astart, aend, k);\n        if (aend > mid && k ^ color[rson])\n            update(rson, mid + 1, r, astart, aend, k);\n        color[root] = color[lson] | color[rson];\n        sum[root] = sum[rson] + cmpcol(color[root], color[rson]) ;\n    }\n}\ninline int qsum(int root, int l, int r, int fl, int fr, ll &col)\n{\n    int ans = 0;\n    if (fl <= l && r <= fr) {\n        ans = cmpcol(col, color[root] | col);\n        col = col | color[root];\n        return ans;\n    }\n    else {\n        if (mark[root])\n            pushdown(root, l, r);\n        if (fl <= mid && col ^ color[lson])\n            ans += qsum(lson, l, mid, fl, fr, col);\n        if (fr > mid && col ^ color[rson])\n            ans += qsum(rson, mid + 1, r, fl, fr, col);\n    }\n    return ans;\n}\nvoid dfs1(int x, int f)\n{\n    id[x] = ++cur;\n    for (int i = first[x]; i; i = inext[i]) {\n        if (to[i] == f)\n            continue;\n        dfs1(to[i], x);\n    }\n    tails[id[x]] = cur;\n}\n```\n\n## D - 三仙归洞\n\n### 解题思路\n\n一看就是要用链式结构来写 , 再看数据范围 , 就是要$O(N)$时间复杂度 . 一开始想用第 N 个链表节点表示第 N 个位置的碗 , 但是每次操作都要找到球 , 所以我们直接让第 N 个链表节点表示 N 个小球的信息 , 再加上头尾节点 , 用于输出 . \n\n对于操作四 , 我们用一个 `flag` 标记就好了 , 反向后左右边颠倒 . 还有一个点就是节点相邻执行操作三 , 注意一下细节 , 我懒得改就直接加了特判 . \n\n### 关键代码\n\n```cpp\nvoid move_to_l(int x, int y, bool flag)\n{\n    if (flag) {\n        move_to_r(x, y, !flag);\n        return ;\n    }\n    s[x].l->r = s[x].r;\n    s[x].r->l = s[x].l;\n    s[x].l = s[y].l;\n    s[x].r = &s[y];\n    s[y].l->r = &s[x];\n    s[y].l = &s[x];\n}\nvoid swap_xy(int x, int y)\n{\n    node *xl = s[x].l, *xr = s[x].r;\n    if (xr == &s[y]) {//交换相邻元素\n        s[x].l->r=&s[y];\n        s[y].r->l=&s[x];\n        s[x].r = s[y].r;\n        s[y].l = s[x].l;\n        s[x].l = &s[y];\n        s[y].r = &s[x];\n        return ;\n    }\n    if (xl == &s[y]) {\n        s[x].r->l=&s[y];\n        s[y].l->r=&s[x];\n        s[y].r = s[x].r;\n        s[x].l = s[y].l;\n        s[y].l = &s[x];\n        s[x].r = &s[y];\n        return ;\n    }\n    s[x].l->r = &s[y];\n    s[x].r->l = &s[y];\n    s[x].l = s[y].l;\n    s[x].r = s[y].r;\n    s[y].l->r = &s[x];\n    s[y].r->l = &s[x];\n    s[y].l = xl;\n    s[y].r = xr;\n}\n```\n\n---\n\n## E - 众人拾柴火焰高\n\n### 解题思路\n\n二分答案法，每次我们枚举答案，然后验证是否成立。再使用差分记录火堆的影响。我是使用一个队列，队列里面放的是某个火焰失去效果的时间点，每次判断队列首与当前时间是否匹配，匹配就减去一个火堆的加成。从头开始，某个村庄温度过低就放一个火堆刚好边缘影响了当前村庄。\n\n### 复杂度分析\n\n二分答案需要$O(logN)$次验证，每次验证是$O(N)$，最终时间复杂度是$O(NlogN)$.\n\n### 代码\n\n```cpp\nwhile (l + 1 < r)\n{\n    int mid = (l + r) >> 1;\n    int cntm = m, cur = 1, delta = 0;\n    bool flag = true;\n    while (flag) {\n        if (cur > n)    break;\n        while (!q.empty() && q.front() == cur) {\n            delta -= k;\n            q.pop();\n        }\n        while (num[cur] + delta < mid) {\n            if (cntm) {\n                --cntm;\tdelta += k;\n                q.push(cur + 2 * x + 1);\n            }\n            else {\n                flag = false;break;\n            }\n        }\n        ++cur;\n    }\n    if (flag)    l = mid;\n    else    r = mid;\n    while (!q.empty())    q.pop();\n}\n```\n\n## F - 我，不是说了能力要平均值么 · 改三\n\n### 解题思路\n\n首先 , 因为取模与逆元 , 我们可以忽略约分操作 (对比改一) . [逆元的前置知识](https://www.inzamz.top/2020/InverseElement/)在这 , 简单来说除以 K mod M 换成乘$K^{M-2}$取 mod M .\n\n### 代码\n\n```cpp\nfor (int i = 1; i <= n; ++i)\n{\n    int len = 1;\n    cin >> a;\n    while (!mx.empty() && mx.top().val >= a) {\n        len += mx.top().len;\n        mxsum -= (mx.top().len * mx.top().val);\n        mxsum = (mxsum + mod) % mod;\n        mx.pop();\n    }\n    mx.push(node(len, a));\n    mxsum += (len * a);\n    mxsum = (mxsum + mod) % mod;\n    len = 1;\n    while (!mn.empty() && mn.top().val <= a) {\n        len += mn.top().len;\n        mnsum -= (mn.top().len * mn.top().val);\n        mnsum = (mnsum + mod) % mod;\n        mn.pop();\n    }\n    mn.push(node(len, a));\n    mnsum += (len * a);\n    mnsum = (mnsum + mod) % mod;\n    ans = (ans + mxsum + mnsum) % mod;\n}\n```\n\n## G - 魔空「小行星带」\n\n### 解题思路\n\n学了K-D树后 , 可以很轻松构造出一棵树来维护他 , 但是要维护什么数据呢 , 这是解题的关键 . 然后发呆了一个晚上GHI都是细节处理不了 , 躺在床上想通了 . 先储存初始状态的和 , 对于取模操作我们再维护一个最大值和最小值 , 每次询问先对时间取模 , 然后找到在范围内的子树时 . \n\n- 如果最大值加上时间不需要取模 , 说明不用取模 .\n- 如果最小值加上时间还要取模 , 那么全部都要取模 , 减一下 .\n\n什么 ? 会混在一起 , 那继续找 ? 于是 TLE 了 . 后来看一眼数据 , c 居然才10 , 那我直接每个节点开个数组就好了 , 这样记录所有子节点各个初始值的数量 . 当区间完全包含在查询区间里 , 直接循环一遍求和就好了 . \n\n### 关键代码\n\n```cpp\nint query(int x)\n{\n    int res = 0;\n    if (!x || xr < L[x] || R[x] < xl || yr < D[x] || U[x] < yl)\n        return 0;\n    if (xl <= L[x] && R[x] <= xr && yl <= D[x] && U[x] <= yr ) {\n        for (int i = 0; i <= c; ++i)    res += (cnt[x][i] * ((i + t) % c));\n        return res;\n    }\n    if (xl <= s[x].x && s[x].x <= xr && yl <= s[x].y && s[x].y <= yr )\n        res = res + (s[x].v + t) % c;\n    return res + query(ls[x]) + query(rs[x]);\n}\nvoid maintain(int x)\n{\n    siz[x] = siz[ls[x]] + siz[rs[x]] + 1;\n    sum[x] = sum[ls[x]] + sum[rs[x]] + s[x].v;\n    for (int i = 0; i <= c; ++i)    cnt[x][i] = 0;\n    cnt[x][s[x].v] = 1;\n    L[x] = R[x] = s[x].x;\n    U[x] = D[x] = s[x].y;\n    if (ls[x]) {\n        L[x] = min(L[x], L[ls[x]]);R[x] = max(R[x], R[ls[x]]);\n        D[x] = min(D[x], D[ls[x]]);U[x] = max(U[x], U[ls[x]]);\n        for (int i = 0; i <= c; ++i)    cnt[x][i] += cnt[ls[x]][i];\n    }\n    if (rs[x]) {\n        L[x] = min(L[x], L[rs[x]]);R[x] = max(R[x], R[rs[x]]);\n        D[x] = min(D[x], D[rs[x]]);U[x] = max(U[x], U[rs[x]]);\n        for (int i = 0; i <= c; ++i)    cnt[x][i] += cnt[rs[x]][i];\n    }\n}\n```\n\n## I - 种田Ⅰ\n\n### 解题思路\n\n扫描线算法 , 每次统计覆盖长度,乘以到下一条线段的高度差 . 当然这道题要解决的是偶数次覆盖的问题 , 倒过来就是解决奇数次覆盖问题 . 使用了两个标记 , 一个是原本扫描线的标记 , 另一个是奇数次覆盖的的标记 , 这个标记只要每一次异或一下就好了 , 因为覆盖奇数次线段就没有了 , 偶数次覆盖就变成奇数次了 . 每次覆盖更新奇数段长度就好了 . 不知道题解说的反转一下是不是这个意思 . \n\n### 关键代码\n\n```cpp\nvoid do_odd(ll o, ll L, ll R)\n{\n    ll all = num[R + 1] - num[L];\n    tree[o].sum2 = (all - tree[o].sum2);\n}\nvoid pushup(ll o, ll L, ll R)\n{\n    if (tree[o].lazy)\n        tree[o].sum1 = num[R + 1] - num[L];\n    else\n        tree[o].sum1 = tree[lo].sum1 + tree[ro].sum1;\n}\nvoid pushdown(ll o, ll L, ll R)\n{\n    if (tree[o].lazy2) {\n        ll mid = (L + R) >> 1;\n        do_odd(lo, L, mid);\n        do_odd(ro, mid + 1, R);\n        tree[lo].lazy2 ^= 1;\n        tree[ro].lazy2 ^= 1;\n        tree[o].lazy2 = 0;\n    }\n}\nvoid addval(ll o, ll L, ll R)\n{\n    if (num[R + 1] <= ql || num[L] >= qr)\n        return ;\n    if (ql <= num[L] && num[R + 1] <= qr) {\n        tree[o].lazy += k;\n        do_odd(o, L, R);\n        tree[o].lazy2 ^= 1;\n        pushup(o, L, R);\n        return ;\n    }\n    pushdown(o, L, R);\n    ll M = (L + R) / 2;\n    addval(lo, L, M);\n    addval(ro, M + 1, R);\n    pushup(o, L, R);\n    tree[o].sum2 = tree[lo].sum2 + tree[ro].sum2;\n}\n```\n\n## J - 马老师的餐厅\n\n### 解题思路\n\n我们要想菜尽量多 , 就要让比较多的先使用 , 于是我们令每次取前三多的原材料做一道菜 . 注意做完后原材料不一定是前三多了 , 需要排序 . 原数组本就有序 , 于是用优先队列 . 重复上述过程 .\n\n### 关键代码\n\n```cpp\nwhile (q.size() >= 3)\n{\n    int a1, a2, a3;\n    ++ans;\n    a1 = q.top();\n    q.pop();\n    a2 = q.top();\n    q.pop();\n    a3 = q.top();\n    q.pop();\n    if (a1 - 1)\n        q.push(a1 - 1);\n    if (a2 - 1)\n        q.push(a2 - 1);\n    if (a3 - 1)\n        q.push(a3 - 1);\n}\n```\n\n## K - Yousa的鸟蛋\n\n### 解题思路\n\n第一次拿到题我尝试着写了个矩形树，结果时间复杂度报表，后来才想到了树状数组。类似于一维树状数组的差分思想，我们分析和与元素之间的关系。\n$$\n    sum_{i,j}=sum_{i-1,j}+sum_{i,j-1}-sum_{i-1,j-1}+a{i,j}\n    a_{i,j}=a_{i-1,j}+a_{i,j-1}-a_{i-1,j-1}+d{i,j}\n$$\n于是我们给出差分数组的公式\n$$\nd_{i,j}=a_{i,j}-a{i-1,j}-a_{i,j-1}+a_{i-1,j-1}\n$$\n接下来我们考虑的是区间和与差分数组的关系:\n$$\n\\begin{aligned}\n    sum_{x,y} &=\\sum_{i=1}^{x}\\sum_{j=1}^{y} a_{i,j} \\\\\n    &=\\sum_{i=1}^{x}\\sum_{j=1}^{y}\\sum_{k=1}^{i}\\sum_{l=1}^{j}d_{k,l}\\\\\n    &=\\sum_{i=1}^{x}\\sum_{j=1}^{y} (x+1)(y+1)d_{i,j}-(y+1)id_{i,j}-(x+1)jd_{i,j}+ijd_{i,j}\n\\end{aligned}\n$$\n于是我们维护四个数组，然后反过来按照公式求和就好了。\n\n### 复杂度分析\n\n时间复杂度每次查询和修改，每一个维度上树状数组操作都是$O(logN)$，于是二维树状数组就是$O(log^2N)$。空间复杂度$O(N^2)$。\n\n### 关键代码\n\n```cpp\nvoid addval(int x,int y,int k)\n{\n    v[0]=k;v[1]=k*x;v[2]=k*y;v[3]=k*x*y;\n    for (int i=x;i<=n;i+=lowbit(i))\n        for(int j=y;j<=m;j+=lowbit(j))\n        {\n            tarray[i][j][0]+=v[0];\n            tarray[i][j][1]+=v[1];\n            tarray[i][j][2]+=v[2];\n            tarray[i][j][3]+=v[3];\n        }\n}\n\nvoid add(int x1,int y1,int x2,int y2,ll k)\n{\n    addval(x1,y1,k);\n    addval(x2+1,y2+1,k);\n    addval(x1,y2+1,-k);\n    addval(x2+1,y1,-k);\n}\n\nll sum(int x,int y)\n{\n    v[0]=v[1]=v[2]=v[3]=0;\n    for(int i=x;i>0;i-=lowbit(i))\n        for(int j=y;j>0;j-=lowbit(j))\n        {\n            v[0]+=tarray[i][j][0];\n            v[1]+=tarray[i][j][1];\n            v[2]+=tarray[i][j][2];\n            v[3]+=tarray[i][j][3];\n        }\n    return (x+1)*(y+1)*v[0]-(y+1)*v[1]-(x+1)*v[2]+v[3];\n}\n\nll getsum(int x1,int y1,int x2,int y2)\n{\n    return sum(x2,y2)-sum(x1-1,y2)-sum(x2,y1-1)+sum(x1-1,y1-1);\n}\n```\n\n## L - 芜湖塔台请求起飞\n\n### 解题思路\n\n树链剖分板子题。树链剖分的的思想就是把某些树上的问题转化成链上的问题，使用线段树等结构来维护他，利用等就是dfs序。树上路径不需要遍历一整棵树，所以我们把树分成了若干条链~~（B是个阉割版的，有点像）~~。发现任意两个点总会汇集到一起某一个根结点，每次找路径的时候，所以每次我们不断从链尾跳到链头，根据节点深度决定哪个点跳，直到两个结点在同一条链上。\n链的分法就不多赘述了，找子树大小大的方向使链延伸。\n\n### 代码\n\n```cpp\nvoid dfs1(int x, int f, int d)\n{\n    fa[x] = f;\n    siz[x] = 1;\n    dep[x] = d;\n    int maxson = -1;\n    for (int i = first[x]; i; i = inext[i]) {\n        if (to[i] == f)\n            continue;\n        dfs1(to[i], x, d + 1);\n        siz[x] += siz[to[i]];\n        if (siz[to[i]] > maxson)\n            maxson = siz[to[i]], son[x] = to[i];\n    }\n}\nvoid dfs2(int x, int topf)\n{\n    id[x] = ++cur;\n    top[x] = topf;\n    w2[cur] = w1[x];\n    if (!son[x])\n        return ;\n    dfs2(son[x], topf);\n    for (int i = first[x]; i; i = inext[i]) {\n        if (to[i] != fa[x] && to[i] != son[x])\n            dfs2(to[i], to[i]);\n    }\n}\nint lss(int beg, int end)\n{\n    int ans = 0;\n    while (top[beg] != top[end]) {\n        if (dep[top[beg]] < dep[top[end]])\n            swap(beg, end);\n        ans +=sum(1, 1, n, id[top[beg]], id[beg]);\n        beg = fa[top[beg]];\n    }\n    if (dep[beg] > dep[end])\n        swap(beg, end);\n    ans += sum(1, 1, n, id[beg], id[end]);\n    return ans ;\n}\nint imax(int beg, int end)\n{\n    int ans = -inf;\n    while (top[beg] != top[end]) {\n        if (dep[top[beg]] < dep[top[end]])\n            swap(beg, end);\n        ans = max(ans, query(1, 1, n, id[top[beg]], id[beg]));\n        beg = fa[top[beg]];\n    }\n    if (dep[beg] > dep[end])\n        swap(beg, end);\n    ans = max(ans, query(1, 1, n, id[beg], id[end]));\n    return ans ;\n}\n```\n\n## M - 采集物资\n\n### 解题思路\n\n解决区间第k小问题，可以使用平衡树。但是其中有一个问题，就是有多个区域，而且还要合并，这就涉及到了启发式合并了。~~说白了就是暴力，还以为多神奇~~.\n\n题解说的是Splay，但是我的Splay真的写的稀烂，调了好久调不好，所以我直接掏出SBT。合并的时候找到小的一棵树，DFS一下整棵树，每个结点都插入要合并的树上。这里要注意，并查集的合并方向要和启发式合并相同。\n\n### 关键代码\n\n```cpp\nvoid dfs(int &rt, int &_to)\n{\n    if (!rt) return ;\n    f[id[rt]] = id[_to];\n    insert(_to, datas[rt], id[rt]);\n    if (son[rt][0])\n        dfs(son[rt][0], _to);\n    if (son[rt][1])\n        dfs(son[rt][1], _to);\n}\nvoid Merge(int &a, int &b)\n{\n    if (siz[a] > siz[b])\n        swap(a, b);\n    dfs(a, b);\n    a = b;\n}\n/*main\nint &p = root[ifind(a)];\nint &q = root[ifind(b)];\nif (p != q)\n    Merge(p, q);\n*/\n```\n\n## N - 土豆的序列\n\n### 解题思路\n\n平衡树板子题。接上题，因为专题初就手打了一遍SBT，所以SBT很熟。二叉平衡树就是遵循左子树小于根结点小于右子树的一棵树，然而因为插入顺序未知，如果选定某个结点作为根固定，很容易使树退化，甚至变成链表，对复杂度影响很大。于是有各种方式来平衡它，通过旋转使树尽量不退化。\n\nSplay遵循查找频率高的节点保持在离根近的地方，每次操作后都将结点旋转到根，而SBT(Size-Balanced-Tree)通过记录子树大小旋转实现平衡。\n\n基本的左旋右旋操作就是在保证树的性质不变的情况下把结点变为根结点的操作。\n\n### 关键代码\n\n```cpp\nvoid rotate(int &rt, int k)\n{\n    int nrt = son[rt][!k]; //new root\n    son[rt][!k] = son[nrt][k];\n    son[nrt][k] = rt;\n    siz[nrt] = siz[rt];\n    siz[rt] = siz[son[rt][0]] + siz[son[rt][1]] + 1;\n    rt = nrt;\n}\n\nvoid maintain(int &rt, bool k)\n{\n    if (siz[son[son[rt][k]][k]] > siz[son[rt][!k]])\n        rotate(son[rt][k], !k);\n    else if (siz[son[son[rt][k]][!k]] > siz[son[rt][!k]])\n        rotate(son[rt][k], k), rotate(rt, !k);\n    else\n        return ;\n    maintain(son[rt][0], 0);\n    maintain(son[rt][1], 1);\n    maintain(rt, 0);\n    maintain(rt, 1);\n}\n\nvoid insert(int &rt, int val)\n{\n    if (rt == 0) {\n        rt = ++tails;\n        datas[rt] = val;\n        son[rt][0] = son[rt][1] = 0;\n        siz[rt] = 1;\n        return ;\n    }\n    ++siz[rt];\n    if (val <= datas[rt])\n        insert(son[rt][0], val);\n    else\n        insert(son[rt][1], val);\n    maintain(rt, datas[rt] > val);\n}\n\nvoid del(int &rt, int val)\n{\n    if (datas[rt] != val) {\n        del(son[rt][datas[rt] < val], val);\n        siz[rt] = siz[son[rt][0]] + siz[son[rt][1]] + 1;\n        return ;\n    }\n    --siz[rt];\n    if (son[rt][0] == 0)\n        rt = son[rt][1];\n    else if (son[rt][1] == 0)\n        rt = son[rt][0];\n    else {\n        int p = son[rt][1];\n        while (son[p][0] != 0)\n            p = son[p][0];\n        datas[rt] = datas[p];\n        del(son[rt][1], datas[p]);\n    }\n}\n\nint pre (int val)\n{\n    int cur = sbt, ans = 0;\n    while (cur != 0) {\n        if (datas[cur] < val)\n            ans = cur, cur = son[cur][1];\n        else\n            cur = son[cur][0];\n    }\n    return datas[ans];\n}\n\nint nxt (int val)\n{\n    int cur = sbt, ans = 0;\n    while (cur != 0) {\n        if (datas[cur] > val)\n            ans = cur, cur = son[cur][0];\n        else\n            cur = son[cur][1];\n    }\n    return datas[ans];\n}\n\nint xth(int x)\n{\n    int cur = sbt;\n    while (siz[son[cur][0]] + 1 != x) {\n        if (siz[son[cur][0]] + 1 < x)\n            x -= (siz[son[cur][0]] + 1), cur = son[cur][1];\n        else\n            cur = son[cur][0];\n    }\n    return datas[cur];\n}\n\nint ranks(int val)\n{\n    int cur = sbt, ans = 0;\n    while (cur != 0) {\n        if (datas[cur] < val)\n            ans += (siz[son[cur][0]] + 1), cur = son[cur][1];\n        else\n            cur = son[cur][0];\n    }\n    return ans;\n}\n```\n\n## O - 土豆的集合\n\n### 解题思路\n\n主席树板题，一开始我想试着用栈模拟回退操作，结果调了好久最后TLE。后来学了一下主席树后，发现把主席树用在并查集上就能解决问题。但是此时不能路径压缩，因为路径压缩丢失了信息，导致后面回溯操作会出问题。\n\n集合合并时，我们不断递归到子结点，因为我们没走过的部分是没有任何改变的，所以直接重复利用，直将将沿途的链更新。\n因为主席树结点需要不断更新，所以不满足$2*o$和$2*o+1$的性质，需要单独记录左右孩子编号。\n\n### 关键代码\n\n```cpp\ninline int find(int root, int x)\n{\n    node now = Tree[root];\n    if (now.l == now.r)\n        return now.fa;\n    int mid = (now.l + now.r) >> 1;\n    if (x <= mid)\n        return find(now.ls,x);\n    else\n        return find(now.rs,x);\n}\n\ninline int getfa(int root, int x)\n{\n    int fa = find(root, x);\n    if (fa == x)\n        return x;\n    else\n        return getfa(root, fa);\n}\n\ninline int update(const int pre, int loc, int val)\n{\n    int now = tot++;\n    copy(now, pre);\n    if (Tree[now].l == Tree[now].r ) {\n        Tree[now].fa = val;\n        return now;\n    }\n    int mid = (Tree[now].l + Tree[now].r) >> 1;\n    if (loc <= mid)\n        Tree[now].ls = update(Tree[now].ls,loc,val);\n    else\n        Tree[now].rs = update(Tree[now].rs,loc,val);\n    return now;\n}\n```\n\n## T - 羽毛球赛\n\n### 解题思路\n\n回滚莫队算法，因为完全没接触过，所以从头开始学。先学了普通莫队算法，感觉很神奇，居然排了个序就能这么舒服的暴力。我看的是SPOJ3267Query，题目问的是某个区间内出现的数字总数，就是左右指针跑来跑去移动一下找结果嘛。\n\n然后就是回滚莫队了，问题就出在删除上，因为我们删除的时候已经丢失了上一次信息，所以要重新跑一遍获得？这样复杂度还不如直接暴力。回滚莫队思路是不删除，因为左端点同一块的询问，右端点都是递增的，于是我们处理右端点是不需要删除的，至于左端点部分，我们直接暴力解决就好了，因为分块过，保证每次左端点暴力不会超过$O(\\sqrt{N})$并且N个左端点，总时间复杂度还是$O(NlogN)$。\n\n回到T题，问题是如何保存数据能在$O(1)$内更新答案呢。我一开始保存的是每个数字目前最右的位置，但是这会导致右端点出现这个数时无法更新答案；改为最左边的又发现左端点暴力处理的时候也有问题，索性直接存了两个数，而且只存下一个块的位置，左端点所在的块信息只对每个左端点有效，不必保存。\n\n### 关键代码\n\n```cpp\nfor (int k = 0; k <= blockn; ++k)\n{\n    int l = ranger[k] + 1, r = ranger[k];\n    memset(cnt, 0, sizeof(cnt));\n    ll temp = 0, now = 0;\n    for (; block[q[i].l] == k; ++i) {\n        int ql = q[i].l, qr = q[i].r;\n        if (block[q[i].l] == block[q[i].r]) {\n            temp = 0;\n            for (int j = ql; j <= qr; ++j)\n                cnt2[id[j]] = 0;\n            for (int j = ql; j <= qr; ++j) {\n                if (!cnt2[id[j]])\n                    cnt2[id[j]] = j;\n                else\n                    temp = max(temp, 1ll * abs(j - cnt2[id[j]]));\n            }\n            ans[q[i].id] = temp;\n            continue;\n        }\n        while (r < qr) {\n            if (!cnt[id[++r]][0])\n                cnt[id[r]][1] = cnt[id[r]][0] = r;\n            else {\n                cnt[id[r]][1] = r;\n                now = max(now, 1ll * abs(r - cnt[id[r]][0]));\n            }\n        }\n        temp = now;\n        while (ql < l) {\n            if (!cnt[id[--l]][1])\n                cnt[id[l]][1] = l;\n            else\n                temp = max(temp, 1ll * abs(l - cnt[id[l]][1]));\n        }\n        ans[q[i].id] = temp;\n        while (l < ranger[k] + 1) {\n            if (cnt[id[l]][1] < ranger[k] + 1)\n                cnt[id[l]][1] = 0;\n            ++l;\n        }\n    }\n}\n```\n\n## V -  打怪兽\n\n### 解题思路\n\n离线RMQ , 直接上 ST 表 , 线段树也是可以的 , 但 ST 表还是香的 . [前置知识在这](https://www.inzamz.top/2020/SparseTable/) . \n\n### 代码\n\n```cpp\nvoid getst(int n)\n{\n    bin[0] = 1;\n    lg[0] = -1;\n    for (int i = 1; i <= 18; i++)\n        bin[i] = 2 * bin[i - 1];\n    for (int i = 1; i <= 1e5 + 10; i++)\n        lg[i] = lg[i / 2] + 1;\n    for (int j = 0; j <= 18; j++)\n        for (int i = 0; i + bin[j] - 1 <= n; i++) {\n            if (j == 0)\n                st[i][j] = a[i];\n            else {\n                st[i][j] = max(st[i][j - 1], st[i + bin[j - 1]][j - 1]);\n            }\n        }\n}\n\nint stsearch(int l, int r)\n{\n    if (l == r)\n        return a[l];\n    int t = lg[r - l + 1];\n    return max(st[l][t], st[r - bin[t] + 1][t]);\n}\n```\n\n## Y - 孩子与玩具\n\n### 解题思路\n\n放出 tag 后 , 发现是并查集 ? 我是直接贪心写的 ...  其实本质跟并查集就是一样的 . \n\n我们要让孩子开心的尽可能多 , 就是尽量让孩子尽可能只拿到一个玩具 , 当然第一个小朋友是不可避免要拿两个的 , 那就让出现次数最多的玩具先拿掉 . 于是我们不断把还没拿的玩具中出现最多的放进队列 , 然后把想要这个玩具的孩子枚举一遍 , 选给他们另一个想要的玩具 .\n\n### 关键代码\n\n```cpp\nq.push(imax);\nwhile (!q.empty())\n{\n    int cur = q.front();\n    q.pop();\n    for (int i = 0; i < s[cur].size(); ++i) {\n        if (!flag[s[cur][i].val] && !child[s[cur][i].ids]) {\n            --ans;\n            flag[s[cur][i].val] = child[s[cur][i].ids] = 1;\n            q.push(s[cur][i].val);\n        }\n    }\n}\ncout << ans << endl;\n```\n\n\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/UPST2021DS","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uk5002y63jnbmhm6trd","content":"<blockquote>\n<p>板子题并没有给出详细的讲解 , 讲了大致思路 , 以及对于某些细节上的处理 . 代码也是把板子部分去了 , 留下需要改的部分 . </p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"A-大佬集中营\"><a href=\"#A-大佬集中营\" class=\"headerlink\" title=\"A - 大佬集中营\"></a>A - 大佬集中营</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>区间问题，先想到的是主席树。但是挂题意了，有可能多个学渣选大佬，所以 k 并不是区间长度。区间长度的话就是另外一道题了，是主席树的板题 <a href=\"https://www.luogu.com.cn/problem/P3567\">[POI2014]KUR-Couriers</a> 。所以问题复杂了，但是顺着刚才的思路，我们发现众数数量不超过一半时，答案就是 <code>1</code> .那如果超过一半呢 , 我们考虑这样的分组 . 第一组众数数量$2<em>k+1$非众数$2</em>k$, 这是优解 , 很好利用了向上取整多出的一个数 . 如果还有一组数$2<em>l+1$和$2</em>l$的话 , 加一下$2*(k+l+1)$个众数以及$2*(k+l)$个非众数 . 我们发现是可合并的 , 所以分组最少就取最大的一组 , 让剩余的众数每一个作为一组就好了 . </p>\n<ul>\n<li><code>tot</code> : 区间长度</li>\n<li><code>x</code> : 区间内众数个数</li>\n<li><code>ans</code> : 最终分的组数</li>\n</ul>\n<p>$$<br>Ans=x-[(tot-x)+1]+1=2*x-tot<br>$$</p>\n<p>主席树维护一下区间内数字个数 , 叶子节点的最大值就是众数个数 . 而且子树的所有数字个数如果小于区间长度的一半 , 那就可以跳过该子树 , 用于剪枝 . </p>\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>时间复杂度方面建树是$O(N)$, 主席树每次操作$O(logN)$ , N 个版本$O(NlogN)$ , 每次查询$O(logN)$, Q和N同阶 , 最终时间复杂度<br>$$<br>O=O(N)+O(NlogN)+O(NlogN)=O(NlogN)<br>$$</p>\n<h3 id=\"关键代码\"><a href=\"#关键代码\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">-</span> Tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">></span> ans<span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">=</span> Tree<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">-</span> Tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>Tree<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">-</span> Tree<span class=\"token punctuation\">[</span>Tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">></span> all <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">,</span> Tree<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> mid <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>Tree<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">-</span> Tree<span class=\"token punctuation\">[</span>Tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">></span> all <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">,</span> Tree<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> now <span class=\"token operator\">=</span> tot<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls <span class=\"token operator\">=</span> Tree<span class=\"token punctuation\">[</span>pre<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">;</span>\n    Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs <span class=\"token operator\">=</span> Tree<span class=\"token punctuation\">[</span>pre<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">;</span>\n    Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> Tree<span class=\"token punctuation\">[</span>pre<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">++</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> now<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">>=</span> kth<span class=\"token punctuation\">)</span>\n        Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls <span class=\"token operator\">=</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs <span class=\"token operator\">=</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> Tree<span class=\"token punctuation\">[</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">+</span> Tree<span class=\"token punctuation\">[</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> now<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-土豆的树\"><a href=\"#B-土豆的树\" class=\"headerlink\" title=\"B - 土豆的树\"></a>B - 土豆的树</h2><h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这道题是在 L 之后写的 , 于是思路很清晰 , 很像树链剖分 , 用到了 dfs 序 . 颜色就是用状态压缩 , 使用 <code>longlong</code> 表示染色状态 , 位运算使用异或判断颜色是否相同 , 同或用于染色 . 子树在dfs序上是连续的 , 于是可以用线段树维护颜色树 . 注意土豆的”树”可能是森林 , 一切都是这么令人惬意 , 结果我挂了题意 . 在讲座前一晚问了 ljj 大佬思路 , 发现一模一样 , 让我检查一下染色部分 , 容易写炸 . 讲座后思考了取模方法 , 发现原来是颜色序号差不超过 50 , 一直当成颜色不超过 50 种 , 这连 <code>map</code> 都没必要了 , 直接取模 51 不就好了 . 是 51 ,因为 0 和 50 号颜色可以同时存在 . 但是还是一直挂 , 最后乱改了好久 , 把所有数组开 <code>longlong</code> 就过了 , 原来是 lazy 标记的颜色没有用 <code>longlong</code> . 交了 28 发 , 麻了 .</p>\n<h3 id=\"关键代码-1\"><a href=\"#关键代码-1\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">cmpcol</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span> ll b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">^=</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> <span class=\"token number\">1ll</span><span class=\"token punctuation\">)</span>    <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    sum<span class=\"token punctuation\">[</span>lson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    sum<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    color<span class=\"token punctuation\">[</span>lson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    color<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    mark<span class=\"token punctuation\">[</span>lson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    mark<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> astart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> aend<span class=\"token punctuation\">,</span> ll k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>astart <span class=\"token operator\">&lt;=</span> l <span class=\"token operator\">&amp;&amp;</span> r <span class=\"token operator\">&lt;=</span> aend<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n        sum<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        color<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>astart <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">^</span> color<span class=\"token punctuation\">[</span>lson<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>lson<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> astart<span class=\"token punctuation\">,</span> aend<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aend <span class=\"token operator\">></span> mid <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">^</span> color<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>rson<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> astart<span class=\"token punctuation\">,</span> aend<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        color<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> color<span class=\"token punctuation\">[</span>lson<span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> color<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        sum<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">cmpcol</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">qsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fr<span class=\"token punctuation\">,</span> ll <span class=\"token operator\">&amp;</span>col<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fl <span class=\"token operator\">&lt;=</span> l <span class=\"token operator\">&amp;&amp;</span> r <span class=\"token operator\">&lt;=</span> fr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token function\">cmpcol</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        col <span class=\"token operator\">=</span> col <span class=\"token operator\">|</span> color<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fl <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> col <span class=\"token operator\">^</span> color<span class=\"token punctuation\">[</span>lson<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">+=</span> <span class=\"token function\">qsum</span><span class=\"token punctuation\">(</span>lson<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> fl<span class=\"token punctuation\">,</span> fr<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fr <span class=\"token operator\">></span> mid <span class=\"token operator\">&amp;&amp;</span> col <span class=\"token operator\">^</span> color<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">+=</span> <span class=\"token function\">qsum</span><span class=\"token punctuation\">(</span>rson<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> fl<span class=\"token punctuation\">,</span> fr<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>cur<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> inext<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> f<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dfs1</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    tails<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-三仙归洞\"><a href=\"#D-三仙归洞\" class=\"headerlink\" title=\"D - 三仙归洞\"></a>D - 三仙归洞</h2><h3 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>一看就是要用链式结构来写 , 再看数据范围 , 就是要$O(N)$时间复杂度 . 一开始想用第 N 个链表节点表示第 N 个位置的碗 , 但是每次操作都要找到球 , 所以我们直接让第 N 个链表节点表示 N 个小球的信息 , 再加上头尾节点 , 用于输出 . </p>\n<p>对于操作四 , 我们用一个 <code>flag</code> 标记就好了 , 反向后左右边颠倒 . 还有一个点就是节点相邻执行操作三 , 注意一下细节 , 我懒得改就直接加了特判 . </p>\n<h3 id=\"关键代码-2\"><a href=\"#关键代码-2\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">move_to_l</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">move_to_r</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">-></span>r <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">-></span>l <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">-></span>r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap_xy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    node <span class=\"token operator\">*</span>xl <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>xr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xr <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//交换相邻元素</span>\n        s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">-></span>r<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">-></span>l<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xl <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">-></span>l<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">-></span>r<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">-></span>r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">-></span>l <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">-></span>r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">-></span>l <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> xl<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> xr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"E-众人拾柴火焰高\"><a href=\"#E-众人拾柴火焰高\" class=\"headerlink\" title=\"E - 众人拾柴火焰高\"></a>E - 众人拾柴火焰高</h2><h3 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>二分答案法，每次我们枚举答案，然后验证是否成立。再使用差分记录火堆的影响。我是使用一个队列，队列里面放的是某个火焰失去效果的时间点，每次判断队列首与当前时间是否匹配，匹配就减去一个火堆的加成。从头开始，某个村庄温度过低就放一个火堆刚好边缘影响了当前村庄。</p>\n<h3 id=\"复杂度分析-1\"><a href=\"#复杂度分析-1\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>二分答案需要$O(logN)$次验证，每次验证是$O(N)$，最终时间复杂度是$O(NlogN)$.</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cntm <span class=\"token operator\">=</span> m<span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> delta <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> cur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            delta <span class=\"token operator\">-=</span> k<span class=\"token punctuation\">;</span>\n            q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> delta <span class=\"token operator\">&lt;</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cntm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token operator\">--</span>cntm<span class=\"token punctuation\">;</span>\tdelta <span class=\"token operator\">+=</span> k<span class=\"token punctuation\">;</span>\n                q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token operator\">++</span>cur<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>    l <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>    r <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"F-我，不是说了能力要平均值么-·-改三\"><a href=\"#F-我，不是说了能力要平均值么-·-改三\" class=\"headerlink\" title=\"F - 我，不是说了能力要平均值么 · 改三\"></a>F - 我，不是说了能力要平均值么 · 改三</h2><h3 id=\"解题思路-4\"><a href=\"#解题思路-4\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>首先 , 因为取模与逆元 , 我们可以忽略约分操作 (对比改一) . <a href=\"https://www.inzamz.top/2020/InverseElement/\">逆元的前置知识</a>在这 , 简单来说除以 K mod M 换成乘$K^{M-2}$取 mod M .</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mx<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> mx<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">>=</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        len <span class=\"token operator\">+=</span> mx<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">;</span>\n        mxsum <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>len <span class=\"token operator\">*</span> mx<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mxsum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mxsum <span class=\"token operator\">+</span> mod<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        mx<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    mx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mxsum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mxsum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mxsum <span class=\"token operator\">+</span> mod<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n    len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mn<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> mn<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        len <span class=\"token operator\">+=</span> mn<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">;</span>\n        mnsum <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>len <span class=\"token operator\">*</span> mn<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mnsum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mnsum <span class=\"token operator\">+</span> mod<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        mn<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    mn<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mnsum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mnsum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mnsum <span class=\"token operator\">+</span> mod<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n    ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">+</span> mxsum <span class=\"token operator\">+</span> mnsum<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"G-魔空「小行星带」\"><a href=\"#G-魔空「小行星带」\" class=\"headerlink\" title=\"G - 魔空「小行星带」\"></a>G - 魔空「小行星带」</h2><h3 id=\"解题思路-5\"><a href=\"#解题思路-5\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>学了K-D树后 , 可以很轻松构造出一棵树来维护他 , 但是要维护什么数据呢 , 这是解题的关键 . 然后发呆了一个晚上GHI都是细节处理不了 , 躺在床上想通了 . 先储存初始状态的和 , 对于取模操作我们再维护一个最大值和最小值 , 每次询问先对时间取模 , 然后找到在范围内的子树时 . </p>\n<ul>\n<li>如果最大值加上时间不需要取模 , 说明不用取模 .</li>\n<li>如果最小值加上时间还要取模 , 那么全部都要取模 , 减一下 .</li>\n</ul>\n<p>什么 ? 会混在一起 , 那继续找 ? 于是 TLE 了 . 后来看一眼数据 , c 居然才10 , 那我直接每个节点开个数组就好了 , 这样记录所有子节点各个初始值的数量 . 当区间完全包含在查询区间里 , 直接循环一遍求和就好了 . </p>\n<h3 id=\"关键代码-3\"><a href=\"#关键代码-3\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>x <span class=\"token operator\">||</span> xr <span class=\"token operator\">&lt;</span> L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> xl <span class=\"token operator\">||</span> yr <span class=\"token operator\">&lt;</span> D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> yl<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xl <span class=\"token operator\">&lt;=</span> L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> xr <span class=\"token operator\">&amp;&amp;</span> yl <span class=\"token operator\">&lt;=</span> D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> yr <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> c<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>    res <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xl <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;=</span> xr <span class=\"token operator\">&amp;&amp;</span> yl <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;=</span> yr <span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> res <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">+</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res <span class=\"token operator\">+</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    siz<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> siz<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> siz<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    sum<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> c<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>    cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> D<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> c<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>    cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> D<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> c<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>    cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"I-种田Ⅰ\"><a href=\"#I-种田Ⅰ\" class=\"headerlink\" title=\"I - 种田Ⅰ\"></a>I - 种田Ⅰ</h2><h3 id=\"解题思路-6\"><a href=\"#解题思路-6\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>扫描线算法 , 每次统计覆盖长度,乘以到下一条线段的高度差 . 当然这道题要解决的是偶数次覆盖的问题 , 倒过来就是解决奇数次覆盖问题 . 使用了两个标记 , 一个是原本扫描线的标记 , 另一个是奇数次覆盖的的标记 , 这个标记只要每一次异或一下就好了 , 因为覆盖奇数次线段就没有了 , 偶数次覆盖就变成奇数次了 . 每次覆盖更新奇数段长度就好了 . 不知道题解说的反转一下是不是这个意思 . </p>\n<h3 id=\"关键代码-4\"><a href=\"#关键代码-4\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">do_odd</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span> ll L<span class=\"token punctuation\">,</span> ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ll all <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>R <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> num<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>all <span class=\"token operator\">-</span> tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">pushup</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span> ll L<span class=\"token punctuation\">,</span> ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy<span class=\"token punctuation\">)</span>\n        tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum1 <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>R <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> num<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum1 <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum1 <span class=\"token operator\">+</span> tree<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span> ll L<span class=\"token punctuation\">,</span> ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ll mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">+</span> R<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">do_odd</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">do_odd</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy2 <span class=\"token operator\">^=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy2 <span class=\"token operator\">^=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span> ll L<span class=\"token punctuation\">,</span> ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>R <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> ql <span class=\"token operator\">||</span> num<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> qr<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> num<span class=\"token punctuation\">[</span>R <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy <span class=\"token operator\">+=</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">do_odd</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy2 <span class=\"token operator\">^=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">pushup</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ll M <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">+</span> R<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span> M <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pushup</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum2 <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum2 <span class=\"token operator\">+</span> tree<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"J-马老师的餐厅\"><a href=\"#J-马老师的餐厅\" class=\"headerlink\" title=\"J - 马老师的餐厅\"></a>J - 马老师的餐厅</h2><h3 id=\"解题思路-7\"><a href=\"#解题思路-7\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>我们要想菜尽量多 , 就要让比较多的先使用 , 于是我们令每次取前三多的原材料做一道菜 . 注意做完后原材料不一定是前三多了 , 需要排序 . 原数组本就有序 , 于是用优先队列 . 重复上述过程 .</p>\n<h3 id=\"关键代码-5\"><a href=\"#关键代码-5\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>ans<span class=\"token punctuation\">;</span>\n    a1 <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a2 <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a3 <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a3 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a3 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"K-Yousa的鸟蛋\"><a href=\"#K-Yousa的鸟蛋\" class=\"headerlink\" title=\"K - Yousa的鸟蛋\"></a>K - Yousa的鸟蛋</h2><h3 id=\"解题思路-8\"><a href=\"#解题思路-8\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>第一次拿到题我尝试着写了个矩形树，结果时间复杂度报表，后来才想到了树状数组。类似于一维树状数组的差分思想，我们分析和与元素之间的关系。<br>$$<br>    sum_{i,j}=sum_{i-1,j}+sum_{i,j-1}-sum_{i-1,j-1}+a{i,j}<br>    a_{i,j}=a_{i-1,j}+a_{i,j-1}-a_{i-1,j-1}+d{i,j}<br>$$<br>于是我们给出差分数组的公式<br>$$<br>d_{i,j}=a_{i,j}-a{i-1,j}-a_{i,j-1}+a_{i-1,j-1}<br>$$<br>接下来我们考虑的是区间和与差分数组的关系:<br>$$<br>\\begin{aligned}<br>    sum_{x,y} &amp;=\\sum_{i=1}^{x}\\sum_{j=1}^{y} a_{i,j} \\<br>    &amp;=\\sum_{i=1}^{x}\\sum_{j=1}^{y}\\sum_{k=1}^{i}\\sum_{l=1}^{j}d_{k,l}\\<br>    &amp;=\\sum_{i=1}^{x}\\sum_{j=1}^{y} (x+1)(y+1)d_{i,j}-(y+1)id_{i,j}-(x+1)jd_{i,j}+ijd_{i,j}<br>\\end{aligned}<br>$$<br>于是我们维护四个数组，然后反过来按照公式求和就好了。</p>\n<h3 id=\"复杂度分析-2\"><a href=\"#复杂度分析-2\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>时间复杂度每次查询和修改，每一个维度上树状数组操作都是$O(logN)$，于是二维树状数组就是$O(log^2N)$。空间复杂度$O(N^2)$。</p>\n<h3 id=\"关键代码-6\"><a href=\"#关键代码-6\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>k<span class=\"token punctuation\">;</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>k<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>k<span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>k<span class=\"token operator\">*</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x2<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y2<span class=\"token punctuation\">,</span>ll k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span>y1<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>x2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span>y2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>x2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y1<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">-=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>j<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">-=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            v<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x2<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">,</span>y2<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>x1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y2<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">,</span>y1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>x1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"L-芜湖塔台请求起飞\"><a href=\"#L-芜湖塔台请求起飞\" class=\"headerlink\" title=\"L - 芜湖塔台请求起飞\"></a>L - 芜湖塔台请求起飞</h2><h3 id=\"解题思路-9\"><a href=\"#解题思路-9\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>树链剖分板子题。树链剖分的的思想就是把某些树上的问题转化成链上的问题，使用线段树等结构来维护他，利用等就是dfs序。树上路径不需要遍历一整棵树，所以我们把树分成了若干条链<del>（B是个阉割版的，有点像）</del>。发现任意两个点总会汇集到一起某一个根结点，每次找路径的时候，所以每次我们不断从链尾跳到链头，根据节点深度决定哪个点跳，直到两个结点在同一条链上。<br>链的分法就不多赘述了，找子树大小大的方向使链延伸。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">dfs1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n    siz<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    dep<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> maxson <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> inext<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> f<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dfs1</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> d <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        siz<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> siz<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> maxson<span class=\"token punctuation\">)</span>\n            maxson <span class=\"token operator\">=</span> siz<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> son<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> topf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>cur<span class=\"token punctuation\">;</span>\n    top<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> topf<span class=\"token punctuation\">;</span>\n    w2<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w1<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>son<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs2</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> topf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> inext<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> son<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">dfs2</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">lss</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> top<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dep<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>beg<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">+=</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beg <span class=\"token operator\">=</span> fa<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dep<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>beg<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ans <span class=\"token operator\">+=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ans <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">imax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>inf<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> top<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dep<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>beg<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beg <span class=\"token operator\">=</span> fa<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dep<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>beg<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ans <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ans <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"M-采集物资\"><a href=\"#M-采集物资\" class=\"headerlink\" title=\"M - 采集物资\"></a>M - 采集物资</h2><h3 id=\"解题思路-10\"><a href=\"#解题思路-10\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>解决区间第k小问题，可以使用平衡树。但是其中有一个问题，就是有多个区域，而且还要合并，这就涉及到了启发式合并了。<del>说白了就是暴力，还以为多神奇</del>.</p>\n<p>题解说的是Splay，但是我的Splay真的写的稀烂，调了好久调不好，所以我直接掏出SBT。合并的时候找到小的一棵树，DFS一下整棵树，每个结点都插入要合并的树上。这里要注意，并查集的合并方向要和启发式合并相同。</p>\n<h3 id=\"关键代码-7\"><a href=\"#关键代码-7\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>rt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>_to<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> id<span class=\"token punctuation\">[</span>_to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>_to<span class=\"token punctuation\">,</span> datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> siz<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*main\nint &amp;p = root[ifind(a)];\nint &amp;q = root[ifind(b)];\nif (p != q)\n    Merge(p, q);\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"N-土豆的序列\"><a href=\"#N-土豆的序列\" class=\"headerlink\" title=\"N - 土豆的序列\"></a>N - 土豆的序列</h2><h3 id=\"解题思路-11\"><a href=\"#解题思路-11\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>平衡树板子题。接上题，因为专题初就手打了一遍SBT，所以SBT很熟。二叉平衡树就是遵循左子树小于根结点小于右子树的一棵树，然而因为插入顺序未知，如果选定某个结点作为根固定，很容易使树退化，甚至变成链表，对复杂度影响很大。于是有各种方式来平衡它，通过旋转使树尽量不退化。</p>\n<p>Splay遵循查找频率高的节点保持在离根近的地方，每次操作后都将结点旋转到根，而SBT(Size-Balanced-Tree)通过记录子树大小旋转实现平衡。</p>\n<p>基本的左旋右旋操作就是在保证树的性质不变的情况下把结点变为根结点的操作。</p>\n<h3 id=\"关键代码-8\"><a href=\"#关键代码-8\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>rt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> nrt <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//new root</span>\n    son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>nrt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    son<span class=\"token punctuation\">[</span>nrt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rt<span class=\"token punctuation\">;</span>\n    siz<span class=\"token punctuation\">[</span>nrt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> siz<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    siz<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    rt <span class=\"token operator\">=</span> nrt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>rt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>rt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        rt <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>tails<span class=\"token punctuation\">;</span>\n        datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n        son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        siz<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token operator\">++</span>siz<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;=</span> datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">,</span> datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>rt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> val<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        siz<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token operator\">--</span>siz<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        rt <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        rt <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            p <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> datas<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> datas<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">pre</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> sbt<span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> val<span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> datas<span class=\"token punctuation\">[</span>ans<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">nxt</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> sbt<span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> val<span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> datas<span class=\"token punctuation\">[</span>ans<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">xth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> sbt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span>\n            x <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> datas<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ranks</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> sbt<span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> val<span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"O-土豆的集合\"><a href=\"#O-土豆的集合\" class=\"headerlink\" title=\"O - 土豆的集合\"></a>O - 土豆的集合</h2><h3 id=\"解题思路-12\"><a href=\"#解题思路-12\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>主席树板题，一开始我想试着用栈模拟回退操作，结果调了好久最后TLE。后来学了一下主席树后，发现把主席树用在并查集上就能解决问题。但是此时不能路径压缩，因为路径压缩丢失了信息，导致后面回溯操作会出问题。</p>\n<p>集合合并时，我们不断递归到子结点，因为我们没走过的部分是没有任何改变的，所以直接重复利用，直将将沿途的链更新。<br>因为主席树结点需要不断更新，所以不满足$2<em>o$和$2</em>o+1$的性质，需要单独记录左右孩子编号。</p>\n<h3 id=\"关键代码-9\"><a href=\"#关键代码-9\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    node now <span class=\"token operator\">=</span> Tree<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span>l <span class=\"token operator\">==</span> now<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> now<span class=\"token punctuation\">.</span>fa<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span>l <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> fa <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fa <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> fa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> pre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> loc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> now <span class=\"token operator\">=</span> tot<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">==</span> Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fa <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> now<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">+</span> Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span>\n        Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls <span class=\"token operator\">=</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">,</span>loc<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs <span class=\"token operator\">=</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">,</span>loc<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> now<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"T-羽毛球赛\"><a href=\"#T-羽毛球赛\" class=\"headerlink\" title=\"T - 羽毛球赛\"></a>T - 羽毛球赛</h2><h3 id=\"解题思路-13\"><a href=\"#解题思路-13\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>回滚莫队算法，因为完全没接触过，所以从头开始学。先学了普通莫队算法，感觉很神奇，居然排了个序就能这么舒服的暴力。我看的是SPOJ3267Query，题目问的是某个区间内出现的数字总数，就是左右指针跑来跑去移动一下找结果嘛。</p>\n<p>然后就是回滚莫队了，问题就出在删除上，因为我们删除的时候已经丢失了上一次信息，所以要重新跑一遍获得？这样复杂度还不如直接暴力。回滚莫队思路是不删除，因为左端点同一块的询问，右端点都是递增的，于是我们处理右端点是不需要删除的，至于左端点部分，我们直接暴力解决就好了，因为分块过，保证每次左端点暴力不会超过$O(\\sqrt{N})$并且N个左端点，总时间复杂度还是$O(NlogN)$。</p>\n<p>回到T题，问题是如何保存数据能在$O(1)$内更新答案呢。我一开始保存的是每个数字目前最右的位置，但是这会导致右端点出现这个数时无法更新答案；改为最左边的又发现左端点暴力处理的时候也有问题，索性直接存了两个数，而且只存下一个块的位置，左端点所在的块信息只对每个左端点有效，不必保存。</p>\n<h3 id=\"关键代码-10\"><a href=\"#关键代码-10\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> blockn<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> ranger<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> ranger<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ll temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> now <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> block<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> ql <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span> qr <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> block<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> ql<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> qr<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n                cnt2<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> ql<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> qr<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cnt2<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    cnt2<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    temp <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token number\">1ll</span> <span class=\"token operator\">*</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> cnt2<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            ans<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n                now <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> <span class=\"token number\">1ll</span> <span class=\"token operator\">*</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        temp <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ql <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                temp <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token number\">1ll</span> <span class=\"token operator\">*</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">-</span> cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        ans<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> ranger<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> ranger<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">++</span>l<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"V-打怪兽\"><a href=\"#V-打怪兽\" class=\"headerlink\" title=\"V -  打怪兽\"></a>V -  打怪兽</h2><h3 id=\"解题思路-14\"><a href=\"#解题思路-14\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>离线RMQ , 直接上 ST 表 , 线段树也是可以的 , 但 ST 表还是香的 . <a href=\"https://www.inzamz.top/2020/SparseTable/\">前置知识在这</a> . </p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">getst</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    bin<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    lg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        bin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> bin<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        lg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lg<span class=\"token punctuation\">[</span>i <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+</span> bin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> bin<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">stsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> lg<span class=\"token punctuation\">[</span>r <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">[</span>r <span class=\"token operator\">-</span> bin<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Y-孩子与玩具\"><a href=\"#Y-孩子与玩具\" class=\"headerlink\" title=\"Y - 孩子与玩具\"></a>Y - 孩子与玩具</h2><h3 id=\"解题思路-15\"><a href=\"#解题思路-15\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>放出 tag 后 , 发现是并查集 ? 我是直接贪心写的 …  其实本质跟并查集就是一样的 . </p>\n<p>我们要让孩子开心的尽可能多 , 就是尽量让孩子尽可能只拿到一个玩具 , 当然第一个小朋友是不可避免要拿两个的 , 那就让出现次数最多的玩具先拿掉 . 于是我们不断把还没拿的玩具中出现最多的放进队列 , 然后把想要这个玩具的孩子枚举一遍 , 选给他们另一个想要的玩具 .</p>\n<h3 id=\"关键代码-11\"><a href=\"#关键代码-11\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>imax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>child<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ids<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token operator\">--</span>ans<span class=\"token punctuation\">;</span>\n            flag<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> child<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ids<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<blockquote>\n<p>板子题并没有给出详细的讲解 , 讲了大致思路 , 以及对于某些细节上的处理 . 代码也是把板子部分去了 , 留下需要改的部分 . </p>\n</blockquote>","more":"<h2 id=\"A-大佬集中营\"><a href=\"#A-大佬集中营\" class=\"headerlink\" title=\"A - 大佬集中营\"></a>A - 大佬集中营</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>区间问题，先想到的是主席树。但是挂题意了，有可能多个学渣选大佬，所以 k 并不是区间长度。区间长度的话就是另外一道题了，是主席树的板题 <a href=\"https://www.luogu.com.cn/problem/P3567\">[POI2014]KUR-Couriers</a> 。所以问题复杂了，但是顺着刚才的思路，我们发现众数数量不超过一半时，答案就是 <code>1</code> .那如果超过一半呢 , 我们考虑这样的分组 . 第一组众数数量$2<em>k+1$非众数$2</em>k$, 这是优解 , 很好利用了向上取整多出的一个数 . 如果还有一组数$2<em>l+1$和$2</em>l$的话 , 加一下$2*(k+l+1)$个众数以及$2*(k+l)$个非众数 . 我们发现是可合并的 , 所以分组最少就取最大的一组 , 让剩余的众数每一个作为一组就好了 . </p>\n<ul>\n<li><code>tot</code> : 区间长度</li>\n<li><code>x</code> : 区间内众数个数</li>\n<li><code>ans</code> : 最终分的组数</li>\n</ul>\n<p>$$<br>Ans=x-[(tot-x)+1]+1=2*x-tot<br>$$</p>\n<p>主席树维护一下区间内数字个数 , 叶子节点的最大值就是众数个数 . 而且子树的所有数字个数如果小于区间长度的一半 , 那就可以跳过该子树 , 用于剪枝 . </p>\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>时间复杂度方面建树是$O(N)$, 主席树每次操作$O(logN)$ , N 个版本$O(NlogN)$ , 每次查询$O(logN)$, Q和N同阶 , 最终时间复杂度<br>$$<br>O=O(N)+O(NlogN)+O(NlogN)=O(NlogN)<br>$$</p>\n<h3 id=\"关键代码\"><a href=\"#关键代码\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">-</span> Tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">></span> ans<span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">=</span> Tree<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">-</span> Tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>Tree<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">-</span> Tree<span class=\"token punctuation\">[</span>Tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">></span> all <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">,</span> Tree<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> mid <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>Tree<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">-</span> Tree<span class=\"token punctuation\">[</span>Tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">></span> all <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">,</span> Tree<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> now <span class=\"token operator\">=</span> tot<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls <span class=\"token operator\">=</span> Tree<span class=\"token punctuation\">[</span>pre<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">;</span>\n    Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs <span class=\"token operator\">=</span> Tree<span class=\"token punctuation\">[</span>pre<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">;</span>\n    Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> Tree<span class=\"token punctuation\">[</span>pre<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">++</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> now<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">>=</span> kth<span class=\"token punctuation\">)</span>\n        Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls <span class=\"token operator\">=</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs <span class=\"token operator\">=</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> Tree<span class=\"token punctuation\">[</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">+</span> Tree<span class=\"token punctuation\">[</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> now<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-土豆的树\"><a href=\"#B-土豆的树\" class=\"headerlink\" title=\"B - 土豆的树\"></a>B - 土豆的树</h2><h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这道题是在 L 之后写的 , 于是思路很清晰 , 很像树链剖分 , 用到了 dfs 序 . 颜色就是用状态压缩 , 使用 <code>longlong</code> 表示染色状态 , 位运算使用异或判断颜色是否相同 , 同或用于染色 . 子树在dfs序上是连续的 , 于是可以用线段树维护颜色树 . 注意土豆的”树”可能是森林 , 一切都是这么令人惬意 , 结果我挂了题意 . 在讲座前一晚问了 ljj 大佬思路 , 发现一模一样 , 让我检查一下染色部分 , 容易写炸 . 讲座后思考了取模方法 , 发现原来是颜色序号差不超过 50 , 一直当成颜色不超过 50 种 , 这连 <code>map</code> 都没必要了 , 直接取模 51 不就好了 . 是 51 ,因为 0 和 50 号颜色可以同时存在 . 但是还是一直挂 , 最后乱改了好久 , 把所有数组开 <code>longlong</code> 就过了 , 原来是 lazy 标记的颜色没有用 <code>longlong</code> . 交了 28 发 , 麻了 .</p>\n<h3 id=\"关键代码-1\"><a href=\"#关键代码-1\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">cmpcol</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span> ll b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">^=</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> <span class=\"token number\">1ll</span><span class=\"token punctuation\">)</span>    <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    sum<span class=\"token punctuation\">[</span>lson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    sum<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    color<span class=\"token punctuation\">[</span>lson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    color<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    mark<span class=\"token punctuation\">[</span>lson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    mark<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> astart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> aend<span class=\"token punctuation\">,</span> ll k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>astart <span class=\"token operator\">&lt;=</span> l <span class=\"token operator\">&amp;&amp;</span> r <span class=\"token operator\">&lt;=</span> aend<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n        sum<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        color<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>astart <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">^</span> color<span class=\"token punctuation\">[</span>lson<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>lson<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> astart<span class=\"token punctuation\">,</span> aend<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aend <span class=\"token operator\">></span> mid <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">^</span> color<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>rson<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> astart<span class=\"token punctuation\">,</span> aend<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        color<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> color<span class=\"token punctuation\">[</span>lson<span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> color<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        sum<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">cmpcol</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">qsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fr<span class=\"token punctuation\">,</span> ll <span class=\"token operator\">&amp;</span>col<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fl <span class=\"token operator\">&lt;=</span> l <span class=\"token operator\">&amp;&amp;</span> r <span class=\"token operator\">&lt;=</span> fr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token function\">cmpcol</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        col <span class=\"token operator\">=</span> col <span class=\"token operator\">|</span> color<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mark<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fl <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> col <span class=\"token operator\">^</span> color<span class=\"token punctuation\">[</span>lson<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">+=</span> <span class=\"token function\">qsum</span><span class=\"token punctuation\">(</span>lson<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> fl<span class=\"token punctuation\">,</span> fr<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fr <span class=\"token operator\">></span> mid <span class=\"token operator\">&amp;&amp;</span> col <span class=\"token operator\">^</span> color<span class=\"token punctuation\">[</span>rson<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">+=</span> <span class=\"token function\">qsum</span><span class=\"token punctuation\">(</span>rson<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> fl<span class=\"token punctuation\">,</span> fr<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>cur<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> inext<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> f<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dfs1</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    tails<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"D-三仙归洞\"><a href=\"#D-三仙归洞\" class=\"headerlink\" title=\"D - 三仙归洞\"></a>D - 三仙归洞</h2><h3 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>一看就是要用链式结构来写 , 再看数据范围 , 就是要$O(N)$时间复杂度 . 一开始想用第 N 个链表节点表示第 N 个位置的碗 , 但是每次操作都要找到球 , 所以我们直接让第 N 个链表节点表示 N 个小球的信息 , 再加上头尾节点 , 用于输出 . </p>\n<p>对于操作四 , 我们用一个 <code>flag</code> 标记就好了 , 反向后左右边颠倒 . 还有一个点就是节点相邻执行操作三 , 注意一下细节 , 我懒得改就直接加了特判 . </p>\n<h3 id=\"关键代码-2\"><a href=\"#关键代码-2\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">move_to_l</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">move_to_r</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">-></span>r <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">-></span>l <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">-></span>r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap_xy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    node <span class=\"token operator\">*</span>xl <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>xr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xr <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//交换相邻元素</span>\n        s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">-></span>r<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">-></span>l<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xl <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">-></span>l<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">-></span>r<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">-></span>r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">-></span>l <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">-></span>r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">-></span>l <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> xl<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> xr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"E-众人拾柴火焰高\"><a href=\"#E-众人拾柴火焰高\" class=\"headerlink\" title=\"E - 众人拾柴火焰高\"></a>E - 众人拾柴火焰高</h2><h3 id=\"解题思路-3\"><a href=\"#解题思路-3\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>二分答案法，每次我们枚举答案，然后验证是否成立。再使用差分记录火堆的影响。我是使用一个队列，队列里面放的是某个火焰失去效果的时间点，每次判断队列首与当前时间是否匹配，匹配就减去一个火堆的加成。从头开始，某个村庄温度过低就放一个火堆刚好边缘影响了当前村庄。</p>\n<h3 id=\"复杂度分析-1\"><a href=\"#复杂度分析-1\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>二分答案需要$O(logN)$次验证，每次验证是$O(N)$，最终时间复杂度是$O(NlogN)$.</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cntm <span class=\"token operator\">=</span> m<span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> delta <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> cur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            delta <span class=\"token operator\">-=</span> k<span class=\"token punctuation\">;</span>\n            q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> delta <span class=\"token operator\">&lt;</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cntm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token operator\">--</span>cntm<span class=\"token punctuation\">;</span>\tdelta <span class=\"token operator\">+=</span> k<span class=\"token punctuation\">;</span>\n                q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token operator\">++</span>cur<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>    l <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>    r <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"F-我，不是说了能力要平均值么-·-改三\"><a href=\"#F-我，不是说了能力要平均值么-·-改三\" class=\"headerlink\" title=\"F - 我，不是说了能力要平均值么 · 改三\"></a>F - 我，不是说了能力要平均值么 · 改三</h2><h3 id=\"解题思路-4\"><a href=\"#解题思路-4\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>首先 , 因为取模与逆元 , 我们可以忽略约分操作 (对比改一) . <a href=\"https://www.inzamz.top/2020/InverseElement/\">逆元的前置知识</a>在这 , 简单来说除以 K mod M 换成乘$K^{M-2}$取 mod M .</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mx<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> mx<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">>=</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        len <span class=\"token operator\">+=</span> mx<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">;</span>\n        mxsum <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>len <span class=\"token operator\">*</span> mx<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mxsum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mxsum <span class=\"token operator\">+</span> mod<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        mx<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    mx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mxsum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mxsum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mxsum <span class=\"token operator\">+</span> mod<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n    len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mn<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> mn<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        len <span class=\"token operator\">+=</span> mn<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">;</span>\n        mnsum <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>len <span class=\"token operator\">*</span> mn<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mnsum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mnsum <span class=\"token operator\">+</span> mod<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        mn<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    mn<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mnsum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mnsum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mnsum <span class=\"token operator\">+</span> mod<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n    ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">+</span> mxsum <span class=\"token operator\">+</span> mnsum<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"G-魔空「小行星带」\"><a href=\"#G-魔空「小行星带」\" class=\"headerlink\" title=\"G - 魔空「小行星带」\"></a>G - 魔空「小行星带」</h2><h3 id=\"解题思路-5\"><a href=\"#解题思路-5\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>学了K-D树后 , 可以很轻松构造出一棵树来维护他 , 但是要维护什么数据呢 , 这是解题的关键 . 然后发呆了一个晚上GHI都是细节处理不了 , 躺在床上想通了 . 先储存初始状态的和 , 对于取模操作我们再维护一个最大值和最小值 , 每次询问先对时间取模 , 然后找到在范围内的子树时 . </p>\n<ul>\n<li>如果最大值加上时间不需要取模 , 说明不用取模 .</li>\n<li>如果最小值加上时间还要取模 , 那么全部都要取模 , 减一下 .</li>\n</ul>\n<p>什么 ? 会混在一起 , 那继续找 ? 于是 TLE 了 . 后来看一眼数据 , c 居然才10 , 那我直接每个节点开个数组就好了 , 这样记录所有子节点各个初始值的数量 . 当区间完全包含在查询区间里 , 直接循环一遍求和就好了 . </p>\n<h3 id=\"关键代码-3\"><a href=\"#关键代码-3\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>x <span class=\"token operator\">||</span> xr <span class=\"token operator\">&lt;</span> L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> xl <span class=\"token operator\">||</span> yr <span class=\"token operator\">&lt;</span> D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> yl<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xl <span class=\"token operator\">&lt;=</span> L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> xr <span class=\"token operator\">&amp;&amp;</span> yl <span class=\"token operator\">&lt;=</span> D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> yr <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> c<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>    res <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xl <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;=</span> xr <span class=\"token operator\">&amp;&amp;</span> yl <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;=</span> yr <span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> res <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">+</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res <span class=\"token operator\">+</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    siz<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> siz<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> siz<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    sum<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> c<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>    cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> D<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> c<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>    cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">[</span>ls<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> D<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> c<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>    cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">[</span>rs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"I-种田Ⅰ\"><a href=\"#I-种田Ⅰ\" class=\"headerlink\" title=\"I - 种田Ⅰ\"></a>I - 种田Ⅰ</h2><h3 id=\"解题思路-6\"><a href=\"#解题思路-6\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>扫描线算法 , 每次统计覆盖长度,乘以到下一条线段的高度差 . 当然这道题要解决的是偶数次覆盖的问题 , 倒过来就是解决奇数次覆盖问题 . 使用了两个标记 , 一个是原本扫描线的标记 , 另一个是奇数次覆盖的的标记 , 这个标记只要每一次异或一下就好了 , 因为覆盖奇数次线段就没有了 , 偶数次覆盖就变成奇数次了 . 每次覆盖更新奇数段长度就好了 . 不知道题解说的反转一下是不是这个意思 . </p>\n<h3 id=\"关键代码-4\"><a href=\"#关键代码-4\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">do_odd</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span> ll L<span class=\"token punctuation\">,</span> ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    ll all <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>R <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> num<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>all <span class=\"token operator\">-</span> tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">pushup</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span> ll L<span class=\"token punctuation\">,</span> ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy<span class=\"token punctuation\">)</span>\n        tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum1 <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>R <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> num<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum1 <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum1 <span class=\"token operator\">+</span> tree<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span> ll L<span class=\"token punctuation\">,</span> ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ll mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">+</span> R<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">do_odd</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">do_odd</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy2 <span class=\"token operator\">^=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy2 <span class=\"token operator\">^=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ll o<span class=\"token punctuation\">,</span> ll L<span class=\"token punctuation\">,</span> ll R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">[</span>R <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> ql <span class=\"token operator\">||</span> num<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> qr<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ql <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> num<span class=\"token punctuation\">[</span>R <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy <span class=\"token operator\">+=</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">do_odd</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lazy2 <span class=\"token operator\">^=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">pushup</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ll M <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">+</span> R<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>ro<span class=\"token punctuation\">,</span> M <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pushup</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum2 <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum2 <span class=\"token operator\">+</span> tree<span class=\"token punctuation\">[</span>ro<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"J-马老师的餐厅\"><a href=\"#J-马老师的餐厅\" class=\"headerlink\" title=\"J - 马老师的餐厅\"></a>J - 马老师的餐厅</h2><h3 id=\"解题思路-7\"><a href=\"#解题思路-7\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>我们要想菜尽量多 , 就要让比较多的先使用 , 于是我们令每次取前三多的原材料做一道菜 . 注意做完后原材料不一定是前三多了 , 需要排序 . 原数组本就有序 , 于是用优先队列 . 重复上述过程 .</p>\n<h3 id=\"关键代码-5\"><a href=\"#关键代码-5\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>ans<span class=\"token punctuation\">;</span>\n    a1 <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a2 <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a3 <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a3 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a3 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"K-Yousa的鸟蛋\"><a href=\"#K-Yousa的鸟蛋\" class=\"headerlink\" title=\"K - Yousa的鸟蛋\"></a>K - Yousa的鸟蛋</h2><h3 id=\"解题思路-8\"><a href=\"#解题思路-8\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>第一次拿到题我尝试着写了个矩形树，结果时间复杂度报表，后来才想到了树状数组。类似于一维树状数组的差分思想，我们分析和与元素之间的关系。<br>$$<br>    sum_{i,j}=sum_{i-1,j}+sum_{i,j-1}-sum_{i-1,j-1}+a{i,j}<br>    a_{i,j}=a_{i-1,j}+a_{i,j-1}-a_{i-1,j-1}+d{i,j}<br>$$<br>于是我们给出差分数组的公式<br>$$<br>d_{i,j}=a_{i,j}-a{i-1,j}-a_{i,j-1}+a_{i-1,j-1}<br>$$<br>接下来我们考虑的是区间和与差分数组的关系:<br>$$<br>\\begin{aligned}<br>    sum_{x,y} &amp;=\\sum_{i=1}^{x}\\sum_{j=1}^{y} a_{i,j} \\<br>    &amp;=\\sum_{i=1}^{x}\\sum_{j=1}^{y}\\sum_{k=1}^{i}\\sum_{l=1}^{j}d_{k,l}\\<br>    &amp;=\\sum_{i=1}^{x}\\sum_{j=1}^{y} (x+1)(y+1)d_{i,j}-(y+1)id_{i,j}-(x+1)jd_{i,j}+ijd_{i,j}<br>\\end{aligned}<br>$$<br>于是我们维护四个数组，然后反过来按照公式求和就好了。</p>\n<h3 id=\"复杂度分析-2\"><a href=\"#复杂度分析-2\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>时间复杂度每次查询和修改，每一个维度上树状数组操作都是$O(logN)$，于是二维树状数组就是$O(log^2N)$。空间复杂度$O(N^2)$。</p>\n<h3 id=\"关键代码-6\"><a href=\"#关键代码-6\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>k<span class=\"token punctuation\">;</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>k<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>k<span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>k<span class=\"token operator\">*</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x2<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y2<span class=\"token punctuation\">,</span>ll k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span>y1<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>x2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span>y2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addval</span><span class=\"token punctuation\">(</span>x2<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y1<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">-=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>j<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">-=</span><span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            v<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x2<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">,</span>y2<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>x1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y2<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">,</span>y1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>x1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"L-芜湖塔台请求起飞\"><a href=\"#L-芜湖塔台请求起飞\" class=\"headerlink\" title=\"L - 芜湖塔台请求起飞\"></a>L - 芜湖塔台请求起飞</h2><h3 id=\"解题思路-9\"><a href=\"#解题思路-9\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>树链剖分板子题。树链剖分的的思想就是把某些树上的问题转化成链上的问题，使用线段树等结构来维护他，利用等就是dfs序。树上路径不需要遍历一整棵树，所以我们把树分成了若干条链<del>（B是个阉割版的，有点像）</del>。发现任意两个点总会汇集到一起某一个根结点，每次找路径的时候，所以每次我们不断从链尾跳到链头，根据节点深度决定哪个点跳，直到两个结点在同一条链上。<br>链的分法就不多赘述了，找子树大小大的方向使链延伸。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">dfs1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n    siz<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    dep<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> maxson <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> inext<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> f<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dfs1</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> d <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        siz<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> siz<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> maxson<span class=\"token punctuation\">)</span>\n            maxson <span class=\"token operator\">=</span> siz<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> son<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> topf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    id<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>cur<span class=\"token punctuation\">;</span>\n    top<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> topf<span class=\"token punctuation\">;</span>\n    w2<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w1<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>son<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs2</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> topf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> inext<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> son<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">dfs2</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">lss</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> top<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dep<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>beg<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">+=</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beg <span class=\"token operator\">=</span> fa<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dep<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>beg<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ans <span class=\"token operator\">+=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ans <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">imax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>inf<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> top<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dep<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>beg<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beg <span class=\"token operator\">=</span> fa<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dep<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>beg<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ans <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ans <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"M-采集物资\"><a href=\"#M-采集物资\" class=\"headerlink\" title=\"M - 采集物资\"></a>M - 采集物资</h2><h3 id=\"解题思路-10\"><a href=\"#解题思路-10\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>解决区间第k小问题，可以使用平衡树。但是其中有一个问题，就是有多个区域，而且还要合并，这就涉及到了启发式合并了。<del>说白了就是暴力，还以为多神奇</del>.</p>\n<p>题解说的是Splay，但是我的Splay真的写的稀烂，调了好久调不好，所以我直接掏出SBT。合并的时候找到小的一棵树，DFS一下整棵树，每个结点都插入要合并的树上。这里要注意，并查集的合并方向要和启发式合并相同。</p>\n<h3 id=\"关键代码-7\"><a href=\"#关键代码-7\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>rt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>_to<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> id<span class=\"token punctuation\">[</span>_to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>_to<span class=\"token punctuation\">,</span> datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> siz<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*main\nint &amp;p = root[ifind(a)];\nint &amp;q = root[ifind(b)];\nif (p != q)\n    Merge(p, q);\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"N-土豆的序列\"><a href=\"#N-土豆的序列\" class=\"headerlink\" title=\"N - 土豆的序列\"></a>N - 土豆的序列</h2><h3 id=\"解题思路-11\"><a href=\"#解题思路-11\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>平衡树板子题。接上题，因为专题初就手打了一遍SBT，所以SBT很熟。二叉平衡树就是遵循左子树小于根结点小于右子树的一棵树，然而因为插入顺序未知，如果选定某个结点作为根固定，很容易使树退化，甚至变成链表，对复杂度影响很大。于是有各种方式来平衡它，通过旋转使树尽量不退化。</p>\n<p>Splay遵循查找频率高的节点保持在离根近的地方，每次操作后都将结点旋转到根，而SBT(Size-Balanced-Tree)通过记录子树大小旋转实现平衡。</p>\n<p>基本的左旋右旋操作就是在保证树的性质不变的情况下把结点变为根结点的操作。</p>\n<h3 id=\"关键代码-8\"><a href=\"#关键代码-8\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>rt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> nrt <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//new root</span>\n    son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>nrt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    son<span class=\"token punctuation\">[</span>nrt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rt<span class=\"token punctuation\">;</span>\n    siz<span class=\"token punctuation\">[</span>nrt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> siz<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    siz<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    rt <span class=\"token operator\">=</span> nrt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>rt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>rt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        rt <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>tails<span class=\"token punctuation\">;</span>\n        datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n        son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        siz<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token operator\">++</span>siz<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;=</span> datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">maintain</span><span class=\"token punctuation\">(</span>rt<span class=\"token punctuation\">,</span> datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>rt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> val<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        siz<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token operator\">--</span>siz<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        rt <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        rt <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            p <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        datas<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> datas<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> datas<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">pre</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> sbt<span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> val<span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> datas<span class=\"token punctuation\">[</span>ans<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">nxt</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> sbt<span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> val<span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> datas<span class=\"token punctuation\">[</span>ans<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">xth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> sbt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span>\n            x <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> datas<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ranks</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> sbt<span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> val<span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cur <span class=\"token operator\">=</span> son<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"O-土豆的集合\"><a href=\"#O-土豆的集合\" class=\"headerlink\" title=\"O - 土豆的集合\"></a>O - 土豆的集合</h2><h3 id=\"解题思路-12\"><a href=\"#解题思路-12\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>主席树板题，一开始我想试着用栈模拟回退操作，结果调了好久最后TLE。后来学了一下主席树后，发现把主席树用在并查集上就能解决问题。但是此时不能路径压缩，因为路径压缩丢失了信息，导致后面回溯操作会出问题。</p>\n<p>集合合并时，我们不断递归到子结点，因为我们没走过的部分是没有任何改变的，所以直接重复利用，直将将沿途的链更新。<br>因为主席树结点需要不断更新，所以不满足$2<em>o$和$2</em>o+1$的性质，需要单独记录左右孩子编号。</p>\n<h3 id=\"关键代码-9\"><a href=\"#关键代码-9\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    node now <span class=\"token operator\">=</span> Tree<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span>l <span class=\"token operator\">==</span> now<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> now<span class=\"token punctuation\">.</span>fa<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span>l <span class=\"token operator\">+</span> now<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> fa <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fa <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getfa</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> fa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> pre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> loc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> now <span class=\"token operator\">=</span> tot<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">==</span> Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fa <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> now<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">+</span> Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span>\n        Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls <span class=\"token operator\">=</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ls<span class=\"token punctuation\">,</span>loc<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs <span class=\"token operator\">=</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">,</span>loc<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> now<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"T-羽毛球赛\"><a href=\"#T-羽毛球赛\" class=\"headerlink\" title=\"T - 羽毛球赛\"></a>T - 羽毛球赛</h2><h3 id=\"解题思路-13\"><a href=\"#解题思路-13\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>回滚莫队算法，因为完全没接触过，所以从头开始学。先学了普通莫队算法，感觉很神奇，居然排了个序就能这么舒服的暴力。我看的是SPOJ3267Query，题目问的是某个区间内出现的数字总数，就是左右指针跑来跑去移动一下找结果嘛。</p>\n<p>然后就是回滚莫队了，问题就出在删除上，因为我们删除的时候已经丢失了上一次信息，所以要重新跑一遍获得？这样复杂度还不如直接暴力。回滚莫队思路是不删除，因为左端点同一块的询问，右端点都是递增的，于是我们处理右端点是不需要删除的，至于左端点部分，我们直接暴力解决就好了，因为分块过，保证每次左端点暴力不会超过$O(\\sqrt{N})$并且N个左端点，总时间复杂度还是$O(NlogN)$。</p>\n<p>回到T题，问题是如何保存数据能在$O(1)$内更新答案呢。我一开始保存的是每个数字目前最右的位置，但是这会导致右端点出现这个数时无法更新答案；改为最左边的又发现左端点暴力处理的时候也有问题，索性直接存了两个数，而且只存下一个块的位置，左端点所在的块信息只对每个左端点有效，不必保存。</p>\n<h3 id=\"关键代码-10\"><a href=\"#关键代码-10\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> blockn<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> ranger<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> ranger<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ll temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> now <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> block<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> ql <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span> qr <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> block<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> ql<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> qr<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n                cnt2<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> ql<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> qr<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cnt2<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    cnt2<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    temp <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token number\">1ll</span> <span class=\"token operator\">*</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> cnt2<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            ans<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> qr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n                now <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> <span class=\"token number\">1ll</span> <span class=\"token operator\">*</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        temp <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ql <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                temp <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token number\">1ll</span> <span class=\"token operator\">*</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">-</span> cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        ans<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> ranger<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> ranger<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                cnt<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">++</span>l<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"V-打怪兽\"><a href=\"#V-打怪兽\" class=\"headerlink\" title=\"V -  打怪兽\"></a>V -  打怪兽</h2><h3 id=\"解题思路-14\"><a href=\"#解题思路-14\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>离线RMQ , 直接上 ST 表 , 线段树也是可以的 , 但 ST 表还是香的 . <a href=\"https://www.inzamz.top/2020/SparseTable/\">前置知识在这</a> . </p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">getst</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    bin<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    lg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        bin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> bin<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        lg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lg<span class=\"token punctuation\">[</span>i <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+</span> bin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> bin<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">stsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> lg<span class=\"token punctuation\">[</span>r <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">[</span>r <span class=\"token operator\">-</span> bin<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Y-孩子与玩具\"><a href=\"#Y-孩子与玩具\" class=\"headerlink\" title=\"Y - 孩子与玩具\"></a>Y - 孩子与玩具</h2><h3 id=\"解题思路-15\"><a href=\"#解题思路-15\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>放出 tag 后 , 发现是并查集 ? 我是直接贪心写的 …  其实本质跟并查集就是一样的 . </p>\n<p>我们要让孩子开心的尽可能多 , 就是尽量让孩子尽可能只拿到一个玩具 , 当然第一个小朋友是不可避免要拿两个的 , 那就让出现次数最多的玩具先拿掉 . 于是我们不断把还没拿的玩具中出现最多的放进队列 , 然后把想要这个玩具的孩子枚举一遍 , 选给他们另一个想要的玩具 .</p>\n<h3 id=\"关键代码-11\"><a href=\"#关键代码-11\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>imax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>child<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ids<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token operator\">--</span>ans<span class=\"token punctuation\">;</span>\n            flag<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> child<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ids<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"Chtholly Tree","date":"2020-11-18T03:31:22.000Z","mp3":"https://link.hhtjim.com/163/3253902.mp3","cover":"https://p.130014.xyz/2020/10/28/9B5F0757-2BCD-424C-B564-6C1317C1BFC8.jpg","_content":"\n## 珂教兴国\n>有一天我想着去看看[中国珂学院](https://wiki.sukasuka.cn/)，然后百度后，发现珂朵莉树这种有趣的数据结构..。\n>\n>心想着有一天一定要好好学学\n\n<!-- more -->\n\n## 珂学名字的由来 - [CF896C](https://codeforces.com/contest/896/problem/C) \nWillem, Chtholly and Seniorious 想必珂学家们不需要解释了。就是一位用户提交完正解后，给出了另一份代码（暴力解法）。就是珂朵莉树，因为用户ID叫 Old Driver，又叫老司机树。身为一名资深珂学家，这等好事岂能错过。\n## 复杂度分析\n在数据随机的情况下，珂朵莉树据说可以吊打线断树，很快嗷。主要是因为区间赋值，在珂朵莉树中只用了一个节点表示，大大降低了 set 的大小。珂朵莉树节点最后会趋于一个稳定值 log n 。当然要求随机，也即有 1/4 概率区间赋值。<div class='heimu'>其实就是欺负数据弱，用来骗分的。</div>\n## 构造珂朵莉树\n### 定义节点\n\n```cpp\nstruct Node\n{\n\tint l,r;\n\tmutable ll value;//\n\tNode(int a,int b,long long c):l(a),r(b),value(c){}\n\tNode(int a):l(a),r(0),value(0){}\n\tbool operator < (const Node& o) const{\n    \treturn l<o.l;\n\t}\n}\n```\n## 核心操作和维护\n### split：分裂操作\n最核心的就是分裂，珂朵莉树之后操作都以分裂为前提，因为区间赋值操作我们把一段线段变成一个点，需要操作线段的某一段，就把它分裂出来。\n\n```cpp\nset<Node>::iterator split(int pos)\n{\n    set<Node>::iterator it=s.lower_bound(Node(pos));\n    if (it->l==pos && it!=s.end()) return it;//(1) \n    --it;\n    if (pos > it->r) return s.end();//(2)\n    int L=it->l,R=it->r;\n    ll V=it->value;\n    s.erase(it);\n    s.insert(Node(L,pos-1,V));//(3)\n    return s.insert(Node(pos,R,V)).first;\n}\n```\n**(1) STL中，～.end()函数返回的是尾部元素的_下一个_迭代器，关于sort下面再说**\n(2) 满足这条是判断 pos = n+1，在操作区间右边界等于整个区间的右边界（即n）时，我们要获取 n 元素之后下一个迭代器，就是 s.end()。\n(3) 我看有一篇博客写的是 Node(L,pos,V) Node(pos+1,R,V)，这是错误写法。返回的是以 pos 为首的线段的迭代器，但是为什么他好像没错？也许这 oj 不懂规矩。\n\n### 区间赋值\n我们把这个区间分离出来，在 set 中是连续的几个元素，于是我们利用 split() 获取迭代器。将这段元素全部删除然后新插入一个区间，他们的值相等。\n\n```cpp\nvoid assign(int l,int r,int v)\n{\n    split(l);\n    set<Node>::iterator R=split(r+1);\n    set<Node>::iterator L=split(l);\n    s.erase(L,R);//iterator erase(const_iterator first,const_iterator last)\n    s.insert(Node(l,r,v));\n}\n```\nset在删除元素时，迭代器可能会发生变动，所以可能出现野指针。\n于是开头的 split(l) 就是先处理完分裂操作，后面执行第二次 split(l) 时就不会改变迭代器 R 的值，同理 R 和 L 的定义是不可调换的。\n### 区间加法\n同上，先获取首尾迭代器，对每个元素的 value 执行加法即可。\n\n```cpp\nvoid add(int l,int r,int v)\n{\n    split(l);\n    auto R=split(r+1),L=split(l);\n    for (;L!=R;++L){\n\t   L->value += v;\n}\n```\n## 求值操作\n暴力求解，因为数据水，暴力起来效率不成问题。\n### 求区间第 k 大的数\n```cpp\nll kth(int l,int r, int k)\n{\n    split(l);\n\t   vector< pair<ll,int> >q;\n\t   q.clear();\n\t   set<Node>::iterator R=split(r+1);\n\t   set<Node>::iterator L=split(l);\n\t   for (set<Node>::iterator it=L;it!=R;++it){\n\t   \tq.push_back({ it->value , it->r - it->l + 1});\n\t   }\n\t   sort(q.begin(),q.end());//\n\t   for (auto i:q)\n\t   {\n\t   \tk-=i.second;\n\t   \tif (k<=0) return i.first; \n\t   }\n\t   return -1;\n}\n```\n### 区间幂次和\n\n```cpp\nll qpow(ll a,ll x,ll y)\n{\n\t   ll ans=1,res=a%y;\n\t   while(x!=0)\n\t   {\n\t\t  if ( x & 1 ) {\n\t\t      ans*=res;\n\t\t      ans=ans%y;\n\t\t  }\n\t\t  res=res*res%y;\n\t\t  x>>=1;\n    }\n    return ans%y;\n}\n\nll sum(int l,int r,int x,int y)\n{\n\t   split(l);\n\t   ll ans=0;\n\t   set<Node>::iterator R=split(r+1);\n\t   set<Node>::iterator L=split(l);\n\t   for (set<Node>::iterator it=L;it!=R;++it){\n\t   \tans+=( (ll)( it->r - it->l + 1 ) * qpow(it->value,x,y));\n\t   \tans=ans%y;\n\t   }\n\t   return ans;\n}\n```\n## 例题：ABC188 - D \n\n题目解析见 [D - Snuke Prime](https://www.inzamz.top/2021/01/25/ABC188/#%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91) \n\n## 总结\n\n骗分大法，写起来简单，但是毕竟很容易被卡，但是，毕竟是珂朵莉树，珂学家不可能不学的。\n\n> 我永远喜欢珂朵莉。\n\n\n\n","source":"_posts/XCPC/chthollytree.md","raw":"---\ntitle: Chtholly Tree\ndate: 2020-11-18 11:31:22\ncategories:\n\t- ICPC 数据结构\ntags:\n\t- 区间赋值\n\t- 暴力\nmp3: https://link.hhtjim.com/163/3253902.mp3\ncover: https://p.130014.xyz/2020/10/28/9B5F0757-2BCD-424C-B564-6C1317C1BFC8.jpg\n---\n\n## 珂教兴国\n>有一天我想着去看看[中国珂学院](https://wiki.sukasuka.cn/)，然后百度后，发现珂朵莉树这种有趣的数据结构..。\n>\n>心想着有一天一定要好好学学\n\n<!-- more -->\n\n## 珂学名字的由来 - [CF896C](https://codeforces.com/contest/896/problem/C) \nWillem, Chtholly and Seniorious 想必珂学家们不需要解释了。就是一位用户提交完正解后，给出了另一份代码（暴力解法）。就是珂朵莉树，因为用户ID叫 Old Driver，又叫老司机树。身为一名资深珂学家，这等好事岂能错过。\n## 复杂度分析\n在数据随机的情况下，珂朵莉树据说可以吊打线断树，很快嗷。主要是因为区间赋值，在珂朵莉树中只用了一个节点表示，大大降低了 set 的大小。珂朵莉树节点最后会趋于一个稳定值 log n 。当然要求随机，也即有 1/4 概率区间赋值。<div class='heimu'>其实就是欺负数据弱，用来骗分的。</div>\n## 构造珂朵莉树\n### 定义节点\n\n```cpp\nstruct Node\n{\n\tint l,r;\n\tmutable ll value;//\n\tNode(int a,int b,long long c):l(a),r(b),value(c){}\n\tNode(int a):l(a),r(0),value(0){}\n\tbool operator < (const Node& o) const{\n    \treturn l<o.l;\n\t}\n}\n```\n## 核心操作和维护\n### split：分裂操作\n最核心的就是分裂，珂朵莉树之后操作都以分裂为前提，因为区间赋值操作我们把一段线段变成一个点，需要操作线段的某一段，就把它分裂出来。\n\n```cpp\nset<Node>::iterator split(int pos)\n{\n    set<Node>::iterator it=s.lower_bound(Node(pos));\n    if (it->l==pos && it!=s.end()) return it;//(1) \n    --it;\n    if (pos > it->r) return s.end();//(2)\n    int L=it->l,R=it->r;\n    ll V=it->value;\n    s.erase(it);\n    s.insert(Node(L,pos-1,V));//(3)\n    return s.insert(Node(pos,R,V)).first;\n}\n```\n**(1) STL中，～.end()函数返回的是尾部元素的_下一个_迭代器，关于sort下面再说**\n(2) 满足这条是判断 pos = n+1，在操作区间右边界等于整个区间的右边界（即n）时，我们要获取 n 元素之后下一个迭代器，就是 s.end()。\n(3) 我看有一篇博客写的是 Node(L,pos,V) Node(pos+1,R,V)，这是错误写法。返回的是以 pos 为首的线段的迭代器，但是为什么他好像没错？也许这 oj 不懂规矩。\n\n### 区间赋值\n我们把这个区间分离出来，在 set 中是连续的几个元素，于是我们利用 split() 获取迭代器。将这段元素全部删除然后新插入一个区间，他们的值相等。\n\n```cpp\nvoid assign(int l,int r,int v)\n{\n    split(l);\n    set<Node>::iterator R=split(r+1);\n    set<Node>::iterator L=split(l);\n    s.erase(L,R);//iterator erase(const_iterator first,const_iterator last)\n    s.insert(Node(l,r,v));\n}\n```\nset在删除元素时，迭代器可能会发生变动，所以可能出现野指针。\n于是开头的 split(l) 就是先处理完分裂操作，后面执行第二次 split(l) 时就不会改变迭代器 R 的值，同理 R 和 L 的定义是不可调换的。\n### 区间加法\n同上，先获取首尾迭代器，对每个元素的 value 执行加法即可。\n\n```cpp\nvoid add(int l,int r,int v)\n{\n    split(l);\n    auto R=split(r+1),L=split(l);\n    for (;L!=R;++L){\n\t   L->value += v;\n}\n```\n## 求值操作\n暴力求解，因为数据水，暴力起来效率不成问题。\n### 求区间第 k 大的数\n```cpp\nll kth(int l,int r, int k)\n{\n    split(l);\n\t   vector< pair<ll,int> >q;\n\t   q.clear();\n\t   set<Node>::iterator R=split(r+1);\n\t   set<Node>::iterator L=split(l);\n\t   for (set<Node>::iterator it=L;it!=R;++it){\n\t   \tq.push_back({ it->value , it->r - it->l + 1});\n\t   }\n\t   sort(q.begin(),q.end());//\n\t   for (auto i:q)\n\t   {\n\t   \tk-=i.second;\n\t   \tif (k<=0) return i.first; \n\t   }\n\t   return -1;\n}\n```\n### 区间幂次和\n\n```cpp\nll qpow(ll a,ll x,ll y)\n{\n\t   ll ans=1,res=a%y;\n\t   while(x!=0)\n\t   {\n\t\t  if ( x & 1 ) {\n\t\t      ans*=res;\n\t\t      ans=ans%y;\n\t\t  }\n\t\t  res=res*res%y;\n\t\t  x>>=1;\n    }\n    return ans%y;\n}\n\nll sum(int l,int r,int x,int y)\n{\n\t   split(l);\n\t   ll ans=0;\n\t   set<Node>::iterator R=split(r+1);\n\t   set<Node>::iterator L=split(l);\n\t   for (set<Node>::iterator it=L;it!=R;++it){\n\t   \tans+=( (ll)( it->r - it->l + 1 ) * qpow(it->value,x,y));\n\t   \tans=ans%y;\n\t   }\n\t   return ans;\n}\n```\n## 例题：ABC188 - D \n\n题目解析见 [D - Snuke Prime](https://www.inzamz.top/2021/01/25/ABC188/#%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91) \n\n## 总结\n\n骗分大法，写起来简单，但是毕竟很容易被卡，但是，毕竟是珂朵莉树，珂学家不可能不学的。\n\n> 我永远喜欢珂朵莉。\n\n\n\n","slug":"XCPC/chthollytree","published":1,"updated":"2021-06-26T15:46:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uk6003063jnhnfzf11v","content":"<h2 id=\"珂教兴国\"><a href=\"#珂教兴国\" class=\"headerlink\" title=\"珂教兴国\"></a>珂教兴国</h2><blockquote>\n<p>有一天我想着去看看<a href=\"https://wiki.sukasuka.cn/\">中国珂学院</a>，然后百度后，发现珂朵莉树这种有趣的数据结构..。</p>\n<p>心想着有一天一定要好好学学</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"珂学名字的由来-CF896C\"><a href=\"#珂学名字的由来-CF896C\" class=\"headerlink\" title=\"珂学名字的由来 - CF896C\"></a>珂学名字的由来 - <a href=\"https://codeforces.com/contest/896/problem/C\">CF896C</a></h2><p>Willem, Chtholly and Seniorious 想必珂学家们不需要解释了。就是一位用户提交完正解后，给出了另一份代码（暴力解法）。就是珂朵莉树，因为用户ID叫 Old Driver，又叫老司机树。身为一名资深珂学家，这等好事岂能错过。</p>\n<h2 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h2><p>在数据随机的情况下，珂朵莉树据说可以吊打线断树，很快嗷。主要是因为区间赋值，在珂朵莉树中只用了一个节点表示，大大降低了 set 的大小。珂朵莉树节点最后会趋于一个稳定值 log n 。当然要求随机，也即有 1/4 概率区间赋值。<div class='heimu'>其实就是欺负数据弱，用来骗分的。</div></p>\n<h2 id=\"构造珂朵莉树\"><a href=\"#构造珂朵莉树\" class=\"headerlink\" title=\"构造珂朵莉树\"></a>构造珂朵莉树</h2><h3 id=\"定义节点\"><a href=\"#定义节点\" class=\"headerlink\" title=\"定义节点\"></a>定义节点</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">mutable</span> ll value<span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n\t<span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> c<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Node<span class=\"token operator\">&amp;</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> l<span class=\"token operator\">&lt;</span>o<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"核心操作和维护\"><a href=\"#核心操作和维护\" class=\"headerlink\" title=\"核心操作和维护\"></a>核心操作和维护</h2><h3 id=\"split：分裂操作\"><a href=\"#split：分裂操作\" class=\"headerlink\" title=\"split：分裂操作\"></a>split：分裂操作</h3><p>最核心的就是分裂，珂朵莉树之后操作都以分裂为前提，因为区间赋值操作我们把一段线段变成一个点，需要操作线段的某一段，就把它分裂出来。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span>l<span class=\"token operator\">==</span>pos <span class=\"token operator\">&amp;&amp;</span> it<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> it<span class=\"token punctuation\">;</span><span class=\"token comment\">//(1) </span>\n    <span class=\"token operator\">--</span>it<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">></span> it<span class=\"token operator\">-></span>r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//(2)</span>\n    <span class=\"token keyword\">int</span> L<span class=\"token operator\">=</span>it<span class=\"token operator\">-></span>l<span class=\"token punctuation\">,</span>R<span class=\"token operator\">=</span>it<span class=\"token operator\">-></span>r<span class=\"token punctuation\">;</span>\n    ll V<span class=\"token operator\">=</span>it<span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>pos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//(3)</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">,</span>V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>(1) STL中，～.end()函数返回的是尾部元素的_下一个_迭代器，关于sort下面再说</strong><br>(2) 满足这条是判断 pos = n+1，在操作区间右边界等于整个区间的右边界（即n）时，我们要获取 n 元素之后下一个迭代器，就是 s.end()。<br>(3) 我看有一篇博客写的是 Node(L,pos,V) Node(pos+1,R,V)，这是错误写法。返回的是以 pos 为首的线段的迭代器，但是为什么他好像没错？也许这 oj 不懂规矩。</p>\n<h3 id=\"区间赋值\"><a href=\"#区间赋值\" class=\"headerlink\" title=\"区间赋值\"></a>区间赋值</h3><p>我们把这个区间分离出来，在 set 中是连续的几个元素，于是我们利用 split() 获取迭代器。将这段元素全部删除然后新插入一个区间，他们的值相等。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator R<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator L<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//iterator erase(const_iterator first,const_iterator last)</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>set在删除元素时，迭代器可能会发生变动，所以可能出现野指针。<br>于是开头的 split(l) 就是先处理完分裂操作，后面执行第二次 split(l) 时就不会改变迭代器 R 的值，同理 R 和 L 的定义是不可调换的。</p>\n<h3 id=\"区间加法\"><a href=\"#区间加法\" class=\"headerlink\" title=\"区间加法\"></a>区间加法</h3><p>同上，先获取首尾迭代器，对每个元素的 value 执行加法即可。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> R<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>L<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>L<span class=\"token operator\">!=</span>R<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t   L<span class=\"token operator\">-></span>value <span class=\"token operator\">+=</span> v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"求值操作\"><a href=\"#求值操作\" class=\"headerlink\" title=\"求值操作\"></a>求值操作</h2><p>暴力求解，因为数据水，暴力起来效率不成问题。</p>\n<h3 id=\"求区间第-k-大的数\"><a href=\"#求区间第-k-大的数\" class=\"headerlink\" title=\"求区间第 k 大的数\"></a>求区间第 k 大的数</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ll <span class=\"token function\">kth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   vector<span class=\"token operator\">&lt;</span> pair<span class=\"token operator\">&lt;</span>ll<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span>q<span class=\"token punctuation\">;</span>\n\t   q<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator R<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator L<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>R<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t   \tq<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> it<span class=\"token operator\">-></span>value <span class=\"token punctuation\">,</span> it<span class=\"token operator\">-></span>r <span class=\"token operator\">-</span> it<span class=\"token operator\">-></span>l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   <span class=\"token punctuation\">&#125;</span>\n\t   <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n\t   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">:</span>q<span class=\"token punctuation\">)</span>\n\t   <span class=\"token punctuation\">&#123;</span>\n\t   \tk<span class=\"token operator\">-=</span>i<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\t   \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span> \n\t   <span class=\"token punctuation\">&#125;</span>\n\t   <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"区间幂次和\"><a href=\"#区间幂次和\" class=\"headerlink\" title=\"区间幂次和\"></a>区间幂次和</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ll <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span>ll x<span class=\"token punctuation\">,</span>ll y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t   ll ans<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>res<span class=\"token operator\">=</span>a<span class=\"token operator\">%</span>y<span class=\"token punctuation\">;</span>\n\t   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t   <span class=\"token punctuation\">&#123;</span>\n\t\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> x <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t      ans<span class=\"token operator\">*=</span>res<span class=\"token punctuation\">;</span>\n\t\t      ans<span class=\"token operator\">=</span>ans<span class=\"token operator\">%</span>y<span class=\"token punctuation\">;</span>\n\t\t  <span class=\"token punctuation\">&#125;</span>\n\t\t  res<span class=\"token operator\">=</span>res<span class=\"token operator\">*</span>res<span class=\"token operator\">%</span>y<span class=\"token punctuation\">;</span>\n\t\t  x<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token operator\">%</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t   <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   ll ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t   set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator R<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator L<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>R<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t   \tans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> it<span class=\"token operator\">-></span>r <span class=\"token operator\">-</span> it<span class=\"token operator\">-></span>l <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span>value<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   \tans<span class=\"token operator\">=</span>ans<span class=\"token operator\">%</span>y<span class=\"token punctuation\">;</span>\n\t   <span class=\"token punctuation\">&#125;</span>\n\t   <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"例题：ABC188-D\"><a href=\"#例题：ABC188-D\" class=\"headerlink\" title=\"例题：ABC188 - D\"></a>例题：ABC188 - D</h2><p>题目解析见 <a href=\"https://www.inzamz.top/2021/01/25/ABC188/#%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91\">D - Snuke Prime</a> </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>骗分大法，写起来简单，但是毕竟很容易被卡，但是，毕竟是珂朵莉树，珂学家不可能不学的。</p>\n<blockquote>\n<p>我永远喜欢珂朵莉。</p>\n</blockquote>\n","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<h2 id=\"珂教兴国\"><a href=\"#珂教兴国\" class=\"headerlink\" title=\"珂教兴国\"></a>珂教兴国</h2><blockquote>\n<p>有一天我想着去看看<a href=\"https://wiki.sukasuka.cn/\">中国珂学院</a>，然后百度后，发现珂朵莉树这种有趣的数据结构..。</p>\n<p>心想着有一天一定要好好学学</p>\n</blockquote>","more":"<h2 id=\"珂学名字的由来-CF896C\"><a href=\"#珂学名字的由来-CF896C\" class=\"headerlink\" title=\"珂学名字的由来 - CF896C\"></a>珂学名字的由来 - <a href=\"https://codeforces.com/contest/896/problem/C\">CF896C</a></h2><p>Willem, Chtholly and Seniorious 想必珂学家们不需要解释了。就是一位用户提交完正解后，给出了另一份代码（暴力解法）。就是珂朵莉树，因为用户ID叫 Old Driver，又叫老司机树。身为一名资深珂学家，这等好事岂能错过。</p>\n<h2 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h2><p>在数据随机的情况下，珂朵莉树据说可以吊打线断树，很快嗷。主要是因为区间赋值，在珂朵莉树中只用了一个节点表示，大大降低了 set 的大小。珂朵莉树节点最后会趋于一个稳定值 log n 。当然要求随机，也即有 1/4 概率区间赋值。<div class='heimu'>其实就是欺负数据弱，用来骗分的。</div></p>\n<h2 id=\"构造珂朵莉树\"><a href=\"#构造珂朵莉树\" class=\"headerlink\" title=\"构造珂朵莉树\"></a>构造珂朵莉树</h2><h3 id=\"定义节点\"><a href=\"#定义节点\" class=\"headerlink\" title=\"定义节点\"></a>定义节点</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">mutable</span> ll value<span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n\t<span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> c<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Node<span class=\"token operator\">&amp;</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> l<span class=\"token operator\">&lt;</span>o<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"核心操作和维护\"><a href=\"#核心操作和维护\" class=\"headerlink\" title=\"核心操作和维护\"></a>核心操作和维护</h2><h3 id=\"split：分裂操作\"><a href=\"#split：分裂操作\" class=\"headerlink\" title=\"split：分裂操作\"></a>split：分裂操作</h3><p>最核心的就是分裂，珂朵莉树之后操作都以分裂为前提，因为区间赋值操作我们把一段线段变成一个点，需要操作线段的某一段，就把它分裂出来。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span>l<span class=\"token operator\">==</span>pos <span class=\"token operator\">&amp;&amp;</span> it<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> it<span class=\"token punctuation\">;</span><span class=\"token comment\">//(1) </span>\n    <span class=\"token operator\">--</span>it<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">></span> it<span class=\"token operator\">-></span>r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//(2)</span>\n    <span class=\"token keyword\">int</span> L<span class=\"token operator\">=</span>it<span class=\"token operator\">-></span>l<span class=\"token punctuation\">,</span>R<span class=\"token operator\">=</span>it<span class=\"token operator\">-></span>r<span class=\"token punctuation\">;</span>\n    ll V<span class=\"token operator\">=</span>it<span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>pos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//(3)</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">,</span>V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>(1) STL中，～.end()函数返回的是尾部元素的_下一个_迭代器，关于sort下面再说</strong><br>(2) 满足这条是判断 pos = n+1，在操作区间右边界等于整个区间的右边界（即n）时，我们要获取 n 元素之后下一个迭代器，就是 s.end()。<br>(3) 我看有一篇博客写的是 Node(L,pos,V) Node(pos+1,R,V)，这是错误写法。返回的是以 pos 为首的线段的迭代器，但是为什么他好像没错？也许这 oj 不懂规矩。</p>\n<h3 id=\"区间赋值\"><a href=\"#区间赋值\" class=\"headerlink\" title=\"区间赋值\"></a>区间赋值</h3><p>我们把这个区间分离出来，在 set 中是连续的几个元素，于是我们利用 split() 获取迭代器。将这段元素全部删除然后新插入一个区间，他们的值相等。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator R<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator L<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//iterator erase(const_iterator first,const_iterator last)</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>set在删除元素时，迭代器可能会发生变动，所以可能出现野指针。<br>于是开头的 split(l) 就是先处理完分裂操作，后面执行第二次 split(l) 时就不会改变迭代器 R 的值，同理 R 和 L 的定义是不可调换的。</p>\n<h3 id=\"区间加法\"><a href=\"#区间加法\" class=\"headerlink\" title=\"区间加法\"></a>区间加法</h3><p>同上，先获取首尾迭代器，对每个元素的 value 执行加法即可。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> R<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>L<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>L<span class=\"token operator\">!=</span>R<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t   L<span class=\"token operator\">-></span>value <span class=\"token operator\">+=</span> v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"求值操作\"><a href=\"#求值操作\" class=\"headerlink\" title=\"求值操作\"></a>求值操作</h2><p>暴力求解，因为数据水，暴力起来效率不成问题。</p>\n<h3 id=\"求区间第-k-大的数\"><a href=\"#求区间第-k-大的数\" class=\"headerlink\" title=\"求区间第 k 大的数\"></a>求区间第 k 大的数</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ll <span class=\"token function\">kth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   vector<span class=\"token operator\">&lt;</span> pair<span class=\"token operator\">&lt;</span>ll<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span>q<span class=\"token punctuation\">;</span>\n\t   q<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator R<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator L<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>R<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t   \tq<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> it<span class=\"token operator\">-></span>value <span class=\"token punctuation\">,</span> it<span class=\"token operator\">-></span>r <span class=\"token operator\">-</span> it<span class=\"token operator\">-></span>l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   <span class=\"token punctuation\">&#125;</span>\n\t   <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\n\t   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">:</span>q<span class=\"token punctuation\">)</span>\n\t   <span class=\"token punctuation\">&#123;</span>\n\t   \tk<span class=\"token operator\">-=</span>i<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\t   \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span> \n\t   <span class=\"token punctuation\">&#125;</span>\n\t   <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"区间幂次和\"><a href=\"#区间幂次和\" class=\"headerlink\" title=\"区间幂次和\"></a>区间幂次和</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ll <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span>ll x<span class=\"token punctuation\">,</span>ll y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t   ll ans<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>res<span class=\"token operator\">=</span>a<span class=\"token operator\">%</span>y<span class=\"token punctuation\">;</span>\n\t   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t   <span class=\"token punctuation\">&#123;</span>\n\t\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> x <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t      ans<span class=\"token operator\">*=</span>res<span class=\"token punctuation\">;</span>\n\t\t      ans<span class=\"token operator\">=</span>ans<span class=\"token operator\">%</span>y<span class=\"token punctuation\">;</span>\n\t\t  <span class=\"token punctuation\">&#125;</span>\n\t\t  res<span class=\"token operator\">=</span>res<span class=\"token operator\">*</span>res<span class=\"token operator\">%</span>y<span class=\"token punctuation\">;</span>\n\t\t  x<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token operator\">%</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nll <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t   <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   ll ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t   set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator R<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator L<span class=\"token operator\">=</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>R<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t   \tans<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> it<span class=\"token operator\">-></span>r <span class=\"token operator\">-</span> it<span class=\"token operator\">-></span>l <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-></span>value<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   \tans<span class=\"token operator\">=</span>ans<span class=\"token operator\">%</span>y<span class=\"token punctuation\">;</span>\n\t   <span class=\"token punctuation\">&#125;</span>\n\t   <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"例题：ABC188-D\"><a href=\"#例题：ABC188-D\" class=\"headerlink\" title=\"例题：ABC188 - D\"></a>例题：ABC188 - D</h2><p>题目解析见 <a href=\"https://www.inzamz.top/2021/01/25/ABC188/#%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91\">D - Snuke Prime</a> </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>骗分大法，写起来简单，但是毕竟很容易被卡，但是，毕竟是珂朵莉树，珂学家不可能不学的。</p>\n<blockquote>\n<p>我永远喜欢珂朵莉。</p>\n</blockquote>"},{"title":"KEYENCE Programming Contest 2021","date":"2021-01-29T08:01:04.000Z","updated":"2021-01-30T08:13:39.000Z","_content":"\n<!-- more -->\n\n---\n\n## A - Two Sequences 2\n\n贪心。因为数据都是正数，我们要求乘积最大，只要取上一次的最大值和新增的组合比较大小即可。当然直接写出来是$O( N^2 )$的时间复杂度，TLE是必然的。对于新增的组合，b是固定的，那么我们在读入a时进行预处理取a数组目前的最大值。时间复杂度是$O(N)$。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define maxn 200010\nll a[maxn],ans;\n\nint main()\n{\n\tll n,b;\n\tcin>>n;\n\tfor (int i=1;i<=n;i++)\t\t\n\t{\n\t\tscanf(\"%lld\",&a[i]);\n\t\ta[i]=max(a[i],a[i-1]);\n\t}\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&b);\n\t\t\tans=max(ans,b*a[i]);\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n} \n```\n\n## B - Mex Boxes\n\n记录每一个数字的球有几个$a[i]$，从0开始枚举，更新k为当前还能维护的连续数组数。当k大于数字 i 出现次数，那么答案就要加上$i*(k-a[i])$。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define maxn 300010\nint a[maxn];\nll ans=0ll;\n\nint main()\n{\n\tint n,k,x;\n\tcin>>n>>k;\n\tfor (int i=1;i<=n;i++)\t\t\n\t{\n\t\tscanf(\"%d\",&x);\n\t\t++a[x];\n\t}\n\tfor (ll i=0;i<=n && k;i++)\n\t{\n\t\tif (k>a[i]) \n\t\t{\n\t\t\tans=ans+(ll)(k-a[i])*i;\n\t\t\tk=a[i];\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n} \n```\n\n## C - Robot on Grid\n\n一道 dp 题目，优化用到了逆元求大数取 mod。其实我们就是先求算出到终点总共有多少路线，这是一个简单的dp问题，因为只有两种情况，向下和向右，外加判断所在位置字母。但是算填写方法时，你必须知道有多少格子你可以自由填写。那么你还要记录当前你经过了多少个空白格。\n\n- dp\\[h]\\[w]\\[k] 表示到达（h , w）且经过 k 个空白格的路线数。\n\n时间复杂度$O(HW(H+W))$。这个算法显然是超时的，但是我们研究一下公式。\n$$\n\\begin{aligned}\n&\\sum^{h+w}_{k=1}dp[h][w][k]*2^k*3^{hw-K-k}\\\\\n=&\\sum^{h+w}_{k=1}dp[h][w][k]*(\\frac{2}{3})^{k}*3^{hw-K}\\\\\n\\end{aligned}\n$$\n所以只需要在你走上空白格时，把路线数乘以$\\frac{2}{3}$即可。而除法取余，我们只要找到 3 的逆元就好了。现在时间复杂度直接降到了$O(HW)$。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define maxn 5005\n#define mod 998244353\nchar imap[maxn][maxn];\nll dp[maxn][maxn];\nll qpow(ll a,ll n)\n{\n\tll ans=1;\n\twhile (n)\n\t{\n\t\tif ( n & (ll)1) ans=ans*a%mod;\n\t\ta=a*a%mod;\n\t\tn>>=1;\n\t}\n\treturn ans%mod;\n}\n\nint main()\n{\n\tint H,W,K,h,w;\n\tchar k;\n\tcin>>H>>W>>K;\n\tfor (int i=1;i<=K;i++)\t\t\n\t{\n\t\tscanf(\"%d %d %c\",&h,&w,&k);\n\t\timap[h][w]=k;\n\t}\n\tll inv=qpow(3,mod-2);\n\tdp[1][1]=1;\n\tfor (int i=1;i<=H;i++)\n\t{\n\t\tfor (int j=1;j<=W;j++)\n\t\t{\n\t\t\tif (imap[i][j]=='R'||imap[i][j]=='X') \n                dp[i][j+1]=(dp[i][j]+dp[i][j+1] )%mod;\n\t\t\tif (imap[i][j]=='D'||imap[i][j]=='X') \n                dp[i+1][j]=(dp[i][j]+dp[i+1][j] )%mod;\n\t\t\tif (imap[i][j]=='\\0') \n\t\t\t{\n\t\t\t\tdp[i][j+1]=((dp[i][j]*2%mod)*inv%mod+dp[i][j+1])%mod;\n\t\t\t\tdp[i+1][j]=((dp[i][j]*2%mod)*inv%mod+dp[i+1][j])%mod;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",qpow(3,H*W-K)*dp[H][W]%mod);\n\treturn 0;\n} \n```\n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/keyence2021.md","raw":"---\ntitle: KEYENCE Programming Contest 2021\ndate: 2021-01-29 16:01:04\nupdated: 2021-01-30 16:13:39\ntags:\n\t- 贪心\n\t- 动态规划\ncategories:\n\t- ICPC Programming Contest\n---\n\n<!-- more -->\n\n---\n\n## A - Two Sequences 2\n\n贪心。因为数据都是正数，我们要求乘积最大，只要取上一次的最大值和新增的组合比较大小即可。当然直接写出来是$O( N^2 )$的时间复杂度，TLE是必然的。对于新增的组合，b是固定的，那么我们在读入a时进行预处理取a数组目前的最大值。时间复杂度是$O(N)$。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define maxn 200010\nll a[maxn],ans;\n\nint main()\n{\n\tll n,b;\n\tcin>>n;\n\tfor (int i=1;i<=n;i++)\t\t\n\t{\n\t\tscanf(\"%lld\",&a[i]);\n\t\ta[i]=max(a[i],a[i-1]);\n\t}\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&b);\n\t\t\tans=max(ans,b*a[i]);\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n} \n```\n\n## B - Mex Boxes\n\n记录每一个数字的球有几个$a[i]$，从0开始枚举，更新k为当前还能维护的连续数组数。当k大于数字 i 出现次数，那么答案就要加上$i*(k-a[i])$。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define maxn 300010\nint a[maxn];\nll ans=0ll;\n\nint main()\n{\n\tint n,k,x;\n\tcin>>n>>k;\n\tfor (int i=1;i<=n;i++)\t\t\n\t{\n\t\tscanf(\"%d\",&x);\n\t\t++a[x];\n\t}\n\tfor (ll i=0;i<=n && k;i++)\n\t{\n\t\tif (k>a[i]) \n\t\t{\n\t\t\tans=ans+(ll)(k-a[i])*i;\n\t\t\tk=a[i];\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n} \n```\n\n## C - Robot on Grid\n\n一道 dp 题目，优化用到了逆元求大数取 mod。其实我们就是先求算出到终点总共有多少路线，这是一个简单的dp问题，因为只有两种情况，向下和向右，外加判断所在位置字母。但是算填写方法时，你必须知道有多少格子你可以自由填写。那么你还要记录当前你经过了多少个空白格。\n\n- dp\\[h]\\[w]\\[k] 表示到达（h , w）且经过 k 个空白格的路线数。\n\n时间复杂度$O(HW(H+W))$。这个算法显然是超时的，但是我们研究一下公式。\n$$\n\\begin{aligned}\n&\\sum^{h+w}_{k=1}dp[h][w][k]*2^k*3^{hw-K-k}\\\\\n=&\\sum^{h+w}_{k=1}dp[h][w][k]*(\\frac{2}{3})^{k}*3^{hw-K}\\\\\n\\end{aligned}\n$$\n所以只需要在你走上空白格时，把路线数乘以$\\frac{2}{3}$即可。而除法取余，我们只要找到 3 的逆元就好了。现在时间复杂度直接降到了$O(HW)$。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define maxn 5005\n#define mod 998244353\nchar imap[maxn][maxn];\nll dp[maxn][maxn];\nll qpow(ll a,ll n)\n{\n\tll ans=1;\n\twhile (n)\n\t{\n\t\tif ( n & (ll)1) ans=ans*a%mod;\n\t\ta=a*a%mod;\n\t\tn>>=1;\n\t}\n\treturn ans%mod;\n}\n\nint main()\n{\n\tint H,W,K,h,w;\n\tchar k;\n\tcin>>H>>W>>K;\n\tfor (int i=1;i<=K;i++)\t\t\n\t{\n\t\tscanf(\"%d %d %c\",&h,&w,&k);\n\t\timap[h][w]=k;\n\t}\n\tll inv=qpow(3,mod-2);\n\tdp[1][1]=1;\n\tfor (int i=1;i<=H;i++)\n\t{\n\t\tfor (int j=1;j<=W;j++)\n\t\t{\n\t\t\tif (imap[i][j]=='R'||imap[i][j]=='X') \n                dp[i][j+1]=(dp[i][j]+dp[i][j+1] )%mod;\n\t\t\tif (imap[i][j]=='D'||imap[i][j]=='X') \n                dp[i+1][j]=(dp[i][j]+dp[i+1][j] )%mod;\n\t\t\tif (imap[i][j]=='\\0') \n\t\t\t{\n\t\t\t\tdp[i][j+1]=((dp[i][j]*2%mod)*inv%mod+dp[i][j+1])%mod;\n\t\t\t\tdp[i+1][j]=((dp[i][j]*2%mod)*inv%mod+dp[i+1][j])%mod;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",qpow(3,H*W-K)*dp[H][W]%mod);\n\treturn 0;\n} \n```\n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/keyence2021","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uk7003463jnh81qfsys","content":"<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"A-Two-Sequences-2\"><a href=\"#A-Two-Sequences-2\" class=\"headerlink\" title=\"A - Two Sequences 2\"></a>A - Two Sequences 2</h2><p>贪心。因为数据都是正数，我们要求乘积最大，只要取上一次的最大值和新增的组合比较大小即可。当然直接写出来是$O( N^2 )$的时间复杂度，TLE是必然的。对于新增的组合，b是固定的，那么我们在读入a时进行预处理取a数组目前的最大值。时间复杂度是$O(N)$。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">200010</span></span></span>\nll a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll n<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t\t\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>b<span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Mex-Boxes\"><a href=\"#B-Mex-Boxes\" class=\"headerlink\" title=\"B - Mex Boxes\"></a>B - Mex Boxes</h2><p>记录每一个数字的球有几个$a[i]$，从0开始枚举，更新k为当前还能维护的连续数组数。当k大于数字 i 出现次数，那么答案就要加上$i*(k-a[i])$。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">300010</span></span></span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll ans<span class=\"token operator\">=</span><span class=\"token number\">0ll</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>k<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t\t\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> k<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">></span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tans<span class=\"token operator\">=</span>ans<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>\n\t\t\tk<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-Robot-on-Grid\"><a href=\"#C-Robot-on-Grid\" class=\"headerlink\" title=\"C - Robot on Grid\"></a>C - Robot on Grid</h2><p>一道 dp 题目，优化用到了逆元求大数取 mod。其实我们就是先求算出到终点总共有多少路线，这是一个简单的dp问题，因为只有两种情况，向下和向右，外加判断所在位置字母。但是算填写方法时，你必须知道有多少格子你可以自由填写。那么你还要记录当前你经过了多少个空白格。</p>\n<ul>\n<li>dp[h][w][k] 表示到达（h , w）且经过 k 个空白格的路线数。</li>\n</ul>\n<p>时间复杂度$O(HW(H+W))$。这个算法显然是超时的，但是我们研究一下公式。<br>$$<br>\\begin{aligned}<br>&amp;\\sum^{h+w}<em>{k=1}dp[h][w][k]<em>2^k</em>3^{hw-K-k}\\<br>=&amp;\\sum^{h+w}</em>{k=1}dp[h][w][k]*(\\frac{2}{3})^{k}*3^{hw-K}\\<br>\\end{aligned}<br>$$<br>所以只需要在你走上空白格时，把路线数乘以$\\frac{2}{3}$即可。而除法取余，我们只要找到 3 的逆元就好了。现在时间复杂度直接降到了$O(HW)$。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">5005</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">mod</span> <span class=\"token expression\"><span class=\"token number\">998244353</span></span></span>\n<span class=\"token keyword\">char</span> imap<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span>ll n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll ans<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> n <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> ans<span class=\"token operator\">=</span>ans<span class=\"token operator\">*</span>a<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\ta<span class=\"token operator\">=</span>a<span class=\"token operator\">*</span>a<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\tn<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> ans<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> H<span class=\"token punctuation\">,</span>W<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> k<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>H<span class=\"token operator\">>></span>W<span class=\"token operator\">>></span>K<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>K<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t\t\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\timap<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>k<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tll inv<span class=\"token operator\">=</span><span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>mod<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>H<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>W<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'R'</span><span class=\"token operator\">||</span>imap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">)</span> \n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'D'</span><span class=\"token operator\">||</span>imap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">)</span> \n                dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>inv<span class=\"token operator\">%</span>mod<span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>inv<span class=\"token operator\">%</span>mod<span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>H<span class=\"token operator\">*</span>W<span class=\"token operator\">-</span>K<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>dp<span class=\"token punctuation\">[</span>H<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>W<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"","more":"<hr>\n<h2 id=\"A-Two-Sequences-2\"><a href=\"#A-Two-Sequences-2\" class=\"headerlink\" title=\"A - Two Sequences 2\"></a>A - Two Sequences 2</h2><p>贪心。因为数据都是正数，我们要求乘积最大，只要取上一次的最大值和新增的组合比较大小即可。当然直接写出来是$O( N^2 )$的时间复杂度，TLE是必然的。对于新增的组合，b是固定的，那么我们在读入a时进行预处理取a数组目前的最大值。时间复杂度是$O(N)$。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">200010</span></span></span>\nll a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll n<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t\t\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>b<span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"B-Mex-Boxes\"><a href=\"#B-Mex-Boxes\" class=\"headerlink\" title=\"B - Mex Boxes\"></a>B - Mex Boxes</h2><p>记录每一个数字的球有几个$a[i]$，从0开始枚举，更新k为当前还能维护的连续数组数。当k大于数字 i 出现次数，那么答案就要加上$i*(k-a[i])$。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">300010</span></span></span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll ans<span class=\"token operator\">=</span><span class=\"token number\">0ll</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>k<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t\t\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">++</span>a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n <span class=\"token operator\">&amp;&amp;</span> k<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">></span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tans<span class=\"token operator\">=</span>ans<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>\n\t\t\tk<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"C-Robot-on-Grid\"><a href=\"#C-Robot-on-Grid\" class=\"headerlink\" title=\"C - Robot on Grid\"></a>C - Robot on Grid</h2><p>一道 dp 题目，优化用到了逆元求大数取 mod。其实我们就是先求算出到终点总共有多少路线，这是一个简单的dp问题，因为只有两种情况，向下和向右，外加判断所在位置字母。但是算填写方法时，你必须知道有多少格子你可以自由填写。那么你还要记录当前你经过了多少个空白格。</p>\n<ul>\n<li>dp[h][w][k] 表示到达（h , w）且经过 k 个空白格的路线数。</li>\n</ul>\n<p>时间复杂度$O(HW(H+W))$。这个算法显然是超时的，但是我们研究一下公式。<br>$$<br>\\begin{aligned}<br>&amp;\\sum^{h+w}<em>{k=1}dp[h][w][k]<em>2^k</em>3^{hw-K-k}\\<br>=&amp;\\sum^{h+w}</em>{k=1}dp[h][w][k]*(\\frac{2}{3})^{k}*3^{hw-K}\\<br>\\end{aligned}<br>$$<br>所以只需要在你走上空白格时，把路线数乘以$\\frac{2}{3}$即可。而除法取余，我们只要找到 3 的逆元就好了。现在时间复杂度直接降到了$O(HW)$。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">5005</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">mod</span> <span class=\"token expression\"><span class=\"token number\">998244353</span></span></span>\n<span class=\"token keyword\">char</span> imap<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nll <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span>ll n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tll ans<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> n <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> ans<span class=\"token operator\">=</span>ans<span class=\"token operator\">*</span>a<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\ta<span class=\"token operator\">=</span>a<span class=\"token operator\">*</span>a<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\tn<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> ans<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> H<span class=\"token punctuation\">,</span>W<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> k<span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>H<span class=\"token operator\">>></span>W<span class=\"token operator\">>></span>K<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>K<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t\t\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\timap<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>k<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tll inv<span class=\"token operator\">=</span><span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>mod<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>H<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>W<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'R'</span><span class=\"token operator\">||</span>imap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">)</span> \n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'D'</span><span class=\"token operator\">||</span>imap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">)</span> \n                dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>inv<span class=\"token operator\">%</span>mod<span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>inv<span class=\"token operator\">%</span>mod<span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>H<span class=\"token operator\">*</span>W<span class=\"token operator\">-</span>K<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>dp<span class=\"token punctuation\">[</span>H<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>W<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"},{"title":"缺失的数字","date":"2020-12-23T14:38:11.000Z","_content":"我在查找费马小定理的资料时 , 发现了这篇文章 . 我觉得很有趣 , 就学习一下 . \n转载参考自 https://www.cnblogs.com/tupx/archive/2012/04/29/2476000.html\n<!-- more -->\n\n## 2<sup>29</sup> 中没有那个数字?\n\n### 除九校验\n\n我发现百度不到权威的解释,应该是一种方法而已 . 我们可以通过对9取模达到目的 . \n\n-  $10^i \\equiv 1 \\pmod{9} $\n- 任意数都能写成每一位数字乘上 10<sup>i</sup> \n\n### Solution\n\n那么根据同余 , 我们发现数 a 对 9 取余 , 等于各位上数字之和对 9 取余 . \n\n而 2 的幂 mod 9 具有周期性规律 . 从 2<sup>1</sup> 开始 2 4 8 7 5 1 \n\n于是我们发现$2^{29}  \\equiv 5 \\pmod{9} $. 假设每个数字都出现一次 答案应该是 45 mod 9 = 0 . 显然缺少了一个 4 . \n\n## 写在结尾\n\n感觉挺好玩的 , 写下来记录一下 . \n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","source":"_posts/XCPC/lackingnumber.md","raw":"---\ntitle: 缺失的数字\ndate: 2020-12-23 22:38:11\ntags:\n\t- 数学\ncategories:\t\n\t- 无聊的小分享\n---\n我在查找费马小定理的资料时 , 发现了这篇文章 . 我觉得很有趣 , 就学习一下 . \n转载参考自 https://www.cnblogs.com/tupx/archive/2012/04/29/2476000.html\n<!-- more -->\n\n## 2<sup>29</sup> 中没有那个数字?\n\n### 除九校验\n\n我发现百度不到权威的解释,应该是一种方法而已 . 我们可以通过对9取模达到目的 . \n\n-  $10^i \\equiv 1 \\pmod{9} $\n- 任意数都能写成每一位数字乘上 10<sup>i</sup> \n\n### Solution\n\n那么根据同余 , 我们发现数 a 对 9 取余 , 等于各位上数字之和对 9 取余 . \n\n而 2 的幂 mod 9 具有周期性规律 . 从 2<sup>1</sup> 开始 2 4 8 7 5 1 \n\n于是我们发现$2^{29}  \\equiv 5 \\pmod{9} $. 假设每个数字都出现一次 答案应该是 45 mod 9 = 0 . 显然缺少了一个 4 . \n\n## 写在结尾\n\n感觉挺好玩的 , 写下来记录一下 . \n\n---\n\nTo Be Continued.\n\n<!-- Q.E.D. -->","slug":"XCPC/lackingnumber","published":1,"updated":"2021-06-26T15:40:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv3j9uk8003663jn9dtgbosd","content":"<p>我在查找费马小定理的资料时 , 发现了这篇文章 . 我觉得很有趣 , 就学习一下 .<br>转载参考自 <a href=\"https://www.cnblogs.com/tupx/archive/2012/04/29/2476000.html\">https://www.cnblogs.com/tupx/archive/2012/04/29/2476000.html</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"229-中没有那个数字\"><a href=\"#229-中没有那个数字\" class=\"headerlink\" title=\"229 中没有那个数字?\"></a>2<sup>29</sup> 中没有那个数字?</h2><h3 id=\"除九校验\"><a href=\"#除九校验\" class=\"headerlink\" title=\"除九校验\"></a>除九校验</h3><p>我发现百度不到权威的解释,应该是一种方法而已 . 我们可以通过对9取模达到目的 . </p>\n<ul>\n<li> $10^i \\equiv 1 \\pmod{9} $</li>\n<li>任意数都能写成每一位数字乘上 10<sup>i</sup> </li>\n</ul>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>那么根据同余 , 我们发现数 a 对 9 取余 , 等于各位上数字之和对 9 取余 . </p>\n<p>而 2 的幂 mod 9 具有周期性规律 . 从 2<sup>1</sup> 开始 2 4 8 7 5 1 </p>\n<p>于是我们发现$2^{29}  \\equiv 5 \\pmod{9} $. 假设每个数字都出现一次 答案应该是 45 mod 9 = 0 . 显然缺少了一个 4 . </p>\n<h2 id=\"写在结尾\"><a href=\"#写在结尾\" class=\"headerlink\" title=\"写在结尾\"></a>写在结尾</h2><p>感觉挺好玩的 , 写下来记录一下 . </p>\n<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->","site":{"data":{"yun":{"head":{"js":{"async":{"iconfont":"//at.alicdn.com/t/font_2261522_jtdfz3yn99a.js"}}},"colors":{"primary":"#93A3B3","bg":"#F1B6C6","selection_bg":"#F1B6C6"},"tags":{"Vue":"#4fc08d","Hexo":"#0E834D","CSS":"#5298d1","Node.js":"#026E00","Git":"#F14E32","React":"#61dafb","Python":"#3776ab","PHP":"#8892BF","VS Code":"#0066B8","JavaScript":"#F4DF4F","TypeScript":"#317AC6","Laravel":"#F4645F"},"favicon":"/favicon.ico","mode":"auto","notice":{"enable":true,"content":"于是这一年就这么摸鱼过来了,没学到技术,学业没成绩,你真是个fw"},"banner":{"enable":true,"title":["I","n","z","a","m","の","小","站"],"src":"/js/ui/banner.js","border":true,"cloud":{"enable":true,"color":"#A99AAE"},"go_down":{"enable":true,"icon":"icon-arrow-down-s-line"}},"social":[{"name":"GitHub","link":"https://github.com/InzamZ","icon":"icon-github-line","color":"#181717"},{"name":"E-Mail","link":"mailto:me@inzamz.top","icon":"icon-mail-line","color":"#8E71C1"},{"name":"微博","link":"https://weibo.com/u/7529779251?is_all=1","icon":"icon-weibo-line","color":"#E6162D"},{"name":"网易云音乐","link":"https://music.163.com/#/user/home?id=1525382286","icon":"icon-netease-cloud-music-line","color":"#C10D0C"},{"name":"知乎","link":"https://www.zhihu.com/people/ge-zhe-79-3","icon":"icon-zhihu-line","color":"#0084FF"},{"name":"哔哩哔哩动画","link":"https://space.bilibili.com/259102692","icon":"icon-bilibili-line","color":"#FF8EB3"},{"name":"POPI","link":"https://www.popiapp.cn/TnolgX","icon":"icon-questionnaire-line","color":"#525252"},{"name":"Telegram","link":"https://t.me/InzamZ","icon":"icon-telegram-line","color":"#0088CC"},{"name":"RSS","link":"/atom.xml","icon":"icon-rss-line","color":"orange"},{"name":"豆瓣","link":"https://www.douban.com/people/inzamz/","icon":"icon-douban-line","color":"#007722"},{"name":"Telegram Channel","link":"https://t.me/inzamzsgossip","icon":"icon-telegram-fill","color":"#0088CC"}],"bg_image":{"enable":true,"url":"https://img.inzamz.top/bg/bg.jpg","dark":"https://img.inzamz.top/bg/bgdark.jpg","blur":"10px","opacity":1},"sidebar":{"bg_image":"https://img.inzamz.top/bg/sidebg.jpg","bg_position":"bottom -7rem center","tagcloud":{"enable":true,"amount":5}},"albums":{"enable":true},"cursor":{"enable":true,"default":"https://cdn.jsdelivr.net/gh/InzamZ/inzamz.github.io@main/img/cur/Miku/puntero.cur"},"avatar":{"enable":true,"url":"/images/liwei.jpg","rounded":true,"opacity":1,"mickey_mouse":true,"status":{"enable":true,"emoji":"😯","message":"默哀"}},"menu":{"home":{"path":"/","icon":"icon-home-4-line"},"list":[{"type":"archives","path":"/archives/","icon":"icon-archive-line"},{"type":"categories","path":"/categories/","icon":"icon-folder-2-line"},{"type":"tags","path":"/tags/","icon":"icon-price-tag-3-line"}],"custom":{"title":"留言板","path":"/about/#comment","icon":"icon-clipboard-line"}},"pages":[{"name":"我的小伙伴们","url":"/links/","icon":"icon-genderless-line","color":"dodgerblue"},{"name":"喜欢的女孩子","url":"/girls/","icon":"icon-women-line","color":"hotpink"},{"name":"相册","url":"/albums/","icon":"icon-gallery-line","color":"gray"}],"post_meta":{"item_text":true,"created_at":true,"updated_at":true,"categories":true,"tags":true},"codeblock":{"copy_btn":true,"prismjs":{"light":"default","dark":"tomorrow"}},"footer":{"since":2020,"icon":{"name":"icon-cloud-line","animated":true,"color":"#0078E7"},"live_time":{"enable":true,"prefix":"本博客已进行壁外调查","suffix":"(●'◡'●)","start_time":"2020-10-08T17:00:00"},"powered":{"enable":true},"beian":{"enable":true,"icp":"粤ICP备2021032030号"},"custom_text":"<a style=\"display:inline-block\" href=\"https://www.upyun.com/?utm_source=lianmeng&utm_medium=referral\" title=\"又拍云\"><img height=\"30\" src=\"https://img.inzamz.top/links/upyun.png\" alt=\"upyun\"/></a>"},"mourn":{"enable":true,"days":["4-4","12-13"]},"wordcloud":{"enable":true},"girls":{"enable":true},"pjax":{"enable":true},"mathjax":{"enable":true},"wordcount":{"enable":true,"count":true,"time":true},"aplayer":{"global":true,"meting":true,"widget":{"enable":true,"autoplay":true,"loop":"all","order":"random","preload":"auto","volume":0.7,"mutex":true,"lrcType":0,"listFolded":false,"listMaxHeight":"340px","audio":[{"name":"星宿计时","artist":"杉田朗/洛天依","url":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3","cover":"https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg"}],"meting":{"enable":true,"id":2322278166,"server":"netease","type":"playlist"}}},"reward":{"enable":true,"icon":"icon-hand-coin-line","comment":"I'm so cute. Please give me money.","methods":[{"name":"支付宝","path":"https://p.130014.xyz/2020/12/03/1173CB0E-9A44-45A6-8991-515958F4ADBB.jpg","color":"#00A3EE","icon":"icon-alipay-line"},{"name":"QQ 支付","path":"https://p.130014.xyz/2020/12/03/9AACAEEE-03D9-4794-BAC6-2EE2965384DF.jpg","color":"#12B7F5","icon":"icon-qq-line"},{"name":"微信支付","path":"https://p.130014.xyz/2020/12/03/25F401EB-6BED-4A00-BAD2-DF69A9011C8A.jpg","color":"#2DC100","icon":"icon-wechat-pay-line"}]},"valine":{"enable":true,"appId":"Llj1MKoKOybvfqLYNAlxUeUs-MdYXbMMI","appKey":"d1gysunv9oLlyLR06QjaIHgF","placeholder":"欢迎大家友好地发起评论和建议,本蒟蒻一定虚心学习","avatar":null,"meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","visitor":true,"highlight":true,"recordIP":true},"github_issues":{"enable":true,"username":"InzamZ","repository":"inzamz.github.io","filters":"is:issue"},"local_search":{"enable":true,"src":"/js/search/local-search.js"},"search":{"modal":false,"bg_image":"https://img.inzamz.top/bg/searchbg.jpg","dark_bg_image":"https://img.inzamz.top/bg/sbgdark.jpg"},"say":{"enable":true,"api":"https://cdn.jsdelivr.net/gh/ElpsyCN/say@gh-pages/sentences.json","src":"/js/say.js","hitokoto":{"enable":true,"api":"https://v1.hitokoto.cn/?c=a&c=b&c=c&c=d&c=k&encode=json"}},"baidu_push":true}}},"excerpt":"<p>我在查找费马小定理的资料时 , 发现了这篇文章 . 我觉得很有趣 , 就学习一下 .<br>转载参考自 <a href=\"https://www.cnblogs.com/tupx/archive/2012/04/29/2476000.html\">https://www.cnblogs.com/tupx/archive/2012/04/29/2476000.html</a></p>","more":"<h2 id=\"229-中没有那个数字\"><a href=\"#229-中没有那个数字\" class=\"headerlink\" title=\"229 中没有那个数字?\"></a>2<sup>29</sup> 中没有那个数字?</h2><h3 id=\"除九校验\"><a href=\"#除九校验\" class=\"headerlink\" title=\"除九校验\"></a>除九校验</h3><p>我发现百度不到权威的解释,应该是一种方法而已 . 我们可以通过对9取模达到目的 . </p>\n<ul>\n<li> $10^i \\equiv 1 \\pmod{9} $</li>\n<li>任意数都能写成每一位数字乘上 10<sup>i</sup> </li>\n</ul>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>那么根据同余 , 我们发现数 a 对 9 取余 , 等于各位上数字之和对 9 取余 . </p>\n<p>而 2 的幂 mod 9 具有周期性规律 . 从 2<sup>1</sup> 开始 2 4 8 7 5 1 </p>\n<p>于是我们发现$2^{29}  \\equiv 5 \\pmod{9} $. 假设每个数字都出现一次 答案应该是 45 mod 9 = 0 . 显然缺少了一个 4 . </p>\n<h2 id=\"写在结尾\"><a href=\"#写在结尾\" class=\"headerlink\" title=\"写在结尾\"></a>写在结尾</h2><p>感觉挺好玩的 , 写下来记录一下 . </p>\n<hr>\n<p>To Be Continued.</p>\n<!-- Q.E.D. -->"}],"PostAsset":[],"PostCategory":[{"post_id":"ckv3j9uiz000163jn5q5977ur","category_id":"ckv3j9uj3000463jn9wh66lmg","_id":"ckv3j9ujb000j63jnbw8m4ou1"},{"post_id":"ckv3j9uj2000363jn1q953tvu","category_id":"ckv3j9uj8000c63jnc2wd61pp","_id":"ckv3j9ujd000q63jndc01ekpp"},{"post_id":"ckv3j9ujc000n63jn2nzj9k4c","category_id":"ckv3j9ujb000k63jn1d9uhpqx","_id":"ckv3j9ujf000x63jnhpmp8csp"},{"post_id":"ckv3j9uj5000763jnffbu98q6","category_id":"ckv3j9ujb000k63jn1d9uhpqx","_id":"ckv3j9ujg001263jn8jdh5bed"},{"post_id":"ckv3j9uj7000963jnejw92u37","category_id":"ckv3j9ujd000r63jnbsu6el91","_id":"ckv3j9ujj001563jn7znb9rod"},{"post_id":"ckv3j9uj7000b63jn7xap2f1q","category_id":"ckv3j9ujf000z63jnfs0tapwu","_id":"ckv3j9ujm001d63jn2cbh2ln3"},{"post_id":"ckv3j9uj9000g63jn3ukj9omm","category_id":"ckv3j9ujf000z63jnfs0tapwu","_id":"ckv3j9ujo001j63jn6bzrdxb8"},{"post_id":"ckv3j9ujb000i63jn73gg4zbz","category_id":"ckv3j9ujb000k63jn1d9uhpqx","_id":"ckv3j9ujq001o63jn95kc05b0"},{"post_id":"ckv3j9ujo001l63jn4l595khw","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9ujr001u63jn1z56caq3"},{"post_id":"ckv3j9ujd000p63jn0btm35p3","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9ujt001x63jn7mqeegjn"},{"post_id":"ckv3j9ujp001n63jn0q6kbmu9","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9uju002163jn752f68vq"},{"post_id":"ckv3j9uje000u63jncjf9hf5t","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9ujv002463jn9mlie4pz"},{"post_id":"ckv3j9ujs001w63jna1g0boc8","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9ujx002763jn8qehfvx3"},{"post_id":"ckv3j9ujf000w63jn1x8hd1at","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9ujy002a63jn6s29h69h"},{"post_id":"ckv3j9ujv002363jn2m940bg8","category_id":"ckv3j9uj8000c63jnc2wd61pp","_id":"ckv3j9ujz002d63jn22x5ftnd"},{"post_id":"ckv3j9ujg001163jn4nhp6mnl","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9uk0002g63jnh695f9u7"},{"post_id":"ckv3j9ujg001463jnaz4i6w5b","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9uk1002j63jn52yzbe8k"},{"post_id":"ckv3j9ujj001663jng6y61co8","category_id":"ckv3j9ujz002e63jne7b00s74","_id":"ckv3j9uk3002r63jn4dku6iaj"},{"post_id":"ckv3j9uk1002m63jnh2obbpma","category_id":"ckv3j9ujz002e63jne7b00s74","_id":"ckv3j9uk4002v63jnhftxb1mx"},{"post_id":"ckv3j9ujl001a63jn24ptc96m","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9uk6002z63jn9uzze0vn"},{"post_id":"ckv3j9uk3002t63jn4d8jdnha","category_id":"ckv3j9ujz002e63jne7b00s74","_id":"ckv3j9uk6003163jndy7rhxtf"},{"post_id":"ckv3j9ujm001b63jnbl77fuua","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9uk7003563jnbz9y25mx"},{"post_id":"ckv3j9uk4002u63jne29metvk","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9uk8003763jn0bwobjnk"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","category_id":"ckv3j9ujz002e63jne7b00s74","_id":"ckv3j9uk8003a63jn5c62f2li"},{"post_id":"ckv3j9ujn001f63jnhejy9dzt","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9uk9003b63jnaiq13jqv"},{"post_id":"ckv3j9uk6003063jnhnfzf11v","category_id":"ckv3j9ujz002e63jne7b00s74","_id":"ckv3j9uk9003d63jnew2i5e0x"},{"post_id":"ckv3j9uk7003463jnh81qfsys","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9uk9003g63jnfm2w0cj8"},{"post_id":"ckv3j9ujn001h63jn3atley7f","category_id":"ckv3j9ujo001i63jnbi0ke1lo","_id":"ckv3j9uka003j63jn2k007pl5"},{"post_id":"ckv3j9uk8003663jn9dtgbosd","category_id":"ckv3j9ujf000z63jnfs0tapwu","_id":"ckv3j9uka003m63jn5u6ehdaa"},{"post_id":"ckv3j9ujq001r63jngz5y7bc3","category_id":"ckv3j9ujz002e63jne7b00s74","_id":"ckv3j9uka003o63jnbd7d51yu"},{"post_id":"ckv3j9ujr001t63jn7can0wal","category_id":"ckv3j9uk9003c63jn7401bhvw","_id":"ckv3j9ukb003s63jng5ahgf3t"},{"post_id":"ckv3j9ujt002063jn4f7f9of5","category_id":"ckv3j9uk9003h63jn3lbmby3g","_id":"ckv3j9ukb003u63jn9tz3336h"},{"post_id":"ckv3j9ujw002663jnfdtkhsse","category_id":"ckv3j9uk9003c63jn7401bhvw","_id":"ckv3j9ukc003x63jn9bwg65rm"},{"post_id":"ckv3j9ujx002963jn4kxh04gq","category_id":"ckv3j9uk9003h63jn3lbmby3g","_id":"ckv3j9ukc004063jnb4fgbxwy"},{"post_id":"ckv3j9ujz002c63jn96k9gqhj","category_id":"ckv3j9ukc003w63jn4ik36ful","_id":"ckv3j9ukd004563jn4ws67f42"},{"post_id":"ckv3j9uk0002f63jn9ots5q2c","category_id":"ckv3j9ukc004163jncptzbygo","_id":"ckv3j9ukd004a63jnarsffi36"},{"post_id":"ckv3j9uk0002i63jndke46rxe","category_id":"ckv3j9ukc004163jncptzbygo","_id":"ckv3j9uke004d63jnad70al4x"},{"post_id":"ckv3j9uk2002o63jneg66d25a","category_id":"ckv3j9ukc004163jncptzbygo","_id":"ckv3j9ukf004h63jn31337khb"}],"PostTag":[{"post_id":"ckv3j9uiz000163jn5q5977ur","tag_id":"ckv3j9uj4000563jngbdeg2t3","_id":"ckv3j9uj9000e63jnc62m9kb6"},{"post_id":"ckv3j9uj2000363jn1q953tvu","tag_id":"ckv3j9uj8000d63jnf6ci4gpl","_id":"ckv3j9ujf000v63jn4yvnc5fi"},{"post_id":"ckv3j9uj2000363jn1q953tvu","tag_id":"ckv3j9ujb000l63jn07xih71a","_id":"ckv3j9ujf000y63jnezhzccso"},{"post_id":"ckv3j9uj5000763jnffbu98q6","tag_id":"ckv3j9uje000s63jn9j6j8mbi","_id":"ckv3j9ujg001363jn9omqatws"},{"post_id":"ckv3j9uj7000963jnejw92u37","tag_id":"ckv3j9ujg001063jnf80tgekp","_id":"ckv3j9ujl001963jn7ze360kv"},{"post_id":"ckv3j9uj7000b63jn7xap2f1q","tag_id":"ckv3j9ujk001863jn8kx54gi9","_id":"ckv3j9ujn001g63jnbzklefi3"},{"post_id":"ckv3j9uj9000g63jn3ukj9omm","tag_id":"ckv3j9ujm001e63jncmun1b15","_id":"ckv3j9ujp001m63jn01n4hwxk"},{"post_id":"ckv3j9ujb000i63jn73gg4zbz","tag_id":"ckv3j9ujo001k63jnh466euwu","_id":"ckv3j9ujr001s63jn9iue16a0"},{"post_id":"ckv3j9ujc000n63jn2nzj9k4c","tag_id":"ckv3j9ujq001q63jnh89sg0a9","_id":"ckv3j9ujt001z63jn9j6x3t3o"},{"post_id":"ckv3j9ujd000p63jn0btm35p3","tag_id":"ckv3j9ujt001y63jn55woghga","_id":"ckv3j9uk1002l63jnf8u6780m"},{"post_id":"ckv3j9ujd000p63jn0btm35p3","tag_id":"ckv3j9ujw002563jn85g6dtk2","_id":"ckv3j9uk2002n63jncw29471v"},{"post_id":"ckv3j9ujd000p63jn0btm35p3","tag_id":"ckv3j9ujy002b63jnfl340fr1","_id":"ckv3j9uk3002s63jn1qq38b8s"},{"post_id":"ckv3j9uje000u63jncjf9hf5t","tag_id":"ckv3j9uk0002h63jnhupy25ss","_id":"ckv3j9uk9003f63jnauy709b7"},{"post_id":"ckv3j9uje000u63jncjf9hf5t","tag_id":"ckv3j9uk2002p63jn0un662gn","_id":"ckv3j9uka003i63jn3jkv6ds7"},{"post_id":"ckv3j9uje000u63jncjf9hf5t","tag_id":"ckv3j9uk5002w63jn61k5cpq2","_id":"ckv3j9uka003l63jn249l4krd"},{"post_id":"ckv3j9uje000u63jncjf9hf5t","tag_id":"ckv3j9uk7003363jnf68nboo5","_id":"ckv3j9uka003n63jnerhr53n0"},{"post_id":"ckv3j9uje000u63jncjf9hf5t","tag_id":"ckv3j9uk8003963jngls38d7y","_id":"ckv3j9ukb003r63jnfruxbjb7"},{"post_id":"ckv3j9ujf000w63jn1x8hd1at","tag_id":"ckv3j9uk9003e63jn6l08gszb","_id":"ckv3j9ukc003z63jn13e03x2e"},{"post_id":"ckv3j9ujf000w63jn1x8hd1at","tag_id":"ckv3j9uka003k63jneym884tk","_id":"ckv3j9ukc004263jn6i4yd0o4"},{"post_id":"ckv3j9ujf000w63jn1x8hd1at","tag_id":"ckv3j9ukb003q63jnham1c0f7","_id":"ckv3j9ukd004463jn0y8h9jaw"},{"post_id":"ckv3j9ujf000w63jn1x8hd1at","tag_id":"ckv3j9ukb003v63jnc5s8hjis","_id":"ckv3j9ukd004763jn84fu3lf6"},{"post_id":"ckv3j9ujg001163jn4nhp6mnl","tag_id":"ckv3j9uk9003e63jn6l08gszb","_id":"ckv3j9uke004c63jn4e9495az"},{"post_id":"ckv3j9ujg001163jn4nhp6mnl","tag_id":"ckv3j9ujy002b63jnfl340fr1","_id":"ckv3j9uke004e63jnfhhe9l38"},{"post_id":"ckv3j9ujg001163jn4nhp6mnl","tag_id":"ckv3j9ukd004863jn1ev91tgk","_id":"ckv3j9ukf004g63jne5aec50k"},{"post_id":"ckv3j9ujg001463jnaz4i6w5b","tag_id":"ckv3j9uke004b63jn0p9te71m","_id":"ckv3j9ukf004i63jn77u8ht2u"},{"post_id":"ckv3j9ujj001663jng6y61co8","tag_id":"ckv3j9uke004f63jneqdc3jqd","_id":"ckv3j9ukf004k63jn3xn21wao"},{"post_id":"ckv3j9ujl001a63jn24ptc96m","tag_id":"ckv3j9ukf004j63jn236d9u0p","_id":"ckv3j9ukg004n63jnhby13vio"},{"post_id":"ckv3j9ujl001a63jn24ptc96m","tag_id":"ckv3j9uk9003e63jn6l08gszb","_id":"ckv3j9ukg004o63jn1uz94oqa"},{"post_id":"ckv3j9ujm001b63jnbl77fuua","tag_id":"ckv3j9uk9003e63jn6l08gszb","_id":"ckv3j9ukh004s63jndoau9f8t"},{"post_id":"ckv3j9ujm001b63jnbl77fuua","tag_id":"ckv3j9ukg004p63jn55kl4d4p","_id":"ckv3j9ukh004t63jngqqx2pra"},{"post_id":"ckv3j9ujm001b63jnbl77fuua","tag_id":"ckv3j9ukg004q63jnhzdy71kf","_id":"ckv3j9ukh004v63jndda75imj"},{"post_id":"ckv3j9ujn001f63jnhejy9dzt","tag_id":"ckv3j9uk9003e63jn6l08gszb","_id":"ckv3j9ukh004w63jncvylbz0j"},{"post_id":"ckv3j9ujn001h63jn3atley7f","tag_id":"ckv3j9ukh004u63jnah20hdao","_id":"ckv3j9uki004z63jn3dc9gxcv"},{"post_id":"ckv3j9ujn001h63jn3atley7f","tag_id":"ckv3j9uki004x63jn2f4h5rmw","_id":"ckv3j9uki005063jn09ky3t4r"},{"post_id":"ckv3j9ujo001l63jn4l595khw","tag_id":"ckv3j9uk9003e63jn6l08gszb","_id":"ckv3j9ukj005363jng1zmekjd"},{"post_id":"ckv3j9ujo001l63jn4l595khw","tag_id":"ckv3j9ukh004u63jnah20hdao","_id":"ckv3j9ukj005463jn8ldu6yu0"},{"post_id":"ckv3j9ujp001n63jn0q6kbmu9","tag_id":"ckv3j9ukj005263jng74u7y2c","_id":"ckv3j9ukj005663jng6bz81q9"},{"post_id":"ckv3j9ujq001r63jngz5y7bc3","tag_id":"ckv3j9ukj005563jngrylekpv","_id":"ckv3j9ukk005863jndp717j47"},{"post_id":"ckv3j9ujr001t63jn7can0wal","tag_id":"ckv3j9ukj005763jn9yxdhote","_id":"ckv3j9ukk005a63jna5gocpf2"},{"post_id":"ckv3j9ujs001w63jna1g0boc8","tag_id":"ckv3j9ukj005763jn9yxdhote","_id":"ckv3j9ukk005c63jn1e238wut"},{"post_id":"ckv3j9ujt002063jn4f7f9of5","tag_id":"ckv3j9ukk005b63jnf5w25db6","_id":"ckv3j9ukl005e63jn1b49hgm5"},{"post_id":"ckv3j9ujv002363jn2m940bg8","tag_id":"ckv3j9ukl005d63jn5hcv3dvm","_id":"ckv3j9ukl005g63jnfylkb7d6"},{"post_id":"ckv3j9ujw002663jnfdtkhsse","tag_id":"ckv3j9uk9003e63jn6l08gszb","_id":"ckv3j9ukm005j63jnf3wbax0s"},{"post_id":"ckv3j9ujw002663jnfdtkhsse","tag_id":"ckv3j9ukl005h63jn1zrk3l0s","_id":"ckv3j9ukm005k63jnd8n0513v"},{"post_id":"ckv3j9ujx002963jn4kxh04gq","tag_id":"ckv3j9ukm005i63jnbgwma9j4","_id":"ckv3j9ukm005m63jn215zday1"},{"post_id":"ckv3j9ujz002c63jn96k9gqhj","tag_id":"ckv3j9ukm005l63jndzxp9sml","_id":"ckv3j9ukn005q63jn9wle3ryj"},{"post_id":"ckv3j9ujz002c63jn96k9gqhj","tag_id":"ckv3j9ukm005n63jn2gkvb078","_id":"ckv3j9ukn005r63jnbqe47p7n"},{"post_id":"ckv3j9ujz002c63jn96k9gqhj","tag_id":"ckv3j9ukm005o63jneqq54z84","_id":"ckv3j9ukn005t63jnbbdpeb6v"},{"post_id":"ckv3j9uk0002f63jn9ots5q2c","tag_id":"ckv3j9ukn005p63jn0vc3bhln","_id":"ckv3j9ukn005v63jn97p34w53"},{"post_id":"ckv3j9uk0002f63jn9ots5q2c","tag_id":"ckv3j9ukn005s63jncoiph473","_id":"ckv3j9ukn005w63jn1acug1pi"},{"post_id":"ckv3j9uk0002i63jndke46rxe","tag_id":"ckv3j9ukn005u63jn8hyah2zj","_id":"ckv3j9uko005y63jngx5h8b9m"},{"post_id":"ckv3j9uk1002m63jnh2obbpma","tag_id":"ckv3j9uko005x63jngkvg7213","_id":"ckv3j9uko006063jn73rh3ql7"},{"post_id":"ckv3j9uk2002o63jneg66d25a","tag_id":"ckv3j9ukn005p63jn0vc3bhln","_id":"ckv3j9ukp006363jngjpp9vrn"},{"post_id":"ckv3j9uk2002o63jneg66d25a","tag_id":"ckv3j9ukn005s63jncoiph473","_id":"ckv3j9ukp006463jne79s7m5c"},{"post_id":"ckv3j9uk3002t63jn4d8jdnha","tag_id":"ckv3j9uka003k63jneym884tk","_id":"ckv3j9ukp006663jnc3p34mvb"},{"post_id":"ckv3j9uk4002u63jne29metvk","tag_id":"ckv3j9ukp006563jn34o0725u","_id":"ckv3j9ukq006a63jn36at7xrw"},{"post_id":"ckv3j9uk4002u63jne29metvk","tag_id":"ckv3j9ukp006763jnav77ghmc","_id":"ckv3j9ukq006b63jncr370dwe"},{"post_id":"ckv3j9uk4002u63jne29metvk","tag_id":"ckv3j9ukp006863jn2ilu53p3","_id":"ckv3j9ukr006d63jn3x3ldq52"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","tag_id":"ckv3j9uko005x63jngkvg7213","_id":"ckv3j9uku006q63jn6qngfvgw"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","tag_id":"ckv3j9ukq006c63jnh8kw10m7","_id":"ckv3j9uku006r63jnbaee0jz2"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","tag_id":"ckv3j9ukr006e63jngg5u900f","_id":"ckv3j9ukv006t63jnar5r7q03"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","tag_id":"ckv3j9ukr006f63jn3m6qezxj","_id":"ckv3j9ukv006u63jn17uz4axg"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","tag_id":"ckv3j9uks006g63jneirk5o06","_id":"ckv3j9ukv006w63jn3xuo1mv4"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","tag_id":"ckv3j9uka003k63jneym884tk","_id":"ckv3j9ukv006x63jnhx8r451x"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","tag_id":"ckv3j9uke004f63jneqdc3jqd","_id":"ckv3j9ukw006z63jnfiuzcftj"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","tag_id":"ckv3j9uks006j63jnb4yifef2","_id":"ckv3j9ukw007063jnd6adaxhn"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","tag_id":"ckv3j9ukt006k63jn7xni6lt7","_id":"ckv3j9ukw007263jn7dddc9pi"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","tag_id":"ckv3j9ukt006l63jn0rvgacqo","_id":"ckv3j9ukw007363jn3yai7t4a"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","tag_id":"ckv3j9ukt006m63jn1tvq7xdg","_id":"ckv3j9ukx007463jnfpjy7w6h"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","tag_id":"ckv3j9ukt006n63jn9zq3h284","_id":"ckv3j9ukx007563jn8bi50n4h"},{"post_id":"ckv3j9uk5002y63jnbmhm6trd","tag_id":"ckv3j9ukt006o63jn9ps2dyn1","_id":"ckv3j9ukx007663jndt07dwd3"},{"post_id":"ckv3j9uk6003063jnhnfzf11v","tag_id":"ckv3j9uku006p63jn2bvu7vig","_id":"ckv3j9ukx007763jn7aa01opr"},{"post_id":"ckv3j9uk6003063jnhnfzf11v","tag_id":"ckv3j9uku006s63jn2ro09jpa","_id":"ckv3j9ukx007863jn56eshrip"},{"post_id":"ckv3j9uk7003463jnh81qfsys","tag_id":"ckv3j9uk9003e63jn6l08gszb","_id":"ckv3j9ukx007963jngjuk616f"},{"post_id":"ckv3j9uk7003463jnh81qfsys","tag_id":"ckv3j9ukj005763jn9yxdhote","_id":"ckv3j9ukx007a63jn82ey5did"},{"post_id":"ckv3j9uk8003663jn9dtgbosd","tag_id":"ckv3j9uke004b63jn0p9te71m","_id":"ckv3j9ukx007b63jn8h44ey2g"}],"Tag":[{"name":"博客","_id":"ckv3j9uj4000563jngbdeg2t3"},{"name":"域名邮箱","_id":"ckv3j9uj8000d63jnf6ci4gpl"},{"name":"Github Pages","_id":"ckv3j9ujb000l63jn07xih71a"},{"name":"2020","_id":"ckv3j9uje000s63jn9j6j8mbi"},{"name":"网络","_id":"ckv3j9ujg001063jnf80tgekp"},{"name":"影评","_id":"ckv3j9ujk001863jn8kx54gi9"},{"name":"漫评","_id":"ckv3j9ujm001e63jncmun1b15"},{"name":"考试","_id":"ckv3j9ujo001k63jnh466euwu"},{"name":"个人经历","_id":"ckv3j9ujq001q63jnh89sg0a9"},{"name":"剪枝","_id":"ckv3j9ujt001y63jn55woghga"},{"name":"暴搜","_id":"ckv3j9ujw002563jn85g6dtk2"},{"name":"dfs","_id":"ckv3j9ujy002b63jnfl340fr1"},{"name":"队列","_id":"ckv3j9uk0002h63jnhupy25ss"},{"name":"珂朵莉树","_id":"ckv3j9uk2002p63jn0un662gn"},{"name":"map","_id":"ckv3j9uk5002w63jn61k5cpq2"},{"name":"差分","_id":"ckv3j9uk7003363jnf68nboo5"},{"name":"BFS","_id":"ckv3j9uk8003963jngls38d7y"},{"name":"贪心","_id":"ckv3j9uk9003e63jn6l08gszb"},{"name":"ST表","_id":"ckv3j9uka003k63jneym884tk"},{"name":"动态规划DP","_id":"ckv3j9ukb003q63jnham1c0f7"},{"name":"矩阵","_id":"ckv3j9ukb003v63jnc5s8hjis"},{"name":"最大区间调度","_id":"ckv3j9ukd004863jn1ev91tgk"},{"name":"数学","_id":"ckv3j9uke004b63jn0p9te71m"},{"name":"树状数组","_id":"ckv3j9uke004f63jneqdc3jqd"},{"name":"暴力枚举","_id":"ckv3j9ukf004j63jn236d9u0p"},{"name":"字符串","_id":"ckv3j9ukg004p63jn55kl4d4p"},{"name":"平面几何","_id":"ckv3j9ukg004q63jnhzdy71kf"},{"name":"模拟","_id":"ckv3j9ukh004u63jnah20hdao"},{"name":"数论","_id":"ckv3j9uki004x63jn2f4h5rmw"},{"name":"二分查找","_id":"ckv3j9ukj005263jng74u7y2c"},{"name":"数据结构","_id":"ckv3j9ukj005563jngrylekpv"},{"name":"动态规划","_id":"ckv3j9ukj005763jn9yxdhote"},{"name":"GCD","_id":"ckv3j9ukk005b63jnf5w25db6"},{"name":"绘图","_id":"ckv3j9ukl005d63jn5hcv3dvm"},{"name":"区间调度","_id":"ckv3j9ukl005h63jn1zrk3l0s"},{"name":"逆元","_id":"ckv3j9ukm005i63jnbgwma9j4"},{"name":"KMP","_id":"ckv3j9ukm005l63jndzxp9sml"},{"name":"BM","_id":"ckv3j9ukm005n63jn2gkvb078"},{"name":"Sunday","_id":"ckv3j9ukm005o63jneqq54z84"},{"name":"分治","_id":"ckv3j9ukn005p63jn0vc3bhln"},{"name":"排序","_id":"ckv3j9ukn005s63jncoiph473"},{"name":"STL","_id":"ckv3j9ukn005u63jn8hyah2zj"},{"name":"线段树","_id":"ckv3j9uko005x63jngkvg7213"},{"name":"BST","_id":"ckv3j9ukp006563jn34o0725u"},{"name":"string","_id":"ckv3j9ukp006763jnav77ghmc"},{"name":"堆","_id":"ckv3j9ukp006863jn2ilu53p3"},{"name":"主席树","_id":"ckv3j9ukq006c63jnh8kw10m7"},{"name":"链表","_id":"ckv3j9ukr006e63jngg5u900f"},{"name":"单调栈/队列","_id":"ckv3j9ukr006f63jn3m6qezxj"},{"name":"并查集","_id":"ckv3j9uks006g63jneirk5o06"},{"name":"树链剖分","_id":"ckv3j9uks006j63jnb4yifef2"},{"name":"二叉平衡树","_id":"ckv3j9ukt006k63jn7xni6lt7"},{"name":"莫队算法","_id":"ckv3j9ukt006l63jn0rvgacqo"},{"name":"二分答案","_id":"ckv3j9ukt006m63jn1tvq7xdg"},{"name":"K-D树","_id":"ckv3j9ukt006n63jn9zq3h284"},{"name":"扫描线","_id":"ckv3j9ukt006o63jn9ps2dyn1"},{"name":"区间赋值","_id":"ckv3j9uku006p63jn2bvu7vig"},{"name":"暴力","_id":"ckv3j9uku006s63jn2ro09jpa"}]}}